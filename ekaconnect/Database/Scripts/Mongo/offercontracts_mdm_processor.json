{
  "_id": "offercontracts_mdm_processor",
  "name": "offercontracts_mdm_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "req.body.mdmProcessorServiceKey = JSON.parse(req.body.mdmProcessorServiceKey);\r\n    const serviceKey = req.body.mdmProcessorServiceKey[0].serviceKey;\r\n    const appId = req.body.appId;\r\n    const tenant = req.headers['X-TenantID'];\r\n    const taskId = req.body.taskId;\r\n    \r\n    const getRequestBody = url => ({\r\n      method: 'GET',\r\n      url,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': tenant\r\n      },\r\n      json: true\r\n    });\r\n    \r\n    const userInfo = getRequestBody(req.body.propertyList.eka_connect_host + '/api/getbpuserinfo');\r\n    \r\n    const subGroupMaster = {\r\n      appId: appId,\r\n      objectId: 'd59b8c10-8c94-4b87-a430-f6fd69888a37' /* not at all relevant object id */,\r\n      collectionName: 'BP Sub Group Setup',\r\n      tenant: tenant\r\n    };\r\n    \r\n    function getData(requestBody) {\r\n      return new Promise(function(resolve, reject) {\r\n        request(requestBody, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    \r\n    function prepareMdmCollection(platformres) {\r\n      let mdmCollection = {\r\n        regionKey: {},\r\n        productKey: {}\r\n      };\r\n    \r\n      function getOption(serviceKey, key, dependent, dependent1 = null) {\r\n        if (!mdmCollection[serviceKey][key]) {\r\n          if (dependent != '') {\r\n            mdmCollection[serviceKey][key] = {\r\n              [dependent]: true\r\n            };\r\n          }\r\n          if (dependent1 != null && dependent1 != '') {\r\n            mdmCollection[serviceKey][key] = {\r\n              ...mdmCollection[serviceKey][key],\r\n              [dependent1]: true\r\n            };\r\n          }\r\n        } else {\r\n          if (!mdmCollection[serviceKey][key][dependent] && dependent != '') {\r\n            mdmCollection[serviceKey][key] = {\r\n              ...mdmCollection[serviceKey][key],\r\n              [dependent]: true\r\n            };\r\n          }\r\n          if (dependent1 != null && dependent1 != '') {\r\n            if (!mdmCollection[serviceKey][key][dependent1]) {\r\n              mdmCollection[serviceKey][key] = {\r\n                ...mdmCollection[serviceKey][key],\r\n                [dependent1]: true\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n    \r\n      platformres.forEach(item => {\r\n        for (let key in item) {\r\n          key === 'commodity' && getOption('productKey', item[key], item['grade']);\r\n          key === 'locationgroupname' && getOption('regionKey', item[key], item['locationcityname']);\r\n        }\r\n      });\r\n    \r\n      return mdmCollection;\r\n    }\r\n    \r\n    const getCollectionMapper = config =>\r\n    new Promise((resolve, reject) => {\r\n      const r = {\r\n        method: 'POST',\r\n        url: `${req.body.propertyList.eka_connect_host}/collectionmapper/${config.appId}/${\r\n          config.objectId\r\n        }/fetchCollectionRecords`,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          ttl: 600,\r\n          'X-TenantID': config.tenant,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: {\r\n          collectionName: config.collectionName\r\n        },\r\n        json: true\r\n      };\r\n      request(r, (err, response, body) => {\r\n        if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      });\r\n    });\r\n    \r\n    const objSorter = prop => (obj1, obj2) => {\r\n      if (obj1[prop] < obj2[prop]) {\r\n        return -1;\r\n      }\r\n      if (obj1[prop] > obj2[prop]) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    };\r\n    \r\n    const getSubGroup = (list, format, code) => list\r\n    .reduce((acc, bp) => {\r\n      let groups;\r\n    \r\n      if (code) {\r\n        groups = (bp.subGroup || [])\r\n          .filter(i => i.code && i.code.toLowerCase() == code.toLowerCase())\r\n          .map(item => ({\r\n            key: `${bp.refNo} - ${bp.name} - ${item.name} - ${item.refNo}`,\r\n            value: `${bp.name} - ${bp.refNo} - ${item.name}`\r\n          }));\r\n      } else {\r\n        groups = [\r\n          {\r\n            key: `${bp.refNo} - ${bp.name}`,\r\n            value: `${bp.name} - ${bp.refNo}`\r\n          }\r\n        ];\r\n      }\r\n    \r\n      acc.push(...groups);\r\n      return acc;\r\n    }, [])\r\n    .sort(objSorter('value'));\r\n    \r\n    const subGroupCode = userDetails =>\r\n    new Promise((resolve, reject) =>\r\n      getCollectionMapper(subGroupMaster)\r\n        .then(result => {\r\n          if (result && Array.isArray(result)) {\r\n            const config = result.find(i => i.Workflow == taskId && i.UserType == userDetails.customerType);\r\n    \r\n            if (config) {\r\n              resolve(config.SubGroupCode);\r\n            } else {\r\n              console.log(\r\n                `Sub group configuration not found for ${taskId} and ${\r\n                  userDetails.customerType\r\n                }. Defaulting to not applicable.`\r\n              );\r\n              resolve(null);\r\n            }\r\n          } else {\r\n            reject('Sub group configuration is missing');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          reject(err);\r\n        })\r\n    );\r\n    \r\n    const bpList = new Promise((resolve, reject) => {\r\n      getData(userInfo)\r\n        .then(t => {\r\n          const userDetails = t.data;\r\n          if (userDetails.BusinessPartyDetails) {\r\n            subGroupCode(userDetails)\r\n              .then(code => {\r\n                resolve(getSubGroup(userDetails.BusinessPartyDetails, userDetails.customerType === 'Demand Customer', code));\r\n              })\r\n              .catch(err => {\r\n                reject(err);\r\n              });\r\n          } else {\r\n            reject('BusinessPartyDetails missing in user details.');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          reject(err);\r\n        });\r\n    });\r\n    \r\n    const getSeasons = () => {\r\n      const t = moment();\r\n      const current = t.format('M') < 10 ? +t.format('YYYY') - 1 : +t.format('YYYY');\r\n      const seasons = [0, 1, 2].map(i => i + current).map(i => ({key:`${i}\\/${i+1}`,value:`${i}\\/${i+1}`}))\r\n      return seasons;\r\n    }\r\n    \r\n    const connectElasticData = workflowTask => ({\r\n      method: 'POST',\r\n      url: req.body.propertyList.eka_connect_host + `/workflow/data/`,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': tenant\r\n      },\r\n      body: {\r\n        appId: appId,\r\n        workFlowTask: workflowTask,\r\n        sD: [],\r\n        payLoadData: \"\",\r\n        params: {},\r\n        qP: {\r\n          from: 0,\r\n          size: 10000\r\n        }\r\n      },\r\n      json: true\r\n    });\r\n    \r\n    const getDeliverTermOptions = (locations,selectedLocation) => {\r\n      let deliveryOptions = ['DIS','DS','DB'];\r\n      let groupType = locations.find(i=>i['locationgroupname']==selectedLocation)\r\n      if(selectedLocation == 'Western Australia' && groupType['locgrouptype'] == 'Port Zone'){\r\n        return [deliveryOptions[0]];\r\n      }\r\n      if(selectedLocation != 'Western Australia' && groupType['locgrouptype'] == 'Port Zone'){\r\n        return [deliveryOptions[1]];\r\n      }\r\n      if(selectedLocation != 'Western Australia' && groupType['locgrouptype'] == 'Delivery Zone'){\r\n        return [deliveryOptions[2]];\r\n      }\r\n      return deliveryOptions;\r\n    }\r\n    \r\n    const getLocations = connectElasticData('locationsQueryElastic');\r\n    const getCommodityGrade = connectElasticData('commodityGradeQueryElastic');\r\n    \r\n    // Temp \r\n    const deliveryPeriod = () => [0, 1, 2, 3, 4, 5, 6].map(i => ({key: `${moment().add(i,'M').format('MMM')} ${moment().add(i,'M').format('YYYY')}`,value:`${moment().add(i,'M').format('MMM')} ${moment().add(i,'M').format('YYYY')}`}));\r\n    \r\n    if(serviceKey == 'qualityKey' || serviceKey == 'siteKey' || serviceKey=='delivertermKey'){\r\n      if(serviceKey == 'qualityKey'){\r\n        let dependsOn = req.body.mdmProcessorServiceKey[0].dependsOn[0];\r\n        if(dependsOn == ''){\r\n          res.status(200).send({\r\n            qualityKey: []\r\n          });\r\n        }else{\r\n          getData(getCommodityGrade)\r\n          .then(commidityData => {\r\n            let mdmCollectionProduct = prepareMdmCollection(commidityData['data']);\r\n            let grades = Object.keys(mdmCollectionProduct['productKey'][dependsOn]);\r\n            grades.sort( (item1,item2) => (item1 > item2) ? 1 : ((item1 < item2) ? -1 : 0));\r\n            res.status(200).send({\r\n              qualityKey: grades.map(item => ({\r\n                key: item,\r\n                value: item\r\n              }))\r\n            });\r\n          })\r\n        }\r\n      }\r\n      if(serviceKey == 'siteKey'|| serviceKey=='delivertermKey'){\r\n        let dependsOn = req.body.mdmProcessorServiceKey[0].dependsOn[0];\r\n        if(dependsOn == ''){\r\n          res.status(200).send({\r\n            siteKey: [],\r\n            delivertermKey: []\r\n          });\r\n        }else{\r\n          getData(getLocations)\r\n          .then(locationData => {\r\n            let mdmCollectionLocation = prepareMdmCollection(locationData['data']);\r\n            let sites = Object.keys(mdmCollectionLocation['regionKey'][dependsOn]);\r\n            let deliverTerms = getDeliverTermOptions(locationData['data'],dependsOn);\r\n            sites.sort( (item1,item2) => (item1 > item2) ? 1 : ((item1 < item2) ? -1 : 0));\r\n            res.status(200).send({\r\n              siteKey: sites.map(item => ({\r\n                key: item,\r\n                value: item\r\n              })),\r\n              delivertermKey: deliverTerms.map(item => ({\r\n                key: item,\r\n                value: item\r\n              }))\r\n            });\r\n          })\r\n        }\r\n      }\r\n    }else{\r\n      bpList\r\n      .then(bpRefData => {\r\n        getData(getCommodityGrade)\r\n        .then(commidityData => {\r\n          let mdmCollectionProduct = prepareMdmCollection(commidityData['data']);\r\n          getData(getLocations)\r\n          .then(locationData=>{\r\n            let mdmCollectionLocations = prepareMdmCollection(locationData['data']);\r\n            res.status(200).send({\r\n              [serviceKey]: bpRefData,\r\n              productKey: Object.keys(mdmCollectionProduct['productKey']).map(item=>({\r\n                key: item,\r\n                value: item\r\n              })),\r\n              regionKey: Object.keys(mdmCollectionLocations['regionKey']).sort( (item1,item2) => (item1 > item2) ? 1 : ((item1 < item2) ? -1 : 0)).filter(items=>items).map(item=>({\r\n                key: item,\r\n                value: item\r\n              })),\r\n              seasonKey: getSeasons(),\r\n              deliveryperiodKey: deliveryPeriod()\r\n            });\r\n          })\r\n          .catch(err => {\r\n            console.error('Failed to fetch Commidity', err);\r\n            res.status(400).send({\r\n              [serviceKey]: [],\r\n              productKey: [],\r\n              regionKey: [],\r\n              seasonKey: getSeasons(),\r\n              deliveryperiodKey: deliveryPeriod()\r\n            })\r\n          })\r\n        })\r\n        .catch(err => {\r\n          console.error('Failed to fetch Commidity', err);\r\n          res.status(400).send({\r\n            [serviceKey]: [],\r\n            productKey: [],\r\n            regionKey: [],\r\n            seasonKey: getSeasons(),\r\n            deliveryperiodKey: deliveryPeriod()\r\n          })\r\n        })\r\n      })\r\n      .catch(err => {\r\n        console.error('Failed to fetch BPList', err);\r\n        res.status(400).send({\r\n          [serviceKey]: [],\r\n          productKey: [],\r\n          regionKey: [],\r\n          seasonKey: getSeasons(),\r\n          deliveryperiodKey: deliveryPeriod()\r\n        });\r\n      });\r\n    }",
  "sys__UUID": "028c09c9-b25e-414a-8842-4cdb1b6f2f59"
}
