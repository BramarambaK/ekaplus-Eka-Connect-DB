{
  "_id": "submitoffercontracts_processor",
  "name": "submitoffercontracts_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "  const send = (status, message) => res.status(status).send(message);\r\n      let userData = {};\r\n\r\n      const url = req.body.propertyList.eka_connect_host + '/api/getbpuserinfo';\r\n      let getInfo = () => {\r\n        const user = {\r\n          method: 'GET',\r\n          url,\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            'X-TenantID': req.headers['x-tenantid']\r\n          },\r\n          json: true\r\n        };\r\n        getData(user).then(userinfo => {\r\n          userData.userName = userinfo.data.username;\r\n          submitOffer();\r\n          console.log(userData);\r\n        });\r\n      };\r\n      let dataTosend = {\r\n        output: {\r\n          update_contractDomainData_withOfferExecution_internal: []\r\n        },\r\n        task: 'update_contractDomainData_withOfferExecution_internal',\r\n        appId: '12325a98-a959-4939-9005-4158d136afcd',\r\n        workflowTaskName: 'update_contractDomainData_withOfferExecution_internal'\r\n      };\r\n      getInfo();\r\n      function submitOffer() {\r\n        if (Array.isArray(req.body.submitoffercontractcomposite)) {\r\n          let offerData = req.body.submitoffercontractcomposite.map(i => {\r\n            return {\r\n              ...i,\r\n              contractRefNo: '-',\r\n              contractItemRefNo: 1,\r\n              SpreadType: i.contractType == 'Multi-grade' ? 'Floating' : null,\r\n              isMultiGrade: i.contractType == 'Multi-grade' ? 'Y' : 'N',\r\n              requestType: 'Offer to sell',\r\n              approvalStatus: 'Awaiting review',\r\n              quality: i.quality.includes(' MG') ? i.quality.substring(0, i.quality.indexOf(' MG')) : i.quality,\r\n              isRequestedByEkaCCSystem: true,\r\n              requestedDate: moment(new Date()).format('DD-MM-YYYY'),\r\n              offerExpiryDate: moment(i.offerExpiryDate).format('YYYY-MM-DDTHH:mm:ss[Z]'),\r\n              requestedBy: userData.userName,\r\n              offersustainable: i.offersustainable === 'Yes' ? true : false,\r\n              shipmentPeriodFrom: i.INCOTerm != 'DB' ? null : i.shipmentPeriodFrom,\r\n              shipmentPeriodTo: i.INCOTerm != 'DB' ? null : i.shipmentPeriodTo\r\n            };\r\n          });\r\n          dataTosend.output.update_contractDomainData_withOfferExecution_internal = offerData;\r\n          console.log(JSON.stringify(dataTosend.output.update_contractDomainData_withOfferExecution_internal));\r\n          let apiBody = getRequestBodyPostMethod(req.body.propertyList.eka_connect_host + '/workflow', dataTosend);\r\n          getData(apiBody)\r\n            .then(data => {\r\n              console.log('Request Successflly Sent', data);\r\n              send(200, {\r\n                successCode: 200,\r\n                tabIndex: 2,\r\n                requestId: data.data.map(item => item.requestId).join(','),\r\n                successMessage: 'Request has been successfully sent.',\r\n                successContext: 'This is null',\r\n                successLocalizedMessage: 'Request has been successfully sent.'\r\n              });\r\n            })\r\n            .catch(err => {\r\n              console.log(err);\r\n              send(400, {\r\n                errorCode: err.Status,\r\n                errorMessage: 'The request cannot be created at this moment.',\r\n                errorContext: 'This is null',\r\n                errorLocalizedMessage: 'The request cannot be created at this moment.'\r\n              });\r\n            });\r\n        }\r\n      }\r\n\r\n      const getRequestBodyPostMethod = (url, obj) => ({\r\n        method: 'POST',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true,\r\n        body: obj\r\n      });\r\n\r\n      function getData(requestBody) {\r\n        return new Promise(function(resolve, reject) {\r\n          request(requestBody, function(err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          });\r\n        });\r\n      }",
  "sys__UUID": "7aa055a4-bf35-41d1-8191-fa2d5e6f4a1b"
}
