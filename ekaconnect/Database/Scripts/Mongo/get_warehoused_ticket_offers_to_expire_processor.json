{
  "_id": "get_warehoused_ticket_offers_to_expire_processor",
  "name": "get_warehoused_ticket_offers_to_expire_processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const appId = '12325a98-a959-4939-9005-4158d136afcd';\r\nconst ticketObjId = 'a26737b3-a5a9-4fe9-b6f7-29218a3bc45a';\r\nvar moment = require(\"moment\");\r\n\r\nvar currentDate = moment().format('YYYY-MM-DD');\r\nconsole.log('currentDate:' + currentDate);\r\n\r\nvar connectDataTicket = {\r\n    method: \"GET\",\r\n    url: req.body.propertyList.eka_connect_host +\r\n        `\/data\/${appId}\/${ticketObjId}`,\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        \"X-TenantID\": req.headers[\"x-tenantid\"]\r\n    },\r\n    body: {\r\n        filterData: {\r\n            filter: [\r\n                {\r\n                    fieldName: \"requestType\",\r\n                    operator: \"eq\",\r\n                    value: \"Offer for warehoused tickets\"\r\n                },\r\n                {\r\n                  fieldName: \"isRequestedByEkaCCSystem\",\r\n                  operator: \"eq\",\r\n                  value: true\r\n                },\r\n\t\t\t\t        {\r\n                    fieldName: \"offerExpiryDate\",\r\n                    operator: \"lt\",\r\n                    value: `${currentDate}`\r\n                },\r\n\t\t\t\t        {\r\n                    fieldName: \"requestStatus\",\r\n                    operator: \"eq\",\r\n                    value: \"Awaiting review\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    json: true\r\n};\r\n\r\nfunction get_connectData_ticket() {\r\n    return new Promise(function(resolve, reject) {\r\n        \/\/ console.log('get_connectData_ticket Request - ' + connectDataTicket.url);\r\n        \/\/ console.log('get_connectData_ticket Body -' + JSON.stringify(connectDataTicket.body));\r\n        request(connectDataTicket, function(err, response, body) {\r\n\t\t\t\/\/ console.log('get_connectData_ticket Response - ' + JSON.stringify(body));\r\n\t\t\tif(response.statusCode >= 200 && response.statusCode <=299){\r\n\t\t\t\tresolve(body); \/\/Success\r\n\t\t\t} else{\r\n\t\t\t\treject(body); \/\/Failure\r\n\t\t\t}\r\n\t\t});\r\n    });\r\n};\r\n\r\nPromise.all([get_connectData_ticket()]).then(function(result) {\t\r\n\t\r\n\tvar ticketData = result[0];\r\n    var ticketDataToBeUpdated=[];\r\n    for (let i = 0; i < ticketData.length; i++) {\r\n      ticketDataToBeUpdated.push({\r\n            \"ticketRefNo\": ticketData[i].ticketRefNo,\r\n            \"cropYear\": ticketData[i].cropYear,\r\n            \"requestId\": ticketData[i].requestId,\r\n            \"requestStatus\": \"Expired\"\r\n        });\r\n    }\r\n\r\n    console.log('Offered Ticket getting expired:' + JSON.stringify(ticketDataToBeUpdated));\r\n    res.status(200).send(ticketDataToBeUpdated);\r\n}).catch(err => {\r\n  console.log(err);\r\n  res.status(500).send(err);\r\n});",
  "sys__UUID": "32b19968-c82b-4534-88aa-7643fc79c389",
  "type": "processor"
}