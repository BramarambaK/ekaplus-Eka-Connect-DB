{
    "_id" : "_CLONE_button_PROCESSOR_QTC_AGS",
    "name" : "_CLONE_button_PROCESSOR_QTC_AGS",
    "type" : "processor",
    "refType" : "app",
    "version" : "V2",
    "refTypeId" : "5d907cd2-7785-4d34-bcda-aa84b2158415",
    "snippet" : "   \r\n    var output = {\r\n        appId: req.body.appId,\r\n        flow: req.body.flow,\r\n        object: req.body.object,\r\n        objectMeta: req.body.objectMeta,\r\n        properties: req.body.properties,\r\n      }\r\n      var dbody = {\r\n        \"appId\":\"5d907cd2-7785-4d34-bcda-aa84b2158415\",\r\n        \"workFlowTask\":\"contract_list\",\r\n       filterData: {\r\n              filter: [\r\n                {\r\n                  fieldName: \"contractState\",\r\n                  value: [\"trade\"],\r\n                  operator: \"in\",\r\n                },\r\n                {\r\n                  fieldName: \"solutionType\",\r\n                  value: [\"1\"],\r\n                  operator: \"in\",\r\n                }\r\n              ],\r\n            },\r\n        \"pagination\": {\r\n          \"start\": 0,\r\n          \"limit\": 2\r\n      }\r\n        }\r\n      \/\/ dbody = JSON.stringify(dbody)\r\n      var connectData = {\r\n        method: 'POST',\r\n        url:\r\n          req.body.propertyList.eka_connect_host +\r\n          '\/workflow\/data',\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true,\r\n        body : dbody\r\n      };\r\n      function get_connectData() {\r\n        return new Promise(function(resolve, reject) {\r\n          \/\/ console.log('Request - ' + connectData.url);\r\n          \/\/console.log('Payload -' + JSON.stringify(connectData));\r\n          request(connectData, function(err, response, body) {\r\n            \/\/  console.log('Response - ' + body);\r\n            if(response.statusCode >= 200 && response.statusCode <=299) {\r\n                resolve(body); \/\/Success \r\n              } else {\r\n                reject(body); \/\/Failure\r\n              }\r\n          });\r\n        });\r\n      }\r\n      var platform_url_data = {\r\n        method: 'GET',\r\n        url:req.body.propertyList.platform_url +'\/cac-security\/api\/userinfo?filter=all',\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true,\r\n        body : dbody\r\n      };\r\n      var physicals_url_data = {\r\n        method: 'GET',\r\n        url:req.body.propertyList.platform_url +'\/connect\/api\/contract\/user\/data',\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid'],\r\n          'Accept':'application\/json',\r\n          \"Connection\": \"keep-alive\",\r\n        },\r\n        json: true\r\n      };\r\n      if(req.headers.hasOwnProperty('device-id')){\r\n        connectData.headers['Device-Id'] = req.headers['device-id']\r\n        platform_url_data.headers['Device-Id'] = req.headers['device-id']\r\n        physicals_url_data.headers['Device-Id'] = req.headers['device-id']\r\n      }\r\n      function get_user_info() {\r\n        return new Promise(function(resolve, reject) {\r\n          request(platform_url_data, function(err, response, body) {\r\n            if(response.statusCode >= 200 && response.statusCode <=299) {\r\n                resolve(body); \/\/Success \r\n              } else {\r\n                reject(body); \/\/Failure\r\n              }\r\n          });\r\n        });\r\n      }\r\n      function get_corparate_info() {\r\n        return new Promise(function(resolve, reject) {\r\n          request(physicals_url_data, function(err, response, body) {\r\n            if (err || body.error) reject(body);\r\n            else {\r\n              resolve(body);\r\n            }\r\n          });\r\n        });\r\n      }\r\n      get_user_info().then(function(user){\r\n      get_corparate_info().then(function(corparate){\r\n        dbody.filterData.filter.push(  {\r\n          fieldName: \"corporateId\",\r\n          value: [corparate.corporateId],\r\n          operator: \"in\",\r\n        },\r\n        {\r\n          fieldName: \"sys__createdBy\",\r\n          value: [user.userName],\r\n          operator: \"in\",\r\n        })\r\n      get_connectData().then(function(result) {\r\n      if(result.data.length == 2){\r\n        let d1 = result.data[0]\r\n        let d2=result.data[1]\r\n        if(d2.hasOwnProperty('generalDetailsDisplayValue')) delete d2.generalDetailsDisplayValue\r\n        if(d1.hasOwnProperty('generalDetailsDisplayValue')) delete d1.generalDetailsDisplayValue\r\n        if(d2.itemDetails[0].hasOwnProperty('formulaPriceDetails')) delete d2.itemDetails[0].formulaPriceDetails\r\n        if(d1.itemDetails[0].hasOwnProperty('formulaPriceDetails')) delete d1.itemDetails[0].formulaPriceDetails\r\n        if(d2.itemDetails[0].hasOwnProperty('itemDisplayValue')) delete d2.itemDetails[0].itemDisplayValue\r\n        if(d1.itemDetails[0].hasOwnProperty('itemDisplayValue')) delete d1.itemDetails[0].itemDisplayValue\r\n        for(let key in d1.itemDetails[0]){\r\n            if(key!=\"contractRefNo\")\r\n          d1[key]=d1.itemDetails[0][key]\r\n        }\r\n        for(let key in d1.itemDetails[0]['pricing']){\r\n          d1[key]=d1.itemDetails[0]['pricing'][key]\r\n        }\r\n        for(let key in d2.itemDetails[0]){\r\n            if(key!=\"contractRefNo\")\r\n          d2[key]=d2.itemDetails[0][key]\r\n        }\r\n        for(let key in d2.itemDetails[0]['pricing']){\r\n          d2[key]=d2.itemDetails[0]['pricing'][key]\r\n        }\r\n        for(let key in d1){\r\n          if(typeof d1[key]==='object'){\r\n            delete d1[key]\r\n          }\r\n        }\r\n        for(let key in d2){\r\n          if(typeof d2[key]==='object'){\r\n            delete d2[key]\r\n          }\r\n        }  \r\n        output.flow.createtradeags.decisions[2].label = req.headers.hasOwnProperty('device-id') ? 'Clone '+result.data[0].contractRefNo:result.data[0].contractRefNo+','\r\n        output.flow.createtradeags.decisions[2].outcomes = [{\r\n          data: d1,\r\n          type: 'client'\r\n        }]\r\n        output.flow.createtradeags.decisions[3].label =req.headers.hasOwnProperty('device-id') ? 'Clone '+result.data[1].contractRefNo: result.data[1].contractRefNo;\r\n        output.flow.createtradeags.decisions[3].outcomes = [{\r\n          data: d2,\r\n          type: 'client'\r\n        }];\r\n        success(output,200);\r\n      }\r\n      else {\r\n      output.flow.createtradeags.decisions.splice(2,2)\r\n      let index = output.flow.createtradeags.decisions.findIndex((decision)=>{return decision.label==\"Clone Recent Contracts :\"})\r\n     if(index>=0)output.flow.createtradeags.decisions.splice(index,1)\r\n      success(output,200);\r\n      }\r\n      }).catch(err => {\r\n        console.log(err);\r\n      });\r\n    }).catch(err => {\r\n        console.log(err);\r\n      });\r\n    }).catch(err => {\r\n      console.log(err);\r\n    });\r\n    ",
    "sys__UUID" : "24710a4c-c74b-4ef0-a7ee-e581ab66a561",
    "sys__createdOn" : ISODate("2019-05-22T09:51:04.600Z"),
    "sys__createdBy" : "avinash.singh@ekaplus.com"
}