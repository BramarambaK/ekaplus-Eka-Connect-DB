{
    "_id" : "Final_Processor_for_edit_exposure",
    "name" : "Final_Processor_for_edit_exposure",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "d88e9a79-c0cc-4c28-bb01-ee56ff33048e",
    "snippet" : "var moment = require('moment');\r\nfunction findbody(data) {\r\n  return {  \r\n\t  currency: data.hasOwnProperty('currency')?data.currency:null,\t  \r\n\t  amount: data.hasOwnProperty('amount')?data.amount:null,  \r\n\t  externalRefNo: data.externalRefNo,  \r\n\t  strategy: data.strategy,\r\n\t  profitCenter: data.profitCenter,\r\n\t  entity: data.entity,\r\n\t  bank: data.hasOwnProperty('bank')?data.bank:null,\r\n\t  bankAccount: data.hasOwnProperty('bankAccount')?data.bankAccount:null,\r\n\t  exposureDate: data.hasOwnProperty('exposureDate') ? moment(data.exposureDate).format('YYYY-MM-DD') : null,\r\n\t  classification: data.hasOwnProperty('classification')?data.classification:null,\r\n\t  direction: data.hasOwnProperty('direction')?data.direction:null,\r\n\t  remarks: data.hasOwnProperty('remarks')?data.remarks:null,\r\n\t  exposureType:'type',\r\n\t  status: data.status  \r\n  };\r\n}\r\nvar ekaexposure =\r\n  req.body.propertyList.platform_url + '\/spring\/liquidityManagement\/exposure\/' + req.body.exposureRefNo;\r\nvar ekaexposureurl = {\r\n  method: 'PUT',\r\n  url: ekaexposure,\r\n  body: findbody(req.body),\r\n  headers: {\r\n\tAuthorization: req.headers.authorization,\r\n\t'Content-Type': 'application\/json'\r\n  },\r\n  json: true\r\n};\r\nvar get_platformEkaExposure = function get_platformEkaExposure() {\r\n  return new Promise(function(resolve, reject) {\r\n\trequest(ekaexposureurl, function(err, response, body) {\r\n\t  if (response.statusCode >= 200 && response.statusCode <= 299) {  \r\n\t\tresolve(body);\r\n\t  } else {\r\n\t\treject(body);\r\n\t  }\r\n\t});\r\n  });\r\n};\r\n\/* if(!req.body.hasOwnProperty('amount')){\r\n  res.status(500).send('Please Fill the Amount')\r\n}*\/\r\nget_platformEkaExposure()\r\n  .then(function(ent) {\r\n\tres.status(200).send({ msg: 'Exposure Updated Successfully' });\r\n  })\r\n  .catch(err => {\r\n\tconsole.error(err);\r\n\tlet message = 'Failed to update';\r\n\tif(err.message.includes(\"Amount is required or should be greater than 0\")) \r\n\tmessage = 'Amount is required or should be greater than 0';\r\n    else if(err.message.includes(\"Exposure Date is required\")) \r\n\tmessage = 'Exposure Date is required';\r\n    else if(err.message.includes(\"Exposure Date should be greater than or equal to current date\")) \r\n\tmessage = 'Exposure Date should be greater than or equal to current date';\r\n    else if(err.message.includes(\"Currency is required\")) \r\n\tmessage = 'Currency is required';\t\r\n\tres.status(500).send(message);\r\n  });\r\n",
    "sys__UUID" : "1ee688b7-382b-4d9c-bd3f-89158dc64e3f",
    "sys__createdBy" : "avinash"
}