{
    "_id" : "Final_Processor_for_delete_cashforecast",
    "name" : "Final_Processor_for_delete",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "d88e9a79-c0cc-4c28-bb01-ee56ff33048e",
    "snippet" : "var moment = require(\"moment\");\r\nvar ids = req.body.forecastId;\r\nconsole.log(\"ids: \" + ids);\r\nvar ekacashforecast =\r\n  req.body.propertyList.platform_url +\r\n  \"/spring/liquidityManagement/forecast?forecastIds=\" +\r\n  ids;\r\n  console.log(\"Url: \" + ekacashforecast);\r\nvar ekacashforecasturl = {\r\n  method: \"DELETE\",\r\n  url: ekacashforecast,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformCashforecast = function get_platformCashforecast() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(ekacashforecasturl, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject({ ...body, statusCode: response.statusCode });\r\n      }\r\n    });\r\n  });\r\n};\r\nget_platformCashforecast()\r\n  .then(function (ent) {\r\n    res.status(200).send({ msg: \"Cash Forecast Deleted Successfully\" });\r\n  })\r\n  .catch((err, statusCode) => {\r\n    console.error(err);\r\n    let message = \"Failed to Update\";\r\n\tif(err.message.includes(\"System allows to delete only 20 records at a time\")) {\r\n\t    message = 'System allows to delete only 20 records at a time';\r\n    } else if (err.statusCode >= 400 && err.statusCode <= 499 && err.message) {\r\n        message = err.message;\r\n    }\r\n    res.status(err.statusCode).send(message);\r\n  });\r\n",
    "sys__UUID" : "b5483557-3af8-4119-8de5-56c2b5ed55da",
    "sys__createdBy" : "jay"
}