{
  "_id": "Final_Processor_for_addliquidityplan",
  "name": "Final_Processor_for_addliquidityplan",
  "type": "processor",
  "refType": "app",
  "refTypeId": "d88e9a79-c0cc-4c28-bb01-ee56ff33048e",
  "snippet": "var moment = require(\"moment\");\r\nfunction findbody(data) {\r\n  return [\r\n    {\r\n      liquidityPlanName: data.hasOwnProperty(\"liquidityPlanName\")\r\n        ? data.liquidityPlanName\r\n        : null,\r\n      liquidityPlanDescription: data.hasOwnProperty(\"liquidityPlanDescription\")\r\n        ? data.liquidityPlanDescription\r\n        : null,\r\n      liquidityPlanFunction: data.hasOwnProperty(\"liquidityPlanFunction\")\r\n        ? data.liquidityPlanFunction\r\n        : null,\r\n      entity: data.hasOwnProperty(\"entity\") ? data.entity : null,\r\n      liquidityPlanPeriod: data.hasOwnProperty(\"liquidityPlanPeriod\")\r\n        ? data.liquidityPlanPeriod\r\n        : null,\r\n      planRollOver: data.hasOwnProperty(\"planRollOver\")\r\n        ? data.planRollOver\r\n        : null,\r\n      planSource: data.hasOwnProperty(\"planSource\") ? data.planSource : null,\r\n      planStartDate: moment(data.planStartDate).format(\"YYYY-MM-DD\"),\r\n      planEndDate: moment(data.planEndDate).format(\"YYYY-MM-DD\"),\r\n      currency: data.hasOwnProperty(\"currency\") ? data.currency : null,\r\n      remarks: data.hasOwnProperty(\"remarks\") ? data.remarks : null,\r\n      planType: data.hasOwnProperty(\"planType\") ? data.planType : null,\r\n    },\r\n  ];\r\n}\r\nvar ekaliquidity =\r\n  req.body.propertyList.platform_url +\r\n  \"/spring/liquidityManagement/liquidityPlan\";\r\nvar ekaliquidityurl = {\r\n  method: \"POST\",\r\n  url: ekaliquidity,\r\n  body: findbody(req.body),\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformLiquidity = function get_platformLiquidity() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(ekaliquidityurl, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n};\r\nget_platformLiquidity()\r\n  .then(function (ent) {\r\n    res.status(200).send({ msg: \"Liquidity Plan Created Successfully\" });\r\n  })\r\n  .catch((err) => {\r\n    console.error(err);\r\n    let message = \"Failed to Create\";\r\n    if (\r\n      err.message.includes(\"Plan Start Date must be less than Plan End Date\")\r\n    ) {\r\n      message = \"Plan Start Date must be less than Plan End Date\";\r\n    } else if (\r\n      err.message.includes(\"Liquidity Plan Name is already in record\")\r\n    ) {\r\n      message = \"Liquidity Plan Name already exists\";\r\n    } else if (\r\n      err.message.includes(\r\n        \"Plan Start Date must be equal or greater than system date\"\r\n      )\r\n    ) {\r\n      message = \"Plan Start Date must be equal or greater than system date\";\r\n    } else if (\r\n      err.message.includes(\r\n        \"Plan End Date must be equal or greater than system date\"\r\n      )\r\n    ) {\r\n      message = \"Plan End Date must be equal or greater than system date\";\r\n    } else if (\r\n      err.message.includes(\r\n        \"Plan Rollover Yes already exists for another plan with the same start Date\"\r\n      )\r\n    ) {\r\n      message =\r\n        \"Plan Rollover Yes already exists for another plan with the same start Date\";\r\n    } else if (err.message.includes(\"Invalid Plan Source Name\")) {\r\n      message = \"Invalid Plan Source Name\";\r\n    }\r\n\r\n    res.status(500).send(message);\r\n  });\r\n",
  "sys__UUID": "f983ad70-6422-4e6e-a0dd-3254704291e3",
  "sys__createdBy": "avinash"
}
