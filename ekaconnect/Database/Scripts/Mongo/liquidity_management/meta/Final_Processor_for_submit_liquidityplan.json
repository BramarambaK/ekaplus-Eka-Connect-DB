{
  "_id": "Final_Processor_for_submit_liquidityplan",
  "name": "Final_Processor_for_submit",
  "type": "processor",
  "refType": "app",
  "refTypeId": "d88e9a79-c0cc-4c28-bb01-ee56ff33048e",
  "snippet": "\r\n    var moment = require('moment');\r\n    var ekaliquidityplan =\r\n      req.body.propertyList.platform_url +\r\n      '/spring/liquidityManagement/liquidityPlan/' +\r\n      req.body.liquidityPlanId +\r\n      '?action=submit';\r\n    var ekaliquidityplanurl = {\r\n      method: 'PUT',\r\n      url: ekaliquidityplan,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      json: true\r\n    };\r\n    var get_platformLiquidityPlan = function get_platformLiquidityPlan() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(ekaliquidityplanurl, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject({ ...body, statusCode: response.statusCode });\r\n          }\r\n        });\r\n      });\r\n    };\r\n    get_platformLiquidityPlan()\r\n      .then(function(ent) {\r\n        res.status(200).send({ msg: 'Liquidity Plan Submitted Successfully' });\r\n      })\r\n      .catch((err, statusCode) => {\r\n        let message = 'Failed to Create';\r\n        if (err.statusCode >= 400 && err.statusCode <= 499 && err.message) {\r\n          message = err.message;\r\n          // console.error(err);\r\n          //  res.status(500).send({ msg: 'failed to create' });\r\n        }\r\n        res.status(err.statusCode).send(message);\r\n      });\r\n  ",
  "sys__UUID": "9a4dd088-8d98-458e-b294-5cdde91c583c",
  "sys__createdBy": "akila"
}
