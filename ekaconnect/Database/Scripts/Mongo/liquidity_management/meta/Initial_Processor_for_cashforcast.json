{
  "_id": "Initial_Processor_for_cashforcast",
  "name": "Initial_Processor_for_cashforcast",
  "type": "processor",
  "refType": "app",
  "refTypeId": "d88e9a79-c0cc-4c28-bb01-ee56ff33048e",
  "snippet": "var moment = require(\"moment\");\r\nlet selected = req.body.hasOwnProperty(\"selectedData\")\r\n  ? req.body.selectedData\r\n  : {};\r\nvar ekaEntity =\r\n  req.body.propertyList.platform_url + \"/spring/liquidityManagement/forecast\";\r\nvar platformBody = { asOfDate: \"\", clientID: \"8\", entityIds: [] };\r\n\r\nvar platformEntityCashForecastData = {\r\n  method: \"GET\",\r\n  url: ekaEntity,\r\n  body: platformBody,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application/json\",\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformEntityCashForecastData =\r\n  function get_platformEntityCashForecastData(date, entity, toDate) {\r\n    if (date && toDate) {\r\n      date = moment(date).format(\"YYYY-MM-DD\");\r\n      platformBody.asOfDate = date;\r\n      platformBody.toDate = toDate;\r\n    } else {\r\n      platformBody.asOfDate = moment(new Date()).format(\"YYYY-MM-DD\");\r\n      platformBody.toDate = moment(new Date()).format(\"YYYY-MM-DD\");\r\n    }\r\n    if (entity && entity.length > 0) {\r\n      platformBody.entityIds = entity;\r\n    }\r\n    platformEntityCashForecastData.body = platformBody;\r\n    return new Promise(function (resolve, reject) {\r\n      request(platformEntityCashForecastData, function (err, response, body) {\r\n        if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      });\r\n    });\r\n  };\r\nvar ekaEntity =\r\n  req.body.propertyList.platform_url + \"/spring/cashManagement/entity\";\r\n\r\nvar platformEntity = {\r\n  method: \"GET\",\r\n  url: ekaEntity,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application/json\",\r\n    ttl: 300,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    \"X-Remote-User\": \"ekaApp\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformEntity = function get_platformEntity() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(platformEntity, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n};\r\nvar start = new Date().getTime();\r\nget_platformEntity()\r\n  .then(function (ent) {\r\n    var end = new Date().getTime();\r\n    var time = end - start;\r\n    console.log(\"Execution time: get_platformEntity\" + time);\r\n    var entity = ent.map(function (res) {\r\n      return res[\"c1\"];\r\n    });\r\n    if (\r\n      selected.hasOwnProperty(\"filterDate\") &&\r\n      selected.hasOwnProperty(\"toDate\")\r\n    ) {\r\n      var date = req.body.selectedData.filterDate;\r\n      var toDate = req.body.selectedData.toDate;\r\n      entity = req.body.selectedData.formcheckbox;\r\n    }\r\n    var start1 = new Date().getTime();\r\n    Promise.all([get_platformEntityCashForecastData(date, entity, toDate)])\r\n      .then((results) => {\r\n        var end1 = new Date().getTime();\r\n        var time1 = end1 - start1;\r\n        console.log(\r\n          \"Execution time: get_platformEntityCashForecastData\" + time1\r\n        );\r\n        let cashforecast = [];\r\n        for (let i = 0; i < results[0].length; i++) {\r\n          cashforecast[i] = results[0][i];\r\n          cashforecast[i][\"status\"] = cashforecast[i][\"c27\"];\r\n          cashforecast[i][\"forecastId\"] = cashforecast[i][\"c3\"];\r\n          cashforecast[i][\"currency\"] = cashforecast[i][\"c15\"];\r\n          cashforecast[i][\"currencyhidden\"] = cashforecast[i][\"c15\"];\r\n          cashforecast[i][\"externalRefNo\"] = cashforecast[i][\"c4\"];\r\n          cashforecast[i][\"entity\"] = cashforecast[i][\"c5\"];\r\n          cashforecast[i][\"bankAccount\"] = cashforecast[i][\"c6\"];\r\n          cashforecast[i][\"amount\"] = cashforecast[i][\"c14\"];\r\n          cashforecast[i][\"direction\"] = cashforecast[i][\"c16\"];\r\n          cashforecast[i][\"profileCenter\"] = cashforecast[i][\"c20\"];\r\n          cashforecast[i][\"strategy\"] = cashforecast[i][\"c21\"];\r\n          cashforecast[i][\"bankId\"] = cashforecast[i][\"c7\"];\r\n          cashforecast[i][\"classification\"] = cashforecast[i][\"c17\"];\r\n          cashforecast[i][\"expenseGroup\"] = cashforecast[i][\"c18\"];\r\n          cashforecast[i][\"transactionDate\"] = moment(\r\n            cashforecast[i][\"c19\"]\r\n          ).format(\"DD-MMM-YYYY\");\r\n          cashforecast[i][\"liquidityPlanName\"] = cashforecast[i][\"c10\"];\r\n          cashforecast[i][\"liquidityPlanID\"] = cashforecast[i][\"c9\"];\r\n          cashforecast[i][\"remarks\"] = cashforecast[i][\"c23\"];\r\n          cashforecast[i][\"attributes\"] = cashforecast[i][\"c28\"];\r\n          cashforecast[i][\"bankName\"] = cashforecast[i][\"c8\"];\r\n          cashforecast[i][\"baseCurrency\"] = cashforecast[i][\"c33\"];\r\n          cashforecast[i][\"amountInBaseCurrency\"] =\r\n            cashforecast[i][\"amountInBaseCurrency\"];\r\n          cashforecast[i][\"convertedToExposure\"] = cashforecast[i][\"c22\"];\r\n          cashforecast[i][\"updatedDate\"] = cashforecast[i][\"c25\"]\r\n            ? moment(cashforecast[i][\"c25\"]).format(\"DD-MMM-YYYY HH:MM:SS\")\r\n            : \"\";\r\n          cashforecast[i][\"updatedBy\"] = cashforecast[i][\"c26\"];\r\n          cashforecast[i][\"source\"] = cashforecast[i][\"c1\"];\r\n          cashforecast[i][\"sourceId\"] = cashforecast[i][\"c2\"];\r\n          cashforecast[i][\"planActivityStatus\"] =\r\n            cashforecast[i][\"planActivityStatus\"];\r\n        }\r\n        res.status(200).send([...cashforecast]);\r\n      })\r\n      .catch((err) => {\r\n        res.status(500).send(err);\r\n      });\r\n  })\r\n  .catch((err) => {\r\n    res.status(500).send(err);\r\n  });\r\n",
  "sys__UUID": "7dbd15f0-e028-4afc-8415-6778f5185deb",
  "sys__createdBy": "Jay"
}
