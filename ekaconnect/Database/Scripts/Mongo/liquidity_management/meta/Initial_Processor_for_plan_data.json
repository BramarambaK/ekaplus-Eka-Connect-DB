{
  "_id": "Initial_Processor_for_plan_data",
  "name": "Initial_Processor_for_plan_data",
  "type": "processor",
  "refType": "app",
  "refTypeId": "d88e9a79-c0cc-4c28-bb01-ee56ff33048e",
  "snippet": "\r\n    var moment = require('moment');\r\n    function payload(task) {\r\n      let res = {};\r\n      if (task) {\r\n        res.asOfDate = moment(task.planStartDate).format('YYYY-MM-DD');\r\n        res.toDate = moment(task.planEndDate).format('YYYY-MM-DD');\r\n        res.frequency = task.liquidityPlanPeriod;\r\n        res.entityIds = [task.entity];\r\n      }\r\n      return res;\r\n    }\r\n    let selected = req.body.hasOwnProperty('selectedData') ? req.body.selectedData : {};\r\n    var ekaEntity = req.body.propertyList.platform_url + `/spring/liquidityManagement/liquidityPlan?limit=1`;\r\n\r\n    var platformEntityLiquidityPlanDataDefault = {\r\n      method: 'GET',\r\n      url: ekaEntity,\r\n      body: {},\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    var get_platformEntityLiquidityPlanDataDefault = function get_platformEntityLiquidityPlanDataDefault() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(platformEntityLiquidityPlanDataDefault, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject({ ...body, statusCode: response.statusCode });\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    var get_platformEntityLiquidityPlanData = function get_platformEntityLiquidityPlanData(plandata) {\r\n      return new Promise(function(resolve, reject) {\r\n        let platformEntityLiquidityPlanData = {\r\n          method: 'GET',\r\n          url:\r\n            req.body.propertyList.platform_url +\r\n            `/spring/liquidityManagement/liquidityPlan/${plandata.liquidityPlanName}/planActivity?frequency=${\r\n              plandata.liquidityPlanPeriod\r\n            }`,\r\n          body: payload(plandata),\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            'Content-Type': 'application/json',\r\n            'X-TenantID': req.headers['x-tenantid']\r\n          },\r\n          json: true\r\n        };\r\n        request(platformEntityLiquidityPlanData, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject({ ...body, statusCode: response.statusCode });\r\n          }\r\n        });\r\n      });\r\n    };\r\n    async function main() {\r\n      let plan = {};\r\n      try {\r\n        if (selected.planactivity.planactivitycreation.liquidityPlanName === '') {\r\n          let latestplan = await get_platformEntityLiquidityPlanDataDefault();\r\n          plan = {\r\n            entity: latestplan[0].c4,\r\n            liquidityPlanName: latestplan[0].c1,\r\n            currency: latestplan[0].c11,\r\n            status: latestplan[0].c12,\r\n            liquidityPlanPeriod: latestplan[0].c5,\r\n            planStartDate: moment(latestplan[0].c6).format('YYYY-MM-DD'),\r\n            planEndDate: calculateEnddate(latestplan[0].c6, latestplan[0].c7, latestplan[0].c5)\r\n          };\r\n        } else {\r\n          plan = selected.planactivity.planactivitycreation;\r\n        }\r\n        let response = await get_platformEntityLiquidityPlanData(plan);\r\n        return response;\r\n      } catch (error) {\r\n        console.log(error);\r\n        let message = 'Failed to update';\r\n        if (error.statusCode >= 400 && error.statusCode <= 499 && error.message) {\r\n          message = error.message;\r\n        }\r\n        res.status(error.statusCode).send(message);\r\n      }\r\n    }\r\n    function calculateEnddate(start, end, freq) {\r\n      if (start != 'null' && end != 'null' && freq == 'Monthly') {\r\n        let startDate = new Date(start);\r\n        let endDate = new Date(end);\r\n        var diff = (endDate.getFullYear() - startDate.getFullYear()) * 12;\r\n        diff -= startDate.getMonth();\r\n        diff += endDate.getMonth();\r\n        let resultEnd = new Date(end).toDateString();\r\n        return diff <= 12\r\n          ? moment(resultEnd).format('YYYY-MM-DD')\r\n          : moment(startDate)\r\n              .add(11, 'M')\r\n              .format('YYYY-MM-DD');\r\n      } else if (start != 'null' && end != 'null' && freq == 'Weekly') {\r\n        let startDate = new Date(start);\r\n        let endDate = new Date(end);\r\n        var weekdiff = Math.round((endDate - startDate) / (7 * 24 * 60 * 60 * 1000));\r\n        let resultEnd = new Date(end).toDateString();\r\n        if (weekdiff >= 12) {\r\n          let addedWeek = startDate.setDate(startDate.getDate() + 12 * 7);\r\n          return moment(startDate).format('YYYY-MM-DD');\r\n        } else return moment(resultEnd).format('YYYY-MM-DD');\r\n      } else if (start != 'null' && end != 'null' && freq == 'Daily') {\r\n        let startDate = new Date(start);\r\n        let endDate = new Date(end);\r\n        var diff = (endDate - startDate) / 1000;\r\n        var diff = Math.abs(Math.floor(diff));\r\n        var days = Math.floor(diff / (24 * 60 * 60));\r\n        let resultEnd = new Date(end).toDateString();\r\n        return days <= 13\r\n          ? moment(resultEnd).format('YYYY-MM-DD')\r\n          : moment(startDate)\r\n              .add(13, 'd')\r\n              .format('YYYY-MM-DD');\r\n      }\r\n    }\r\n\r\n    main()\r\n      .then(result => {\r\n        res.status(200).send(result);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        let message = 'Failed to update';\r\n        if (err.statusCode >= 400 && err.statusCode <= 499 && err.message) {\r\n          message = err.message;\r\n        }\r\n        res.status(err.statusCode).send(message);\r\n      });\r\n  ",
  "sys__UUID": "b33058fc-2b22-48a1-9d1a-6e36209b4805"
}
