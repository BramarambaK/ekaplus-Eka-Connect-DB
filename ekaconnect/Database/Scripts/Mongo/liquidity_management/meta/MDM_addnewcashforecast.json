{
  "_id": "MDM_addnewcashforecast",
  "name": "MDM_addnewcashforecast",
  "type": "processor",
  "refType": "app",
  "refTypeId": "d88e9a79-c0cc-4c28-bb01-ee56ff33048e",
  "snippet": "var moment = require(\"moment\");\r\nlet mdmbody = JSON.parse(req.body.mdmProcessorServiceKey);\r\nreq.body.mdmProcessorServiceKey = JSON.parse(req.body.mdmProcessorServiceKey);\r\n\r\nfunction findindex(serviceKey) {\r\n  return req.body.mdmProcessorServiceKey.findIndex(\r\n    (x) => x.serviceKey == serviceKey\r\n  );\r\n}\r\nvar ekaEntity =\r\n  req.body.propertyList.platform_url + \"/spring/cashManagement/entity\";\r\n\r\nvar platformEntity = {\r\n  method: \"GET\",\r\n  url: ekaEntity,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application/json\",\r\n    ttl: 300,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    \"X-Remote-User\": \"ekaApp\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformEntity = function get_platformEntity() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(platformEntity, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n};\r\nvar TemplateUrl =\r\n  req.body.propertyList.platform_url + \"/collection/v1/internal/template/\";\r\n\r\nvar templateBody = {\r\n  method: \"GET\",\r\n  url: TemplateUrl,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application/json\",\r\n    ttl: 300,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    \"X-Remote-User\": \"ekaApp\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_template = function get_template(name) {\r\n  templateBody.url =\r\n    req.body.propertyList.platform_url +\r\n    \"/collection/v1/internal/template/\" +\r\n    name +\r\n    \"?start=0&limit=10000\";\r\n  return new Promise(function (resolve, reject) {\r\n    request(templateBody, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n};\r\nvar ekaLiquidityPlanName =\r\n  req.body.propertyList.platform_url +\r\n  \"/spring/liquidityManagement/liquidityPlan?status=ROLLEDBACK,OPEN&open=true\";\r\n\r\nvar platformLiquidityPlanName = {\r\n  method: \"GET\",\r\n  url: ekaLiquidityPlanName,\r\n  body: \"\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application/json\",\r\n    ttl: 300,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    \"X-Remote-User\": \"ekaApp\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformLiquidityPlanName = function get_platformLiquidityPlanName(\r\n  entityIdss\r\n) {\r\n  platformLiquidityPlanName.body = {\r\n    asOfDate: moment(new Date()).format(\"YYYY-MM-DD\"),\r\n    toDate: \"2050-12-31\",\r\n    clientID: \"8\",\r\n    entityIds: [entityIdss],\r\n  };\r\n  return new Promise(function (resolve, reject) {\r\n    request(platformLiquidityPlanName, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n};\r\nvar ekaLiquidityProfitCenter =\r\n  req.body.propertyList.platform_url +\r\n  \"/collection/v1/internal/template/ProfitCenter\";\r\n\r\nvar platformProfitCenter = {\r\n  method: \"GET\",\r\n  url: ekaLiquidityProfitCenter,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application/json\",\r\n    ttl: 300,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    \"X-Remote-User\": \"ekaApp\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformProfitCenter = function get_platformProfitCenter() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(platformProfitCenter, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n};\r\nvar ekaLiquidityStrategy =\r\n  req.body.propertyList.platform_url +\r\n  \"/collection/v1/internal/template/Strategy\";\r\n\r\nvar platformStrategy = {\r\n  method: \"GET\",\r\n  url: ekaLiquidityStrategy,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application/json\",\r\n    ttl: 300,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    \"X-Remote-User\": \"ekaApp\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformStrategy = function get_platformStrategy() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(platformStrategy, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n};\r\nasync function main() {\r\n  let mdmdata = {};\r\n  let datemapforstartend = {};\r\n  let { datefilters } = req.body.selectedData;\r\n  if (\r\n    findindex(\"currency\") != -1 &&\r\n    findindex(\"bankAccount\") != -1 &&\r\n    findindex(\"liquidityPlanName\") != -1 &&\r\n    findindex(\"strategy\") != -1 &&\r\n    findindex(\"profitCenter\") != -1 &&\r\n    findindex(\"classification\") != -1\r\n  ) {\r\n    try {\r\n      console.log(\"inside multiple index call\");\r\n      let entityIds = mdmbody[findindex(\"liquidityPlanName\")].dependsOn[0];\r\n      Promise.all([\r\n        get_template(\"TreasuryBankAccount\"),\r\n        get_platformLiquidityPlanName(entityIds),\r\n        get_platformStrategy(),\r\n        get_platformProfitCenter(),\r\n        get_template(\"TransactionTypes\"),\r\n      ]).then((values) => {\r\n        console.log(\"promise data\", JSON.stringify(values));\r\n        let currencyDependsOn = mdmbody[findindex(\"currency\")].dependsOn[0];\r\n        let bankAccountDependsOn =\r\n          mdmbody[findindex(\"bankAccount\")].dependsOn[0];\r\n\r\n        //for currency\r\n        let filtered = values[0].data.filter(\r\n          (res) => res.Entity == currencyDependsOn\r\n        );\r\n        mdmdata[\"currency\"] = [\r\n          ...new Set(filtered.map((obj) => obj[\"Currency\"])),\r\n        ].map((item) => {\r\n          return { key: item, value: item };\r\n        });\r\n\r\n        //for bank account\r\n        mdmdata[\"bankAccount\"] = values[0].data\r\n          .filter((res) => res.Entity == bankAccountDependsOn)\r\n          .map((item) => {\r\n            return {\r\n              key: item[\"Account Number\"],\r\n              value: item[\"Account Number\"],\r\n            };\r\n          });\r\n        //for liqudity plan\r\n        mdmdata[\"liquidityPlanName\"] = values[1].map((res) => {\r\n          return { key: res[\"c2\"], value: res[\"c2\"] };\r\n        });\r\n\r\n        //for Strategy\r\n        mdmdata[\"strategy\"] = [\r\n          ...new Set(values[2].data.map((obj) => obj[\"Strategy\"])),\r\n        ].map((item) => {\r\n          return { key: item, value: item };\r\n        });\r\n\r\n        // for profit center\r\n        mdmdata[\"profitCenter\"] = [\r\n          ...new Set(values[3].data.map((obj) => obj[\"Profit Center\"])),\r\n        ].map((item) => {\r\n          return { key: item, value: item };\r\n        });\r\n\r\n        //for classification\r\n        mdmdata[\"classification\"] = [\r\n          ...new Set(values[4].data.map((obj) => obj[\"Transaction Type\"])),\r\n        ].map((item) => {\r\n          return { key: item, value: item };\r\n        });\r\n        return mdmdata;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  if (findindex(\"ngrFilterKey\") != -1) {\r\n    console.log(\"inside ngfilter index\");\r\n    try {\r\n      let start = new Date();\r\n      if (datefilters && datefilters.hasOwnProperty(\"formcheckbox\")) {\r\n        let Entity = datefilters[\"formcheckbox\"];\r\n        mdmdata[\"ngrFilterKey\"] = Entity.map((res) => {\r\n          return { key: res, value: res };\r\n        });\r\n        mdmdata[\"Direction\"] = [\r\n          { key: \"Debit\", value: \"Debit\" },\r\n          { key: \"Credit\", value: \"Credit\" },\r\n        ];\r\n      } else {\r\n        let Entity = await get_platformEntity();\r\n        console.log(\"Entity\", new Date() - start);\r\n        mdmdata[\"ngrFilterKey\"] = Entity.map((res) => {\r\n          return { key: res[\"c1\"], value: res[\"c1\"] };\r\n        });\r\n      }\r\n      mdmdata[\"Direction\"] = [\r\n        { key: \"Debit\", value: \"Debit\" },\r\n        { key: \"Credit\", value: \"Credit\" },\r\n      ];\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  if (findindex(\"classification\") != -1) {\r\n    console.log(\"inside classification index\");\r\n    try {\r\n      let start = new Date();\r\n      let classification = await get_template(\"TransactionTypes\");\r\n      console.log(\"template\", new Date() - start);\r\n      mdmdata[\"classification\"] = [\r\n        ...new Set(classification.data.map((obj) => obj[\"Transaction Type\"])),\r\n      ].map((item) => {\r\n        return { key: item, value: item };\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  if (findindex(\"bankAccount\") != -1) {\r\n    console.log(\"inside bankAccount index\");\r\n    try {\r\n      let start = new Date();\r\n      let bankAccount = await get_template(\"TreasuryBankAccount\");\r\n      let ent = mdmbody[findindex(\"bankAccount\")].dependsOn[0];\r\n      console.log(\"bankAccont\", new Date() - start);\r\n      mdmdata[\"bankAccount\"] = bankAccount.data\r\n        .filter((res) => res.Entity == ent)\r\n        .map((item) => {\r\n          return { key: item[\"Account Number\"], value: item[\"Account Number\"] };\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  if (findindex(\"currency\") != -1) {\r\n    console.log(\"inside currency index\");\r\n    try {\r\n      let start = new Date();\r\n      let BankDetails = await get_template(\"TreasuryBankAccount\");\r\n      let ent = mdmbody[findindex(\"currency\")].dependsOn[0];\r\n      console.log(\"Currency Unit\", new Date() - start);\r\n      let filtered = BankDetails.data.filter((res) => res.Entity == ent);\r\n      mdmdata[\"currency\"] = [\r\n        ...new Set(filtered.map((obj) => obj[\"Currency\"])),\r\n      ].map((item) => {\r\n        return { key: item, value: item };\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  if (\r\n    findindex(\"bankName\") != -1 &&\r\n    findindex(\"bankId\") != -1 &&\r\n    findindex(\"currencyhidden\") != -1\r\n  ) {\r\n    console.log(\"inside bankname bankid currencyhidden index\");\r\n    try {\r\n      let start = new Date();\r\n      let BankDetails = await get_template(\"TreasuryBankAccount\");\r\n      let ent = mdmbody[findindex(\"bankName\")].dependsOn[0];\r\n      let ActNo = mdmbody[findindex(\"bankName\")].dependsOn[1];\r\n      console.log(\"bank name\", new Date() - start);\r\n      let c = BankDetails.data.filter(\r\n        (res) => res.Entity == ent && res[\"Account Number\"] == ActNo\r\n      )[0][\"Currency\"];\r\n      /*       mdmdata[\"currency\"] = [{ key: c, value: c }];\r\n       */ mdmdata[\"bankName\"] = BankDetails.data.filter(\r\n        (res) => res.Entity == ent && res[\"Account Number\"] == ActNo\r\n      )[0][\"Bank Name\"];\r\n      mdmdata[\"bankId\"] = BankDetails.data.filter(\r\n        (res) => res.Entity == ent && res[\"Account Number\"] == ActNo\r\n      )[0][\"Bank ID\"];\r\n      mdmdata[\"currencyhidden\"] = BankDetails.data.filter(\r\n        (res) => res.Entity == ent && res[\"Account Number\"] == ActNo\r\n      )[0][\"Currency\"];\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  if (findindex(\"liquidityPlanName\") != -1) {\r\n    console.log(\"inside liquidtyplanname index\");\r\n    try {\r\n      let entityIds = mdmbody[findindex(\"liquidityPlanName\")].dependsOn[0];\r\n      let referencePlanName = await get_platformLiquidityPlanName(entityIds);\r\n      mdmdata[\"liquidityPlanName\"] = referencePlanName.map((res) => {\r\n        return { key: res[\"c2\"], value: res[\"c2\"] };\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  if (findindex(\"planStartEndDate\") != -1) {\r\n    console.log(\"inside startdate index\");\r\n    try {\r\n      let entityIds = mdmbody[findindex(\"planStartEndDate\")].dependsOn[0];\r\n      let planName = mdmbody[findindex(\"planStartEndDate\")].dependsOn[1];\r\n      let referencePlanName = await get_platformLiquidityPlanName(entityIds);\r\n      mdmdata[\"planStartEndDate\"] = referencePlanName.filter((res) => {\r\n        if (res[\"c2\"] == planName) {\r\n          return res;\r\n        }\r\n      });\r\n      mdmdata[\"planStartEndDate\"] =\r\n        moment(mdmdata[\"planStartEndDate\"][0].c6).format(\"YYYY-MM-DD\") +\r\n        \"%%%\" +\r\n        moment(mdmdata[\"planStartEndDate\"][0].c7).format(\"YYYY-MM-DD\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  if (findindex(\"profitCenter\") != -1) {\r\n    console.log(\"inside profitcenter index\");\r\n    try {\r\n      let start = new Date();\r\n      let profitCenter = await get_platformProfitCenter();\r\n      mdmdata[\"profitCenter\"] = [\r\n        ...new Set(profitCenter.data.map((obj) => obj[\"Profit Center\"])),\r\n      ].map((item) => {\r\n        return { key: item, value: item };\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  if (findindex(\"strategy\") != -1) {\r\n    console.log(\"inside strategy index\");\r\n    try {\r\n      let start = new Date();\r\n      let strategy = await get_platformStrategy();\r\n      mdmdata[\"strategy\"] = [\r\n        ...new Set(strategy.data.map((obj) => obj[\"Strategy\"])),\r\n      ].map((item) => {\r\n        return { key: item, value: item };\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  return mdmdata;\r\n}\r\nmain().then((mdmdata) => {\r\n  res.status(200).send(mdmdata);\r\n});\r\n",
  "sys__UUID": "76aa5ab6-81d0-4029-af3b-9e45a4877808",
  "sys__createdBy": "avinash"
}
