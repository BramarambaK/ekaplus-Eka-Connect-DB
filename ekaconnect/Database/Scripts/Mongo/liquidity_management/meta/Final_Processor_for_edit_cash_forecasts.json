{
  "_id": "Final_Processor_for_edit_cash_forecasts",
  "name": "Final_Processor_for_edit_cash_forecasts",
  "type": "processor",
  "refType": "app",
  "refTypeId": "d88e9a79-c0cc-4c28-bb01-ee56ff33048e",
  "snippet": "var moment = require(\"moment\");\r\nfunction findbody(data) {\r\n  return {\r\n    liquidityPlanName: data.liquidityPlanName,\r\n    bankId: data.hasOwnProperty(\"bankId\") ? data.bankId : null,\r\n    bankAccount: data.hasOwnProperty(\"bankAccount\") ? data.bankAccount : null,\r\n    entity: data.hasOwnProperty(\"entity\") ? data.entity : null,\r\n    transactionDate: moment(data.transactionDate).format(\"YYYY-MM-DD\"),\r\n    currency: data.hasOwnProperty(\"currency\") ? data.currency : null,\r\n    amount: data.hasOwnProperty(\"amount\") ? data.amount : null,\r\n    classification: data.hasOwnProperty(\"classification\")\r\n      ? data.classification\r\n      : null,\r\n    direction: data.hasOwnProperty(\"direction\") ? data.direction : null,\r\n    strategy: data.hasOwnProperty(\"strategy\") ? data.strategy : null,\r\n    profileCenter: data.hasOwnProperty(\"profileCenter\")\r\n      ? data.profileCenter\r\n      : null,\r\n    externalRefNo: data.externalRefNo,\r\n    remarks: data.remarks,\r\n    status: data.status,\r\n  };\r\n}\r\nvar ekacashforecast =\r\n  req.body.propertyList.platform_url +\r\n  \"/spring/liquidityManagement/forecast/\" +\r\n  req.body.forecastId;\r\nvar ekacashforecasturl = {\r\n  method: \"PUT\",\r\n  url: ekacashforecast,\r\n  body: findbody(req.body),\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformEkaCashForecastUrl = function get_platformEkaCashForecastUrl() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(ekacashforecasturl, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject({ ...body, statusCode: response.statusCode });\r\n      }\r\n    });\r\n  });\r\n};\r\n/* if(!req.body.hasOwnProperty('amount')){\r\n  res.status(500).send('Please Fill the Amount')\r\n}*/\r\nget_platformEkaCashForecastUrl()\r\n  .then(function (ent) {\r\n    res.status(200).send({ msg: \"Cash Forecast Updated Successfully\" });\r\n  })\r\n  .catch((err, statusCode) => {\r\n    console.error(err);\r\n    let message = \"Failed to update\";\r\n    if (err.statusCode >= 400 && err.statusCode <= 499 && err.message) {\r\n      message = err.message;\r\n    } else if (\r\n      err.message.includes(\"Amount is required or should be greater than 0\")\r\n    )\r\n      message = \"Amount is required or should be greater than 0\";\r\n    else if (err.message.includes(\"Invalid Transaction Date\"))\r\n      message = \"Invalid Transaction Date\";\r\n    else if (err.message.includes(\"Invalid Currency with respect to Entity\"))\r\n      message = \"Invalid Currency with respect to Entity\";\r\n    else if (\r\n      err.message.includes(\"Invalid Bank Name with respect to Bank Account\")\r\n    )\r\n      message = \"Invalid Bank Name with respect to Bank Account\";\r\n    else if (\r\n      err.message.includes(\"Invalid Currency with respect to Bank Account\")\r\n    )\r\n      message = \"Invalid Currency with respect to Bank Account\";\r\n    //res.status(500).send(message);\r\n\r\n    res.status(err.statusCode).send(message);\r\n  });\r\n",
  "sys__UUID": "c8cbd1d9-be9d-478e-ae49-fd66796b5513",
  "sys__createdBy": "avinash"
}
