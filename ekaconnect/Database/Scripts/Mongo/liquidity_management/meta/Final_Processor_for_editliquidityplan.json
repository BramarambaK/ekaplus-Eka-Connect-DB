{
  "_id": "Final_Processor_for_editliquidityplan",
  "name": "Final_Processor_for_editliquidityplan",
  "type": "processor",
  "refType": "app",
  "refTypeId": "d88e9a79-c0cc-4c28-bb01-ee56ff33048e",
  "snippet": "var moment = require(\"moment\");\r\nfunction findbody(data) {\r\n  return {\r\n    liquidityPlanDescription: data.hasOwnProperty(\"liquidityPlanDescription\")\r\n      ? data.liquidityPlanDescription\r\n      : null,\r\n    liquidityPlanFunction: data.hasOwnProperty(\"liquidityPlanFunction\")\r\n      ? data.liquidityPlanFunction\r\n      : null,\r\n    planRollOver: data.hasOwnProperty(\"planRollOver\")\r\n      ? data.planRollOver\r\n      : null,\r\n    currency: data.hasOwnProperty(\"currency\") ? data.currency : null,\r\n    liquidityPlanName: data.liquidityPlanName,\r\n    entity: data.entity,\r\n    liquidityPlanPeriod: data.liquidityPlanPeriod,\r\n    planSource: data.planSource,\r\n    planStartDate: moment(data.planStartDate).format(\"YYYY-MM-DD\"),\r\n    planEndDate: moment(data.planEndDate).format(\"YYYY-MM-DD\"),\r\n    remarks: data.hasOwnProperty(\"remarks\") ? data.remarks : null,\r\n    planType: data.hasOwnProperty(\"planType\") ? data.planType : null,\r\n    status: data.status,\r\n  };\r\n}\r\nvar ekaliquidityplan =\r\n  req.body.propertyList.platform_url +\r\n  \"/spring/liquidityManagement/liquidityPlan/\" +\r\n  req.body.liquidityPlanId;\r\nvar ekaliquidityplanurl = {\r\n  method: \"PUT\",\r\n  url: ekaliquidityplan,\r\n  body: findbody(req.body),\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformLiquidityPlan = function get_platformLiquidityPlan() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(ekaliquidityplanurl, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject({ ...body, statusCode: response.statusCode });\r\n      }\r\n    });\r\n  });\r\n};\r\n/* if(!req.body.hasOwnProperty('amount')){\r\n      res.status(500).send('Please Fill the Amount')\r\n    }*/\r\nget_platformLiquidityPlan()\r\n  .then(function (ent) {\r\n    res.status(200).send({ msg: \"Liquidity Plan Updated Successfully\" });\r\n  })\r\n  .catch((err, statusCode) => {\r\n    console.error(err, statusCode);\r\n    let message = \"Failed to update\";\r\n    if (err.statusCode >= 400 && err.statusCode <= 499 && err.message) {\r\n      message = err.message;\r\n    } else if (\r\n      err.message.includes(\r\n        \"PlanStartDate should be greater than equal to current date\"\r\n      )\r\n    )\r\n      message = \"PlanStartDate should be greater than equal to current date\";\r\n    else if (err.message.includes(\"PlanDescription is required\"))\r\n      message = \"PlanDescription is required\";\r\n    else if (err.message.includes(\"Remarks is required\"))\r\n      message = \"Remarks is required\";\r\n    else if (err.message.includes(\"PlanFunction is required\"))\r\n      message = \"PlanFunction is required\";\r\n    res.status(err.statusCode).send(message);\r\n    //res.status(500).send(message);\r\n  });\r\n",
  "sys__UUID": "62cf1f07-ef6e-4a3e-85b8-44dc382cd5ff",
  "sys__createdBy": "avinash"
}
