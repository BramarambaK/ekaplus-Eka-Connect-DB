{
  "_id": "MDM_liquidityplanactivity",
  "name": "MDM_liquidityplanactivity",
  "type": "processor",
  "refType": "app",
  "refTypeId": "d88e9a79-c0cc-4c28-bb01-ee56ff33048e",
  "snippet": "\r\n    var moment = require('moment');\r\n    let mdmbody = JSON.parse(req.body.mdmProcessorServiceKey);\r\n    req.body.mdmProcessorServiceKey = JSON.parse(req.body.mdmProcessorServiceKey);\r\n    var planId =\r\n      req.body.selectedData &&\r\n      req.body.selectedData.planactivitycreation &&\r\n      req.body.selectedData.planactivitycreation.liquidityPlanName\r\n        ? req.body.selectedData.planactivitycreation.liquidityPlanName\r\n        : '';\r\n\r\n    function findindex(serviceKey) {\r\n      return req.body.mdmProcessorServiceKey.findIndex(x => x.serviceKey == serviceKey);\r\n    }\r\n    var ekaEntity = req.body.propertyList.platform_url + '/spring/cashManagement/entity';\r\n\r\n    var platformEntity = {\r\n      method: 'GET',\r\n      url: ekaEntity,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        'X-Remote-User': 'ekaApp'\r\n      },\r\n      json: true\r\n    };\r\n    var get_platformEntity = function get_platformEntity() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(platformEntity, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    };\r\n    var TemplateUrl = req.body.propertyList.platform_url + '/collection/v1/internal/template/';\r\n\r\n    var templateBody = {\r\n      method: 'GET',\r\n      url: TemplateUrl,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        'X-Remote-User': 'ekaApp'\r\n      },\r\n      json: true\r\n    };\r\n    var get_template = function get_template(name) {\r\n      templateBody.url =\r\n        req.body.propertyList.platform_url + '/collection/v1/internal/template/' + name + '?start=0&limit=10000';\r\n      return new Promise(function(resolve, reject) {\r\n        request(templateBody, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    };\r\n    var ekaLiquidityPlanName = req.body.propertyList.platform_url + '/spring/liquidityManagement/liquidityPlan';\r\n\r\n    var platformLiquidityPlanName = {\r\n      method: 'GET',\r\n      url: ekaLiquidityPlanName,\r\n      body: '',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        'X-Remote-User': 'ekaApp'\r\n      },\r\n      json: true\r\n    };\r\n    var get_platformLiquidityPlanName = function get_platformLiquidityPlanName(entityIdss) {\r\n      platformLiquidityPlanName.body = {\r\n        asOfDate: '',\r\n        toDate: '',\r\n        clientID: '8',\r\n        entityIds: [entityIdss]\r\n      };\r\n      return new Promise(function(resolve, reject) {\r\n        request(platformLiquidityPlanName, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    };\r\n    var ekaPlanDetails = req.body.propertyList.platform_url + '/spring/liquidityManagement/liquidityPlan?id=' + planId;\r\n\r\n    var platformPlanDetails = {\r\n      method: 'GET',\r\n      url: ekaPlanDetails,\r\n      body: {\r\n        clientID: '8',\r\n        entityIds: []\r\n      },\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        'X-Remote-User': 'ekaApp'\r\n      },\r\n      json: true\r\n    };\r\n    var get_platformPlanDetails = function get_platformPlanDetails() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(platformPlanDetails, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    async function main() {\r\n      let mdmdata = {};\r\n      let datemapforstartend = {};\r\n      let { datefilters } = req.body.selectedData;\r\n      if (findindex('ngrFilterKey') != -1) {\r\n        try {\r\n          let start = new Date();\r\n          if (datefilters && datefilters.hasOwnProperty('formcheckbox')) {\r\n            let Entity = datefilters['formcheckbox'];\r\n            mdmdata['ngrFilterKey'] = Entity.map(res => {\r\n              return { key: res, value: res };\r\n            });\r\n          } else {\r\n            let Entity = await get_platformEntity();\r\n            console.log('Entity', new Date() - start);\r\n            mdmdata['ngrFilterKey'] = Entity.map(res => {\r\n              return { key: res['c1'], value: res['c1'] };\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n\r\n      if (findindex('currency') != -1) {\r\n        try {\r\n          let plandetails = await get_platformPlanDetails();\r\n          mdmdata['currency'] = plandetails[0].currency;\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n      if (findindex('status') != -1) {\r\n        try {\r\n          let plandetails = await get_platformPlanDetails();\r\n          mdmdata['status'] = plandetails[0].status;\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n      if (findindex('liquidityPlanPeriod') != -1) {\r\n        try {\r\n          let plandetails = await get_platformPlanDetails();\r\n          mdmdata['liquidityPlanPeriod'] = plandetails[0].liquidityPlanPeriod;\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n      if (findindex('planStartDate') != -1) {\r\n        try {\r\n          let plandetails = await get_platformPlanDetails();\r\n          mdmdata['planStartDate'] = moment(plandetails[0].planStartDate).format('YYYY-MM-DD');\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n      if (findindex('frequency') != -1) {\r\n        try {\r\n          let plandetails = await get_platformPlanDetails();\r\n          mdmdata['frequency'] = plandetails[0].liquidityPlanPeriod ? plandetails[0].liquidityPlanPeriod : 'Monthly';\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n      if (findindex('planEndDate') != -1) {\r\n        try {\r\n          let plandetails = await get_platformPlanDetails();\r\n          mdmdata['planEndDate'] = moment(plandetails[0].planEndDate).format('YYYY-MM-DD');\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n\r\n      if (findindex('liquidityPlanName') != -1) {\r\n        try {\r\n          let entityIds = mdmbody[findindex('liquidityPlanName')].dependsOn[0];\r\n          let referencePlanName = await get_platformLiquidityPlanName(entityIds);\r\n          mdmdata['liquidityPlanName'] = referencePlanName.map(res => {\r\n            return { key: res['c1'], value: res['c2'] };\r\n          });\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n      return mdmdata;\r\n    }\r\n    main().then(mdmdata => {\r\n      res.status(200).send(mdmdata);\r\n    });\r\n ",
  "sys__UUID": "92a4efd5-efc1-40a5-92a5-8ca2b790ee92"
}
