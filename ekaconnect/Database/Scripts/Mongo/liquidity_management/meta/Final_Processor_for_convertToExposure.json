{
  "_id": "Final_Processor_for_convertToExposure",
  "name": "Final_Processor_for_convertToExposure",
  "type": "processor",
  "refType": "app",
  "refTypeId": "d88e9a79-c0cc-4c28-bb01-ee56ff33048e",
  "snippet": "\r\n    var moment = require('moment');\r\n    function findbody(data) {\r\n      return [\r\n        {\r\n          externalRefNo: data.hasOwnProperty('externalRefNo') ? data.externalRefNo : null,\r\n          exposureDate: moment(data.transactionDate).format('YYYY-MM-DD'),\r\n          currency: data.hasOwnProperty('currency') ? data.currency : null,\r\n          remarks: data.hasOwnProperty('remarks') ? data.remarks : null,\r\n          amount: data.hasOwnProperty('amount') ? data.amount : null,\r\n          entityName: data.hasOwnProperty('entity') ? data.entity : null,\r\n          profitCenter: data.hasOwnProperty('profileCenter') ? data.profileCenter : null,\r\n          strategy: data.hasOwnProperty('strategy') ? data.strategy : null,\r\n          entity: data.hasOwnProperty('entity') ? data.entity : null,\r\n          direction: data.hasOwnProperty('direction') ? data.direction : null,\r\n          linkedForeCastIds: req.body.forecastId,\r\n          classification: req.body.classification\r\n        }\r\n      ];\r\n    }\r\n    var ids = req.body.forecastId.toString();\r\n    var ekaMergeResponse =\r\n      req.body.propertyList.platform_url + '/spring/liquidityManagement/forecast/merge?forecastIds=' + ids;\r\n    var ekaMergeResponseurl = {\r\n      method: 'GET',\r\n      url: ekaMergeResponse,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      json: true\r\n    };\r\n\r\n    function get_mergeResponse() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(ekaMergeResponseurl, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    var ekaConvertToExposure = req.body.propertyList.platform_url + '/spring/liquidityManagement/exposure';\r\n    var ekaConvertToExposureurl = {\r\n      method: 'POST',\r\n      url: ekaConvertToExposure,\r\n      body: findbody(req.body),\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      json: true\r\n    };\r\n\r\n    function get_platformConvertToExposure() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(ekaConvertToExposureurl, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_platformConvertToExposureMultiple(final) {\r\n      var ekaConvertToExposureMultiple = req.body.propertyList.platform_url + '/spring/liquidityManagement/exposure';\r\n      var ekaConvertToExposureMultipleurl = {\r\n        method: 'POST',\r\n        url: ekaConvertToExposureMultiple,\r\n        body: final,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        json: true\r\n      };\r\n      return new Promise(function(resolve, reject) {\r\n        request(ekaConvertToExposureMultipleurl, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    if (req.body.forecastId.length > 1) {\r\n      get_mergeResponse()\r\n        .then(mergeRes => {\r\n          console.log(mergeRes.forecasts);\r\n          var final = mergeRes.forecasts.map(eachObj => {\r\n            console.log(eachObj);\r\n            return {\r\n              externalRefNo: req.body.hasOwnProperty('externalRefNo') ? data.externalRefNo : null,\r\n              exposureDate: eachObj.transactionDate,\r\n              classification: req.body.classification,\r\n              currency: eachObj.currency,\r\n              remarks: null,\r\n              amount: eachObj.amount,\r\n              entityName: eachObj.entity,\r\n              profitCenter: req.body.hasOwnProperty('profileCenter') ? req.body.profileCenter : null,\r\n              strategy: req.body.hasOwnProperty('strategy') ? req.body.strategy : null,\r\n              entity: eachObj.entity,\r\n              direction: eachObj.direction,\r\n              linkedForeCastIds: req.body.forecastId\r\n            };\r\n          });\r\n          console.log(final);\r\n          get_platformConvertToExposureMultiple(final).then(exposureRes => {\r\n            console.log(exposureRes);\r\n            res.status(200).send({ msg: 'Forecast converted to Exposure successfully' });\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n          res.status(500).send({ msg: 'failed to convert' });\r\n        });\r\n    } else {\r\n      get_platformConvertToExposure()\r\n        .then(function(ent) {\r\n          res.status(200).send({ msg: 'Forecast converted to Exposure successfully' });\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n          res.status(500).send({ msg: 'failed to convert' });\r\n        });\r\n    }\r\n  ",
  "sys__UUID": "73c1b7b6-2923-4c33-a4c2-f8e43bda75f6",
  "sys__createdBy": "avinash"
}
