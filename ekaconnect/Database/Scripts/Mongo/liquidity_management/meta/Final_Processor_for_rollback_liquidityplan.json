{
  "_id": "Final_Processor_for_rollback_liquidityplan",
  "name": "Final_Processor_for_rollback",
  "type": "processor",
  "refType": "app",
  "refTypeId": "d88e9a79-c0cc-4c28-bb01-ee56ff33048e",
  "snippet": "var moment = require(\"moment\");\r\nvar ekaliquidityplan =\r\n  req.body.propertyList.platform_url +\r\n  \"/spring/liquidityManagement/liquidityPlan/\" +\r\n  req.body.liquidityPlanId +\r\n  \"?action=rollback\";\r\nvar ekaliquidityplanurl = {\r\n  method: \"PUT\",\r\n  url: ekaliquidityplan,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformLiquidityPlan = function get_platformLiquidityPlan() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(ekaliquidityplanurl, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject({ ...body, statusCode: response.statusCode });\r\n      }\r\n    });\r\n  });\r\n};\r\nget_platformLiquidityPlan()\r\n  .then(function (ent) {\r\n    res.status(200).send({ msg: \"Liquidity Plan Rolled Back Successfully\" });\r\n  })\r\n  .catch((err) => {\r\n    console.error(err);\r\n    let message = \"Failed to Create\";\r\n    if (err.statusCode >= 400 && err.statusCode <= 499 && err.message) {\r\n      message = err.message;\r\n    } else if (err.message.includes(\"Cannot rollback plan past planStartDate\"))\r\n      message = \"Cannot rollback plan past planStartDate\";\r\n    else if (\r\n      err.message.includes(\"Can only rollback submitted liquidity plans\")\r\n    )\r\n      message = \"Can only rollback submitted liquidity plans\";\r\n    res.status(err.statusCode).send(message);\r\n  });\r\n",
  "sys__UUID": "1e55ae55-f4a0-428a-add7-acbcec4c7a9e"
}
