{
    "_id" : "_SETAPPROVAL_INCOMPLETEREASON_POST_",
    "name" : "_SETAPPROVAL_INCOMPLETEREASON_POST_",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "467a28cc-bc93-4e38-8ff5-0a56ae128f3b",
    "snippet" : "// send DAta in Incomplete Reason/setforapproval\r\nlet incomplereReasonData = req.body;\r\nlet incompleteReasonPayload = {};\r\nlet selectedData = JSON.parse(req.body.approveSelectedData);\r\n\r\nincompleteReasonPayload['gmrApprovalStatus'] = incomplereReasonData.gmrApprovalStatus;\r\nif (incomplereReasonData.gmrApprovalStatus == 'Incomplete' && incomplereReasonData.gmrIncompleteReason != null) {\r\n    incompleteReasonPayload['gmrIncompleteReason'] = incomplereReasonData.gmrIncompleteReason.toString();\r\n} else if (\r\n    incomplereReasonData.gmrApprovalStatus == 'Incomplete' &&\r\n    incomplereReasonData.gmrIncompleteReason == null\r\n) {\r\n    incompleteReasonPayload['gmrIncompleteReason'] = '';\r\n} else {\r\n    incompleteReasonPayload['gmrIncompleteReason'] = incomplereReasonData.gmrIncompleteReason;\r\n}\r\nincompleteReasonPayload['internalGMRRefNo'] =\r\n    incomplereReasonData.intGmrRefNo ||\r\n    incomplereReasonData.internalGmrRefNo ||\r\n    incomplereReasonData.internalGMRRefNo;\r\nincompleteReasonPayload['gmrRefNo'] = incomplereReasonData.gmrRefNo;\r\nincompleteReasonPayload['stockList'] = [];\r\nincompleteReasonPayload['pcdiId'] = '';\r\nincompleteReasonPayload['elementList'] = [];\r\nincompleteReasonPayload['supplierElementList'] = [];\r\nincompleteReasonPayload['materialClassification'] = '';\r\nincompleteReasonPayload['itemQty'] = '';\r\nincompleteReasonPayload['modeOfTransport'] = '';\r\nincompleteReasonPayload['loadingDate'] = '';\r\nincompleteReasonPayload['expectedTimeOfArrival'] = '';\r\nincompleteReasonPayload['activityDate'] = '';\r\nincompleteReasonPayload['noOfContainers'] = '';\r\nincompleteReasonPayload['supplierRefNo'] = '';\r\nincompleteReasonPayload['isApplyContainerCharge'] = '';\r\nincompleteReasonPayload['useBolidenAssay'] = '';\r\nincompleteReasonPayload['portalUserDetails'] = {};\r\nincompleteReasonPayload['itemQualityId'] = '';\r\nincompleteReasonPayload['itemIncoTermId'] = '';\r\nincompleteReasonPayload['itemIncoTermCityId'] = '';\r\nincompleteReasonPayload['itemIncoTermCountryId'] = '';\r\nincompleteReasonPayload['qtyUnitId'] = '';\r\nincompleteReasonPayload['loadingCountryId'] = '';\r\nincompleteReasonPayload['dischargeCountryId'] = '';\r\nincompleteReasonPayload['dischargeCityId'] = '';\r\nincompleteReasonPayload['countryOfOriginCountryId'] = '';\r\nincompleteReasonPayload['comments'] = '';\r\nincompleteReasonPayload['specialInstructions'] = '';\r\nincompleteReasonPayload['createSupplierAssay'] = '';\r\nincompleteReasonPayload['vesselName'] = '';\r\nincompleteReasonPayload['suppRepId'] = '';\r\nincompleteReasonPayload['senderId'] = '';\r\nincompleteReasonPayload['sendersAddress'] = '';\r\nincompleteReasonPayload['loadingCityId'] = '';\r\nconsole.log('stringifyDAta-IncompReason', JSON.stringify(incompleteReasonPayload));\r\n\r\nvar userinfo = {\r\n    method: 'GET',\r\n    url: req.body.propertyList.platform_url + '/cac-security/api/userinfo?filter=all',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        Authorization: req.headers.authorization\r\n    }\r\n};\r\n\r\nfunction get_userinfo() {\r\n    return new Promise(function (resolve, reject) {\r\n        console.log('Request - ' + userinfo.url);\r\n        request(userinfo, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            } else {\r\n                reject(err || body);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nvar userInfoResponse = {};\r\n\r\nvar gmrApprovalApi = {\r\n    method: 'POST',\r\n    url: req.body.propertyList.eka_ctrm_host + '/api/logistic/gmrApproval',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    body: incompleteReasonPayload,\r\n    json: true\r\n};\r\n\r\nfunction get_gmrApprovalApi() {\r\n    return new Promise(function (resolve, reject) {\r\n        console.log('Request - ' + gmrApprovalApi.url);\r\n        request(gmrApprovalApi, function (err, response, body) {\r\n            console.log('Response - ' + body);\r\n            console.log('Errors - ' + err);\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                console.log('Success');\r\n                resolve(body);\r\n            } else {\r\n                console.log('errors');\r\n                let errorMsg = '';\r\n                if (\r\n                    body.hasOwnProperty('ErrorList: ') &&\r\n                    Array.isArray(body['ErrorList: ']) &&\r\n                    body['ErrorList: '].length > 0\r\n                ) {\r\n                    for (let i = 0; i < body['ErrorList: '].length; i++) {\r\n                        if (i != body['ErrorList: '].length - 1) {\r\n                            errorMsg = errorMsg + body['ErrorList: '][i] + ' ,';\r\n                        } else {\r\n                            errorMsg = errorMsg + body['ErrorList: '][i];\r\n                        }\r\n                    }\r\n                }\r\n                if (errorMsg != '') {\r\n                    reject(errorMsg);\r\n                } else {\r\n                    console.log(body.error);\r\n                    reject(err || body);\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nget_userinfo().then(function (result) {\r\n    userInfoResponse = JSON.parse(result);\r\n    incompleteReasonPayload['portalUserDetails'] = {\r\n        \"contactDetails\": \"\",\r\n        \"bankDetails\": \"\",\r\n        \"userName\": userInfoResponse.userName,\r\n        \"createFirstName\": userInfoResponse.firstName,\r\n        \"createLastName\": userInfoResponse.lastName,\r\n        \"updateFirstName\": userInfoResponse.firstName,\r\n        \"updateLastName\": userInfoResponse.lastName,\r\n        \"email\": userInfoResponse.email,\r\n        \"mobile\": \"\",\r\n        \"phone\": \"\",\r\n        \"fax\": \"\",\r\n        \"address\": \"\",\r\n        \"country\": \"\",\r\n        \"state\": \"\",\r\n        \"city\": \"\",\r\n        \"zipcode\": \"\",\r\n        \"website\": \"\"\r\n    };\r\n    get_gmrApprovalApi()\r\n        .then(function (result) {\r\n            res.status(200).send(result);\r\n            if (incompleteReasonPayload.gmrApprovalStatus != 'Approved') {\r\n\r\n                var moment = require('moment');\r\n                let emailPayload2 = {};\r\n\r\n                var emailUser = {\r\n                    method: 'POST',\r\n                    url: req.body.propertyList.eka_supplierconnect_host + '/collection/sendGMREmail',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Accept: 'application/json',\r\n                        Authorization: req.headers.authorization,\r\n                        'X-TenantID': req.headers['x-tenantid']\r\n                    },\r\n                    body: emailPayload2,\r\n                    json: true\r\n                };\r\n\r\n                function get_emailuser() {\r\n                    return new Promise(function (resolve, reject) {\r\n                        console.log('Request - ' + emailUser.url);\r\n                        request(emailUser, function (err, response, body) {\r\n                            console.log('Response - ' + body);\r\n                            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                                console.log('Success');\r\n                                resolve(body);\r\n                            } else {\r\n                                console.log(body.error);\r\n                                reject(err || body);\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n\r\n                function get_businesspartner_collection() {\r\n                    var businessPartner = {\r\n                        method: 'POST',\r\n                        url: req.body.propertyList.eka_connect_host + '/collectionmapper/467a28cc-bc93-4e38-8ff5-0a56ae128f3b/User_Info/fetchCollectionRecords',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'X-TenantID': req.headers['x-tenantid'],\r\n                            'ttl': 0,\r\n                            Accept: 'application/json',\r\n                            Authorization: req.headers.authorization\r\n                        },\r\n                        body: {\r\n                            \"collectionName\": \"Business Partners\",\r\n                            \"getAllRecords\": true\r\n                        },\r\n                        json: true\r\n                    };\r\n                    return new Promise(function (resolve, reject) {\r\n                        request(businessPartner, function (err, response, body) {\r\n                            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                                resolve(body);\r\n                            } else {\r\n                                reject(err || body);\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n\r\n\r\n                emailPayload2['supplierName'] = userInfoResponse.firstName + ' ' + userInfoResponse.lastName;//logged in username\r\n                emailPayload2['qualityName'] = selectedData.qualityName\r\n                    ? selectedData.qualityName\r\n                    : selectedData.productSpecs;\r\n                emailPayload2['cpName'] = selectedData.supplier ? selectedData.supplier : selectedData.cpname; //suuppplier\r\n                emailPayload2['incoLocation'] = selectedData.inco_terms\r\n                    ? selectedData.inco_terms\r\n                    : selectedData.dischargeLocation;\r\n                emailPayload2['GmrRefNo'] = selectedData.gmrRefNo;\r\n                emailPayload2['gmr_create_date'] = selectedData.createdDate;\r\n                emailPayload2['subject'] = incompleteReasonPayload.gmrApprovalStatus == 'Incomplete' ? 'gmr_approval_incomplete_subject' : 'gmr_approval_update_subject';\r\n                emailPayload2['mail_body'] = incompleteReasonPayload.gmrApprovalStatus == 'Incomplete' ? 'gmr_approval_incomplete_mailbody' : 'gmr_approval_updated_mailbody';\r\n                incompleteReasonPayload.gmrApprovalStatus == 'Incomplete' ? emailPayload2['incompleteReason'] = incompleteReasonPayload.gmrIncompleteReason : '';\r\n                emailPayload2['gmr_mail_fromAddr'] = 'gmr_mail_fromAddr';\r\n                emailPayload2['approvalStatus'] =\r\n                    incompleteReasonPayload.gmrApprovalStatus == 'Approved' ? 'Update' : 'Incomplete';\r\n                emailPayload2['loadingDate'] = selectedData.loadingDate;\r\n                emailPayload2['estimatedArrivalDate'] = selectedData.eta;\r\n                emailPayload2['destination'] = selectedData.dischargeCityName\r\n                    ? selectedData.dischargeCityName\r\n                    : selectedData.dischargeLocation; //dischargeCityName\r\n                emailPayload2['countryOfOrigin'] = selectedData.countryOfOriginCountryName;\r\n                if (selectedData.loadingCountry) { emailPayload2['countryOfLoading'] = selectedData.loadingCountry; }\r\n                if (selectedData.loadingCountryName) { emailPayload2['countryOfLoading'] = selectedData.loadingCountryName; }\r\n                emailPayload2['email'] = userInfoResponse.email;\r\n                emailPayload2['approval_date'] = moment(new Date()).format('DD-MMM-YYYY');\r\n                emailPayload2[\"roles\"] = [\"Supplier User Advice\"];\r\n                get_businesspartner_collection.apply().then(function (businessPartnerCollectionArray) {\r\n                    let filteredBp = businessPartnerCollectionArray\r\n                        .filter(bpObj => (bpObj[\"BP Name\"] === selectedData.supplier))\r\n                        .map(bpObj => {\r\n                            return bpObj['BP Ref No.']\r\n                        });\r\n                    emailPayload2[\"businessPartner\"] = filteredBp;\r\n                    console.log(emailPayload2);\r\n                    get_emailuser().then(function (result) {\r\n                        console.log(result);\r\n                    });\r\n                });\r\n            }\r\n        }).catch(function (err) {\r\n            console.log(err);\r\n            res.status(500).send(err);\r\n        });\r\n}).catch(function (err) {\r\n    console.log(err);\r\n    res.status(500).send(err);\r\n});\r\n",
    "sys__UUID" : "3a87121c-4986-4f5e-af1c-8f88ec3247fc"
}