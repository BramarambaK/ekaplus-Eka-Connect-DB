{
    "_id" : "_READY_FOR_APPROVAL_PROCESSOR_SC",
    "name" : "_READY_FOR_APPROVAL_PROCESSOR",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "467a28cc-bc93-4e38-8ff5-0a56ae128f3b",
    "snippet" : "// approvalStatus API Processor when Ready for approval button\r\nlet approveData = req.body;\r\nlet approvalPayload = {};\r\nlet emailPayload = JSON.parse(req.body.mail_body); //287a\r\napprovalPayload['gmrApprovalStatus'] = approveData.gmrApprovalStatus == 'Draft' ? 'Ready for Approval' : approveData.gmrApprovalStatus;\r\nif (approveData.gmrApprovalStatus == 'Incomplete') {\r\n    approvalPayload['gmrApprovalStatus'] = approveData.gmrApprovalStatus == 'Incomplete' ? 'Ready for Approval' : approveData.gmrApprovalStatus;\r\n}\r\nif (approvalPayload.gmrApprovalStatus.includes(\"Incomplete\")) { //ad 0508\r\n    approvalPayload['gmrApprovalStatus'] = 'Ready for Approval'\r\n}\r\napprovalPayload['gmrIncompleteReason'] = approveData.gmrIncompleteReason;\r\napprovalPayload['internalGMRRefNo'] = approveData.internalGMRRefNo;\r\napprovalPayload['gmrRefNo'] = approveData.gmrRefNo;\r\napprovalPayload['stockList'] = [];\r\napprovalPayload['pcdiId'] = '';\r\napprovalPayload['elementList'] = [];\r\napprovalPayload['supplierElementList'] = [];\r\napprovalPayload['materialClassification'] = '';\r\napprovalPayload['itemQty'] = '';\r\napprovalPayload['modeOfTransport'] = '';\r\napprovalPayload['loadingDate'] = '';\r\napprovalPayload['expectedTimeOfArrival'] = '';\r\napprovalPayload['activityDate'] = '';\r\napprovalPayload['noOfContainers'] = '';\r\napprovalPayload['supplierRefNo'] = '';\r\napprovalPayload['isApplyContainerCharge'] = '';\r\napprovalPayload['useBolidenAssay'] = '';\r\napprovalPayload['portalUserDetails'] = {};\r\napprovalPayload['itemQualityId'] = '';\r\napprovalPayload['itemIncoTermId'] = '';\r\napprovalPayload['itemIncoTermCityId'] = '';\r\napprovalPayload['itemIncoTermCountryId'] = '';\r\napprovalPayload['qtyUnitId'] = '';\r\napprovalPayload['loadingCountryId'] = '';\r\napprovalPayload['dischargeCountryId'] = '';\r\napprovalPayload['dischargeCityId'] = '';\r\napprovalPayload['countryOfOriginCountryId'] = '';\r\napprovalPayload['comments'] = '';\r\napprovalPayload['specialInstructions'] = '';\r\napprovalPayload['createSupplierAssay'] = '';\r\napprovalPayload['vesselName'] = '';\r\napprovalPayload['suppRepId'] = '';\r\napprovalPayload['senderId'] = '';\r\napprovalPayload['sendersAddress'] = '';\r\napprovalPayload['loadingCityId'] = '';\r\n\r\nvar gmrApprovalApi = {\r\n    method: 'POST',\r\n    url: req.body.propertyList.eka_ctrm_host + '/api/logistic/gmrApproval',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    body: approvalPayload,\r\n    json: true\r\n};\r\n\r\nvar userinfo = {\r\n    method: 'GET',\r\n    url: req.body.propertyList.eka_connect_host + '/api/userinfo',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    }\r\n}\r\n\r\nfunction get_userinfo() {\r\n    return new Promise(function (resolve, reject) {\r\n        request(userinfo, function (err, response, body) {\r\n            console.log('ApprovalUserInfo ' + body);\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            } else {\r\n                reject(err || body)\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nvar userInfoResponse = {};\r\n\r\nfunction get_gmrApprovalApi() {\r\n    return new Promise(function (resolve, reject) {\r\n        request(gmrApprovalApi, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            } else {\r\n                let errorMsg = '';\r\n                if (\r\n                    body.hasOwnProperty('ErrorList: ') &&\r\n                    Array.isArray(body['ErrorList: ']) &&\r\n                    body['ErrorList: '].length > 0\r\n                ) {\r\n                    for (let i = 0; i < body['ErrorList: '].length; i++) {\r\n                        if (i != body['ErrorList: '].length - 1) {\r\n                            errorMsg = errorMsg + body['ErrorList: '][i] + ' ,';\r\n                        } else {\r\n                            errorMsg = errorMsg + body['ErrorList: '][i];\r\n                        }\r\n                    }\r\n                }\r\n                if (errorMsg != '') {\r\n                    reject(errorMsg);\r\n                } else {\r\n                    reject(err || body);\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\nvar moment = require('moment');\r\nlet emailPayload1 = {}\r\n\r\nget_userinfo().then(function (result) {\r\n    userInfoResponse = JSON.parse(result);\r\n    approvalPayload['portalUserDetails'] = {\r\n        \"contactDetails\": \"\",\r\n        \"bankDetails\": \"\",\r\n        \"userName\": userInfoResponse.userName,\r\n        \"createFirstName\": userInfoResponse.firstName,\r\n        \"createLastName\": userInfoResponse.lastName,\r\n        \"updateFirstName\": userInfoResponse.firstName,\r\n        \"updateLastName\": userInfoResponse.lastName,\r\n        \"email\": userInfoResponse.email,\r\n        \"mobile\": \"\",\r\n        \"phone\": \"\",\r\n        \"fax\": \"\",\r\n        \"address\": \"\",\r\n        \"country\": \"\",\r\n        \"state\": \"\",\r\n        \"city\": \"\",\r\n        \"zipcode\": \"\",\r\n        \"website\": \"\"\r\n    };\r\n    console.log('GMRApprovalPayload', JSON.stringify(approvalPayload));\r\n    get_gmrApprovalApi()\r\n        .then(function (result) {\r\n            res.status(200).send(result);\r\n            var emailUser = {\r\n                method: 'POST',\r\n                url: req.body.propertyList.eka_supplierconnect_host + '/collection/sendGMREmail',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Accept: 'application/json',\r\n                    Authorization: req.headers.authorization,\r\n                    'X-TenantID': req.headers['x-tenantid']\r\n                },\r\n                body: emailPayload1, //send payload here\r\n                json: true\r\n            };\r\n\r\n            function get_emailuser() {\r\n                return new Promise(function (resolve, reject) {\r\n                    request(emailUser, function (err, response, body) {\r\n                        if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                            resolve(body);\r\n                        } else {\r\n                            reject(err || body);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n\r\n            emailPayload1['supplierName'] = userInfoResponse.firstName + ' ' + userInfoResponse.lastName;//logged in use name createdBy\r\n            emailPayload1['qualityName'] = emailPayload.qualityName ? emailPayload.qualityName : emailPayload.productSpecs;\r\n            emailPayload1['cpName'] = emailPayload.supplier ? emailPayload.supplier : emailPayload.cpname; //suuppplier\r\n            emailPayload1['incoLocation'] = emailPayload.inco_terms ? emailPayload.inco_terms : emailPayload.dischargeLocation;\r\n            emailPayload1['GmrRefNo'] = approveData.gmrRefNo;\r\n            emailPayload1['gmr_create_date'] = emailPayload.createdDate;\r\n            emailPayload1['approvalStatus'] = 'Approval';\r\n            emailPayload1['subject'] = 'gmr_approval_subject';\r\n            emailPayload1['mail_body'] = 'gmr_approval_mailbody';\r\n            emailPayload1['gmr_mail_fromAddr'] = 'gmr_mail_fromAddr';\r\n            emailPayload1['loadingDate'] = emailPayload.loadingDate;\r\n            emailPayload1['estimatedArrivalDate'] = emailPayload.eta;\r\n            emailPayload1['destination'] = emailPayload.dischargeCityName ? emailPayload.dischargeCityName : emailPayload.dischargeLocation; //dischargeCityName 2nd flow ?\r\n            emailPayload1['countryOfOrigin'] = emailPayload.countryOfOriginCountryName;\r\n            emailPayload1['countryOfLoading'] = emailPayload.loadingCountry ? emailPayload.loadingCountry : emailPayload.loadingCountryName;\r\n            emailPayload1['email'] = userInfoResponse.email;\r\n            emailPayload1['approval_date'] = moment(new Date()).format('DD-MMM-YYYY');\r\n            get_emailuser().then(function (result) {\r\n                console.log('emailAfterApprovalResult',result);\r\n            });\r\n        })\r\n        .catch(function (err) {\r\n            res.status(500).send(err);\r\n        });\r\n}).catch(function (err) {\r\n    res.status(500).send(err);\r\n});",
    "sys__UUID" : "94150a7e-2c9f-4ad9-9d7a-213770e9344c"
}