{
    "_id" : "editgmrbasicprocessor_SC",
    "name" : "editgmrbasic",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "467a28cc-bc93-4e38-8ff5-0a56ae128f3b",
    "snippet" : " if (req.body.hasOwnProperty('selectedData') && req.body['selectedData'].hasOwnProperty('internalGmrRefNo')) {\r\n      var moment = require('moment');\r\n      var intGmrRefNo = req.body.selectedData['internalGmrRefNo'];\r\n      if (!intGmrRefNo) {\r\n        res.status(200).send(null);\r\n      }\r\n      var collection = {\r\n        method: 'POST',\r\n        url: req.body.propertyList.eka_connect_host + '\/workflow',\r\n        headers: {\r\n          'Content-Type': 'application\/json',\r\n          Accept: 'application\/json',\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        body: {\r\n          appId: '467a28cc-bc93-4e38-8ff5-0a56ae128f3b',\r\n          workflowTaskName: 'viewgmrdata_SC',\r\n          task: 'viewgmrdata_SC',\r\n          payLoadData: '',\r\n          output: {\r\n            viewgmrdata_SC: {\r\n              intGmrRefNo: intGmrRefNo\r\n            }\r\n          }\r\n        },\r\n        json: true\r\n      };\r\n\r\n      var connectGmr = {\r\n        method: 'GET',\r\n        url:\r\n          req.body.propertyList.eka_connect_host +\r\n          '\/data\/' +\r\n          req.body.appId +\r\n          '\/' +\r\n          'c05cacf5-200c-4d97-8e8d-a67329ff286c' +\r\n          '?GmrRefNo=' +\r\n          req.body.selectedData['gmrRefNo'],\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n\r\n        json: true\r\n      };\r\n\r\n      function get_collection() {\r\n        return new Promise(function(resolve, reject) {\r\n          console.log('Request - ' + collection.url);\r\n          console.log('Payload -' + JSON.stringify(collection));\r\n          request(collection, function(err, response, body) {\r\n            console.log('Response - ' + JSON.stringify(body));\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          });\r\n        });\r\n      }\r\n\r\n      function get_GmrDetails() {\r\n        return new Promise(function(resolve, reject) {\r\n          console.log('Request - ' + connectGmr.url);\r\n          console.log('Payload -' + JSON.stringify(connectGmr));\r\n          request(connectGmr, function(err, response, body) {\r\n            console.log('Response - ' + JSON.stringify(body));\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          });\r\n        });\r\n      }\r\n      function getDate(date) {\r\n        var today = new Date(date);\r\n        var dd = today.getDate();\r\n        var mm = today.getMonth() + 1;\r\n\r\n        var yyyy = today.getFullYear();\r\n        if (dd < 10) {\r\n          dd = '0' + dd;\r\n        }\r\n        if (mm < 10) {\r\n          mm = '0' + mm;\r\n        }\r\n        var today = mm + '-' + dd + '-' + yyyy;\r\n        return today;\r\n      }\r\n      function createFromDate(date) {\r\n        if (date.includes(' To ')) {\r\n          return moment(date.split(' To ')[0]).format('DD-MMM-YYYY');\r\n        } else {\r\n          date = moment(date).format('DD-MMM-YYYY');\r\n          return date;\r\n        }\r\n      }\r\n      function createToDate(date) {\r\n        if (date.includes(' To ')) {\r\n          if( moment(date.split(' To ')[1], 'MMM YYYY').format(\"MMM YYYY\") === date.split(' To ')[1]){\r\n            return moment(date.split(' To ')[1]).endOf('month').format(\"DD-MMM-YYYY\")\r\n          }\r\n          return moment(date.split(' To ')[1]).format('DD-MMM-YYYY');\r\n        } else {\r\n          date = moment(date).format('DD MMM YYYY');\r\n          date = moment(date)\r\n            .endOf('month')\r\n            .format('DD-MMM-YYYY');\r\n          return date;\r\n        }\r\n      }\r\n      Promise.all([get_collection(), get_GmrDetails()])\r\n        .then(function(result) {\r\n          var data = {};\r\n          let connectData = {};\r\n          if (result[1] && Array.isArray(result[1]) && result[1].length > 0) {\r\n            connectData['particleSize'] = result[1][0]['particleSize'];\r\n            connectData['MaterialDescription'] = result[1][0]['MaterialDescription'];\r\n            connectData['maxLotSize'] = result[1][0]['maxLotSize'];\r\n          }\r\n          result[0] = result[0]['data'];\r\n          result[0] = { ...connectData, ...result[0] };\r\n          data.particleSize = result[0].particleSize;\r\n          data['fromDate'] = createFromDate(result[0].quotaMonth);\r\n          data['toDate'] = createToDate(result[0].quotaMonth);\r\n\t\t  data['currentDate'] = moment(new Date()).format('YYYY-MM-DD');\r\n          data.MaterialDescription = result[0].comments;\r\n          data.comments = result[0].comments;\r\n          data.maxLotSize = result[0].maxLotSize;\r\n          data.CountryOfOrigin = result[0].countryOfOriginCountryName;\r\n          data.LoadingLocationCountryDisplayName = result[0].loadingCountryName;\r\n          result[0].eta = getDate(result[0].eta);\r\n          data.ExpectedArrivalDate = result[0].eta;\r\n          result[0].loadingDate = getDate(result[0].loadingDate);\r\n          data.LoadingDate = result[0].loadingDate;\r\n          data.materialClassification = result[0].materialClassification; \/\/0807\r\n          data.EditLocationCity = result[0].loadingCityName;\r\n          data.LoadingLocationCountry = result[0].loadingCountryName;\r\n          data.SupplierRepresentative = result[0].supplierRepresentaive == null ? \"None\" : result[0].supplierRepresentaive;\r\n          data.cpAddress = result[0].supplierAddress;\r\n          data.cpName = result[0].supplier;\r\n          data.deliveryItemRefNo = result[0].deliveryItemRefNo;\r\n          data.Quality = result[0].qualityName;\r\n          data.qualityName = result[0].qualityName;\r\n          result[0].inco_terms = result[0].inco_terms\r\n            ? result[0].inco_terms.split(',')[1] + ',' + ' ' + result[0].inco_terms.split(',')[2]\r\n            : result[0].inco_terms;\r\n          data.incoLocation = result[0].dischargeCityName + ', ' + result[0].dischargeCountryName;\r\n          data.incoLocationDisplayName = data.incoLocation;\r\n          data.dischargeCityId = result[0].dischargeCityName;\r\n          data.dischargeCountryId = result[0].dischargeCountryName;\r\n          data.SupplierReference = result[0].sendersRefNo;\r\n          data.advicedNetweight = result[0].netWeight + result[0].netWeightUnit;\r\n          if (parseInt(result[0].noOfContainers) > 0) data.containerFlag = 'Yes';\r\n          else data.containerFlag = 'No';\r\n          console.log('Response - ' + JSON.stringify(data));\r\n          res.status(200).send(data);\r\n        })\r\n        .catch(err => {\r\n          console.log('Error Executing Processor -' + err);\r\n          res.status(500).send(err);\r\n        });\r\n    } else {\r\n      res.status(200).send(null);\r\n    }",
    "sys__UUID" : "ec83540d-2bcb-44bc-9b78-cfaf5ea2a0c8"
}