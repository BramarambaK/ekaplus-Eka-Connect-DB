{
  "_id": "viewprofile_processor_supplierconnect",
  "name": "viewprofile",
  "type": "processor",
  "refType": "app",
  "refTypeId": "467a28cc-bc93-4e38-8ff5-0a56ae128f3b",
  "snippet":" var platform_data = {\r\n      method: 'GET',\r\n      url: req.body.propertyList.platform_url + '\/spring\/smartapp\/currentUser',\r\n      headers: {\r\n        Authorization: req.headers.authorization\r\n      },\r\n      json: true\r\n    };\r\n    var platform = {\r\n      method: 'GET',\r\n      url: req.body.propertyList.eka_connect_host + '\/property\/platform_url',\r\n      headers: {\r\n        'Content-Type': 'application\/json',\r\n        Accept: 'application\/json',\r\n        username: 'e-bolprpa',\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    var roles = {\r\n      method: 'GET',\r\n      url: '\/cac-security\/api\/userinfo?filter=all',\r\n      headers: {\r\n        'Content-Type': 'application\/json',\r\n        Authorization: req.headers.authorization\r\n      },\r\n      json: true\r\n    };\r\n    var companies = {\r\n      method: 'GET',\r\n      url: req.body.propertyList.platform_url + '\/spring\/customers\/getBusinessPartyDetails',\r\n      headers: {\r\n        'Content-Type': 'application\/json',\r\n        Accept: 'application\/json',\r\n        Authorization: req.headers.authorization\r\n      },\r\n      json: true\r\n    };\r\n    let companies_data;\r\n    function get_companies() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(companies, function (err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_platform_data() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(platform_data, function (err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_platform() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(platform, function (err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_roles(platform_url) {\r\n      return new Promise(function (resolve, reject) {\r\n        roles.url = platform_url + roles.url;\r\n        request(roles, function (err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    get_platform()\r\n      .then(result => {\r\n        var data = {};\r\n        var platform_url = result.propertyValue;\r\n        get_companies().then(function (result) {\r\n          companies_data = result.data;\r\n          if (companies_data) {\r\n            Promise.all([get_platform_data(), get_roles(platform_url)]).then(function (result) {\r\n              var collection = [];\r\n              let platform_data = result[0];\r\n              let roles = result[1];\r\n              var output = {};\r\n\r\n              collection.push({ ...platform_data.data });\r\n              collection[0]['userRole'] = [];\r\n              collection[0]['company'] = [];\r\n              if (roles && roles.roles) {\r\n                for (let i = 0; i < platform_data.data.userRole.length; i++) {\r\n                  for (let j = 0; j < roles.roles.length; j++) {\r\n                    if (platform_data.data.userRole[i] == roles.roles[j].id) {\r\n                      collection[0]['userRole'].push(roles.roles[j].name);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              for (let i = 0; i < companies_data.length; i++) {\r\n                collection[0]['company'].push(companies_data[i]['c2']);\r\n              }\r\n              collection[0]['company'] = collection[0]['company'].toString();\r\n              collection[0]['company'] = collection[0]['company'].split(',').join(', ');\r\n              collection[0]['userRole'] = collection[0]['userRole'].toString();\r\n              collection[0]['userRole'] = collection[0]['userRole'].split(',').join(', ');\r\n              collection['username'] = platform_data.data.emailAddress;\r\n              platform_data.data.address.length <= 0 ? collection['address'] = '' : collection['address'] = platform_data.data.address[0].street;\r\n              collection = JSON.parse(\r\n                JSON.stringify(collection)\r\n                  .split('\"emailAddress\":')\r\n                  .join('\"email\":')\r\n              );\r\n              collection = JSON.parse(\r\n                JSON.stringify(collection)\r\n                  .split('\"mobileno\":')\r\n                  .join('\"mobile\":')\r\n              );\r\n              collection = JSON.parse(\r\n                JSON.stringify(collection)\r\n                  .split('\"phoneCountryCode\":')\r\n                  .join('\"phCountryCode\":')\r\n              );\r\n              collection = JSON.parse(\r\n                JSON.stringify(collection)\r\n                  .split('\"phoneno\":')\r\n                  .join('\"phone\":')\r\n              );\r\n\r\n              console.log(collection[0]);\r\n              res.status(200).send(collection);\r\n            });\r\n          } else {\r\n            Promise.all([, get_platform_data(), get_roles(platform_url)]).then(function (result) {\r\n              let collection = [];\r\n              let platform_data = result[1];\r\n              let roles = result[2];\r\n              collection.push({ ...platform_data.data });\r\n              collection[0]['userRole'] = [];\r\n              if (roles && roles.roles) {\r\n                for (let i = 0; i < platform_data.data.userRole.length; i++) {\r\n                  for (let j = 0; j < roles.roles.length; j++) {\r\n                    if (platform_data.data.userRole[i] == roles.roles[j].id) {\r\n                      collection[0]['userRole'].push(roles.roles[j].name);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              collection[0]['userRole'] = collection[0]['userRole'].toString();\r\n              collection[0]['userRole'] = collection[0]['userRole'].split(',').join(', ');\r\n              collection['username'] = platform_data.data.emailAddress;\r\n              collection['address'] = platform_data.data.address[0].street;\r\n              collection = JSON.parse(\r\n                JSON.stringify(collection)\r\n                  .split('\"emailAddress\":')\r\n                  .join('\"email\":')\r\n              );\r\n              collection = JSON.parse(\r\n                JSON.stringify(collection)\r\n                  .split('\"mobileno\":')\r\n                  .join('\"mobile\":')\r\n              );\r\n              collection = JSON.parse(\r\n                JSON.stringify(collection)\r\n                  .split('\"phoneCountryCode\":')\r\n                  .join('\"phCountryCode\":')\r\n              );\r\n              collection = JSON.parse(\r\n                JSON.stringify(collection)\r\n                  .split('\"phoneno\":')\r\n                  .join('\"phone\":')\r\n              );\r\n              console.log(collection[0]);\r\n              res.status(200).send(collection);\r\n            });\r\n          }\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.log('Error->' + err);\r\n        res.status(500).send(err);\r\n      });",
  "sys__UUID": "e0a1bd51-54e8-4d91-a9d6-8b5d9e6a14eb"
}
