{
  "_id": "_EDIT_UPDATEDDATA_PROCESSOR_SC",
  "name": "_EDIT_UPDATEDDATA_PROCESSOR_SC",
  "type": "processor",
  "refType": "app",
  "refTypeId": "467a28cc-bc93-4e38-8ff5-0a56ae128f3b",
  "snippet": "\/\/ packaging Submit\r\nvar moment = require('moment');\r\nvar updatedData = req.body.allSelectedData;\r\nlet intGmrRefNo = updatedData.supplierlisting.internalGmrRefNo || '';\r\nlet deliveryItemRefNo = updatedData.supplierlisting.deliveryItemRefNo || '';\r\nlet pcdiId = '';\r\nlet object = {};\r\nlet payLoad1 = {};\r\nlet qtyUnitId = '';\r\nlet notificationPayload = {};\r\nlet qualMdmDATA = [];\r\nlet destMdmDATA = [];\r\n\r\nvar viewgmr = {\r\n    method: 'POST',\r\n    url: req.body.propertyList.eka_connect_host + '\/workflow',\r\n    headers: {\r\n        'Content-Type': 'application\/json',\r\n        Accept: 'application\/json',\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    body: {\r\n        appId: '467a28cc-bc93-4e38-8ff5-0a56ae128f3b',\r\n        workflowTaskName: 'viewgmrdata_SC',\r\n        task: 'viewgmrdata_SC',\r\n        payLoadData: '',\r\n        output: {\r\n            ['viewgmrdata_SC']: {\r\n                ['intGmrRefNo']: intGmrRefNo\r\n            }\r\n        }\r\n    },\r\n    json: true\r\n};\r\nvar notificationElastic = {\r\n    method: 'POST',\r\n    url: req.body.propertyList.eka_connect_host + '\/workflow\/notifyDataChange',\r\n    headers: {\r\n        'Content-Type': 'application\/json',\r\n        Accept: 'application\/json',\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    body: {\r\n        app: 'supplierconnect',\r\n        object: 'supplier',\r\n        objectAction: 'Update',\r\n        appId: '467a28cc-bc93-4e38-8ff5-0a56ae128f3b',\r\n        payload: [notificationPayload]\r\n    },\r\n    json: true\r\n};\r\nfunction get_viewgmr() {\r\n    return new Promise(function (resolve, reject) {\r\n        console.log('Request - ' + viewgmr.url);\r\n        console.log('Payload -' + JSON.stringify(viewgmr));\r\n        request(viewgmr, function (err, response, body) {\r\n            console.log('Request Body - ' + JSON.stringify(body));\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                console.log('Success');\r\n                resolve(body);\r\n            } else {\r\n                console.log(body.error);\r\n                reject(err || body);\r\n            }\r\n        });\r\n    });\r\n}\r\nget_viewgmr()\r\n    .then(result => {\r\n        let pcdid = result.data.pcdiId;\r\n        pcdiId = pcdid;\r\n        function getDropdown(data) {\r\n            var businesspartnercontactperson = [\r\n                {\r\n                    serviceKey: 'countriesComboDataFromDB',\r\n                    dependsOn: []\r\n                },\r\n                {\r\n                    serviceKey: 'loose',\r\n                    dependsOn: []\r\n                },\r\n                {\r\n                    serviceKey: 'countriesComboDataFromDB',\r\n                    dependsOn: []\r\n                },\r\n                {\r\n                    serviceKey: 'incoTermDestination',\r\n                    dependsOn: [pcdiId, deliveryItemRefNo]\r\n                },\r\n                {\r\n                    serviceKey: 'contractQuality',\r\n                    dependsOn: [pcdiId, deliveryItemRefNo]\r\n                },\r\n                {\r\n                    serviceKey: 'businesspartnercontactperson',\r\n                    dependsOn: ['INSPECTIONAGENCY']\r\n                }\r\n            ];\r\n            if (data) {\r\n                businesspartnercontactperson = data;\r\n            }\r\n            var obj = {\r\n                method: 'POST',\r\n                body: businesspartnercontactperson,\r\n                url: `${req.body.propertyList.eka_mdm_host}\/mdm\/${req.body.appId}\/data`,\r\n                headers: {\r\n                    Authorization: req.headers.authorization,\r\n                    'Content-Type': 'application\/json',\r\n                    'X-TenantID': req.headers['X-TenantID']\r\n                },\r\n                json: true\r\n            };\r\n            console.log('mdm url', obj.url);\r\n            return new Promise(function (resolve, reject) {\r\n                request(obj, function (err, response, body) {\r\n                    if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                        console.log('Success');\r\n                        resolve(body);\r\n                    } else {\r\n                        console.log(body.error);\r\n                        reject(err || body);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        getDropdown()\r\n            .then(output => {\r\n                var qualityMDM = {\r\n                    method: 'POST',\r\n                    url: req.body.propertyList.eka_supplierconnect_host + '\/collection\/mdm\/entity',\r\n                    headers: {\r\n                        'Content-Type': 'application\/json',\r\n                        Accept: 'application\/json',\r\n                        Authorization: req.headers.authorization,\r\n                        'X-TenantID': req.headers['x-tenantid']\r\n                    },\r\n                    body: [\r\n                        {\r\n                            pcdiId: pcdiId,\r\n                            entity: 'contractQuality',\r\n                            deliveryItem: deliveryItemRefNo\r\n                        }\r\n                    ],\r\n                    json: true\r\n                };\r\n                function get_qualityMDM() {\r\n                    return new Promise(function (resolve, reject) {\r\n                        console.log('Request - ' + qualityMDM.url);\r\n                        console.log('Payload -' + JSON.stringify(qualityMDM));\r\n                        request(qualityMDM, function (err, response, body) {\r\n                            console.log('Request Body - ' + JSON.stringify(body));\r\n                            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                                console.log('Success');\r\n                                resolve(body);\r\n                            } else {\r\n                                console.log(body.error);\r\n                                reject(err || body);\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n                var destinationSmelter = {\r\n                    method: 'POST',\r\n                    url: req.body.propertyList.eka_supplierconnect_host + '\/collection\/mdm\/destination',\r\n                    headers: {\r\n                        'Content-Type': 'application\/json',\r\n                        Accept: 'application\/json',\r\n                        Authorization: req.headers.authorization,\r\n                        'X-TenantID': req.headers['x-tenantid']\r\n                    },\r\n                    body: [\r\n                        {\r\n                            pcdiId: pcdiId,\r\n                            entity: 'incoTermId',\r\n                            deliveryItem: deliveryItemRefNo\r\n                        }\r\n                    ],\r\n                    json: true\r\n                };\r\n                function get_destinationSmelter() {\r\n                    return new Promise(function (resolve, reject) {\r\n                        console.log('Request - ' + destinationSmelter.url);\r\n                        console.log('Payload -' + JSON.stringify(destinationSmelter));\r\n                        request(destinationSmelter, function (err, response, body) {\r\n                            console.log('Request Body - ' + JSON.stringify(body));\r\n                            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                                console.log('Success');\r\n                                resolve(body);\r\n                            } else {\r\n                                console.log(body.error);\r\n                                reject(err || body);\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n                Promise.all([get_qualityMDM(), get_destinationSmelter()])\r\n                    .then(function (resultMdm) {\r\n                        qtyUnitId = resultMdm[0].contractQuality[0].extJson[2].value;\r\n                        qualMdmDATA = resultMdm[0];\r\n                        destMdmDATA = resultMdm[1];\r\n                        var userinfo = {\r\n                            method: 'GET',\r\n                            url: req.body.propertyList.eka_connect_host + '\/api\/userinfo',\r\n                            headers: {\r\n                                'Content-Type': 'application\/json',\r\n                                Accept: 'application\/json',\r\n                                Authorization: req.headers.authorization,\r\n                                'X-TenantID': req.headers['x-tenantid']\r\n                            }\r\n                        };\r\n                        function get_userinfo() {\r\n                            return new Promise(function (resolve, reject) {\r\n                                console.log('Request - ' + userinfo.url);\r\n                                request(userinfo, function (err, response, body) {\r\n                                    console.log('Response - ' + body);\r\n                                    if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                                        console.log('Success');\r\n                                        resolve(body);\r\n                                    } else {\r\n                                        console.log(body.error);\r\n                                        reject(err || body);\r\n                                    }\r\n                                });\r\n                            });\r\n                        }\r\n                        get_userinfo()\r\n                            .then(function (resultUserInfo) {\r\n                                resultUserInfo = JSON.parse(resultUserInfo);\r\n                                console.log(resultUserInfo);\r\n                                let portalUserDetails = {\r\n                                    contactDetails: '',\r\n                                    bankDetails: '',\r\n                                    userName: resultUserInfo.userName,\r\n                                    createFirstName: resultUserInfo.firstName,\r\n                                    createLastName: resultUserInfo.lastName,\r\n                                    updateFirstName: resultUserInfo.firstName,\r\n                                    updateLastName: resultUserInfo.lastName,\r\n                                    email: resultUserInfo.email,\r\n                                    mobile: '',\r\n                                    phone: '',\r\n                                    fax: '',\r\n                                    address: '',\r\n                                    country: '',\r\n                                    state: '',\r\n                                    city: '',\r\n                                    zipcode: '',\r\n                                    website: ''\r\n                                };\r\n                                let containerKeys = Object.keys(updatedData.editpackaginggmrdetail.containerDetails[0]);\r\n                                for (let i = 0; i < containerKeys.length; i++) {\r\n                                    if (containerKeys[i] != 'allAssayData' && containerKeys[i] != 'viewGmrData') {\r\n                                        object[containerKeys[i]] =\r\n                                            updatedData.editpackaginggmrdetail.containerDetails[0][containerKeys[i]];\r\n                                    }\r\n                                }\r\n                                let elementList = updatedData.editpackaginggmrdetail.containerDetails[0].allAssayData[\r\n                                    'Provisional Assay'\r\n                                ][0]['elementList'].reduce((a, i) => {\r\n                                    a.push({\r\n                                        elementId: i.elementId,\r\n                                        typical: i.typical\r\n                                    });\r\n                                    return a;\r\n                                }, []);\r\n                                function getRemarks(item) {\r\n                                    let res = '';\r\n                                    if (item) {\r\n                                        res =\r\n                                            res +\r\n                                            `Loose-${item.loose}, Drums-${item.drums}, Bags-${item.bags}, Boxes-${item.boxes}, Pallets-${item.pallets\r\n                                            }`;\r\n                                    }\r\n                                    return res;\r\n                                }\r\n                                let vesselName = '';\r\n                                function findContnoOrTransportId(containerData) {\r\n                                    var value = '';\r\n                                    if (containerData.containerNo) {\r\n                                        value = containerData.containerNo;\r\n                                        return value;\r\n                                    } else {\r\n                                        value = containerData.transportId;\r\n                                        vesselName = value;\r\n                                        return value;\r\n                                    }\r\n                                }\r\n                                let newStockList = req.body.containerDetails.reduce((a, i) => {\r\n                                    a.push({\r\n                                        netWeight: i.netWeight.toString() || '',\r\n                                        grossWeight: i.grossWeight.toString() || '',\r\n                                        tareWeight: '0',\r\n                                        containerNo: findContnoOrTransportId(i),\r\n                                        containerSize: i.containerSize || '',\r\n                                        customerSealNo: i.sealNo || '',\r\n                                        noOfBags: i.totalPackage.toString() || '',\r\n                                        remarks: getRemarks(i),\r\n                                        internalGrdRefNo: i.internalGrdRefNo || ''\r\n                                    });\r\n                                    return a;\r\n                                }, []);\r\n                                \/\/ To check if Trnasport Id is present\r\n                                let transportIdPresent = false;\r\n                                req.body.containerDetails.forEach(item => {\r\n                                    if ('transportId' in item) {\r\n                                        transportIdPresent = true;\r\n                                    }\r\n                                });\r\n                                function getFromMdm(value, serviceKey) {\r\n                                    let res = value;\r\n                                    if (output.hasOwnProperty(serviceKey) && Array.isArray(output[serviceKey]))\r\n                                        res = output[serviceKey].filter(item => item.value == value);\r\n                                    res = Array.isArray(res) && res.length > 0 ? res[0].key : value;\r\n                                    return res;\r\n                                }\r\n                                function getCorrespondingDestination(key, mdm) {\r\n                                    if (key) {\r\n                                        let incoTerm = mdm.filter(item => {\r\n                                            if (item.key == key) {\r\n                                                return item;\r\n                                            }\r\n                                        });\r\n                                        incoTerm = incoTerm[0].incoTermId;\r\n                                        return incoTerm;\r\n                                    } else {\r\n                                        return '';\r\n                                    }\r\n                                }\r\n                                function totalQuantityPackaging(data) {\r\n                                    let totalPackagingQty = 0;\r\n                                    data.forEach(item => {\r\n                                        totalPackagingQty += Number(item.netWeight);\r\n                                    });\r\n                                    totalPackagingQty = totalPackagingQty.toString();\r\n                                    return totalPackagingQty;\r\n                                }\r\n                                payLoad1['stockList'] = newStockList;\r\n                                payLoad1['pcdiId'] = pcdiId;\r\n                                payLoad1['elementList'] = elementList;\r\n                                payLoad1['supplierElementList'] = elementList;\r\n                                payLoad1['materialClassification'] =\r\n                                    updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.materialClassification : updatedData.viewgmrbasic.materialClassification;\r\n                                payLoad1['gmrApprovalStatus'] = updatedData.viewgmrbasic.gmrApprovalStatus == 'Approved' ? 'Ready for Approval' : updatedData.viewgmrbasic.gmrApprovalStatus;\r\n                                payLoad1['itemQty'] = totalQuantityPackaging(payLoad1.stockList) || '';\r\n                                payLoad1['modeOfTransport'] = updatedData.supplierlisting.modeOfTransport;\r\n                                payLoad1['loadingDate'] = updatedData.editgmrbasicgmrdetails ? moment(updatedData.editgmrbasicgmrdetails.LoadingDate).format('YYYY-MM-DD') + 'T05:30:00.000+05:30' : moment(updatedData.supplierlisting.shipmentdate).format('YYYY-MM-DD') + 'T05:30:00.000+05:30';\r\n                                payLoad1['expectedTimeOfArrival'] = updatedData.editgmrbasicgmrdetails ? moment(updatedData.editgmrbasicgmrdetails.ExpectedArrivalDate).format('YYYY-MM-DD') + 'T05:30:00.000+05:30' : moment(updatedData.supplierlisting.eta).format('YYYY-MM-DD') + 'T05:30:00.000+05:30';\r\n                                payLoad1['activityDate'] = moment(new Date()).format('YYYY-MM-DD');\r\n                                payLoad1['noOfContainers'] =\r\n                                    transportIdPresent == true ? '0' : req.body.noOfContainers.toString() || '';\r\n                                payLoad1['supplierRefNo'] = updatedData.editgmrbasicgmrdetails\r\n                                    ? updatedData.editgmrbasicgmrdetails.SupplierReference\r\n                                    : updatedData.viewgmrbasic.sendersRefNo;\r\n                                payLoad1['isApplyContainerCharge'] = updatedData.supplierlisting.applyContainerCharges;\r\n                                payLoad1['internalGMRRefNo'] = updatedData.supplierlisting.internalGmrRefNo;\r\n                                payLoad1['useBolidenAssay'] = updatedData.viewgmrbasic.useBolidenAssay || '';\r\n                                payLoad1['portalUserDetails'] = portalUserDetails;\r\n                                payLoad1['itemQualityId'] = updatedData.editgmrbasicgmrdetails\r\n                                    ? updatedData.editgmrbasicgmrdetails.Quality\r\n                                    : resultMdm[0].contractQuality[0].key;\r\n                                payLoad1['itemIncoTermId'] = updatedData.editgmrbasicgmrdetails\r\n                                    ? getCorrespondingDestination(\r\n                                        updatedData.editgmrbasicgmrdetails.incoLocation,\r\n                                        resultMdm[1].incoTermDestination\r\n                                    )\r\n                                    : resultMdm[1].incoTermDestination[0].incoTermId;\r\n                                payLoad1['itemIncoTermCityId'] = resultMdm[1].incoTermDestination[0].cityId;\r\n                                payLoad1['itemIncoTermCountryId'] = resultMdm[1].incoTermDestination[0].countryId;\r\n                                payLoad1['qtyUnitId'] = qtyUnitId;\r\n                                payLoad1['loadingCountryId'] = updatedData.editgmrbasicgmrdetails\r\n                                    ? updatedData.editgmrbasicgmrdetails.LoadingLocationCountry\r\n                                    : getFromMdm(updatedData.viewgmrbasic.loadingCountryName, 'countriesComboDataFromDB');\r\n                                \/\/ payLoad1['dischargeCountryId'] = resultMdm[1].incoTermDestination[0].extJson[1].value;\r\n                                payLoad1['dischargeCountryId'] = updatedData.editgmrbasicgmrdetails\r\n                                    ? updatedData.editgmrbasicgmrdetails.dischargeCountryId\r\n                                    : resultMdm[1].incoTermDestination[0].extJson[1].value;\r\n                                payLoad1['dischargeCityId'] = updatedData.editgmrbasicgmrdetails\r\n                                    ? updatedData.editgmrbasicgmrdetails.dischargeCityId\r\n                                    : resultMdm[1].incoTermDestination[0].extJson[2].value;\r\n                                \/\/ payLoad1['dischargeCityId'] = resultMdm[1].incoTermDestination[0].extJson[2].value;\r\n                                payLoad1['countryOfOriginCountryId'] = updatedData.editgmrbasicgmrdetails\r\n                                    ? updatedData.editgmrbasicgmrdetails.CountryOfOrigin\r\n                                    : getFromMdm(updatedData.viewgmrbasic.countryOfOriginCountryName, 'countriesComboDataFromDB');\r\n                                payLoad1['comments'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.MaterialDescription : updatedData.supplierlisting.MaterialDescription ? updatedData.supplierlisting.MaterialDescription : updatedData.viewgmrbasic.comments;\r\n                                payLoad1['specialInstructions'] = '';\r\n                                payLoad1['createSupplierAssay'] = '';\r\n                                payLoad1['vesselName'] = vesselName && vesselName != '' ? vesselName : '';\r\n                                payLoad1['suppRepId'] = updatedData.editgmrbasicgmrdetails\r\n                                    ? updatedData.editgmrbasicgmrdetails.SupplierRepresentative == 'none'\r\n                                        ? ''\r\n                                        : updatedData.editgmrbasicgmrdetails.SupplierRepresentative\r\n                                    : getFromMdm(updatedData.viewgmrbasic.supplierRepresentaive, 'businesspartnercontactperson');\r\n                                payLoad1['senderId'] = resultMdm[0].contractQuality[0].extJson[4].value;\r\n                                payLoad1['sendersAddress'] = updatedData.editgmrbasicgmrdetails\r\n                                    ? updatedData.editgmrbasicgmrdetails.cpAddress\r\n                                    : updatedData.viewgmrbasic.supplierAddress;\r\n                                payLoad1['isPARecreateReq'] = updatedData.editpackaginggmrdetail.isPARecreateReq ? updatedData.editpackaginggmrdetail.isPARecreateReq : 'N';\r\n                                getDropdown([\r\n                                    {\r\n                                        serviceKey: 'cityComboDataFromDB',\r\n                                        dependsOn: [payLoad1['loadingCountryId'], 'City']\r\n                                    }\r\n                                ]).then(function (city) {\r\n                                    if (city.hasOwnProperty('cityComboDataFromDB'))\r\n                                        output['cityComboDataFromDB'] = city['cityComboDataFromDB'];\r\n                                    payLoad1['loadingCityId'] = getFromMdm(\r\n                                        updatedData.editgmrbasicgmrdetails\r\n                                            ? updatedData.editgmrbasicgmrdetails.LoadingLocationCityDisplayName\r\n                                            : updatedData.supplierlisting.loadingCity,\r\n                                        'cityComboDataFromDB'\r\n                                    );\r\n                                    if (payLoad1.hasOwnProperty('deliveryItemRefNo')) {\r\n                                        delete payLoad1['deliveryItemRefNo'];\r\n                                    }\r\n                                    JSON.stringify(payLoad1);\r\n                                    var shipment = {\r\n                                        method: 'POST',\r\n                                        url: req.body.propertyList.eka_ctrm_host + '\/api\/logistic\/editShipment',\r\n                                        headers: {\r\n                                            'Content-Type': 'application\/json;charset=UTF-8',\r\n                                            Accept: 'application\/json',\r\n                                            Authorization: req.headers.authorization,\r\n                                            'X-TenantID': req.headers['x-tenantid']\r\n                                        },\r\n                                        body: payLoad1,\r\n                                        json: true\r\n                                    };\r\n\r\n                                    let editEmailPayload = {};\r\n                                    var editEmail = {\r\n                                        method: 'POST',\r\n                                        url: req.body.propertyList.eka_supplierconnect_host + '\/collection\/sendGMREmail',\r\n                                        headers: {\r\n                                            'Content-Type': 'application\/json',\r\n                                            Accept: 'application\/json',\r\n                                            Authorization: req.headers.authorization,\r\n                                            'X-TenantID': req.headers['x-tenantid']\r\n                                        },\r\n                                        body: editEmailPayload,\r\n                                        json: true\r\n                                    };\r\n                                    function get_editEmailUser() {\r\n                                        return new Promise(function (resolve, reject) {\r\n                                            console.log('Request - ' + editEmail.url);\r\n                                            request(editEmail, function (err, response, body) {\r\n                                                console.log('Response - ' + body);\r\n                                                if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                                                    console.log('Success');\r\n                                                    resolve(body);\r\n                                                } else {\r\n                                                    console.log(body.error);\r\n                                                    reject(err || body);\r\n                                                }\r\n                                            });\r\n                                        });\r\n                                    }\r\n\r\n                                    function get_shipment() {\r\n                                        return new Promise(function (resolve, reject) {\r\n                                            console.log('Request - ' + shipment.url);\r\n                                            request(shipment, function (err, response, body) {\r\n                                                console.log('Response - ' + body);\r\n                                                console.log('Errors - ' + err);\r\n                                                if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                                                    console.log('Success');\r\n                                                    resolve(body);\r\n                                                } else {\r\n                                                    console.log('errors');\r\n                                                    let errorMsg = '';\r\n                                                    if (\r\n                                                        body.hasOwnProperty('ErrorList: ') &&\r\n                                                        Array.isArray(body['ErrorList: ']) &&\r\n                                                        body['ErrorList: '].length > 0\r\n                                                    ) {\r\n                                                        for (let i = 0; i < body['ErrorList: '].length; i++) {\r\n                                                            if (i != body['ErrorList: '].length - 1) {\r\n                                                                errorMsg = errorMsg + body['ErrorList: '][i] + ' ,';\r\n                                                            } else {\r\n                                                                errorMsg = errorMsg + body['ErrorList: '][i];\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                    if (errorMsg != '') {\r\n                                                        reject(errorMsg);\r\n                                                    } else {\r\n                                                        console.log(body.error);\r\n                                                        reject(err || body);\r\n                                                    }\r\n                                                }\r\n                                            });\r\n                                        });\r\n                                    }\r\n                                    function postNotificationElastic() {\r\n                                        return new Promise(function (resolve, reject) {\r\n                                            console.log('Request - ' + notificationElastic.url);\r\n                                            console.log('Notificaiton Body', JSON.stringify(notificationElastic.body));\r\n                                            request(notificationElastic, function (err, response, body) {\r\n                                                console.log('Response - ' + body);\r\n                                                if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                                                    console.log('Success');\r\n                                                    resolve(body);\r\n                                                } else {\r\n                                                    console.log(body.error);\r\n                                                    reject(err || body);\r\n                                                }\r\n                                            });\r\n                                        });\r\n                                    }\r\n                                    console.log('stringifyDAta', JSON.stringify(payLoad1));\r\n                                    var start = new Date();\r\n                                    get_shipment()\r\n                                        .then(function (result) {\r\n                                            \/\/ Edit Email API \/\/\r\n                                            editEmailPayload['supplierName'] = portalUserDetails.updateFirstName + ' ' + portalUserDetails.updateLastName;\/\/logged in use name createdBy\r\n                                            editEmailPayload['qualityName'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.qualityName : updatedData.viewgmrbasic.qualityName;\r\n                                            editEmailPayload['cpName'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.cpName : updatedData.viewgmrbasic.supplier; \/\/supplier\r\n                                            editEmailPayload['incoLocation'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.incoLocationDisplayName : updatedData.viewgmrbasic.inco_terms;\r\n                                            editEmailPayload['GmrRefNo'] = updatedData.viewgmrbasic.gmrRefNo;\r\n                                            editEmailPayload['gmr_create_date'] = updatedData.viewgmrbasic.createdDate;\r\n                                            editEmailPayload['approvalStatus'] = payLoad1.gmrApprovalStatus;\r\n                                            editEmailPayload['subject'] = 'gmr_approval_update_subject';\r\n                                            editEmailPayload['mail_body'] = 'gmr_approval_updated_mailbody';\r\n                                            editEmailPayload['gmr_mail_fromAddr'] = 'gmr_mail_fromAddr';\r\n                                            let _loadingDate = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.LoadingDate : updatedData.supplierlisting.shipmentdate;\r\n                                            editEmailPayload['loadingDate'] = moment(_loadingDate, 'YYYY-MM-DD').format('DD-MMM-YYYY');\r\n                                            let _eta = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.ExpectedArrivalDate : updatedData.supplierlisting.eta;\r\n                                            editEmailPayload['estimatedArrivalDate'] = moment(_eta, 'YYYY-MM-DD').format('DD-MMM-YYYY');\r\n                                            editEmailPayload['destination'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.incoLocationDisplayName : updatedData.viewgmrbasic.dischargeCityName; \/\/dischargeCityName\r\n                                            editEmailPayload['countryOfOrigin'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.CountryOfOriginDisplayName : updatedData.viewgmrbasic.countryOfOriginCountryName;\r\n                                            editEmailPayload['countryOfLoading'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.LoadingLocationCountryDisplayName : updatedData.viewgmrbasic.loadingCountryName;\r\n                                            editEmailPayload['email'] = portalUserDetails.email;\r\n                                            editEmailPayload['approval_date'] = moment(new Date()).format('DD-MMM-YYYY');\r\n                                            if (updatedData.viewgmrbasic.gmrApprovalStatus == 'Approved') {\r\n                                                get_editEmailUser().then(function (editemailres) {\r\n                                                    res.status(200).send(editemailres);\r\n                                                }).catch(function (err) {\r\n                                                    res.status(500).send(err);\r\n                                                });\r\n                                            }\r\n                                            var end1 = new Date() - start;\r\n                                            console.log('Edit Shipment', end1);\r\n                                            var data = result;\r\n                                            \/\/notificaion api\r\n                                            function getContainerSize(data, key) {\r\n                                                let final = '';\r\n                                                data.forEach((item, index) => {\r\n                                                    if (key == 'containerNo' && item.hasOwnProperty('transportId')) {\r\n                                                        key = 'transportId';\r\n                                                    }\r\n                                                    if (item.hasOwnProperty(key)) {\r\n                                                        if (index > data.length - 2) {\r\n                                                            final = final + item[key];\r\n                                                        } else {\r\n                                                            final = final + item[key] + ', ';\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n                                                return final;\r\n                                            }\r\n\r\n                                            function totalQuantity(data) {\r\n                                                let totalQuantity = 0;\r\n                                                data.forEach(item => {\r\n                                                    totalQuantity += Number(item.netWeight);\r\n                                                });\r\n                                                totalQuantity = totalQuantity.toString();\r\n                                                return totalQuantity;\r\n                                            }\r\n                                            console.log(destMdmDATA);\r\n                                            notificationPayload['numberOfContainers'] = payLoad1.noOfContainers;\r\n                                            notificationPayload['gmrApprovalStatus'] = payLoad1.gmrApprovalStatus;\r\n                                            notificationPayload['contractType'] = updatedData.supplierlisting.contractType;\r\n                                            notificationPayload['wnSStatus'] = updatedData.supplierlisting.wnSStatus;\r\n                                            notificationPayload['dischargeCountry'] = destMdmDATA.incoTermDestination[0].countryName;\r\n                                            notificationPayload['modeOfTransport'] = updatedData.supplierlisting.modeOfTransport;\r\n                                            notificationPayload['shipmentdate'] = payLoad1.loadingDate;\r\n                                            notificationPayload['dischargeCity'] = destMdmDATA.incoTermDestination[0].cityName;\r\n                                            notificationPayload['updatedDate'] = moment(new Date()).format('DD-MMM-YYYY HH:mm');\r\n                                            notificationPayload['gmrRefNo'] = updatedData.supplierlisting.gmrRefNo;\r\n                                            notificationPayload['currentPricingStatus'] =\r\n                                                updatedData.supplierlisting.currentPricingStatus;\r\n                                            notificationPayload['eta'] = payLoad1.expectedTimeOfArrival;\r\n                                            notificationPayload['latestActivityBy'] =\r\n                                                moment(updatedData.supplierlisting.eta).format('YYYY-MM-DD') + 'T05:30:00.000+05:30';\r\n                                            notificationPayload['gmrCreatedDate'] =\r\n                                                moment(updatedData.supplierlisting.gmrCreatedDate).format('YYYY-MM-DD') +\r\n                                                'T05:30:00.000+05:30';\r\n                                            notificationPayload['currentQuantity'] = updatedData.supplierlisting.currentQuantity;\r\n                                            notificationPayload['containerSize'] = getContainerSize(payLoad1.stockList, 'containerSize');\r\n                                            notificationPayload['isIntercompany'] = updatedData.supplierlisting.isIntercompany;\r\n                                            notificationPayload['updatedBy'] = 'Portal User';\r\n                                            notificationPayload['entityVersionMap'] = updatedData.supplierlisting.entityVersionMap;\r\n                                            notificationPayload['releasedQuantity'] = updatedData.supplierlisting.releasedQuantity;\r\n                                            notificationPayload['earliestPriceFixation'] = updatedData.viewgmrbasic.earliestPriceFixation;\r\n                                            notificationPayload['cpName'] = updatedData.supplierlisting.cpName;\r\n                                            notificationPayload['inventoryStatus'] = updatedData.supplierlisting.inventoryStatus;\r\n                                            notificationPayload['totalNoOfRecords'] = updatedData.supplierlisting.totalNoOfRecords;\r\n                                            notificationPayload['isWarrantGmr'] = updatedData.supplierlisting.isWarrantGmr;\r\n                                            notificationPayload['landedQuantity'] = updatedData.supplierlisting.landedQuantity;\r\n                                            notificationPayload['internalGmrRefNo'] = updatedData.supplierlisting.internalGmrRefNo;\r\n                                            notificationPayload['qualityName'] = updatedData.supplierlisting.qualityName;\r\n                                            notificationPayload['deliveryItemRefNo'] = updatedData.supplierlisting.deliveryItemRefNo;\r\n                                            notificationPayload['markedForUmpireDisplay'] =\r\n                                                updatedData.supplierlisting.markedForUmpireDisplay;\r\n                                            notificationPayload['containerNo'] = getContainerSize(payLoad1.stockList, 'containerNo');\r\n                                            notificationPayload['quantityUnit'] = updatedData.supplierlisting.quantityUnit;\r\n                                            notificationPayload['portalUpdatedUser'] =\r\n                                                payLoad1.portalUserDetails.updateFirstName +\r\n                                                ',' +\r\n                                                payLoad1.portalUserDetails.updateLastName;\r\n                                            notificationPayload['loadingCountry'] = updatedData.editgmrbasicgmrdetails\r\n                                                ? updatedData.editgmrbasicgmrdetails.LoadingLocationCountryDisplayName\r\n                                                : updatedData.supplierlisting.loadingCountry;\r\n                                            notificationPayload['corporateId'] = updatedData.supplierlisting.corporateId;\r\n                                            notificationPayload['gmrRefNo_hidden'] = updatedData.supplierlisting.gmrRefNo_hidden;\r\n                                            notificationPayload['latestAssayType'] = updatedData.supplierlisting.latestAssayType;\r\n                                            notificationPayload['portalCreatedUser'] =\r\n                                                payLoad1.portalUserDetails.createFirstName +\r\n                                                ',' +\r\n                                                payLoad1.portalUserDetails.createLastName;\r\n                                            notificationPayload['blDate'] =\r\n                                                moment(updatedData.supplierlisting.blDate).format('YYYY-MM-DD') + 'T05:30:00.000+05:30';\r\n                                            notificationPayload['shippedQuantity'] = updatedData.supplierlisting.shippedQuantity;\r\n                                            notificationPayload['applyContainerCharges'] =\r\n                                                updatedData.supplierlisting.applyContainerCharges;\r\n                                            notificationPayload['senderRefNo'] = updatedData.editgmrbasicgmrdetails\r\n                                                ? updatedData.editgmrbasicgmrdetails.SupplierReference\r\n                                                : updatedData.viewgmrbasic.sendersRefNo;\r\n                                            notificationPayload['rnum'] = updatedData.supplierlisting.rnum;\r\n                                            notificationPayload['loadingCity'] = updatedData.editgmrbasicgmrdetails\r\n                                                ? updatedData.editgmrbasicgmrdetails.LoadingLocationCityDisplayName\r\n                                                : updatedData.supplierlisting.loadingCity;\r\n                                            notificationPayload['product'] = updatedData.supplierlisting.product;\r\n                                            notificationPayload['quantity'] = totalQuantity(payLoad1.stockList) || '';\r\n                                            notificationPayload['internalContractRefNo'] =\r\n                                                updatedData.supplierlisting.internalContractRefNo;\r\n                                            notificationPayload['applyFreightAllowance'] =\r\n                                                updatedData.supplierlisting.applyFreightAllowance;\r\n                                            notificationPayload['bolidenAssayAsFinal'] = payLoad1.useBolidenAssay;\r\n                                            notificationPayload['isPassThroughGMR'] = updatedData.supplierlisting.isPassThroughGMR;\r\n                                            notificationPayload['bolidenAssayAsFinalDisplay'] =\r\n                                                updatedData.supplierlisting.bolidenAssayAsFinalDisplay;\r\n                                            notificationPayload['isInternalMovementGMR'] =\r\n                                                updatedData.supplierlisting.isInternalMovementGMR;\r\n                                            notificationPayload['corporate'] = updatedData.supplierlisting.corporate;\r\n                                            notificationPayload['contractRefNo'] = updatedData.supplierlisting.contractRefNo;\r\n                                            notificationPayload['createdBy'] = updatedData.supplierlisting.createdBy;\r\n                                            notificationPayload['incoLocation'] = destMdmDATA.incoTermDestination[0].value;\r\n                                            notificationPayload['markedForUmpire'] = updatedData.supplierlisting.markedForUmpire;\r\n                                            notificationPayload['countryOfOrigin'] = updatedData.editgmrbasicgmrdetails\r\n                                                ? updatedData.editgmrbasicgmrdetails.CountryOfOriginDisplayName\r\n                                                : updatedData.supplierlisting.countryOfOrigin;\r\n                                            notificationPayload['runId'] = updatedData.supplierlisting.runId;\r\n                                            notificationPayload['weightStatus'] = updatedData.supplierlisting.weightStatus;\r\n                                            notificationPayload['materialClassification'] = payLoad1.materialClassification;\r\n                                            console.log(notificationPayload);\r\n                                            postNotificationElastic()\r\n                                                .then(result => {\r\n                                                    console.log(JSON.stringify(result));\r\n                                                    res.status(200).send(data);\r\n                                                })\r\n                                                .catch(function (err) {\r\n                                                    console.log(err);\r\n                                                });\r\n                                        })\r\n                                        .catch(err => {\r\n                                            \/\/added6\r\n                                            console.log(err);\r\n                                            err = err.hasOwnProperty('Error') ? err.Error : err;\r\n                                            res.status(500).send(err);\r\n                                        });\r\n                                });\r\n                            })\r\n                            .catch(err => {\r\n                                console.log(err);\r\n                                res.status(500).send(err);\r\n                            })\r\n                            .catch(err => {\r\n                                \/\/952\r\n                                console.log(err);\r\n                                res.status(500).send(err);\r\n                            });\r\n                    })\r\n                    .catch(err => {\r\n                        \/\/923\r\n                        console.log(err);\r\n                        res.status(500).send(err);\r\n                    });\r\n            })\r\n            .catch(err => {\r\n                \/\/847\r\n                console.log(err);\r\n                res.status(500).send(err);\r\n            });\r\n    })\r\n    .catch(err => {\r\n        \/\/779\r\n        console.log(err);\r\n        res.status(500).send(err);\r\n    });\r\n",
  "sys__UUID": "5ab64cc9-002d-4bf1-a812-c4a9d2970850"
}
