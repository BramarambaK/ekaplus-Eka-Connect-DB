{
  "_id" : "LOAD_INVENTORY_processor",
  "name" : "LOAD_INVENTORY_processor",
  "type" : "processor",
  "refType" : "app",
  "refTypeId" : "12325a98-a959-4939-9005-4158d136afcd",
  "snippet" : "    const serviceKey = 'ngrInventoryFilterKey';\r\n    const userInfo =\r\n      req.body.propertyList.eka_connect_host + '\/api\/getbpuserinfo';\r\n    const appId = req.body.appId;\r\n    const tenant = req.headers['X-TenantID'];\r\n    const taskId = 'inventoryquery';\r\n\r\n    const subGroupMaster = {\r\n      appId: appId,\r\n      objectId:\r\n        'd59b8c10-8c94-4b87-a430-f6fd69888a37' \/* not at all relevant object id *\/,\r\n      collectionName: 'BP Sub Group Setup',\r\n      tenant: tenant,\r\n    };\r\n\r\n    const getData = (url) =>\r\n      new Promise(function (resolve, reject) {\r\n        request(\r\n          {\r\n            method: 'GET',\r\n            url,\r\n            headers: {\r\n              Authorization: req.headers.authorization,\r\n            },\r\n            json: true,\r\n          },\r\n          function (err, response, body) {\r\n            if (\r\n              response &&\r\n              response.statusCode >= 200 &&\r\n              response.statusCode <= 299\r\n            ) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          }\r\n        );\r\n      });\r\n\r\n    const getCollectionMapper = (config) =>\r\n      new Promise((resolve, reject) => {\r\n        const r = {\r\n          method: 'POST',\r\n          url: `${req.body.propertyList.eka_connect_host}\/collectionmapper\/${config.appId}\/${config.objectId}\/fetchCollectionRecords`,\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            ttl: 600,\r\n            'X-TenantID': config.tenant,\r\n            'Content-Type': 'application\/json',\r\n          },\r\n          body: {\r\n            collectionName: config.collectionName,\r\n          },\r\n          json: true,\r\n        };\r\n        request(r, (err, response, body) => {\r\n          if (\r\n            response &&\r\n            response.statusCode >= 200 &&\r\n            response.statusCode <= 299\r\n          ) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n\r\n    function formatData(n) {\r\n      return n\r\n        .toString()\r\n        .split(\/(?=(?:\\d{3})+(?:\\.|$))\/g)\r\n        .join(' ');\r\n    }\r\n\r\n    const objSorter = (prop) => (obj1, obj2) => {\r\n      if (obj1[prop] < obj2[prop]) {\r\n        return -1;\r\n      }\r\n      if (obj1[prop] > obj2[prop]) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    };\r\n\r\n    const getSubGroup = (list, format, code) =>\r\n      list\r\n        .reduce((acc, bp) => {\r\n          let groups;\r\n\r\n          if (code) {\r\n            groups = (bp.subGroup || [])\r\n              .filter((i) => i.code && i.code.toLowerCase() == code.toLowerCase())\r\n              .map((item) => ({\r\n                key: item.refNo,\r\n                value: `${bp.name}\\n${format ? formatData(bp.refNo) : bp.refNo}\\n${item.name\r\n                  }`,\r\n                bpRefNo: bp.refNo,\r\n                bpName: bp.name,\r\n              }));\r\n          } else {\r\n            groups = [\r\n              {\r\n                key: bp.refNo,\r\n                value: `${bp.name}\\n${format ? formatData(bp.refNo) : bp.refNo}`,\r\n                bpRefNo: bp.refNo,\r\n                bpName: bp.name,\r\n              },\r\n            ];\r\n          }\r\n\r\n          acc.push(...groups);\r\n          return acc;\r\n        }, [])\r\n        .sort(objSorter('value'));\r\n\r\n    const subGroupCode = (userDetails) =>\r\n      new Promise((resolve, reject) =>\r\n        getCollectionMapper(subGroupMaster)\r\n          .then((result) => {\r\n            if (result && Array.isArray(result)) {\r\n              const config = result.find(\r\n                (i) =>\r\n                  i.Workflow == taskId &&\r\n                  i.UserType == userDetails.customerType &&\r\n                  i.SubGroupApplicable.toLowerCase() == 'y'\r\n              );\r\n\r\n              if (config) {\r\n                resolve(config.SubGroupCode);\r\n              } else {\r\n                console.log(\r\n                  `Sub group configuration not found for ${taskId} and ${userDetails.customerType}. Defaulting to not applicable.`\r\n                );\r\n                resolve(null);\r\n              }\r\n            } else {\r\n              reject('Sub group configuration is missing');\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          })\r\n      );\r\n\r\n    const bpList = new Promise((resolve, reject) => {\r\n      getData(userInfo)\r\n        .then((t) => {\r\n          const userDetails = t.data;\r\n          if (userDetails.BusinessPartyDetails) {\r\n            subGroupCode(userDetails)\r\n              .then((code) => {\r\n                resolve(\r\n                  getSubGroup(\r\n                    userDetails.BusinessPartyDetails,\r\n                    userDetails.customerType === 'Demand Customer',\r\n                    code\r\n                  )\r\n                );\r\n              })\r\n              .catch((err) => {\r\n                reject(err);\r\n              });\r\n          } else {\r\n            reject('BusinessPartyDetails missing in user details.');\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n\r\n    bpList\r\n      .then((data) => {\r\n        let info = {\r\n          [serviceKey]: data.map((i) => ({ key: i.key, value: i.value })),\r\n          bpNames: [\r\n            ...data.map((i) => ({ key: i.bpRefNo, value: i.bpName })),\r\n            ...data.map((i) => ({ key: i.key, value: i.bpName })),\r\n          ],\r\n          propertyList: [\r\n            {\r\n              key: 'app_home',\r\n              value: req.body.propertyList.app_home,\r\n            },\r\n          ],\r\n        }\r\n\r\n        const ngr = info.ngrInventoryFilterKey[0].value; \r\n        const name = info.bpNames.find(i => i.key == info.ngrInventoryFilterKey[0].key).value; \r\n        const refNo =info.bpNames.find(i => i.value == name).key; \r\n        const appHome = info.propertyList.find(i => i.key == 'app_home').value; \r\n         \r\n        res.status(200).send({\r\n          navigationUrl : appHome.split('\/Landing')[0] + '\/toManagerInventory?tab=ENTITLEMENT&abnNumber=' + refNo + '&gcsName=' + name\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.error('Failed to fetch BPList', err);\r\n        res.status(200).send({\r\n          [serviceKey]: [],\r\n          bpNames: [],\r\n          propertyList: [],\r\n        });\r\n      });\r\n",
  "sys__UUID" : "f8282dfe-85f0-4988-afb9-87bb6dea2d77"
}