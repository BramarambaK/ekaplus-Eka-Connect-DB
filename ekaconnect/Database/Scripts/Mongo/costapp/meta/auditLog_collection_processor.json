{
  "_id": "AuditLog_collection_processor",
  "name": "auditLog_collection_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "d33143ac-4164-4a3f-8d30-61d845c9eeed",
  "snippet": "var moment = require(\"moment\");\r\nvar changedColumns = [\r\n  { key: \"profitCenter\", value: \"Profit Center\" },\r\n  { key: \"counterpartyGroupNameDisplayName\", value: \"Counterparty  Name\" },\r\n  { key: \"incExpenseDisplayName\", value: \"Income\/Exp\" },\r\n  { key: \"estimateForDisplayName\", value: \"Estimated for\" },\r\n  { key: \"itemQty\", value: \"Qty\" },\r\n  { key: \"rateTypePriceDisplayName\", value: \"Rate Type\" },\r\n  { key: \"costValue\", value: \"Cost Value\" },\r\n  { key: \"costPriceUnitIdDisplayName\", value: \"Cost Value Unit\" },\r\n  { key: \"costAmountInBaseCurrency\", value: \"Cost Amount\" },\r\n  { key: \"costAmountInBaseCurrencyUnitId\", value: \"Cost Currency\" },\r\n  { key: \"fxToBaseType\", value: \"FX to Base Type\" },\r\n  { key: \"fxRate\", value: \"FX Rate\" },\r\n  { key: \"fxToBase\", value: \"FX to Base Value\" },\r\n];\r\nvar latestVersionIndex = req.body.selectedData.versions.length - 1;\r\nvar olderVersionIndex = latestVersionIndex - 1;\r\nvar latestVersion = req.body.selectedData.versions[latestVersionIndex];\r\nvar entityActualNo;\r\nvar itemNo;\r\n\r\nvar connectData = {\r\n  method: \"GET\",\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    `\/data\/d33143ac-4164-4a3f-8d30-61d845c9eeed\/f3d6ff89-b541-4dc0-b88d-12065d10cc90`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n  },\r\n  body: {\r\n    filterData: {\r\n      filter: [\r\n        {\r\n          fieldName: \"sys__UUID\",\r\n          value: \"\",\r\n          operator: \"eq\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  json: true,\r\n};\r\nfunction get_connectData() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(connectData, function (err, response, body) {\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nvar updateCollection = {\r\n  method: \"PUT\",\r\n  url: req.body.propertyList.platform_url + \"\/collection\/v1\/append\/data\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n   'X-Remote-User': 'ekaApp'\r\n  },\r\n  json: true,\r\n  body: {\r\n    collectionName: \"Audit Log Collection\",\r\n    collectionData: [],\r\n    format: \"JSON\",\r\n  },\r\n};\r\nfunction update_collection() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(updateCollection, function (err, response, body) {\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nvar insertConnect = {\r\n  method: \"POST\",\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    \"\/data\/d33143ac-4164-4a3f-8d30-61d845c9eeed\/e0f0498d-4f4f-4c02-8596-562938156ab6\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n  },\r\n  json: true,\r\n  body: {},\r\n};\r\nfunction insert_connect() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(insertConnect, function (err, response, body) {\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction preparePayload(index) {\r\n  return new Promise((resolve, reject) => {\r\n    let payloadData = {};\r\n    var hasChanged = \"No\";\r\n    var key = changedColumns[index].key;\r\n    var value = changedColumns[index].value;\r\n    var newValue;\r\n    var oldValue;\r\n    if (!latestVersion[key] || latestVersion[key] === null) newValue = \"\";\r\n    else newValue = latestVersion[key];\r\n    if (latestVersionIndex > 0) {\r\n      if (\r\n        !req.body.selectedData.versions[olderVersionIndex][key] ||\r\n        req.body.selectedData.versions[olderVersionIndex][key] === null\r\n      )\r\n        oldValue = \"\";\r\n      else oldValue = req.body.selectedData.versions[olderVersionIndex][key];\r\n    } else oldValue = \"\";\r\n    if (latestVersionIndex > 0) {\r\n      if (latestVersion.sys__payload.indexOf(key) > -1) hasChanged = \"Yes\";\r\n      else hasChanged = \"No\";\r\n    } else {\r\n      if (newValue) hasChanged = \"Yes\";\r\n      else hasChanged = \"No\";\r\n    }\r\n    var versionDate;\r\n    if (latestVersion.sys__updatedOn) {\r\n      versionDate = moment\r\n        .utc(latestVersion.sys__updatedOn)\r\n        .utcOffset(\"+0530\")\r\n        .format(\"DD-MMM-YYYY\");\r\n    } else if (latestVersion.sys__createdOn) {\r\n      versionDate = moment\r\n        .utc(latestVersion.sys__createdOn)\r\n        .utcOffset(\"+0530\")\r\n        .format(\"DD-MMM-YYYY\");\r\n    }\r\n    var collectionBody = [\r\n      entityActualNo,\r\n      latestVersion.costComponentDisplayName,\r\n      value,\r\n      oldValue,\r\n      newValue,\r\n      versionDate,\r\n      hasChanged,\r\n    ];\r\n    var connectBody = {\r\n      contractItemRefNo: entityActualNo,\r\n      costComponentName: latestVersion.costComponentDisplayName,\r\n      fieldName: value,\r\n      oldValue: oldValue,\r\n      newValue: newValue,\r\n      versionDate: versionDate,\r\n      hasChanged: hasChanged,\r\n    };\r\n    payloadData.collectionBody = collectionBody;\r\n    payloadData.connectBody = connectBody;\r\n    resolve(payloadData);\r\n  });\r\n}\r\nconnectData.body.filterData.filter[0].value = req.body.selectedData.refTypeId;\r\nget_connectData().then((payload) => {\r\n  entityActualNo = payload[0].entityActualNo;\r\n  itemNo = payload[0].itemNo;\r\n  if (itemNo) entityActualNo = entityActualNo + \",\" + itemNo;\r\n  preparePayload(0).then(async (result) => {\r\n    updateCollection.body.collectionData.push(result);\r\n    for (var i = 1; i < changedColumns.length; i++) {\r\n      await preparePayload(i).then(async function (data) {\r\n        updateCollection.body.collectionData.push(data.collectionBody);\r\n        insertConnect.body = data.connectBody;\r\n        await insert_connect().then((result) => {\r\n          console.log(result);\r\n        });\r\n      });\r\n    }\r\n    console.log(updateCollection.body);\r\n    await update_collection().then((msg) => {\r\n      res.status(200).send(msg);\r\n    });\r\n  });\r\n});\r\n",
  "sys__UUID": "d66f3c42-9b86-466a-834d-9f2e9acd9238"
}
