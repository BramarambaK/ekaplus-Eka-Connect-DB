{
  "_id": "cost_estimate_lifecycle_COST",
  "name": "cost_estimate_lifecycle",
  "type": "processor",
  "refType": "app",
  "refTypeId": "d33143ac-4164-4a3f-8d30-61d845c9eeed",
  "snippet": "\r\nvar moment = require(\"moment\");\r\n    var objectId;\r\n    var versioning_data;\r\n    var paramKey;\r\n    var paramValue;\r\n    var originalMongoId;\r\n    objectId = req.body.selectedData[\"object\"];\r\n    paramKey = \"sys__UUID\";\r\n    paramValue = req.body.selectedData[\"sys__UUID\"];\r\n\r\n    var connect = {\r\n      method: \"GET\",\r\n      url:\r\n        req.body.propertyList.eka_connect_host +\r\n        `\/data\/d33143ac-4164-4a3f-8d30-61d845c9eeed\/${objectId}?${paramKey}=${paramValue}`,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        requestId: req.headers.requestid + \"-processor\",\r\n        \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n      },\r\n      json: true,\r\n    };\r\n    function get_connect(input) {\r\n      return new Promise(function (resolve, reject) {\r\n        console.log(\"Request - \" + input.url);\r\n        request(input, function (err, response, body) {\r\n          console.log(\"Response - \" + body);\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            console.log(\"Success\");\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    var metaObject = {\r\n      method: \"GET\",\r\n      url:\r\n        req.body.propertyList.eka_connect_host +\r\n        `\/meta\/object\/${objectId}`,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n      },\r\n      json: true,\r\n    };\r\n\r\n    function get_version_data() {\r\n      return new Promise(function (resolve, reject) {\r\n        console.log(\"Request - \" + versioning_data.url);\r\n        request(versioning_data, function (err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            console.log(\"Success\");\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function sendFinalData(result) {\r\n      var versionData = [];\r\n      var index = 0;\r\n      var secondaryCost = \"\";\r\n\r\n      var data = {};\r\n      var details = [];\r\n      secondaryCost = result[0][\"costComponentDisplayName\"];\r\n      if (result[0][\"entityRefNo\"]) {\r\n        data.entityRefNo = result[0][\"entityRefNo\"];\r\n      }\r\n      data.entityType = result[0][\"entityType\"];\r\n      if (data && data.entityRefNo)\r\n        details.push({ name: \"Entity Ref No\", value: data.entityRefNo });\r\n      if (data && data.entityType)\r\n        details.push({ name: \"Entity Name\", value: data.entityType });\r\n      if (secondaryCost)\r\n        details.push({ name: \"Secondary Cost\", value: secondaryCost });\r\n      versionData.description = [];\r\n      result.forEach(async (element) => {\r\n        originalMongoId = element.originalMongoId;\r\n        versioning_data = {\r\n          method: \"GET\",\r\n          url:\r\n            req.body.propertyList.eka_connect_host +\r\n            \"\/workflow\/\" +\r\n            element.refTypeId +\r\n            \"\/_UT_VIEW_VERSION_HISTORY\/data\/\" +\r\n            element.sys__UUID +\r\n            \"\/versions\",\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n          },\r\n          json: true,\r\n        };\r\n\r\n        if (originalMongoId) {\r\n          versioning_data.url =\r\n            req.body.propertyList.eka_connect_host +\r\n            \"\/workflow\/\" +\r\n            element.refTypeId +\r\n            \"\/_UT_VIEW_VERSION_HISTORY\/data\/\" +\r\n            originalMongoId +\r\n            \"\/versions\";\r\n          let versionParent = await get_version_data();\r\n          var versionsParent = versionParent.versions;\r\n          let dataParent = await payload(versionsParent);\r\n          if (dataParent.length)\r\n            for (let i = 0; i < dataParent.length; i++) {\r\n              versionData.description.push(dataParent[i]);\r\n            }\r\n        }\r\n        versioning_data.url =\r\n          req.body.propertyList.eka_connect_host +\r\n          \"\/workflow\/\" +\r\n          element.refTypeId +\r\n          \"\/_UT_VIEW_VERSION_HISTORY\/data\/\" +\r\n          element.sys__UUID +\r\n          \"\/versions\";\r\n        let version = await get_version_data();\r\n        var versions = version.versions;\r\n        let data = await payload(versions);\r\n        for (let i = 0; i < data.length; i++) {\r\n          versionData.description.push(data[i]);\r\n        }\r\n\r\n        index++;\r\n        if (index === result.length) {\r\n          if (versionData.description.length < 1) {\r\n            var description = [];\r\n            var message = \"No versioning history available\";\r\n            let response = { details, description, message };\r\n            res.status(200).send(response);\r\n          } else {\r\n            var description = versionData.description;\r\n            let response = { details, description };\r\n            res.status(200).send(response);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    function sort(versionData) {\r\n      return versionData.sort(function (a, b) {\r\n        let x = new Date(a.sys__updatedOn);\r\n        let y = new Date(b.sys__updatedOn);\r\n        return x < y ? 1 : -1;\r\n      });\r\n    }\r\n\r\n    let fieldsData = {};\r\n    get_connect(metaObject).then((result) => {\r\n      fieldsData = result.fields;\r\n    }).catch(error => {\r\n      console.log(JSON.stringify(error));\r\n      send(500, 'Error while calling connect-api, please contact system admin');\r\n    });\r\n\r\n    function payload(version) {\r\n      var description = [];\r\n      var data;\r\n      var sys_payload;\r\n      var values = [];\r\n      var dataset = [];\r\n      if (version.length > 1) {\r\n        for (var t = 0; t < version.length; t++) {\r\n          data = [];\r\n          if (t < version.length - 1) {\r\n            data.push(version[t]);\r\n            data.push(version[t + 1]);\r\n            data;\r\n            var date = data[1][\"sys__updatedOn\"];\r\n            date = moment(date);\r\n            var doneBy = data[1][\"sys__updatedBy\"];\r\n            sys_payload = [];\r\n            dataset = [];\r\n            sys_payload = data[1][\"sys__payload\"];\r\n            for (var i = 0; i < data.length; i++) {\r\n              var obj = {};\r\n              for (var j = 0; j < sys_payload.length; j++) {\r\n                obj[sys_payload[j]] = data[i][sys_payload[j]];\r\n              }\r\n              dataset.push(obj);\r\n            }\r\n\r\n            let updatedDataSet = dataset.map(({costComponent, incExpense,rateTypePrice,counterpartyGroupName,costPriceUnitId,estimateValueUnitId, ...remainingFields}) => remainingFields);\r\n\r\n\r\n          \r\n            values = Object.keys(updatedDataSet[0]);\r\n            var obj = {};\r\n            obj[\"timestamp\"] = date;\r\n            obj[\"doneBy\"] = doneBy;\r\n            obj[\"details\"] = [];\r\n            for (var j = 0; j < values.length; j++) {\r\n              var str = \"\";\r\n              str = values[j];\r\n              if (str == \"costComponent\") {\r\n                str = \"Cost Component Name\";\r\n              } \/\/else if (str == \"costPriceUnitIdDisplayName\") {\r\n              \/\/str = \"Cost Value Unit\";\r\n              \/\/} \r\n              else if (str == \"counterpartyGroupNameDisplayName\") {\r\n                str = \"CP Name\";\r\n              } else if (str == \"rateTypePriceDisplayName\") {\r\n                str = \"Rate Type\";\r\n              } else if (str == \"incExpenseDisplayName\") {\r\n                str = \"Income\/Expense\";\r\n              } else if (str == fieldsData[str]['labelKey']) {\r\n                str = fieldsData[str][str];\r\n              }\r\n              str = str\r\n                .replace(\/(_|-)\/g, \" \")\r\n                .trim()\r\n                .replace(\/\\w\\S*\/g, function (str) {\r\n                  return str.charAt(0).toUpperCase() + str.substr(1);\r\n                })\r\n                .replace(\/([a-z])([A-Z])\/g, \"$1 $2\")\r\n                .replace(\/([A-Z])([A-Z][a-z])\/g, \"$1 $2\");\r\n              obj[\"details\"].push({\r\n                name: str,\r\n                preValue: updatedDataSet[0][values[j]],\r\n                postValue: updatedDataSet[1][values[j]],\r\n              });\r\n            }\r\n            obj;\r\n            description.push(obj);\r\n          }\r\n        }\r\n      }\r\n      return description;\r\n    }\r\n    get_connect(connect).then(async (result) => {\r\n      try {\r\n        await sendFinalData(result);\r\n      } catch (err) {\r\n        res.status(500).send({ error: \"Error running script - \" + err });\r\n      }\r\n    });",
  "sys__UUID": "e23b7b42-2caf-41ae-bd8c-25e30fdc941c",
  "sys__createdBy": "srini@ekaplus.com"
}