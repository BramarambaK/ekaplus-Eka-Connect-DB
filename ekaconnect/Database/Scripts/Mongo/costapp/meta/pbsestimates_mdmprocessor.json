{
  "_id": "pbsestimates_mdmprocessor_COST",
  "name": "pbsestimates_mdmprocessor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "d33143ac-4164-4a3f-8d30-61d845c9eeed",
  "snippet": "req.body.mdmProcessorServiceKey = JSON.parse(req.body.mdmProcessorServiceKey);\r\n\r\nfunction serviceKeyIndex(serviceKey) {\r\n  var index = req.body.mdmProcessorServiceKey.findIndex(function (el) {\r\n    return el.serviceKey == serviceKey;\r\n  });\r\n  return index;\r\n}\r\n\r\nvar costCurve = {\r\n  method: \"GET\",\r\n  url:\r\n    req.body.propertyList.eka_utility_host +\r\n    \"/costapp/d33143ac-4164-4a3f-8d30-61d845c9eeed/f3d6ff89-b541-4dc0-b88d-12065d10cc90/instrumentNames\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    json: true,\r\n  },\r\n};\r\nfunction get_costCurve() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(costCurve, function (err, response, body) {\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nvar fxRate = {\r\n  method: \"GET\",\r\n  url:\r\n    req.body.propertyList.eka_utility_host +\r\n    \"/costapp/d33143ac-4164-4a3f-8d30-61d845c9eeed/f3d6ff89-b541-4dc0-b88d-12065d10cc90/instrumentNamesFx\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    json: true,\r\n  },\r\n};\r\nfunction get_fxRate() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(fxRate, function (err, response, body) {\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nvar fxToBase = {\r\n  method: \"POST\",\r\n  url: req.body.propertyList.platform_url + \"/mdmapi/corporateFxRate\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n  },\r\n  json: true,\r\n  body: {},\r\n};\r\nvar fxEstimateToAccural = {\r\n  method: \"POST\",\r\n  url: req.body.propertyList.platform_url + \"/mdmapi/corporateFxRate\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n  },\r\n  json: true,\r\n  body: {},\r\n};\r\nfunction get_estimateToAccural() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(fxEstimateToAccural, function (err, response, body) {\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n//quantityUnitConversions data\r\nvar quantityUnitConversions = {\r\n  method: \"POST\",\r\n  url:\r\n    req.body.propertyList.platform_url +\r\n    \"/mdmapi/converter/quantityUnitConversions\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n  },\r\n  json: true,\r\n  body: {\r\n    fromQtyUnit: \"\",\r\n    toQtyUnit: \"\",\r\n  },\r\n};\r\nfunction get_quantityUnitConversions(body) {\r\n  quantityUnitConversions.body = body;\r\n  return new Promise(function (resolve, reject) {\r\n    request(quantityUnitConversions, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\nfunction get_fxToBase() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(fxToBase, function (err, response, body) {\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nvar currentUser = {\r\n  method: \"GET\",\r\n  url: req.body.propertyList.platform_url + \"/spring/smartapp/currentUser\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n  },\r\n  json: true,\r\n};\r\n\r\nfunction get_currentUser() {\r\n  return new Promise(function (resolve, reject) {\r\n    console.log(\"Request - \" + currentUser.url);\r\n    console.log(\"Payload -\" + JSON.stringify(currentUser));\r\n    request(currentUser, function (err, response, body) {\r\n      console.log(\"Request Body - \" + JSON.stringify(body));\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nvar pbsDetails = {\r\n  method: \"POST\",\r\n  url:\r\n    req.body.propertyList.platform_url + \"/api/costEstimates/getPBSLinkDetails\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n  },\r\n  json: true,\r\n  body: {\r\n    entityRefNo: req.body.queryParams.entityRefNo,\r\n  },\r\n};\r\n\r\nfunction get_pbsDetails() {\r\n  return new Promise(function (resolve, reject) {\r\n    console.log(\"Request - \" + pbsDetails.url);\r\n    console.log(\"Payload -\" + JSON.stringify(pbsDetails));\r\n    request(pbsDetails, function (err, response, body) {\r\n      console.log(\"Request Body - \" + JSON.stringify(body));\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nvar quantityList = {\r\n  method: \"POST\",\r\n  url:\r\n    req.body.propertyList.eka_mdm_host +\r\n    \"/mdm/d33143ac-4164-4a3f-8d30-61d845c9eeed/data\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n  },\r\n  json: true,\r\n  body: {},\r\n};\r\nfunction get_quantityList() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(quantityList, function (err, response, body) {\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nvar corporate = {\r\n  method: \"GET\",\r\n  url:\r\n    req.body.propertyList.eka_mdm_host +\r\n    \"/mdm/d33143ac-4164-4a3f-8d30-61d845c9eeed/corporateInfo\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  json: true,\r\n};\r\nfunction get_corporate() {\r\n  return new Promise(function (resolve, reject) {\r\n    console.log(\"Request - \" + corporate.url);\r\n    console.log(\"Payload -\" + JSON.stringify(corporate));\r\n    request(corporate, function (err, response, body) {\r\n      console.log(\"Request Body - \" + JSON.stringify(body));\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nvar costcomponents = {\r\n  method: \"POST\",\r\n  url: req.body.propertyList.eka_ctrm_host + \"/mdmapi/data\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n  },\r\n  body: [\r\n    {\r\n      serviceKey: \"costcomponents\",\r\n      attributeThree: \"CONTRACT\",\r\n      attributeone: \"CONTRACT\",\r\n    },\r\n  ],\r\n  json: true,\r\n};\r\nfunction get_costcomponents() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(costcomponents, function (err, response, body) {\r\n      console.log(\"Request Body - \" + JSON.stringify(body));\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction getDataFromWorkflow(key) {\r\n  let value = \"\";\r\n  if (typeof req.body.selectedData[key] == \"object\") {\r\n    value = req.body.selectedData[key].value;\r\n  } else value = req.body.selectedData[key];\r\n\r\n  if (value == \"\") {\r\n    if (req.body.selectedData[\"costitemsforexistingentity\"]) {\r\n      if (\r\n        typeof req.body.selectedData[\"costitemsforexistingentity\"][key] ==\r\n        \"object\"\r\n      )\r\n        value = req.body.selectedData[\"costitemsforexistingentity\"][key].value;\r\n      else value = req.body.selectedData[\"costitemsforexistingentity\"][key];\r\n    }\r\n  }\r\n  if (value == \"\") {\r\n    if (req.body.selectedData[\"costitemsfornewentity\"]) {\r\n      if (\r\n        typeof req.body.selectedData[\"costitemsfornewentity\"][key] == \"object\"\r\n      )\r\n        value = req.body.selectedData[\"costitemsfornewentity\"][key].value;\r\n      else value = req.body.selectedData[\"costitemsfornewentity\"][key];\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction getConversionFactor() {\r\n  return new Promise((resolve, reject) => {\r\n    var conversionFactor = \"1\";\r\n    if (\r\n      req.body.mdmProcessorServiceKey[conversionFactorIndex].dependsOn &&\r\n      req.body.mdmProcessorServiceKey[conversionFactorIndex].dependsOn[0] &&\r\n      req.body.mdmProcessorServiceKey[conversionFactorIndex].dependsOn[1] &&\r\n      req.body.mdmProcessorServiceKey[conversionFactorIndex].dependsOn[1] ==\r\n        \"rate\"\r\n    ) {\r\n      var costPriceUnitIdDisplayName =\r\n        req.body.mdmProcessorServiceKey[conversionFactorIndex].dependsOn[0];\r\n      var quantity = costPriceUnitIdDisplayName.split(\"/\")[1];\r\n      var quantityId;\r\n      var flag = 0;\r\n      quantityList.body = [\r\n        {\r\n          dependsOn: [req.body.queryParams.productId],\r\n          serviceKey: \"physicalproductquantitylist\",\r\n        },\r\n      ];\r\n      get_quantityList().then(async (result) => {\r\n        for (var i = 0; i < result.physicalproductquantitylist.length; i++) {\r\n          if (result.physicalproductquantitylist[i].value == quantity) {\r\n            quantityId = result.physicalproductquantitylist[i].key;\r\n            quantityList.body = [\r\n              {\r\n                dependsOn: [\r\n                  req.body.queryParams.productId,\r\n                  quantityId,\r\n                  req.body.queryParams.itemQtyUnitId,\r\n                ],\r\n                serviceKey: \"quantityConversionFactor\",\r\n              },\r\n            ];\r\n            await get_quantityList().then(function (qty) {\r\n              if (qty.quantityConversionFactor) {\r\n                conversionFactor = qty.quantityConversionFactor[0].value;\r\n              }\r\n              flag = 1;\r\n              console.log(conversionFactor);\r\n              resolve(conversionFactor);\r\n            });\r\n          }\r\n        }\r\n        if (flag == 0) {\r\n          conversionFactor = \"1\";\r\n          resolve(conversionFactor);\r\n        }\r\n      });\r\n    } else {\r\n      resolve(conversionFactor);\r\n    }\r\n  });\r\n}\r\n\r\nfunction getFxRate() {\r\n  var corporateCurrency;\r\n  return new Promise((resolve, reject) => {\r\n    var mdmData = [];\r\n    if (\r\n      req.body.mdmProcessorServiceKey[fxRateIndex].dependsOn &&\r\n      req.body.mdmProcessorServiceKey[fxRateIndex].dependsOn[0] &&\r\n      req.body.mdmProcessorServiceKey[fxRateIndex].dependsOn[1] &&\r\n      req.body.mdmProcessorServiceKey[fxRateIndex].dependsOn[1] == \"Curve\"\r\n    ) {\r\n      var costAmountInBaseCurrencyUnitId;\r\n      get_fxRate().then(async function (result) {\r\n        if (req.body.selectedData[\"corporateCurrency\"])\r\n          corporateCurrency = req.body.selectedData[\"corporateCurrency\"];\r\n        else {\r\n          await get_corporate().then((result) => {\r\n            corporateCurrency = result.baseCurId;\r\n          });\r\n        }\r\n        if (\r\n          req.body.selectedData.rateTypePrice == \"absolute\" ||\r\n          req.body.selectedData.rateTypePrice == \"rate\" ||\r\n          req.body.selectedData.rateTypePrice == \"% of Price\"\r\n        ) {\r\n          costAmountInBaseCurrencyUnitId =\r\n            req.body.mdmProcessorServiceKey[fxRateIndex].dependsOn[0];\r\n        } else if (req.body.selectedData.rateTypePrice == \"curve\") {\r\n          costAmountInBaseCurrencyUnitId =\r\n            req.body.mdmProcessorServiceKey[fxRateIndex].dependsOn[0].split(\r\n              \"/\"\r\n            )[0];\r\n        }\r\n        var fxRate = JSON.parse(result);\r\n        var fxKeys = Object.keys(fxRate);\r\n        if (corporateCurrency != costAmountInBaseCurrencyUnitId) {\r\n          fxKeys.forEach((element) => {\r\n            var curr = element.split(\"/\");\r\n            if (\r\n              curr[0] === corporateCurrency ||\r\n              curr[1] === corporateCurrency\r\n            ) {\r\n              if (\r\n                curr[0] === costAmountInBaseCurrencyUnitId ||\r\n                curr[1] === costAmountInBaseCurrencyUnitId\r\n              ) {\r\n                mdmData.push({ key: element, value: element });\r\n                return false;\r\n              }\r\n            }\r\n          });\r\n        }\r\n        if (\r\n          mdmData.length < 1 &&\r\n          corporateCurrency != costAmountInBaseCurrencyUnitId\r\n        )\r\n          reject(\r\n            \"Market data for the selected curve does not exist. Please select another cost unit to apply curve or upload FX rates for selected cost unit\"\r\n          );\r\n        resolve(mdmData);\r\n      });\r\n    } else resolve(mdmData);\r\n  });\r\n}\r\nfunction getEstimateToAccural() {\r\n  var estimateToAccuralBody;\r\n  var estimateToAccuralValue;\r\n  var estimateRateUnit;\r\n  var accuralRateUnit;\r\n  return new Promise(async (resolve, reject) => {\r\n    if (req.body.selectedData.fxToAccuralType == \"Floating\") {\r\n      resolve(\"\");\r\n    } else {\r\n      if (\r\n        req.body.selectedData.rateTypePrice == \"absolute\" ||\r\n        req.body.selectedData.rateTypePrice == \"% of Price\"\r\n      ) {\r\n        estimateRateUnit =\r\n          req.body.mdmProcessorServiceKey[fxEstimateToAccuralIndex]\r\n            .dependsOn[1];\r\n        accuralRateUnit =\r\n          req.body.mdmProcessorServiceKey[fxEstimateToAccuralIndex]\r\n            .dependsOn[2];\r\n      } else if (\r\n        req.body.selectedData.rateTypePrice == \"curve\" ||\r\n        req.body.selectedData.rateTypePrice == \"rate\"\r\n      ) {\r\n        estimateRateUnit =\r\n          req.body.mdmProcessorServiceKey[\r\n            fxEstimateToAccuralIndex\r\n          ].dependsOn[1].split(\"/\")[0];\r\n        accuralRateUnit =\r\n          req.body.mdmProcessorServiceKey[\r\n            fxEstimateToAccuralIndex\r\n          ].dependsOn[2].split(\"/\")[0];\r\n      }\r\n      if (req.body.queryParams[\"tradeDate\"]) {\r\n        estimateToAccuralBody = {\r\n          toCurrency: accuralRateUnit,\r\n          tradeDate: req.body.queryParams[\"tradeDate\"],\r\n          fromCurrency: estimateRateUnit,\r\n        };\r\n      } else {\r\n        estimateToAccuralBody = {\r\n          toCurrency: accuralRateUnit,\r\n          fromCurrency: estimateRateUnit,\r\n        };\r\n      }\r\n      if (accuralRateUnit == estimateRateUnit) {\r\n        estimateToAccuralValue = 1;\r\n        resolve(estimateToAccuralValue);\r\n      } else {\r\n        get_currentUser().then(async (user) => {\r\n          if (user.success)\r\n            fxEstimateToAccural.headers.userName = user.data.userId;\r\n          fxEstimateToAccural.body = estimateToAccuralBody;\r\n          await get_estimateToAccural().then((result) => {\r\n            estimateToAccuralValue = Number(result.rate);\r\n            resolve(estimateToAccuralValue);\r\n          });\r\n        });\r\n      }\r\n    }\r\n  });\r\n}\r\nfunction getquantityUnitConversions() {\r\n    var estimateToUnitConversionValue;\r\n    var estimateToUnit;\r\n    var estimateFromUnit;\r\n    return new Promise(async (resolve, reject) => {\r\n      if (req.body.selectedData.fxToAccuralType == \"Floating\") {\r\n        resolve(\"\");\r\n      } else {\r\n        if (\r\n          req.body.selectedData.rateTypePrice == \"rate\" ||\r\n          req.body.selectedData.rateTypePrice == \"curve\"\r\n        ) {\r\n          estimateToUnit =\r\n            req.body.mdmProcessorServiceKey[\r\n              unitConversionIndex\r\n            ].dependsOn[2].split(\"/\")[1];\r\n          estimateFromUnit =\r\n            req.body.mdmProcessorServiceKey[\r\n              unitConversionIndex\r\n            ].dependsOn[5].split(\"/\")[1];\r\n        }\r\n  \r\n        if (estimateToUnit == estimateFromUnit) {\r\n          estimateToUnitConversionValue = 1;\r\n          resolve(estimateToUnitConversionValue);\r\n        } else {\r\n          await get_quantityUnitConversions({\r\n            fromQtyUnit: estimateFromUnit,\r\n            toQtyUnit: estimateToUnit,\r\n          }).then((result) => {\r\n            estimateToUnitConversionValue = Number(\r\n              result[0].multiplicationFactor\r\n            );\r\n            resolve(estimateToUnitConversionValue);\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\nfunction getFxToBase() {\r\n  var fxToBaseBody;\r\n  var fxToBaseValue;\r\n  var fromCurrency;\r\n  var corporateCurrency;\r\n  return new Promise(async (resolve, reject) => {\r\n    if (\r\n      req.body.mdmProcessorServiceKey[fxToBaseIndex].dependsOn &&\r\n      req.body.mdmProcessorServiceKey[fxToBaseIndex].dependsOn[0] &&\r\n      req.body.mdmProcessorServiceKey[fxToBaseIndex].dependsOn[1] &&\r\n      req.body.mdmProcessorServiceKey[fxToBaseIndex].dependsOn[1] == \"Absolute\"\r\n    ) {\r\n      if (req.body.selectedData[\"corporateCurrency\"])\r\n        corporateCurrency = req.body.selectedData[\"corporateCurrency\"];\r\n      else {\r\n        await get_corporate().then((result) => {\r\n          corporateCurrency = result.baseCurId;\r\n        });\r\n      }\r\n      if (\r\n        req.body.selectedData.rateTypePrice == \"absolute\" ||\r\n        req.body.selectedData.rateTypePrice == \"rate\" ||\r\n        req.body.selectedData.rateTypePrice == \"% of Price\"\r\n      ) {\r\n        fromCurrency =\r\n          req.body.mdmProcessorServiceKey[fxToBaseIndex].dependsOn[0];\r\n      } else if (req.body.selectedData.rateTypePrice == \"curve\") {\r\n        fromCurrency =\r\n          req.body.mdmProcessorServiceKey[fxToBaseIndex].dependsOn[0].split(\r\n            \"/\"\r\n          )[0];\r\n      }\r\n      if (req.body.queryParams[\"tradeDate\"]) {\r\n        fxToBaseBody = {\r\n          toCurrency: corporateCurrency,\r\n          tradeDate: req.body.queryParams[\"tradeDate\"],\r\n          fromCurrency: fromCurrency,\r\n        };\r\n      } else {\r\n        fxToBaseBody = {\r\n          toCurrency: corporateCurrency,\r\n          fromCurrency: fromCurrency,\r\n        };\r\n      }\r\n      if (corporateCurrency == fromCurrency) {\r\n        fxToBaseValue = 1;\r\n        resolve(fxToBaseValue);\r\n      } else {\r\n        get_currentUser().then(async (user) => {\r\n          if (user.success) fxToBase.headers.userName = user.data.userId;\r\n          fxToBase.body = fxToBaseBody;\r\n          await get_fxToBase().then((result) => {\r\n            fxToBaseValue = Number(result.rate);\r\n            resolve(fxToBaseValue);\r\n          });\r\n        });\r\n      }\r\n    } else {\r\n      resolve(fxToBaseValue);\r\n    }\r\n  });\r\n}\r\n\r\nfunction getFxToBaseType() {\r\n  var currency;\r\n  var mdmData = [];\r\n  var corporateCurrency;\r\n  return new Promise(async (resolve, reject) => {\r\n    if (\r\n      req.body.mdmProcessorServiceKey[fxToBaseTypeIndex].dependsOn[0] ||\r\n      req.body.mdmProcessorServiceKey[fxToBaseTypeIndex].dependsOn[1]\r\n    ) {\r\n      if (req.body.selectedData[\"corporateCurrency\"])\r\n        corporateCurrency = req.body.selectedData[\"corporateCurrency\"];\r\n      else {\r\n        await get_corporate().then((result) => {\r\n          corporateCurrency = result.baseCurId;\r\n        });\r\n      }\r\n      if (\r\n        req.body.selectedData.rateTypePrice == \"absolute\" ||\r\n        req.body.selectedData.rateTypePrice == \"rate\" ||\r\n        req.body.selectedData.rateTypePrice == \"% of Price\"\r\n      ) {\r\n        currency =\r\n          req.body.mdmProcessorServiceKey[fxToBaseTypeIndex].dependsOn[0];\r\n      } else if (req.body.selectedData.rateTypePrice == \"curve\") {\r\n        currency =\r\n          req.body.mdmProcessorServiceKey[fxToBaseTypeIndex].dependsOn[0].split(\r\n            \"/\"\r\n          )[0];\r\n      }\r\n      mdmData.push({ key: \"Absolute\", value: \"Absolute\" });\r\n      if (currency != corporateCurrency) {\r\n        mdmData.push({ key: \"Curve\", value: \"Curve\" });\r\n      }\r\n      resolve(mdmData);\r\n    } else resolve(mdmData);\r\n  });\r\n}\r\n\r\nfunction allSettled(promises) {\r\n  let wrappedPromises = promises.map((p) =>\r\n    Promise.resolve(p).then(\r\n      (val) => ({ status: \"fulfilled\", value: val }),\r\n      (err) => ({ status: \"rejected\", reason: err })\r\n    )\r\n  );\r\n  return Promise.all(wrappedPromises);\r\n}\r\n\r\nfunction settledResponse(result, index) {\r\n  if (result[index].status == \"fulfilled\") return result[index].value;\r\n  else {\r\n    data.error.push({ errorMessage: result[0].reason });\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction setPBSData(contractItemRefNo) {\r\n  var contractIndex =\r\n    req.body.selectedData.pbsContractDetails.data.contractItemList.findIndex(\r\n      function (el) {\r\n        return el.contractRefNo == contractItemRefNo;\r\n      }\r\n    );\r\n  var contractDetails =\r\n    req.body.selectedData.pbsContractDetails.data.contractItemList[\r\n      contractIndex\r\n    ];\r\n  var quantityUnit = req.body.selectedData.pbsContractDetails.data.quantityUnit;\r\n\r\n  data.product = contractDetails.productName;\r\n  data.quantity = contractDetails.itemQty + \" \" + quantityUnit;\r\n  data.quality = contractDetails.qualityDesc;\r\n  data.internalContractItemRefNo = contractDetails.internalContractItemRefNo;\r\n  data.profitCenter = contractDetails.profitCenter;\r\n  res.status(200).send(data);\r\n}\r\n\r\nvar mdmData = [];\r\nvar data = {};\r\nvar productCurrencyListIndex = serviceKeyIndex(\"productCurrencyList\");\r\nvar costCurveIndex = serviceKeyIndex(\"costCurve\");\r\nvar rateTypePrice1Index = serviceKeyIndex(\"rateTypePrice1\");\r\nvar estimateFor1Index = serviceKeyIndex(\"estimateFor1\");\r\nvar costcomponents1Index = serviceKeyIndex(\"costcomponents1\");\r\nvar costMonthIndex = serviceKeyIndex(\"costMonth\");\r\nvar conversionFactorIndex = serviceKeyIndex(\"conversionFactor\");\r\nvar fxToBaseTypeIndex = serviceKeyIndex(\"fxToBaseType1\");\r\nvar fxRateIndex = serviceKeyIndex(\"fxRate\");\r\nvar fxToBaseIndex = serviceKeyIndex(\"fxToBase\");\r\nvar contractItemRefNoIndex = serviceKeyIndex(\"contractItemRefNo\");\r\nvar productIndex = serviceKeyIndex(\"product\");\r\nvar quantityIndex = serviceKeyIndex(\"quantity\");\r\nvar qualityIndex = serviceKeyIndex(\"quality\");\r\nvar profitCenterIndex = serviceKeyIndex(\"profitCenter\");\r\nvar fxEstimateToAccuralIndex = serviceKeyIndex(\"fxEstimateToAccural\");\r\nvar unitConversionIndex = serviceKeyIndex(\"unitConversion\");\r\n\r\nif (req.body && req.body.mdmProcessorServiceKey) {\r\n  if (productCurrencyListIndex > -1 && costCurveIndex > -1) {\r\n    if (\r\n      req.body.mdmProcessorServiceKey[costCurveIndex].dependsOn[1] == \"curve\"\r\n    ) {\r\n      costCurve.url =\r\n        req.body.propertyList.eka_utility_host +\r\n        \"/costapp/d33143ac-4164-4a3f-8d30-61d845c9eeed/f3d6ff89-b541-4dc0-b88d-12065d10cc90/instrumentNames?costComponent=\" +\r\n        req.body.selectedData.costComponentDisplayName;\r\n      get_costCurve().then(function (result) {\r\n        var costCurve = JSON.parse(result);\r\n        var curveKeys = Object.keys(costCurve);\r\n        curveKeys.forEach((element) => {\r\n          mdmData.push({ key: element, value: element });\r\n        });\r\n        data.costCurve = mdmData;\r\n        res.status(200).send(data);\r\n      });\r\n    } else {\r\n      data.costCurve = [];\r\n      data.costMonth = [];\r\n      data.curveCurrency = [];\r\n      var costPriceUnitId = {\r\n        method: \"POST\",\r\n        url: req.body.propertyList.eka_connect_host + \"/workflow/mdm\",\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n        },\r\n        json: true,\r\n        body: {\r\n          appId: \"d33143ac-4164-4a3f-8d30-61d845c9eeed\",\r\n          data: [\r\n            {\r\n              serviceKey: \"productCurrencyList\",\r\n            },\r\n          ],\r\n          workFlowTask: \"costitemsforexistingentity\",\r\n        },\r\n      };\r\n      function get_costPriceUnitId() {\r\n        return new Promise(function (resolve, reject) {\r\n          request(costPriceUnitId, function (err, response, body) {\r\n            if (err || body.error) reject(body);\r\n            else {\r\n              resolve(body);\r\n            }\r\n          });\r\n        });\r\n      }\r\n      if (\r\n        req.body.mdmProcessorServiceKey[productCurrencyListIndex]\r\n          .dependsOn[0] === \"rate\"\r\n      ) {\r\n        var productId = req.body.selectedData.productId;\r\n        var payInCurId = req.body.selectedData.payInCurId;\r\n        costPriceUnitId.body = {\r\n          appId: \"d33143ac-4164-4a3f-8d30-61d845c9eeed\",\r\n          data: [\r\n            {\r\n              serviceKey: \"productPriceUnit\",\r\n              dependsOn: [productId, payInCurId],\r\n            },\r\n          ],\r\n          workFlowTask: \"costitemsforexistingentity\",\r\n        };\r\n        get_costPriceUnitId().then(function (result) {\r\n          data.productCurrencyList = result.productPriceUnit;\r\n          res.status(200).send(data);\r\n        });\r\n      } else {\r\n        get_costPriceUnitId().then(function (result) {\r\n          data.productCurrencyList = result.productCurrencyList;\r\n          res.status(200).send(data);\r\n        });\r\n      }\r\n    }\r\n  } else if (costCurveIndex > -1) {\r\n    if (rateTypePrice1Index > -1) {\r\n      mdmData = [];\r\n      mdmData.push({ key: \"rate\", value: \"Rate\" });\r\n      mdmData.push({ key: \"absolute\", value: \"Absolute\" });\r\n      mdmData.push({ key: \"curve\", value: \"Curve\" });\r\n      if (Object.keys(req.body.queryParams).length == 0)\r\n        mdmData.push({ key: \"% of Price\", value: \"% of Price\" });\r\n      else if (req.body.queryParams.priceType === \"Flat\")\r\n        mdmData.push({ key: \"% of Price\", value: \"% of Price\" });\r\n      data.rateTypePrice1 = mdmData;\r\n    }\r\n    if (\r\n      req.body.mdmProcessorServiceKey[costCurveIndex].dependsOn[1] == \"curve\"\r\n    ) {\r\n      costCurve.url =\r\n        req.body.propertyList.eka_utility_host +\r\n        \"/costapp/d33143ac-4164-4a3f-8d30-61d845c9eeed/f3d6ff89-b541-4dc0-b88d-12065d10cc90/instrumentNames?costComponent=\" +\r\n        req.body.selectedData.costComponentDisplayName;\r\n      get_costCurve().then(function (result) {\r\n        var costCurve = JSON.parse(result);\r\n        var curveKeys = Object.keys(costCurve);\r\n        curveKeys.forEach((element) => {\r\n          mdmData.push({ key: element, value: element });\r\n        });\r\n        data.costCurve = mdmData;\r\n        res.status(200).send(data);\r\n      });\r\n    } else {\r\n      data.costCurve = [];\r\n      data.costMonth = [];\r\n      data.curveCurrency = [];\r\n      res.status(200).send(data);\r\n    }\r\n  } else if (rateTypePrice1Index > -1) {\r\n    mdmData = [];\r\n    mdmData.push({ key: \"rate\", value: \"Rate\" });\r\n    mdmData.push({ key: \"absolute\", value: \"Absolute\" });\r\n    mdmData.push({ key: \"curve\", value: \"Curve\" });\r\n    data.rateTypePrice1 = mdmData;\r\n    if (estimateFor1Index > -1) {\r\n      mdmData = [];\r\n      mdmData.push({ key: \"Execution\", value: \"Execution\" });\r\n      data.estimateFor1 = mdmData;\r\n    }\r\n    if (costcomponents1Index > -1) {\r\n      mdmData = [];\r\n      get_costcomponents().then((result) => {\r\n        mdmData = result.costcomponents;\r\n        data.costcomponents1 = mdmData;\r\n        res.status(200).send(data);\r\n      });\r\n    } else res.status(200).send(data);\r\n  } else if (costcomponents1Index > -1 && estimateFor1Index > -1) {\r\n    if (estimateFor1Index > -1) {\r\n      mdmData = [];\r\n      mdmData.push({ key: \"Execution\", value: \"Execution\" });\r\n      data.estimateFor1 = mdmData;\r\n    }\r\n    if (costcomponents1Index > -1) {\r\n      mdmData = [];\r\n      get_costcomponents().then((result) => {\r\n        mdmData = result.costcomponents;\r\n        data.costcomponents1 = mdmData;\r\n        res.status(200).send(data);\r\n      });\r\n    }\r\n  } else if (\r\n    costMonthIndex > -1 &&\r\n    req.body.mdmProcessorServiceKey[costMonthIndex].dependsOn &&\r\n    req.body.mdmProcessorServiceKey[costMonthIndex].dependsOn[0]\r\n  ) {\r\n    costCurve.url =\r\n      req.body.propertyList.eka_utility_host +\r\n      \"/costapp/d33143ac-4164-4a3f-8d30-61d845c9eeed/f3d6ff89-b541-4dc0-b88d-12065d10cc90/instrumentNames?costComponent=\" +\r\n      req.body.selectedData.costComponentDisplayName;\r\n    get_costCurve().then(function (result) {\r\n      var costCurve = JSON.parse(result);\r\n      var curveKeys = Object.keys(costCurve);\r\n      curveKeys.forEach((element) => {\r\n        mdmData.push({ key: element, value: element });\r\n      });\r\n\r\n      mdmData = [];\r\n      var curveValue =\r\n        req.body.mdmProcessorServiceKey[costMonthIndex].dependsOn[0];\r\n      var curveData = costCurve[curveValue];\r\n      if (curveData) {\r\n        var curveCurrency = [\r\n          {\r\n            key: curveData[0][\"Price Unit\"],\r\n            value: curveData[0][\"Price Unit\"],\r\n          },\r\n        ];\r\n        curveData.forEach((element) => {\r\n          mdmData.push({\r\n            key: element[\"Month/Year\"],\r\n            value: element[\"Month/Year\"],\r\n          });\r\n        });\r\n        var unique = Array.from(new Set(mdmData.map(JSON.stringify))).map(\r\n          JSON.parse\r\n        );\r\n        if (Object.keys(unique[0]).length === 0) delete unique.splice(0, 1);\r\n        data.costMonth = unique;\r\n        data.curveCurrency = curveCurrency;\r\n      } else {\r\n        data.costMonth = [];\r\n        data.curveCurrency = [];\r\n      }\r\n      res.status(200).send(data);\r\n    });\r\n  } else if (contractItemRefNoIndex > -1) {\r\n    mdmData = [];\r\n    var contractKeys = [];\r\n    req.body.selectedData.pbsContractDetails.data.contractItemList.forEach(\r\n      (element) => {\r\n        contractKeys.push(element.contractRefNo);\r\n      }\r\n    );\r\n    console.log(contractKeys);\r\n    contractKeys.forEach((el) => {\r\n      mdmData.push({ key: el, value: el });\r\n    });\r\n    data.contractItemRefNo = mdmData;\r\n    res.status(200).send(data);\r\n  } else if (\r\n    productIndex > -1 &&\r\n    quantityIndex > -1 &&\r\n    qualityIndex > -1 &&\r\n    profitCenterIndex > -1 &&\r\n    req.body.mdmProcessorServiceKey[qualityIndex].dependsOn[0]\r\n  ) {\r\n    var contractItemRefNo =\r\n      req.body.mdmProcessorServiceKey[qualityIndex].dependsOn[0];\r\n    if (!req.body.selectedData.pbsContractDetails) {\r\n      get_currentUser().then(async (user) => {\r\n        if (user.success) pbsDetails.headers.userName = user.data.userId;\r\n        await get_pbsDetails().then((result) => {\r\n          var details = result;\r\n          if (details.status == \"success\") {\r\n            req.body.selectedData.pbsContractDetails = details;\r\n            setPBSData(contractItemRefNo);\r\n          } else {\r\n            res.status(200).send(data);\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      setPBSData(contractItemRefNo);\r\n    }\r\n  } else if (fxEstimateToAccuralIndex > -1 && unitConversionIndex > -1) {\r\n    allSettled([getEstimateToAccural(), getquantityUnitConversions()])\r\n      .then((result) => {\r\n        data.error = [];\r\n        data.fxEstimateToAccural = settledResponse(result, 0) + \"\";\r\n        data.unitConversion = settledResponse(result, 1) + \"\";\r\n        console.log(data);\r\n        res.status(200).send(data);\r\n      })\r\n      .catch((err) => res.status(500).send(err));\r\n  } else if (fxRateIndex > -1 && fxToBaseIndex > -1 && fxToBaseTypeIndex > -1) {\r\n    allSettled([getFxRate(), getFxToBase(), getFxToBaseType()])\r\n      .then((result) => {\r\n        data.error = [];\r\n        data.fxRate = settledResponse(result, 0);\r\n        data.fxToBase = settledResponse(result, 1);\r\n        data.fxToBaseType1 = settledResponse(result, 2);\r\n        console.log(data);\r\n        res.status(200).send(data);\r\n      })\r\n      .catch((err) => res.status(500).send(err));\r\n  } else if (fxToBaseTypeIndex > -1) {\r\n    getFxToBaseType()\r\n      .then((fxToBaseType) => {\r\n        data.fxToBaseType1 = fxToBaseType;\r\n        res.status(200).send(data);\r\n      })\r\n      .catch((err) => res.status(500).send(err));\r\n  } else if (fxRateIndex > -1 && fxToBaseIndex > -1) {\r\n    allSettled([getFxRate(), getFxToBase()])\r\n      .then((result) => {\r\n        data.error = [];\r\n        data.fxRate = settledResponse(result, 0);\r\n        data.fxToBase = settledResponse(result, 1);\r\n        console.log(data);\r\n        res.status(200).send(data);\r\n      })\r\n      .catch((err) => res.status(500).send(err));\r\n  } else if (conversionFactorIndex > -1) {\r\n    getConversionFactor().then((conversionFactor) => {\r\n      data.conversionFactor = conversionFactor;\r\n      res.status(200).send(data);\r\n    });\r\n  } else {\r\n    res.status(200).send(data);\r\n  }\r\n}\r\n",
  "sys__UUID": "14d0841a-ae1d-48c7-b129-d300b1b025ba",
  "sys__createdBy": "srini@ekaplus.com"
}
