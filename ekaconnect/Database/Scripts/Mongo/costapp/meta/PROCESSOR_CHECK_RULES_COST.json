{
  "_id": "PROCESSOR_CHECK_RULES_COST",
  "name": "PROCESSOR_CHECK_RULES",
  "type": "processor",
  "refType": "app",
  "refTypeId": "d33143ac-4164-4a3f-8d30-61d845c9eeed",
  "snippet": "var connect = {\r\n  method: \"GET\",\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    \"\/data\/d33143ac-4164-4a3f-8d30-61d845c9eeed\/2f787174-8ed0-4d5d-8f93-b38ab0edc05a\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n  },\r\n  json: true,\r\n  body: {\r\n    filterData: {\r\n      filter: [\r\n        {\r\n          fieldName: \"templateName\",\r\n          operator: \"eq\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n};\r\n\r\nfunction get_connect() {\r\n  return new Promise(function (resolve, reject) {\r\n    console.log(\"Request - \" + connect.url);\r\n    request(connect, function (err, response, body) {\r\n      console.log(\"Response - \" + body);\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        console.log(\"Success\");\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\/\/Get corporateId and corporateName from mdm\r\nvar ctrm_corporate_details = {\r\n  method: \"GET\",\r\n  url:\r\n    req.body.propertyList.eka_trm_physicals_api_host +\r\n    \"\/user\/data\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    \"Content-Type\":\"application\/json\",\r\n    \"Accept\":\"application\/json\",\r\n    \"Connection\": \"keep-alive\"\r\n  },\r\n  json: true,\r\n  body: {},\r\n};\r\n\r\nfunction get_ctrm_corporate_details() {\r\n  return new Promise(function (resolve, reject) {\r\n    console.log(\"Request URL- \" + ctrm_corporate_details.url);\r\n    request(ctrm_corporate_details, function (err, response, body) {\r\n      \/\/ console.log(\"Response - \" + JSON.stringify(body));\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        console.log(\"Success\");\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction validate(components) {\r\n  return new Promise((resolve, reject) => {\r\n    var valid = true;\r\n    var msg = [];\r\n    for (var i = 0; i < components.length; i++) {\r\n      for (var j = i + 1; j < components.length; j++) {\r\n        if (\r\n          components[i].costComponentDisplayName ==\r\n            components[j].costComponentDisplayName &&\r\n          components[i].counterpartyGroupNameDisplayName ==\r\n            components[j].counterpartyGroupNameDisplayName &&\r\n          components[i].incExpenseDisplayName ==\r\n            components[j].incExpenseDisplayName\r\n        ) {\r\n          valid = false;\r\n          if (msg.indexOf(components[i].templateName) < 0)\r\n            msg.push(components[i].templateName);\r\n          if (msg.indexOf(components[j].templateName) < 0)\r\n            msg.push(components[j].templateName);\r\n        }\r\n      }\r\n    }\r\n    if (valid) resolve(true);\r\n    else resolve(msg);\r\n  });\r\n}\r\n\r\nlet data = req.body;\r\nvar flag = 0;\r\nvar components = [];\r\nif (data && data.attributes) {\r\n  if (data.attributes.length > 0) {\r\n    for (var i = 0; i < data.attributes.length; i++) {\r\n      if (data[data.attributes[i]]) {\r\n        flag = 0;\r\n      } else {\r\n        flag = 1;\r\n        break;\r\n      }\r\n    }\r\n    if (flag == 1) {\r\n      res\r\n        .status(500)\r\n        .send(\r\n          \"Attribute values are undefined, please provide attribute values\"\r\n        );\r\n    } else {\r\n      if (data && data.costcomponentTemplates && data.costcomponentTemplates) {\r\n        if (data.costcomponentTemplates.length > 0) {\r\n          connect.body.filterData.filter[0].value =\r\n            data.costcomponentTemplates[0];\r\n          get_connect().then(async (cost) => {\r\n            components.push(cost[0]);\r\n            for (var k = 1; k < data.costcomponentTemplates.length; k++) {\r\n              connect.body.filterData.filter[0].value =\r\n                data.costcomponentTemplates[k];\r\n              await get_connect().then((cost) => {\r\n                components.push(cost[0]);\r\n              });\r\n            }\r\n            await get_ctrm_corporate_details().then((corporateDetails) => {\r\n              if (corporateDetails.corporateId) {\r\n                data.corporateId = corporateDetails.corporateId;\r\n              }\r\n              else {\r\n                res.status(500).send(\"corporateId is fetched empty\/null from mdm\");\r\n              }\r\n              if (corporateDetails.corporateDO.corporateName) {\r\n                data.corporateName = corporateDetails.corporateDO.corporateName;\r\n              }\r\n              else {\r\n                res.status(500).send(\"corporateName is fetched empty\/null from mdm\");\r\n              }\r\n              \/\/ console.log(\"final data - \" + JSON.stringify(data));\r\n            });\r\n            await validate(components).then((valid) => {\r\n              if (valid == true) res.status(200).send(data);\r\n              else {\r\n                var msg = \"\";\r\n                var len = valid.length;\r\n                var index = 0;\r\n                valid.forEach((template) => {\r\n                  index = index + 1;\r\n                  if (msg && index < len) msg = msg + \", \" + template;\r\n                  else if (msg && index == len) msg = msg + \" and \" + template;\r\n                  else msg = msg + template;\r\n                });\r\n                msg =\r\n                  msg +\r\n                  \" have same costs. Rule can only be created for unique costs\";\r\n                res.status(500).send(msg);\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          res.status(500).send(\"Cost Component template is empty\");\r\n        }\r\n      } else {\r\n        res.status(500).send(\"Cost Component template is empty\");\r\n      }\r\n    }\r\n  } else {\r\n    res\r\n      .status(500)\r\n      .send(\"Atleast one attribute and attribute values should be selected\");\r\n  }\r\n} else {\r\n  res\r\n    .status(500)\r\n    .send(\"Atleast one attribute and attribute values should be selected\");\r\n}\r\n",
  "sys__UUID": "16a7b6b6-6db6-43f0-88f9-6eee6151fc8e",
  "sys__createdOn": ISODate("2019-06-26T08:50:01.556Z"),
  "sys__createdBy": "Bravo"
}
