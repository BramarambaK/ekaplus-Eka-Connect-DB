{
  "_id": "validateoffercontracts_add_processor",
  "name": "validateoffercontracts_add_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const send = (status, message) => res.status(status).send(message);\r\nconst formElementName = 'offercontracts';\r\nconst data = req.body.offercontracts.map((i, index) => ({ ...i, _groupNo: i._groupNo || index})) || [];\r\nconst commonMessage = 'Entry errors identified. Please review your inputs.';\r\nconst findEmptyField = (data) => (field, callback) => {\r\n  const e = data.filter(\r\n    (i) => field == 'offerdeliveryperiod' && i['offerdeliverterm'] != 'DB'? false : i[field] === null || i[field] === '' || i[field] === undefined\r\n    );\r\n  if (e && e.length > 0) {\r\n    const msg = callback(e);\r\n    return {\r\n      errorCode: '004',\r\n      errorMessage: msg,\r\n      errorContext: null,\r\n      errorLocalizedMessage: msg,\r\n      errors: [\r\n        {\r\n          errorCode: '004',\r\n          errorMessage: msg,\r\n          errorContext: `{formarray:offercontracts}`,\r\n          errorLocalizedMessage: msg,\r\n          errors: [\r\n            ...e.reduce((acc, curr) => {\r\n              acc.add(curr._groupNo);\r\n              return acc;\r\n            }, new Set()),\r\n          ].map((i) => ({\r\n            errorCode: '004',\r\n            errorMessage: msg,\r\n            errorContext: `{formarray:${i}}`,\r\n            errorLocalizedMessage: msg,\r\n            errors: [\r\n              {\r\n                errorCode: '004',\r\n                errorMessage: msg,\r\n                errorContext: `{field:${field}}`,\r\n                errorLocalizedMessage: msg,\r\n                errors: null,\r\n              },\r\n            ],\r\n          })),\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  return null;\r\n};\r\nconst equal = (i, j) =>\r\n  i.offercontracttype == j.offercontracttype &&\r\n  i.offerdeliverterm == j.offerdeliverterm &&\r\n  i.offerdeliveryperiod == j.offerdeliveryperiod &&\r\n  i.offerexpiry == j.offerexpiry &&\r\n  i.offerprice == j.offerprice &&\r\n  i.offerproduct == j.offerproduct &&\r\n  i.offerquality == j.offerquality &&\r\n  i.offerquantity == j.offerquantity &&\r\n  i.offerregion == j.offerregion &&\r\n  i.offerseason == j.offerseason &&\r\n  i.offersite == j.offersite &&\r\n  i.offersustainable == j.offersustainable &&\r\n  i.offerbpdetails == j.offerbpdetails;\r\n\r\nconst invalidMessages = [\r\n  {\r\n    key: 'BPRefNo',\r\n    message: () => `Please choose NGR`,\r\n  },\r\n  {\r\n    key: 'offerseason',\r\n    message: () => `Please choose season`,\r\n  },\r\n  {\r\n    key: 'offersite',\r\n    message: () => `Please choose site`,\r\n  },\r\n  {\r\n    key: 'offerregion',\r\n    message: () => `Please select a valid Port zone/Delivery zone`,\r\n  },\r\n  {\r\n    key: 'offerproduct',\r\n    message: (e) => `Please select a valid commodity`,\r\n  },\r\n  {\r\n    key: 'offerquality',\r\n    message: (e) => `Please select the grade(s)`,\r\n  },\r\n  {\r\n    key: 'offerquantity',\r\n    message: (e) => `Please enter Offer quantity`,\r\n  },\r\n  {\r\n    key: 'offerprice',\r\n    message: (e) => `Please enter Offer price`,\r\n  },\r\n  {\r\n    key: 'offerdeliverterm',\r\n    message: (e) => `Please select Delivery term`,\r\n  },\r\n  {\r\n    key: 'offerdeliveryperiod',\r\n    message: (e) => `Please select Delivery period`,\r\n  },\r\n  {\r\n    key: 'offerexpiry',\r\n    message: (e) => `Please select Offer expire date`,\r\n  },\r\n  {\r\n    key: 'offersustainable',\r\n    message: (e) => `Please select Sustainable`,\r\n  },\r\n  {\r\n    key: 'offercontracttype',\r\n    message: (e) => `Please select Contract type`,\r\n  }\r\n];\r\nconst duplicateMessage =\r\n  'Please review errors or duplicates marked below and ensure entry is correct before proceeding to next step.';\r\n\r\ntry {\r\n  if (data.length > 0) {\r\n    if (data.length <= 10) {\r\n      const _findEmptyField = findEmptyField(data);\r\n      for (let i of invalidMessages) {\r\n        const error = _findEmptyField(i.key, i.message);\r\n        if (error) {\r\n          return send(400, error);\r\n        }\r\n      }\r\n\r\n      const duplicate = [\r\n        ...data\r\n          .filter((i, index, arr) => arr.findIndex((j) => equal(i, j)) != index)\r\n          .reduce((acc, curr) => {\r\n            acc.add(curr._groupNo);\r\n            return acc;\r\n          }, new Set()),\r\n      ];\r\n\r\n      if (duplicate && duplicate.length > 0) {\r\n        return send(400, {\r\n          errorCode: '004',\r\n          errorMessage: commonMessage,\r\n          errorContext: null,\r\n          errorLocalizedMessage: commonMessage,\r\n          errors: [\r\n            {\r\n              errorCode: '004',\r\n              errorMessage: duplicateMessage,\r\n              errorContext: '{formarray:offercontracts}',\r\n              errorLocalizedMessage: duplicateMessage,\r\n              errors: duplicate.map((i) => ({\r\n                errorCode: '004',\r\n                errorMessage: duplicateMessage,\r\n                errorContext: `{formarray:${i}}`,\r\n                errorLocalizedMessage: duplicateMessage,\r\n                errors: null,\r\n              })),\r\n            },\r\n          ],\r\n        });\r\n      } else {\r\n        send(200, { offerbpdetails: req.body.offerbpdetails, offercontracts: data });\r\n      }\r\n    } else {\r\n      send(400, 'Maximum of 10 records are allowed');\r\n    }\r\n  } else {\r\n    send(400, 'No data to be saved');\r\n  }\r\n} catch (err) {\r\n  send(500, {\r\n    errorCode: '004',\r\n    errorMessage: err.message || err,\r\n    errorContext: err.message || err,\r\n    errorLocalizedMessage: 'Internal server error',\r\n  });\r\n}",
  "sys__UUID": "a0563650-7f68-4afc-af60-b75563e8434a"
}
