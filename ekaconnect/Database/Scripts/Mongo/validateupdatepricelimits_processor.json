{
  "_id": "validateupdatepricelimits_processor",
  "name": "validateupdatepricelimits_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const appId = '12325a98-a959-4939-9005-4158d136afcd';\r\nconst minMaxObjId = '8f13785a-0475-47c5-ab59-f42c132d6a33';\r\nconst today = moment(moment().format('YYYY-MM-DD HH:mm'), 'YYYY-MM-DD HH:mm');\r\nconst tenant = req.headers['x-tenantid'];\r\nconst serverTimezoneOffset = new Date().getTimezoneOffset();\r\nconst timeRegex = new RegExp('^([0-1]?[0-9]|2[0-3])(:[0-5][0-9]){1,2}$');\r\n\r\nconst send = (status, message) => {\r\n  console.log('Response ', message);\r\n  return res.status(status).send(message);\r\n};\r\n\r\nconst formElementName = 'pricelimits';\r\nconst data = req.body.bulkPayLoadData.map((i)=>({\r\n  ...i,\r\n  endTime: i.endTime && Number(i.endTime.split(':')[0]) < 10 ? `0${Number(i.endTime.split(':')[0])}:${i.endTime.split(':')[1]}` : i.endTime\r\n})) || [];\r\nconst currentDate = data[0].clientTimezoneOffset\r\n  ? moment(moment().format('YYYY-MM-DD HH:mm'), 'YYYY-MM-DD HH:mm').add(\r\n      serverTimezoneOffset - data[0].clientTimezoneOffset,\r\n      'minutes'\r\n    )\r\n  : null;\r\n\r\nconst getObjectUri = (id) =>\r\n  `${req.body.propertyList.eka_connect_host}/data/${appId}/${id}`;\r\n\r\nconst getData = (url) =>\r\n  new Promise(function (resolve, reject) {\r\n    request(\r\n      {\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': tenant,\r\n        },\r\n        json: true,\r\n      },\r\n      function (err, response, body) {\r\n        if (\r\n          response &&\r\n          response.statusCode >= 200 &&\r\n          response.statusCode <= 299\r\n        ) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\nconst connectMinMaxPriceData = (product) =>\r\n  `${getObjectUri(minMaxObjId)}?product=${product}`;\r\n\r\nconst findEmptyField = (data) => (field, callback) => {\r\n  const e = data.filter(\r\n    (i) => i[field] === null || i[field] === '' || i[field] === undefined\r\n  );\r\n  if (e && e.length > 0) {\r\n    const msg = callback(e);\r\n    return {\r\n      errorCode: '004',\r\n      errorMessage: msg,\r\n      errorContext: null,\r\n      errorLocalizedMessage: msg,\r\n      errors: [\r\n        {\r\n          errorCode: '004',\r\n          errorMessage: msg,\r\n          errorContext: `{formarray:${formElementName}}`,\r\n          errorLocalizedMessage: msg,\r\n          errors: [\r\n            ...e.reduce((acc, curr) => {\r\n              acc.add(curr._groupNo);\r\n              return acc;\r\n            }, new Set()),\r\n          ].map((i) => ({\r\n            errorCode: '004',\r\n            errorMessage: msg,\r\n            errorContext: `{formarray:${i}}`,\r\n            errorLocalizedMessage: msg,\r\n            errors: [\r\n              {\r\n                errorCode: '004',\r\n                errorMessage: msg,\r\n                errorContext: `{field:${field}}`,\r\n                errorLocalizedMessage: msg,\r\n                errors: null,\r\n              },\r\n            ],\r\n          })),\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  return null;\r\n};\r\n\r\nconst invalidTimeField = (data) => (field, callback) => {\r\n  const e = data.filter(\r\n    (i) => !timeRegex.test(i[field]) || !timeRegex.test(i[field])\r\n  );\r\n  if (e && e.length > 0) {\r\n    const msg = callback(e);\r\n    return {\r\n      errorCode: '004',\r\n      errorMessage: msg,\r\n      errorContext: null,\r\n      errorLocalizedMessage: msg,\r\n      errors: [\r\n        {\r\n          errorCode: '004',\r\n          errorMessage: msg,\r\n          errorContext: `{formarray:${formElementName}}`,\r\n          errorLocalizedMessage: msg,\r\n          errors: [\r\n            ...e.reduce((acc, curr) => {\r\n              acc.add(curr._groupNo);\r\n              return acc;\r\n            }, new Set()),\r\n          ].map((i) => ({\r\n            errorCode: '004',\r\n            errorMessage: msg,\r\n            errorContext: `{formarray:${i}}`,\r\n            errorLocalizedMessage: msg,\r\n            errors: [\r\n              {\r\n                errorCode: '004',\r\n                errorMessage: msg,\r\n                errorContext: `{field:${field}}`,\r\n                errorLocalizedMessage: msg,\r\n                errors: null,\r\n              },\r\n            ],\r\n          })),\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  return null;\r\n};\r\n\r\nconst invalidMessages = [\r\n  {\r\n    key: 'bpRefNo',\r\n    message: () => `Please choose an account`,\r\n  },\r\n  {\r\n    key: 'season',\r\n    message: () => `Please choose a harvest season`,\r\n  },\r\n  {\r\n    key: 'quality',\r\n    message: (e) => `Please select a grade`,\r\n  },\r\n  {\r\n    key: 'site',\r\n    message: (e) => `Please select a valid site`,\r\n  },\r\n  {\r\n    key: 'pricingOption',\r\n    message: (e) => `Please select a pricing option`,\r\n  },\r\n  {\r\n    key: 'price',\r\n    message: (e) => `Please enter the price`,\r\n  },\r\n  {\r\n    key: 'startDate',\r\n    message: (e) => `Please select the startdate`,\r\n  },\r\n  {\r\n    key: 'startTime',\r\n    message: (e) => `Please select a valid starttime`,\r\n  },\r\n  {\r\n    key: 'endDate',\r\n    message: (e) => `Please select the end date`,\r\n  },\r\n  {\r\n    key: 'endTime',\r\n    message: (e) => `Please enter the end time`,\r\n  },\r\n];\r\n\r\nconst invalidTimeMessages = [\r\n  {\r\n    key: 'startTime',\r\n    message: (e) => `Invalid start time format. Format should be HH:mm & should be less than 24:00 & minutes should be less than 60`,\r\n  },\r\n  {\r\n    key: 'endTime',\r\n    message: (e) => `Invalid end time format. Format should be HH:mm & should be less than 24:00 & minutes should be less than 60`,\r\n  },\r\n];\r\n\r\nconst errorWithDates =\r\n  'End date & time cannot be before both now and the start date & time';\r\nconst lowPriceError = 'This price appears low. Please review.';\r\nconst highPriceError = 'This price appears high. Please review.';\r\n\r\n\r\ntry {\r\n  if (data.length > 0) {\r\n    if (data.length <= 10) {\r\n      const _findEmptyField = findEmptyField(data);\r\n      for (let i of invalidMessages) {\r\n        const error = _findEmptyField(i.key, i.message);\r\n        if (error) {\r\n          return send(400, error);\r\n        }\r\n      }\r\n\r\n      const _invalidTimeField = invalidTimeField(data);\r\n      for(let i of invalidTimeMessages) {\r\n        const error = _invalidTimeField(i.key, i.message);\r\n        if(error) {\r\n          return send(400, error);\r\n        }\r\n      }\r\n\r\n      const _comapareDates = data.filter(\r\n        (i) =>\r\n          (i.endDate != null || i.endDate != '') &&\r\n          (\r\n            moment(i.startDate+' '+i.startTime, 'YYYY-MM-DD HH:mm').isSameOrAfter(moment(i.endDate+' '+i.endTime, 'YYYY-MM-DD HH:mm')) ||\r\n            (currentDate && moment(i.endDate+' '+i.endTime, 'YYYY-MM-DD HH:mm').isSameOrBefore(currentDate))\r\n          )\r\n      );\r\n\r\n      if (_comapareDates && _comapareDates.length > 0) {\r\n        return send(400, {\r\n          errorCode: '004',\r\n          errorMessage: errorWithDates,\r\n          errorContext: null,\r\n          errorLocalizedMessage: errorWithDates,\r\n          errors: [\r\n            {\r\n              errorCode: '004',\r\n              errorMessage: errorWithDates,\r\n              errorContext: '{formarray:pricelimits}',\r\n              errorLocalizedMessage: errorWithDates,\r\n              errors: _comapareDates.map((i) => ({\r\n                errorCode: '004',\r\n                errorMessage: errorWithDates,\r\n                errorContext: `{formarray:${i.startDate} > ${i.endDate}}`,\r\n                errorLocalizedMessage: errorWithDates,\r\n                errors: null,\r\n              })),\r\n            },\r\n          ],\r\n        });\r\n      }\r\n\r\n      const promises = data.map(\r\n        (i) =>\r\n          new Promise((resolve, reject) => {\r\n            getData(connectMinMaxPriceData(i.product)).then((priceData) => {\r\n              if (!priceData || priceData.length == 0) {\r\n                return send(400, `Please seed the price for ${i.product}`);\r\n              }\r\n              console.log('Resolved prices', priceData);\r\n              if (i.price < priceData[0].minimumValue) {\r\n                resolve(1);\r\n              } else if (i.price > priceData[0].maximumValue) {\r\n                resolve(2);\r\n              } else {\r\n                resolve(0);\r\n              }\r\n            });\r\n          })\r\n      );\r\n\r\n      Promise.all(promises).then((arr) => {\r\n        console.log('Resolved array', arr);\r\n\r\n        for (let a of arr) {\r\n          if (a == 1 || a == 2) {\r\n            return send(400, {\r\n              errorCode: '004',\r\n              errorMessage:\r\n                (a == 1 ? 'Price appears low' : 'Price appears high') +\r\n                '. Please review',\r\n              errorContext: null,\r\n              errorLocalizedMessage:\r\n                (a == 1 ? 'Price appears low' : 'Price appears high') +\r\n                '. Please review',\r\n              errors: [\r\n                {\r\n                  errorCode: '004',\r\n                  errorMessage: 'Please review',\r\n                  errorContext: '{formarray:pricelimits}',\r\n                  errorLocalizedMessage: 'Please review',\r\n                  errors: arr\r\n                    .map((i, index) =>\r\n                      i > 0\r\n                        ? {\r\n                            errorCode: '004',\r\n                            errorMessage:\r\n                              i == 1 ? lowPriceError : highPriceError,\r\n                            errorContext: `{formarray:${index}}`,\r\n                            errorLocalizedMessage:\r\n                              i == 1 ? lowPriceError : highPriceError,\r\n                            errors: [\r\n                              {\r\n                                errorCode: '004',\r\n                                errorMessage:\r\n                                  i == 1 ? lowPriceError : highPriceError,\r\n                                errorContext: `{field:price}`,\r\n                                errorLocalizedMessage:\r\n                                  i == 1 ? lowPriceError : highPriceError,\r\n                                errors: null,\r\n                              },\r\n                            ],\r\n                          }\r\n                        : null\r\n                    )\r\n                    .filter((i) => !!i),\r\n                },\r\n              ],\r\n            });\r\n          }\r\n        }\r\n\r\n        setTimeout(() => {\r\n          send(200, data);\r\n        }, 1000);\r\n      });\r\n        \r\n    } else {\r\n      send(400, 'Maximum of 10 records are allowed');\r\n    }\r\n  } else {\r\n    send(400, 'No data to be saved');\r\n  }\r\n} catch (err) {\r\n  console.log(err);\r\n  send(500, {\r\n    errorCode: '004',\r\n    errorMessage: err.message || err,\r\n    errorContext: err.message || err,\r\n    errorLocalizedMessage: 'Internal server error',\r\n  });\r\n}",
  "sys__UUID": "a6389139-c125-4097-8e1c-cf3bd197d053"
}
