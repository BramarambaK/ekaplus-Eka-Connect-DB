{
  "_id": "get_programName_processor",
  "name": "get_programName_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const appId = req.body.appId;\r\nvar payloadDataUnfiltered;\r\n\/\/Format payload into object array\r\nif (!Array.isArray(req.body.bulkPayLoadData)) {\r\n  payloadDataUnfiltered = [{ ...req.body }];\r\n  delete payloadDataUnfiltered[0][\"processorDetails\"];\r\n  delete payloadDataUnfiltered[0][\"propertyList\"];\r\n} else {\r\n  payloadDataUnfiltered = req.body.bulkPayLoadData;\r\n}\r\nconst getCollectionMapper = (config) =>\r\n  new Promise((resolve, reject) => {\r\n    const r = {\r\n      method: \"POST\",\r\n      url: `${req.body.propertyList.eka_connect_host}\/collectionmapper\/${config.appId}\/${config.objectId}\/fetchCollectionRecords`,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        ttl: 600,\r\n        \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n        \"Content-Type\": \"application\/json\",\r\n        requestid: req.headers[\"requestid\"] + \"-get_programName_processor\",\r\n      },\r\n      body: config.body,\r\n      json: true,\r\n    };\r\n    request(r, (err, response, body) => {\r\n      if (\r\n        response &&\r\n        response.statusCode >= 200 &&\r\n        response.statusCode <= 299\r\n      ) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n\r\nconst programNameMaster = (filters) => ({\r\n  appId: appId,\r\n  objectId:\r\n    \"46e84f42-6288-4027-b6d0-fd1c11019259\" \/* not at all relevant object id *\/,\r\n  body: {\r\n    collectionName: \"Grower Programs\",\r\n    getAllRecords: true,\r\n    criteria: {\r\n      filter: Object.keys(filters).map((i) => ({\r\n        fieldName: i,\r\n        operator: \"eq\",\r\n        value: filters[i],\r\n      })),\r\n    },\r\n    start: \"\",\r\n    limit: \"\",\r\n  },\r\n});\r\n\r\nconst getProgramName = (requestContract) =>\r\n  new Promise((resolve, reject) => {\r\n    if (\r\n      requestContract.product &&\r\n      requestContract.cropYear &&\r\n      requestContract.paymentTerms\r\n    ) {\r\n      getCollectionMapper(\r\n        programNameMaster({\r\n          \"IS ACTIVE\": \"Y\",\r\n          \"PRICE TYPE\": \"FIXED\",\r\n          PRODUCT: requestContract.product,\r\n          \"CROP YEAR\": requestContract.cropYear,\r\n          \"IS MULTI GRADE\":\r\n            (requestContract.isMultiGrade + \"\").toLowerCase() == \"y\" ||\r\n            requestContract.isMultiGrade == true\r\n              ? \"Y\"\r\n              : \"N\",\r\n          INCOTERM: requestContract.INCOTerm,\r\n          \"PAYMENT TERM\": requestContract.paymentTerms,\r\n          \"IS SUSTAINABLE\": requestContract.issustainable\r\n            ? requestContract.issustainable.toUpperCase()\r\n            : \"\",\r\n        })\r\n      )\r\n        .then((firstPref) => {\r\n          if (firstPref && firstPref.length > 0) {\r\n            if (firstPref.length == 1) {\r\n              resolve(firstPref[0][\"GROWER PROGRAM NAME\"]);\r\n            } else if (requestContract.profitCenter) {\r\n              const secondPref = firstPref.filter(\r\n                (i) =>\r\n                  i[\"PROFIT CENTER NAME\"].toLowerCase() ==\r\n                  requestContract.profitCenter.toLowerCase()\r\n              );\r\n              if (secondPref && secondPref.length > 0) {\r\n                if (secondPref.length == 1) {\r\n                  resolve(secondPref[0][\"GROWER PROGRAM NAME\"]);\r\n                } else {\r\n                  if (requestContract.dischargeLocationCountry) {\r\n                    const thirdPref = secondPref.filter((i) =>\r\n                      i[\"APPLICABLE LOCATION GROUP\"]\r\n                        .toLowerCase()\r\n                        .includes(\r\n                          requestContract.dischargeLocationCountry\r\n                            .split(\"_\")[1]\r\n                            .toLowerCase()\r\n                        )\r\n                    );\r\n                    if (thirdPref && thirdPref.length > 0) {\r\n                      if (thirdPref.length == 1) {\r\n                        resolve(thirdPref[0][\"GROWER PROGRAM NAME\"]);\r\n                      } else {\r\n                        if (requestContract.locationGroupType) {\r\n                          const fourthPref = thirdPref.filter(\r\n                            (i) =>\r\n                              i[\"DELIVERY LOCATION\"].toLowerCase() ==\r\n                              requestContract.locationGroupType.toLowerCase()\r\n                          );\r\n                          if (fourthPref && fourthPref.length > 0) {\r\n                            if (fourthPref.length == 1) {\r\n                              resolve(fourthPref[0][\"GROWER PROGRAM NAME\"]);\r\n                            } else {\r\n                              let fifthPref = fourthPref;\r\n                              if (\r\n                                (\r\n                                  requestContract.isMultiGrade + \"\"\r\n                                ).toLowerCase() == \"y\" ||\r\n                                requestContract.isMultiGrade == true\r\n                              ) {\r\n                                if (requestContract.quality) {\r\n                                  fifthPref = fourthPref.filter(\r\n                                    (i) =>\r\n                                      i[\"BASE QUALITY\"].toLowerCase() ==\r\n                                      requestContract.quality\r\n                                        .replace(\" MG\", \"\")\r\n                                        .toLowerCase()\r\n                                  );\r\n                                } else {\r\n                                  reject(\r\n                                    \"Quality is requipred for further processing\"\r\n                                  );\r\n                                }\r\n                              }\r\n                              if (fifthPref && fifthPref.length > 0) {\r\n                                if (fifthPref.length == 1) {\r\n                                  resolve(fifthPref[0][\"GROWER PROGRAM NAME\"]);\r\n                                } else {\r\n                                  if (requestContract.bulkHandler) {\r\n                                    let sixthPref = fifthPref.filter((i) =>\r\n                                      i[\"APPLICABLE BULK HEADER\"]\r\n                                        .toLowerCase()\r\n                                        .includes(\r\n                                          requestContract.bulkHandler.toLowerCase()\r\n                                        )\r\n                                    );\r\n                                    if (sixthPref && sixthPref.length > 0) {\r\n                                      if (sixthPref.length == 1) {\r\n                                        resolve(\r\n                                          sixthPref[0][\"GROWER PROGRAM NAME\"]\r\n                                        );\r\n                                      } else {\r\n                                        sixthPref.sort((a, b) =>\r\n                                          a[\"GROWER PROGRAM NAME\"]\r\n                                            .toLowerCase()\r\n                                            .localeCompare(\r\n                                              b[\r\n                                                \"GROWER PROGRAM NAME\"\r\n                                              ].toLowerCase()\r\n                                            )\r\n                                        );\r\n                                        resolve(\r\n                                          sixthPref[0][\"GROWER PROGRAM NAME\"]\r\n                                        );\r\n                                      }\r\n                                    } else {\r\n                                      reject(\r\n                                        \"No program found for sixth preference\"\r\n                                      );\r\n                                    }\r\n                                  } else {\r\n                                    reject(\r\n                                      \"Bulk handler is required for further processing\"\r\n                                    );\r\n                                  }\r\n                                }\r\n                              } else {\r\n                                reject(\"No program found for fifth preference\");\r\n                              }\r\n                            }\r\n                          } else {\r\n                            reject(\"No program found for fourth preference\");\r\n                          }\r\n                        } else {\r\n                          reject(\r\n                            \"Location group is required for further processing\"\r\n                          );\r\n                        }\r\n                      }\r\n                    } else {\r\n                      reject(\"No program found for third preference\");\r\n                    }\r\n                  } else {\r\n                    reject(\r\n                      \"Discharge city and country are required for further processing\"\r\n                    );\r\n                  }\r\n                }\r\n              } else {\r\n                reject(\"No program found for second preference\");\r\n              }\r\n            } else {\r\n              reject(\"Profit center is required for further processing\");\r\n            }\r\n          } else {\r\n            reject(\"No program found for first preference\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n          reject(\"Error when fetching program collection\");\r\n        });\r\n    } else {\r\n      reject(\r\n        \"One or more of product, crop year, multi grade, inco term and payment terms are missing\"\r\n      );\r\n    }\r\n  });\r\ngetProgramName(payloadDataUnfiltered[0])\r\n  .then((program) => {\r\n    res.status(200).send({ programName: program });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Failed during fetching Grower Program:\", err);\r\n\r\n    res.status(500).send(err);\r\n  });",
  "sys__UUID": "f401f436-8dc4-4399-bc9e-b388354901a0"
}
