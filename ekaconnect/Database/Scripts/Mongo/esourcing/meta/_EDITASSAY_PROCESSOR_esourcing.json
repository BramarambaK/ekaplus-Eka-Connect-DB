{
    "_id" : "_EDITASSAY_PROCESSOR_esourcing",
    "name" : "_EDITASSAY_PROCESSOR_esourcing",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "7e484cae-36aa-46dc-b9ae-33c8d246f056",
    "snippet" : "\r\n    var moment = require(\"moment\");\r\n    \/\/ assaying Tab\r\n    var dataReq = req.body;\r\n    var intGmrRefNo = req.body.internalGmrRefNo || '';\r\n    var pcdiId = '';\r\n    var deliveryItemRefNo = req.body.deliveryItemRefNo;\r\n    var gmrRefNo = req.body.gmrRefNo;\r\n\r\n    var viewgmr = {\r\n      method: \"POST\",\r\n      url: req.body.propertyList.eka_connect_host + \"\/workflow\",\r\n      headers: {\r\n        \"Content-Type\": \"application\/json\",\r\n        Accept: \"application\/json\",\r\n        Authorization: req.headers.authorization,\r\n        \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n      },\r\n      body: {\r\n        appId: \"7e484cae-36aa-46dc-b9ae-33c8d246f056\",\r\n        workflowTaskName: \"viewgmrdata_SC\",\r\n        task: \"viewgmrdata_SC\",\r\n        payLoadData: \"\",\r\n        output: {\r\n          ['viewgmrdata_SC']: {\r\n            ['intGmrRefNo']: intGmrRefNo,\r\n          },\r\n        },\r\n      },\r\n      json: true,\r\n    };\r\n\r\n    function get_viewgmr() {\r\n      return new Promise(function (resolve, reject) {\r\n        console.log(\"Request - \" + viewgmr.url);\r\n        console.log(\"Payload -\" + JSON.stringify(viewgmr));\r\n        request(viewgmr, function (err, response, body) {\r\n          console.log(\"Request Body - \" + JSON.stringify(body));\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            console.log('Success');\r\n            resolve(body);\r\n          } else {\r\n            console.log(\"errors\")\r\n            console.log(body.error);\r\n            reject(err || body)\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    get_viewgmr().then((resViewGmr) => {\r\n      let pcdid = resViewGmr.data.pcdiId;\r\n      pcdiId = pcdid;\r\n      function getDropdown(data) {\r\n        var businesspartnercontactperson = [\r\n          {\r\n            \"serviceKey\": \"countriesComboDataFromDB\",\r\n            \"dependsOn\": []\r\n          },\r\n          {\r\n            \"serviceKey\": \"loose_esourcing\",\r\n            \"dependsOn\": []\r\n          },\r\n          {\r\n            \"serviceKey\": \"countriesComboDataFromDB\",\r\n            \"dependsOn\": []\r\n          },\r\n          {\r\n            \"serviceKey\": \"incoTermDestination\",\r\n            \"dependsOn\": [\r\n              pcdiId,\r\n              deliveryItemRefNo\r\n            ]\r\n          },\r\n          {\r\n            \"serviceKey\": \"contractQuality\",\r\n            \"dependsOn\": [\r\n              pcdiId,\r\n              deliveryItemRefNo\r\n            ]\r\n          },\r\n          {\r\n            \"serviceKey\": \"businesspartnercontactperson\",\r\n            \"dependsOn\": [\r\n              \"INSPECTIONAGENCY\"\r\n            ]\r\n          }\r\n\r\n        ];\r\n\r\n        if (data) {\r\n          businesspartnercontactperson = data\r\n        }\r\n        var obj = {\r\n          method: 'POST',\r\n          body: businesspartnercontactperson,\r\n          url: `${req.body.propertyList.eka_mdm_host}\/mdm\/${req.body.appId}\/data`,\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            'Content-Type': 'application\/json',\r\n            'X-TenantID': req.headers['X-TenantID']\r\n          },\r\n          json: true\r\n        };\r\n        console.log('mdm url', obj.url);\r\n        return new Promise(function (resolve, reject) {\r\n          request(obj, function (err, response, body) {\r\n            if (err || body.error) reject(body);\r\n            else {\r\n              resolve(body);\r\n            }\r\n          });\r\n        });\r\n      }\r\n\r\n      getDropdown()\r\n        .then(output => {\r\n          \/\/ editassaytab\r\n          var assayAndStockListWithEconomcVal = {\r\n            method: \"POST\",\r\n            url: req.body.propertyList.eka_supplierconnect_host + \"\/collection\/assayAndStockListWithEconomcVal\",\r\n            headers: {\r\n              \"Content-Type\": \"application\/json\",\r\n              Accept: \"application\/json\",\r\n              Authorization: req.headers.authorization,\r\n              \"X-TenantID\": req.headers[\"x-tenantid\"]\r\n            },\r\n            body: {\r\n              ['intGmrRefNo']: intGmrRefNo,\r\n              ['gmrRefNo']: gmrRefNo,\r\n              ['pcdiId']: pcdid,\r\n            },\r\n            json: true\r\n          }\r\n\r\n          function get_assayAndStockListWithEconomcVal() {\r\n            return new Promise(function (resolve, reject) {\r\n              console.log(\"Request - \" + assayAndStockListWithEconomcVal.url);\r\n              console.log(\"Payload -\" + JSON.stringify(assayAndStockListWithEconomcVal));\r\n              request(assayAndStockListWithEconomcVal, function (err, response, body) {\r\n                console.log(\"Request Body - \" + JSON.stringify(body));\r\n                if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                  console.log('Success');\r\n                  resolve(body);\r\n                } else {\r\n                  console.log(\"errors\")\r\n                  console.log(body.error);\r\n                  reject(err || body)\r\n                }\r\n              });\r\n            });\r\n          }\r\n          var qualityMDM = {\r\n            method: \"POST\",\r\n            url: req.body.propertyList.eka_supplierconnect_host + \"\/collection\/mdm\/entity\",\r\n            headers: {\r\n              \"Content-Type\": \"application\/json\",\r\n              Accept: \"application\/json\",\r\n              Authorization: req.headers.authorization,\r\n              \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n            },\r\n            body: [{\r\n              \"pcdiId\": pcdiId,\r\n              \"entity\": \"contractQuality\",\r\n              \"deliveryItem\": deliveryItemRefNo\r\n            }],\r\n            json: true,\r\n\r\n          };\r\n          function get_qualityMDM() {\r\n            return new Promise(function (resolve, reject) {\r\n              console.log(\"Request - \" + qualityMDM.url);\r\n              console.log(\"Payload -\" + JSON.stringify(qualityMDM));\r\n              request(qualityMDM, function (err, response, body) {\r\n                console.log(\"Request Body - \" + JSON.stringify(body));\r\n                if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                  console.log('Success');\r\n                  resolve(body);\r\n                } else {\r\n                  console.log(\"errors\")\r\n                  console.log(body.error);\r\n                  reject(err || body)\r\n                }\r\n              });\r\n            });\r\n          }\r\n\r\n          var destinationSmelter = {\r\n            method: \"POST\",\r\n            url: req.body.propertyList.eka_supplierconnect_host + \"\/collection\/mdm\/destination\",\r\n            headers: {\r\n              \"Content-Type\": \"application\/json\",\r\n              Accept: \"application\/json\",\r\n              Authorization: req.headers.authorization,\r\n              \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n            },\r\n            body: [{\r\n              \"pcdiId\": pcdiId,\r\n              \"entity\": \"incoTermId\",\r\n              \"deliveryItem\": deliveryItemRefNo\r\n            }],\r\n            json: true,\r\n          };\r\n\r\n          function get_destinationSmelter() {\r\n            return new Promise(function (resolve, reject) {\r\n              console.log(\"Request - \" + destinationSmelter.url);\r\n              console.log(\"Payload -\" + JSON.stringify(destinationSmelter));\r\n              request(destinationSmelter, function (err, response, body) {\r\n                console.log(\"Request Body - \" + JSON.stringify(body));\r\n                if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                  console.log('Success');\r\n                  resolve(body);\r\n                } else {\r\n                  console.log(\"errors\")\r\n                  console.log(body.error);\r\n                  reject(err || body)\r\n                }\r\n              });\r\n            });\r\n          }\r\n\r\n          var userinfo = {\r\n            method: 'GET',\r\n            url: req.body.propertyList.eka_connect_host + '\/api\/userinfo',\r\n            headers: {\r\n              'Content-Type': 'application\/json',\r\n              Accept: 'application\/json',\r\n              Authorization: req.headers.authorization,\r\n              'X-TenantID': req.headers['x-tenantid']\r\n            }\r\n          }\r\n\r\n          function get_userinfo() {\r\n            return new Promise(function (resolve, reject) {\r\n              console.log('Request - ' + userinfo.url);\r\n              request(userinfo, function (err, response, body) {\r\n                console.log('Response - ' + body);\r\n                if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                  console.log('Success');\r\n                  resolve(body);\r\n                } else {\r\n                  console.log(\"errors\")\r\n                  console.log(body.error);\r\n                  reject(err || body)\r\n                }\r\n              });\r\n            });\r\n          }\r\n\r\n          Promise.all([\r\n            \/\/ get_viewgmr(),\r\n            get_assayAndStockListWithEconomcVal(),\r\n            get_qualityMDM(),\r\n            get_destinationSmelter(),\r\n            get_userinfo()\r\n          ])\r\n            .then(function (result) {\r\n              \/\/ let resultViewGmr = result[0]; \/\/``\r\n              let assayValues = result[0];\r\n              let combinedElements = result[0]['Provisional Assay'][0].elementList;\r\n              let qualityMdmData = result[1];\r\n              let destinationMdmData = result[2];\r\n              let userInfo = result[3];\r\n\r\n              let resultUserInfoAssay = userInfo;\r\n              resultUserInfoAssay = JSON.parse(resultUserInfoAssay);\r\n              console.log(resultUserInfoAssay);\r\n              let portalUserDetails = {\r\n                \"contactDetails\": \"\",\r\n                \"bankDetails\": \"\",\r\n                \"userName\": resultUserInfoAssay.userName,\r\n                \"createFirstName\": resultUserInfoAssay.firstName,\r\n                \"createLastName\": resultUserInfoAssay.lastName,\r\n                \"updateFirstName\": resultUserInfoAssay.firstName,\r\n                \"updateLastName\": resultUserInfoAssay.lastName,\r\n                \"email\": resultUserInfoAssay.email,\r\n                \"mobile\": \"\",\r\n                \"phone\": \"\",\r\n                \"fax\": \"\",\r\n                \"address\": \"\",\r\n                \"country\": \"\",\r\n                \"state\": \"\",\r\n                \"city\": \"\",\r\n                \"zipcode\": \"\",\r\n                \"website\": \"\"\r\n              }\r\n\r\n              let allElementList = {}\r\n              let elementList2 = req.body.newPayload.elementList.reduce((a, i) => {\r\n                a.push({\r\n                  'elementId': i.elementId,\r\n                  'typical': i.typical.toString()\r\n                })\r\n                allElementList[i.elementId] = true;\r\n                return a;\r\n              }, [])\r\n\r\n              \/\/ for (let j = 0; j < elementList2.length; j++) {\r\n              \/\/   for (let i = 0; i < combinedElements.length; i++) {\r\n              \/\/     if (combinedElements[i].assayRule == \"Assay Exchange\" && elementList2[j].elementId == combinedElements[i].elementId) {\r\n              \/\/       elementList2[j]['useBolidenAssay'] = 'Y'\r\n              \/\/     }\r\n              \/\/   }\r\n\r\n              \/\/ }\r\n\r\n              for (let i = 0; i < combinedElements.length; i++) {\r\n                if (!allElementList.hasOwnProperty(combinedElements[i].elementId)) {\r\n                  let itemData = {\r\n                    'elementId': combinedElements[i].elementId,\r\n                    'typical': combinedElements[i].typical.toString()\r\n                  }\r\n                  if (combinedElements[i].assayRule == \"Assay Exchange\") {\r\n                    itemData['useBolidenAssay'] = 'Y';\r\n                  }\r\n                  elementList2.push(itemData)\r\n                  allElementList[combinedElements[i].elementId] = true;\r\n                }\r\n              }\r\n\r\n              function getFromMdm(value, serviceKey) {\r\n                let res = value\r\n                if (output.hasOwnProperty(serviceKey) && Array.isArray(output[serviceKey]))\r\n                  res = output[serviceKey].filter((item) => item.value == value)\r\n                res = Array.isArray(res) && res.length > 0 ? res[0].key : value\r\n                return res\r\n              }\r\n\r\n              function getValue(externalJson, key) {\r\n                let value = ''\r\n                if (Array.isArray(externalJson)) {\r\n                  value = externalJson.filter((item) => item.key == key)\r\n                  value = Array.isArray(value) && value.length > 0 ? value[0].value : ''\r\n                }\r\n                return value\r\n              }\r\n\r\n              \/\/stockapi\r\n              let payLoad2 = {};\r\n              let newStockList2 = assayValues['Provisional Assay'][0].stockList;\r\n              newStockList2.forEach((item) => {\r\n                if (item.hasOwnProperty('noOfContainers')) {\r\n                  delete item['noOfContainers']\r\n                }\r\n                if (item.hasOwnProperty('sealNo')) {\r\n                  item['customerSealNo'] = item['sealNo']\r\n                  delete item['sealNo']\r\n                }\r\n              })\r\n\r\n              payLoad2['stockList'] = newStockList2;\r\n              payLoad2['pcdiId'] = pcdiId;;\r\n              payLoad2['elementList'] = elementList2\r\n              payLoad2['supplierElementList'] = elementList2;\r\n              payLoad2['itemQty'] = req.body.quantity;\r\n              payLoad2['itemIncoTermCountryId'] = destinationMdmData.incoTermDestination[0].countryId;\r\n              payLoad2['activityDate'] = moment(new Date()).format(\"YYYY-MM-DD\");\r\n              payLoad2['modeOfTransport'] = req.body.modeOfTransport;\r\n              payLoad2['loadingDate'] = moment(req.body.shipmentdate).format(\"YYYY-MM-DD\") + 'T05:30:00.000+05:30' || '';\r\n              payLoad2['expectedTimeOfArrival'] = moment(req.body.eta).format(\"YYYY-MM-DD\") + 'T05:30:00.000+05:30' || '';\r\n              payLoad2['noOfContainers'] = req.body.numberOfContainers || '';\r\n              payLoad2['supplierRefNo'] = resViewGmr.data.sendersRefNo || '';\r\n              payLoad2['isApplyContainerCharge'] = req.body.applyContainerCharges || '';\r\n              payLoad2['internalGMRRefNo'] = req.body.internalGmrRefNo;\r\n              payLoad2['portalUserDetails'] = portalUserDetails;\r\n              payLoad2['itemQualityId'] = qualityMdmData.contractQuality[0].key;\r\n              payLoad2['itemIncoTermId'] = destinationMdmData.incoTermDestination[0].incoTermId;\r\n              payLoad2['itemIncoTermCityId'] = destinationMdmData.incoTermDestination[0].cityId;\r\n              payLoad2['loadingCountryId'] = getFromMdm(resViewGmr.data.loadingCountryName, 'countriesComboDataFromDB');\r\n              payLoad2['qtyUnitId'] = getValue(qualityMdmData.contractQuality[0].extJson, 'qtyUnitId') || '';\r\n              payLoad2['dischargeCountryId'] = getValue(destinationMdmData.incoTermDestination[0].extJson, 'dischargeCountryId') || '';\r\n              payLoad2['dischargeCityId'] = getValue(destinationMdmData.incoTermDestination[0].extJson, 'dischargeCityId') || '';\r\n              payLoad2['countryOfOriginCountryId'] = getFromMdm(resViewGmr.data.countryOfOriginCountryName, 'countriesComboDataFromDB');\r\n              payLoad2['comments'] = resViewGmr.data.comments;\r\n              payLoad2['specialInstructions'] = req.body.newPayload.specialInstructions || \"\";\r\n              payLoad2['createSupplierAssay'] = req.body.newPayload.createSupplierAssay || \"\";\r\n              payLoad2['senderId'] = getValue(qualityMdmData.contractQuality[0].extJson, 'supplierId') || '';\r\n              payLoad2['suppRepId'] = getFromMdm(resViewGmr.data.supplierRepresentaive, 'businesspartnercontactperson');\r\n              payLoad2['sendersAddress'] = resViewGmr.data.supplierAddress || '';\r\n              payLoad2['useBolidenAssay'] = resViewGmr.data.useBolidenAssay || '';\r\n              getDropdown([{\r\n                \"serviceKey\": \"cityComboDataFromDB\",\r\n                \"dependsOn\": [\r\n                  payLoad2['loadingCountryId'],\r\n                  \"City\"\r\n                ]\r\n              }]).then(function (city) {\r\n\r\n                if (city.hasOwnProperty('cityComboDataFromDB'))\r\n                  output['cityComboDataFromDB'] = city['cityComboDataFromDB'];\r\n                payLoad2['loadingCityId'] = getFromMdm(resViewGmr.data.loadingCityName, 'cityComboDataFromDB');\r\n\r\n                var shipment = {\r\n                  method: 'POST',\r\n                  url: req.body.propertyList.eka_ctrm_host + '\/api\/logistic\/editShipment',\r\n                  headers: {\r\n                    'Content-Type': 'application\/json',\r\n                    Accept: 'application\/json',\r\n                    Authorization: req.headers.authorization,\r\n                    'X-TenantID': req.headers['x-tenantid']\r\n                  },\r\n                  body: payLoad2,\r\n                  json: true\r\n                };\r\n\r\n                function get_shipment() {\r\n                  return new Promise(function (resolve, reject) {\r\n                    console.log('Request - ' + shipment.url);\r\n                    request(shipment, function (err, response, body) {\r\n                      console.log('Response - ' + body);\r\n                      console.log('Error MEssage - ' + JSON.stringify(err));\r\n                      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                        console.log('Success');\r\n                        resolve(body);\r\n                      } else {\r\n                        console.log(\"errors\")\r\n                        let errorMsg = '';\r\n                        if (body.hasOwnProperty(\"ErrorList: \") && (Array.isArray(body[\"ErrorList: \"])) && (body[\"ErrorList: \"].length > 0)) {\r\n                          for (let i = 0; i < body[\"ErrorList: \"].length; i++) {\r\n                            if (i != body[\"ErrorList: \"].length - 1) {\r\n                              errorMsg = errorMsg + body[\"ErrorList: \"][i] + ' ,'\r\n                            }else{\r\n                              errorMsg = errorMsg + body[\"ErrorList: \"][i];\r\n                            }\r\n                          }\r\n                        }\r\n                        if (errorMsg != '') {\r\n                          reject(errorMsg)\r\n                        } else {\r\n                          console.log(body.error);\r\n                          reject(err || body)\r\n                        }\r\n                      }\r\n                    });\r\n                  });\r\n                }\r\n                console.log(\"stringifyDAta\", JSON.stringify(payLoad2))\r\n                get_shipment().then(function (result) {\r\n                  console.log(JSON.stringify(result))\r\n                  var data = result;\r\n                  res.status(200).send(data);\r\n                }).catch((err) => {\r\n                  console.log(err);\r\n                  err = err.hasOwnProperty('Error') ? err.Error : err;\r\n                  res.status(500).send(err)\r\n                })\r\n\r\n              }).catch((err) => { \/\/1855\r\n                console.log(err);\r\n                res.status(500).send(err)\r\n              })\r\n            }).catch((err) => { \/\/1749\r\n              console.log(err);\r\n              res.status(500).send(err)\r\n            })\r\n        }).catch((err) => { \/\/1642\r\n          console.log(err);\r\n          res.status(500).send(err)\r\n        })\r\n    }).catch((err) => { \/\/1553\r\n      console.log(err);\r\n      res.status(500).send(err)\r\n    })\r\n  ",
    "sys__UUID" : "979b3249-72d7-4d01-8cc6-22628ea22e1d"
}