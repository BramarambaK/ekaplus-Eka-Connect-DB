{
    "_id" : "bolidencheck_Processor_esourcing",
    "name" : "bolidencheck_Processor",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "7e484cae-36aa-46dc-b9ae-33c8d246f056",
    "snippet" : "\r\n    \/\/  added 2604\r\n    \/\/ let data = req.body;\r\n    var moment = require(\"moment\");\r\n    let selectedData = req.body.selected;\r\n    let viewData = req.body.allViewData;\r\n    let pcdiId = viewData.viewGmr.pcdiId;\r\n    let deliveryItemRefNo = viewData.viewGmr.deliveryItemRefNo;\r\n\r\n    function getDropdown_cb(data) {\r\n      var businesspartnercontactperson = [\r\n        {\r\n          \"serviceKey\": \"countriesComboDataFromDB\",\r\n          \"dependsOn\": []\r\n        },\r\n        {\r\n          \"serviceKey\": \"loose_esourcing\",\r\n          \"dependsOn\": []\r\n        },\r\n        {\r\n          \"serviceKey\": \"countriesComboDataFromDB\",\r\n          \"dependsOn\": []\r\n        },\r\n        {\r\n          \"serviceKey\": \"incoTermDestination\",\r\n          \"dependsOn\": [\r\n            pcdiId,\r\n            deliveryItemRefNo\r\n          ]\r\n        },\r\n        {\r\n          \"serviceKey\": \"contractQuality\",\r\n          \"dependsOn\": [\r\n            pcdiId,\r\n            deliveryItemRefNo\r\n          ]\r\n        },\r\n        {\r\n          \"serviceKey\": \"businesspartnercontactperson\",\r\n          \"dependsOn\": [\r\n            \"INSPECTIONAGENCY\"\r\n          ]\r\n        }\r\n\r\n      ];\r\n\r\n      if (data) {\r\n        businesspartnercontactperson = data\r\n      }\r\n      var obj = {\r\n        method: 'POST',\r\n        body: businesspartnercontactperson,\r\n        url: `${req.body.propertyList.eka_mdm_host}\/mdm\/${req.body.appId}\/data`,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'Content-Type': 'application\/json',\r\n          'X-TenantID': req.headers['X-TenantID']\r\n        },\r\n        json: true\r\n      };\r\n      console.log('mdm url', obj.url);\r\n      return new Promise(function (resolve, reject) {\r\n        request(obj, function (err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    getDropdown_cb().then(output => {\r\n\r\n      var cbqualityMDM = {\r\n        method: \"POST\",\r\n        url: req.body.propertyList.eka_supplierconnect_host + \"\/collection\/mdm\/entity\",\r\n        headers: {\r\n          \"Content-Type\": \"application\/json\",\r\n          Accept: \"application\/json\",\r\n          Authorization: req.headers.authorization,\r\n          \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n        },\r\n        body: [{\r\n          \"pcdiId\": pcdiId,\r\n          \"entity\": \"contractQuality\",\r\n          \"deliveryItem\": deliveryItemRefNo\r\n        }],\r\n        json: true,\r\n\r\n      };\r\n      function get_cbqualityMDM() {\r\n        return new Promise(function (resolve, reject) {\r\n          console.log(\"Request - \" + cbqualityMDM.url);\r\n          console.log(\"Payload -\" + JSON.stringify(cbqualityMDM));\r\n          request(cbqualityMDM, function (err, response, body) {\r\n            console.log(\"Request Body - \" + JSON.stringify(body));\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n              console.log('Success');\r\n              resolve(body);\r\n            } else {\r\n              console.log(body.error);\r\n              reject(err || body)\r\n            }\r\n          });\r\n        });\r\n      }\r\n\r\n      var cbdestinationSmelter = {\r\n        method: \"POST\",\r\n        url: req.body.propertyList.eka_supplierconnect_host + \"\/collection\/mdm\/destination\",\r\n        headers: {\r\n          \"Content-Type\": \"application\/json\",\r\n          Accept: \"application\/json\",\r\n          Authorization: req.headers.authorization,\r\n          \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n        },\r\n        body: [{\r\n          \"pcdiId\": pcdiId,\r\n          \"entity\": \"incoTermId\",\r\n          \"deliveryItem\": deliveryItemRefNo\r\n        }],\r\n        json: true,\r\n      };\r\n\r\n      function get_cbdestinationSmelter() {\r\n        return new Promise(function (resolve, reject) {\r\n          console.log(\"Request - \" + cbdestinationSmelter.url);\r\n          console.log(\"Payload -\" + JSON.stringify(cbdestinationSmelter));\r\n          request(cbdestinationSmelter, function (err, response, body) {\r\n            console.log(\"Request Body - \" + JSON.stringify(body));\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n              console.log('Success');\r\n              resolve(body);\r\n            } else {\r\n              console.log(body.error);\r\n              reject(err || body)\r\n            }\r\n          });\r\n        });\r\n      }\r\n\r\n      var cbuserinfo = {\r\n        method: 'GET',\r\n        url: req.body.propertyList.eka_connect_host + '\/api\/userinfo',\r\n        headers: {\r\n          'Content-Type': 'application\/json',\r\n          Accept: 'application\/json',\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        }\r\n      }\r\n\r\n      function get_cbuserinfo() {\r\n        return new Promise(function (resolve, reject) {\r\n          console.log('Request - ' + cbuserinfo.url);\r\n          request(cbuserinfo, function (err, response, body) {\r\n            console.log('Response - ' + body);\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n              console.log('Success');\r\n              resolve(body);\r\n            } else {\r\n              console.log(body.error);\r\n              reject(err || body)\r\n            }\r\n          });\r\n        });\r\n      }\r\n\r\n      Promise.all([\r\n        get_cbqualityMDM(),\r\n        get_cbdestinationSmelter(),\r\n        get_cbuserinfo()\r\n      ])\r\n        .then(function (cbresult) {\r\n          let cbqualityMDMdata = cbresult[0];\r\n          let cbdestinationMDMdata = cbresult[1];\r\n          let cbuserdata = cbresult[2];\r\n          let resultUserInfoAssaycb = cbuserdata;\r\n          resultUserInfoAssaycb = JSON.parse(resultUserInfoAssaycb);\r\n          console.log(resultUserInfoAssaycb);\r\n          let portalUserDetailscb = {\r\n            \"contactDetails\": \"\",\r\n            \"bankDetails\": \"\",\r\n            \"userName\": resultUserInfoAssaycb.userName,\r\n            \"createFirstName\": resultUserInfoAssaycb.firstName,\r\n            \"createLastName\": resultUserInfoAssaycb.lastName,\r\n            \"updateFirstName\": resultUserInfoAssaycb.firstName,\r\n            \"updateLastName\": resultUserInfoAssaycb.lastName,\r\n            \"email\": resultUserInfoAssaycb.email,\r\n            \"mobile\": \"\",\r\n            \"phone\": \"\",\r\n            \"fax\": \"\",\r\n            \"address\": \"\",\r\n            \"country\": \"\",\r\n            \"state\": \"\",\r\n            \"city\": \"\",\r\n            \"zipcode\": \"\",\r\n            \"website\": \"\"\r\n          }\r\n\r\n          let checkBoxPayload = {};\r\n\r\n          let checkBoxStockList = viewData.assayStockList['Provisional Assay'][0].stockList;\r\n          checkBoxStockList.forEach((item) => {\r\n            if (item.hasOwnProperty('noOfContainers')) {\r\n              delete item['noOfContainers']\r\n            }\r\n            if (item.hasOwnProperty('sealNo')) {\r\n              item['customerSealNo'] = item['sealNo']\r\n              delete item['sealNo']\r\n            }\r\n            if (item.hasOwnProperty('Pallets')) {\r\n              delete item['Pallets']\r\n            }\r\n            if (item.hasOwnProperty('Boxes')) {\r\n              delete item['Boxes']\r\n            }\r\n            if (item.hasOwnProperty('Bags')) {\r\n              delete item['Bags']\r\n            }\r\n            if (item.hasOwnProperty('Loose')) {\r\n              delete item['Loose']\r\n            }\r\n            if (item.hasOwnProperty('Drums')) {\r\n              delete item['Drums']\r\n            }\r\n\r\n          })\r\n\r\n          let elementList_cb = viewData.assayStockList['Provisional Assay'][0].elementList.reduce((a, i) => {\r\n            a.push({\r\n              'elementId': i.elementId,\r\n              'typical': i.typical\r\n            })\r\n            return a;\r\n          }, [])\r\n\r\n          let supplierElementList_cb = viewData.assayStockList['Provisional Assay'][0].elementList.reduce((a, i) => {\r\n            let item = {\r\n              'elementId': i.elementId,\r\n              'typical': i.typical\r\n            }\r\n            \/\/ if (i.assayRule == 'Assay Exchange' || i.assayRule == 'Supplier Assay') {\r\n            if (i.assayRule == 'Assay Exchange') {\r\n              item['useBolidenAssay'] = 'Y'\r\n            }\r\n            a.push(item);\r\n            return a;\r\n          }, [])\r\n          function getFromMdm_cb(value, serviceKey) {\r\n            var res = value;\r\n            if (output.hasOwnProperty(serviceKey) && Array.isArray(output[serviceKey])) res = output[serviceKey].filter(function (item) {\r\n              return item.value == value;\r\n            });\r\n            res = Array.isArray(res) && res.length > 0 ? res[0].key : value;\r\n            return res;\r\n          }\r\n\r\n          function getValue_cb(externalJson, key) {\r\n            var value = '';\r\n            if (Array.isArray(externalJson)) {\r\n              value = externalJson.filter(function (item) {\r\n                return item.key == key;\r\n              });\r\n              value = Array.isArray(value) && value.length > 0 ? value[0].value : '';\r\n            }\r\n            return value;\r\n          }\r\n\r\n          checkBoxPayload['stockList'] = checkBoxStockList;\r\n          checkBoxPayload['pcdiId'] = viewData.viewGmr.pcdiId;\r\n          checkBoxPayload['elementList'] = elementList_cb;\r\n          checkBoxPayload['supplierElementList'] = supplierElementList_cb;\r\n          checkBoxPayload['itemQty'] = selectedData.supplierlisting.quantity;\r\n          checkBoxPayload['itemIncoTermCountryId'] = cbdestinationMDMdata.incoTermDestination[0].countryId;\r\n          checkBoxPayload['activityDate'] = moment(new Date()).format(\"YYYY-MM-DD\");\r\n          checkBoxPayload['modeOfTransport'] = selectedData.supplierlisting.modeOfTransport;\r\n          checkBoxPayload['loadingDate'] = moment(selectedData.supplierlisting.shipmentdate).format(\"YYYY-MM-DD\") + 'T05:30:00.000+05:30' || ''\r\n          checkBoxPayload['expectedTimeOfArrival'] = moment(selectedData.supplierlisting.eta).format(\"YYYY-MM-DD\") + 'T05:30:00.000+05:30' || ''\r\n          checkBoxPayload['noOfContainers'] = selectedData.supplierlisting.numberOfContainers || ''\r\n          checkBoxPayload['supplierRefNo'] = selectedData.supplierlisting.senderRefNo || ''\r\n          checkBoxPayload['isApplyContainerCharge'] = selectedData.supplierlisting.applyContainerCharges || ''\r\n          checkBoxPayload['internalGMRRefNo'] = selectedData.supplierlisting.internalGmrRefNo\r\n          checkBoxPayload['portalUserDetails'] = portalUserDetailscb;\r\n          checkBoxPayload['itemQualityId'] = cbqualityMDMdata.contractQuality[0].key\r\n          checkBoxPayload['itemIncoTermId'] = cbdestinationMDMdata.incoTermDestination[0].incoTermId;\r\n          checkBoxPayload['itemIncoTermCityId'] = cbdestinationMDMdata.incoTermDestination[0].cityId;\r\n          checkBoxPayload['loadingCountryId'] = getFromMdm_cb(viewData.viewGmr.loadingCountryName, 'countriesComboDataFromDB');\r\n          checkBoxPayload['qtyUnitId'] = getValue_cb(cbqualityMDMdata.contractQuality[0].extJson, 'qtyUnitId') || ''\r\n          checkBoxPayload['dischargeCountryId'] = getValue_cb(cbdestinationMDMdata.incoTermDestination[0].extJson, 'dischargeCountryId') || '';\r\n          checkBoxPayload['dischargeCityId'] = getValue_cb(cbdestinationMDMdata.incoTermDestination[0].extJson, 'dischargeCityId') || '';\r\n          checkBoxPayload['countryOfOriginCountryId'] = getFromMdm_cb(viewData.viewGmr.countryOfOriginCountryName, 'countriesComboDataFromDB');\r\n          checkBoxPayload['comments'] = viewData.viewGmr.comments;\r\n          checkBoxPayload['specialInstructions'] = \"\"; \/\/\r\n          checkBoxPayload['createSupplierAssay'] = \"\"; \/\/\r\n          checkBoxPayload['senderId'] = getValue_cb(cbqualityMDMdata.contractQuality[0].extJson, 'supplierId') || ''\r\n          checkBoxPayload['suppRepId'] = getFromMdm_cb(viewData.viewGmr.supplierRepresentaive, 'businesspartnercontactperson');\r\n          checkBoxPayload['sendersAddress'] = viewData.viewGmr.supplierAddress;\r\n          checkBoxPayload['useBolidenAssay'] = selectedData.checkboxVal == 'Y' ? 'Y' : 'N';\r\n          getDropdown_cb([{\r\n            \"serviceKey\": \"cityComboDataFromDB\",\r\n            \"dependsOn\": [\r\n              checkBoxPayload['loadingCountryId'],\r\n              \"City\"\r\n            ]\r\n          }]).then(function (city) {\r\n\r\n            if (city.hasOwnProperty('cityComboDataFromDB'))\r\n              output['cityComboDataFromDB'] = city['cityComboDataFromDB'];\r\n            checkBoxPayload['loadingCityId'] = getFromMdm_cb(viewData.viewGmr.loadingCityName, 'cityComboDataFromDB');\r\n\r\n            var shipment_cb = {\r\n              method: 'POST',\r\n              url: req.body.propertyList.eka_ctrm_host + '\/api\/logistic\/editShipment',\r\n              headers: {\r\n                'Content-Type': 'application\/json',\r\n                Accept: 'application\/json',\r\n                Authorization: req.headers.authorization,\r\n                'X-TenantID': req.headers['x-tenantid']\r\n              },\r\n              body: checkBoxPayload,\r\n              json: true\r\n            };\r\n\r\n            function get_shipment_cb() {\r\n              return new Promise(function (resolve, reject) {\r\n                console.log('Request - ' + shipment_cb.url);\r\n                request(shipment_cb, function (err, response, body) {\r\n                  console.log('Response - ' + body);\r\n                  if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                    console.log('Success');\r\n                    resolve(body);\r\n                  } else {\r\n                    console.log(body.error);\r\n                    reject(err || body);\r\n                  }\r\n                });\r\n              });\r\n            }\r\n            console.log(\"stringifyDAta\", JSON.stringify(checkBoxPayload))\r\n            get_shipment_cb().then(function (result) {\r\n              console.log(JSON.stringify(result))\r\n              var data = result;\r\n              res.status(200).send(data);\r\n            })\r\n          }).catch((err) => {\r\n            console.log(err);\r\n            res.status(500).send(err)\r\n          })\r\n\r\n        }).catch(function (err) {\r\n          console.log(err);\r\n          res.status(500).send(err);\r\n        })\r\n    })",
    "sys__UUID" : "9c3cb1e4-fe0e-410e-b9b9-f4d2e105ec09"
}