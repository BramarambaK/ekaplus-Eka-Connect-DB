{
  "_id" : "_EDIT_UPDATEDDATA_PROCESSOR_esourcing",
  "name" : "_EDIT_UPDATEDDATA_PROCESSOR_esourcing",
  "type" : "processor",
  "refType" : "app",
  "refTypeId" : "7e484cae-36aa-46dc-b9ae-33c8d246f056",
  "snippet" : "\r\n    \r\n    \/\/ packaging Submit\r\n    var moment = require(\"moment\");\r\n    var updatedData = req.body.allSelectedData;\r\n    let intGmrRefNo = updatedData.supplierlisting.internalGmrRefNo || '';\r\n    let deliveryItemRefNo = updatedData.supplierlisting.deliveryItemRefNo || '';\r\n    let pcdiId = '';\r\n    let object = {};\r\n    let payLoad1 = {};\r\n    let qtyUnitId = '';\r\n    let notificationPayload = {};\r\n    let qualMdmDATA = [];\r\n    let destMdmDATA = [];\r\n\r\n    var viewgmr = {\r\n      method: \"POST\",\r\n      url: req.body.propertyList.eka_connect_host + \"\/workflow\",\r\n      headers: {\r\n        \"Content-Type\": \"application\/json\",\r\n        Accept: \"application\/json\",\r\n        Authorization: req.headers.authorization,\r\n        \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n      },\r\n      body: {\r\n        appId: \"7e484cae-36aa-46dc-b9ae-33c8d246f056\",\r\n        workflowTaskName: \"viewgmrdata_SC\",\r\n        task: \"viewgmrdata_SC\",\r\n        payLoadData: \"\",\r\n        output: {\r\n          ['viewgmrdata_SC']: {\r\n            ['intGmrRefNo']: intGmrRefNo,\r\n          },\r\n        },\r\n      },\r\n      json: true,\r\n    };\r\n    var notificationElastic = {\r\n      method: \"POST\",\r\n      url: req.body.propertyList.eka_connect_host + \"\/workflow\/notifyDataChange\",\r\n      headers: {\r\n        \"Content-Type\": \"application\/json\",\r\n        Accept: \"application\/json\",\r\n        Authorization: req.headers.authorization,\r\n        \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n      },\r\n      body: {\r\n        \"app\": \"supplierconnect\",\r\n        \"object\": \"supplier\",\r\n        \"objectAction\": \"Update\",\r\n        appId: \"7e484cae-36aa-46dc-b9ae-33c8d246f056\",\r\n        payload: [notificationPayload],\r\n      },\r\n      json: true,\r\n    };\r\n    function get_viewgmr() {\r\n      return new Promise(function (resolve, reject) {\r\n        console.log(\"Request - \" + viewgmr.url);\r\n        console.log(\"Payload -\" + JSON.stringify(viewgmr));\r\n        request(viewgmr, function (err, response, body) {\r\n          console.log(\"Request Body - \" + JSON.stringify(body));\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            console.log('Success');\r\n            resolve(body);\r\n          } else {\r\n            console.log(body.error);\r\n            reject(err || body)\r\n          }\r\n        });\r\n      });\r\n    }\r\n    get_viewgmr()\r\n      .then(result => {\r\n        let pcdid = result.data.pcdiId;\r\n        pcdiId = pcdid;\r\n        function getDropdown(data) {\r\n          var businesspartnercontactperson = [\r\n            {\r\n              \"serviceKey\": \"countriesComboDataFromDB\",\r\n              \"dependsOn\": []\r\n            },\r\n            {\r\n              \"serviceKey\": \"loose_esourcing\",\r\n              \"dependsOn\": []\r\n            },\r\n            {\r\n              \"serviceKey\": \"countriesComboDataFromDB\",\r\n              \"dependsOn\": []\r\n            },\r\n            {\r\n              \"serviceKey\": \"incoTermDestination\",\r\n              \"dependsOn\": [\r\n                pcdiId,\r\n                deliveryItemRefNo\r\n              ]\r\n            },\r\n            {\r\n              \"serviceKey\": \"contractQuality\",\r\n              \"dependsOn\": [\r\n                pcdiId,\r\n                deliveryItemRefNo\r\n              ]\r\n            },\r\n            {\r\n              \"serviceKey\": \"businesspartnercontactperson\",\r\n              \"dependsOn\": [\r\n                \"INSPECTIONAGENCY\"\r\n              ]\r\n            }\r\n\r\n          ];\r\n          if (data) {\r\n            businesspartnercontactperson = data\r\n          }\r\n          var obj = {\r\n            method: 'POST',\r\n            body: businesspartnercontactperson,\r\n            url: `${req.body.propertyList.eka_mdm_host}\/mdm\/${req.body.appId}\/data`,\r\n            headers: {\r\n              Authorization: req.headers.authorization,\r\n              'Content-Type': 'application\/json',\r\n              'X-TenantID': req.headers['X-TenantID']\r\n            },\r\n            json: true\r\n          };\r\n          console.log('mdm url', obj.url);\r\n          return new Promise(function (resolve, reject) {\r\n            request(obj, function (err, response, body) {\r\n              if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                console.log('Success');\r\n                resolve(body);\r\n              } else {\r\n                console.log(body.error);\r\n                reject(err || body)\r\n              }\r\n            });\r\n          });\r\n        }\r\n        getDropdown().then(output => {\r\n          var qualityMDM = {\r\n            method: \"POST\",\r\n            url: req.body.propertyList.eka_supplierconnect_host + \"\/collection\/mdm\/entity\",\r\n            headers: {\r\n              \"Content-Type\": \"application\/json\",\r\n              Accept: \"application\/json\",\r\n              Authorization: req.headers.authorization,\r\n              \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n            },\r\n            body: [{\r\n              \"pcdiId\": pcdiId,\r\n              \"entity\": \"contractQuality\",\r\n              \"deliveryItem\": deliveryItemRefNo\r\n            }],\r\n            json: true,\r\n          };\r\n          function get_qualityMDM() {\r\n            return new Promise(function (resolve, reject) {\r\n              console.log(\"Request - \" + qualityMDM.url);\r\n              console.log(\"Payload -\" + JSON.stringify(qualityMDM));\r\n              request(qualityMDM, function (err, response, body) {\r\n                console.log(\"Request Body - \" + JSON.stringify(body));\r\n                if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                  console.log('Success');\r\n                  resolve(body);\r\n                } else {\r\n                  console.log(body.error);\r\n                  reject(err || body)\r\n                }\r\n              });\r\n            });\r\n          }\r\n          var destinationSmelter = {\r\n            method: \"POST\",\r\n            url: req.body.propertyList.eka_supplierconnect_host + \"\/collection\/mdm\/destination\",\r\n            headers: {\r\n              \"Content-Type\": \"application\/json\",\r\n              Accept: \"application\/json\",\r\n              Authorization: req.headers.authorization,\r\n              \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n            },\r\n            body: [{\r\n              \"pcdiId\": pcdiId,\r\n              \"entity\": \"incoTermId\",\r\n              \"deliveryItem\": deliveryItemRefNo\r\n            }],\r\n            json: true,\r\n          };\r\n          function get_destinationSmelter() {\r\n            return new Promise(function (resolve, reject) {\r\n              console.log(\"Request - \" + destinationSmelter.url);\r\n              console.log(\"Payload -\" + JSON.stringify(destinationSmelter));\r\n              request(destinationSmelter, function (err, response, body) {\r\n                console.log(\"Request Body - \" + JSON.stringify(body));\r\n                if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                  console.log('Success');\r\n                  resolve(body);\r\n                } else {\r\n                  console.log(body.error);\r\n                  reject(err || body)\r\n                }\r\n              });\r\n            });\r\n          }\r\n          Promise.all([\r\n            get_qualityMDM(),\r\n            get_destinationSmelter()\r\n          ])\r\n            .then(function (resultMdm) {\r\n              qtyUnitId = resultMdm[0].contractQuality[0].extJson[2].value;\r\n              qualMdmDATA = resultMdm[0];\r\n              destMdmDATA = resultMdm[1];\r\n              var userinfo = {\r\n                method: 'GET',\r\n                url: req.body.propertyList.eka_connect_host + '\/api\/userinfo',\r\n                headers: {\r\n                  'Content-Type': 'application\/json',\r\n                  Accept: 'application\/json',\r\n                  Authorization: req.headers.authorization,\r\n                  'X-TenantID': req.headers['x-tenantid']\r\n                }\r\n              }\r\n              function get_userinfo() {\r\n                return new Promise(function (resolve, reject) {\r\n                  console.log('Request - ' + userinfo.url);\r\n                  request(userinfo, function (err, response, body) {\r\n                    console.log('Response - ' + body);\r\n                    if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                      console.log('Success');\r\n                      resolve(body);\r\n                    } else {\r\n                      console.log(body.error);\r\n                      reject(err || body)\r\n                    }\r\n                  });\r\n                });\r\n              }\r\n              get_userinfo().then(function (resultUserInfo) {\r\n                resultUserInfo = JSON.parse(resultUserInfo);\r\n                console.log(resultUserInfo);\r\n                let portalUserDetails = {\r\n                  \"contactDetails\": \"\",\r\n                  \"bankDetails\": \"\",\r\n                  \"userName\": resultUserInfo.userName,\r\n                  \"createFirstName\": resultUserInfo.firstName,\r\n                  \"createLastName\": resultUserInfo.lastName,\r\n                  \"updateFirstName\": resultUserInfo.firstName,\r\n                  \"updateLastName\": resultUserInfo.lastName,\r\n                  \"email\": resultUserInfo.email,\r\n                  \"mobile\": \"\",\r\n                  \"phone\": \"\",\r\n                  \"fax\": \"\",\r\n                  \"address\": \"\",\r\n                  \"country\": \"\",\r\n                  \"state\": \"\",\r\n                  \"city\": \"\",\r\n                  \"zipcode\": \"\",\r\n                  \"website\": \"\"\r\n                }\r\n                let containerKeys = Object.keys(updatedData.editpackaginggmrdetail.containerDetails[0]);\r\n                for (let i = 0; i < containerKeys.length; i++) {\r\n                  if (containerKeys[i] != 'allAssayData' && containerKeys[i] != 'viewGmrData') {\r\n                    object[containerKeys[i]] = updatedData.editpackaginggmrdetail.containerDetails[0][containerKeys[i]]\r\n                  }\r\n                }\r\n                let elementList = updatedData.editpackaginggmrdetail.containerDetails[0].allAssayData['Provisional Assay'][0]['elementList'].reduce((a, i) => {\r\n                  a.push({\r\n                    'elementId': i.elementId,\r\n                    'typical': i.typical\r\n                  })\r\n                  return a;\r\n                }, [])\r\n                function getRemarks(item) {\r\n                  let res = '';\r\n                  if (item) {\r\n                    res = res + `Loose-${item.loose}, Drums-${item.drums}, Bags-${item.bags}, Boxes-${item.boxes}, Pallets-${item.pallets}`;\r\n                  }\r\n                  return res;\r\n                }\r\n                let vesselName = '';\r\n                function findContnoOrTransportId(containerData) {\r\n                  var value = '';\r\n                  if (containerData.containerNo) {\r\n                    value = containerData.containerNo;\r\n                    return value;\r\n                  } else {\r\n                    value = containerData.transportId;\r\n                    vesselName = value;\r\n                    return value;\r\n                  }\r\n                }\r\n                let newStockList = req.body.containerDetails.reduce((a, i) => {\r\n                  a.push({\r\n                    \"netWeight\": i.netWeight.toString() || '',\r\n                    \"grossWeight\": i.grossWeight.toString() || '',\r\n                    \"tareWeight\": '0',\r\n                    \"containerNo\": findContnoOrTransportId(i),\r\n                    \"containerSize\": i.containerSize || '',\r\n                    \"customerSealNo\": i.sealNo || '',\r\n                    \"noOfBags\": i.totalPackage.toString() || '',\r\n                    \"remarks\": getRemarks(i)\r\n                  })\r\n                  return a;\r\n                }, [])\r\n                \/\/ To check if if Trnasport Id is present\r\n                let transportIdPresent = false;\r\n                req.body.containerDetails.forEach((item) => {\r\n                  if ('transportId' in item) {\r\n                    transportIdPresent = true;\r\n                  }\r\n                });\r\n                function getFromMdm(value, serviceKey) {\r\n                  let res = value\r\n                  if (output.hasOwnProperty(serviceKey) && Array.isArray(output[serviceKey]))\r\n                    res = output[serviceKey].filter((item) => item.value == value)\r\n                  res = Array.isArray(res) && res.length > 0 ? res[0].key : value\r\n                  return res\r\n                }\r\n                function getCorrespondingDestination(key, mdm) {\r\n                  if (key) {\r\n                    let incoTerm = mdm.filter((item) => {\r\n                      if (item.key == key) {\r\n                        return item;\r\n                      }\r\n                    });\r\n                    incoTerm = incoTerm[0].incoTermId;\r\n                    return incoTerm;\r\n                  } else {\r\n                    return '';\r\n                  }\r\n                }\r\n                function totalQuantityPackaging(data){\r\n                  let totalPackagingQty = 0;\r\n                  data.forEach((item) => {\r\n                    totalPackagingQty +=Number(item.netWeight);\r\n                  })\r\n                  totalPackagingQty = totalPackagingQty.toString();\r\n                  return totalPackagingQty;\r\n                }\r\n                payLoad1['stockList'] = newStockList;\r\n                payLoad1['pcdiId'] = pcdiId;\r\n                payLoad1['elementList'] = elementList;\r\n                payLoad1['supplierElementList'] = elementList;\r\n                \/\/ payLoad1['itemQty'] = updatedData.supplierlisting.quantity;\r\n                payLoad1['itemQty'] = totalQuantityPackaging(payLoad1.stockList) || '';\r\n                payLoad1['modeOfTransport'] = updatedData.supplierlisting.modeOfTransport\r\n                payLoad1['loadingDate'] = moment(updatedData.supplierlisting.LoadingDate).format(\"YYYY-MM-DD\") + 'T05:30:00.000+05:30';\r\n                payLoad1['expectedTimeOfArrival'] = moment(updatedData.supplierlisting.ExpectedArrivalDate).format(\"YYYY-MM-DD\") + 'T05:30:00.000+05:30';\r\n                payLoad1['activityDate'] = moment(new Date()).format('YYYY-MM-DD');\r\n                payLoad1['noOfContainers'] = transportIdPresent == true ? '0' : req.body.noOfContainers.toString() || ''\r\n                payLoad1['supplierRefNo'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.SupplierReference : updatedData.viewgmrbasic.sendersRefNo;\r\n                payLoad1['isApplyContainerCharge'] = updatedData.supplierlisting.applyContainerCharges\r\n                payLoad1['internalGMRRefNo'] = updatedData.supplierlisting.internalGmrRefNo\r\n                payLoad1['useBolidenAssay'] = updatedData.viewgmrbasic.useBolidenAssay || '';\r\n                payLoad1['portalUserDetails'] = portalUserDetails;\r\n                payLoad1['itemQualityId'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.Quality : resultMdm[0].contractQuality[0].key;\r\n                payLoad1['itemIncoTermId'] = updatedData.editgmrbasicgmrdetails ? getCorrespondingDestination(updatedData.editgmrbasicgmrdetails.incoLocation, resultMdm[1].incoTermDestination) : resultMdm[1].incoTermDestination[0].incoTermId;\r\n                payLoad1['itemIncoTermCityId'] = resultMdm[1].incoTermDestination[0].cityId;\r\n                payLoad1['itemIncoTermCountryId'] = resultMdm[1].incoTermDestination[0].countryId;\r\n                payLoad1['qtyUnitId'] = qtyUnitId;\r\n                payLoad1['loadingCountryId'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.LoadingLocationCountry : getFromMdm(updatedData.viewgmrbasic.loadingCountryName, 'countriesComboDataFromDB');\r\n                \/\/ payLoad1['dischargeCountryId'] = resultMdm[1].incoTermDestination[0].extJson[1].value;\r\n                payLoad1['dischargeCountryId'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.dischargeCountryId :resultMdm[1].incoTermDestination[0].extJson[1].value;\r\n                payLoad1['dischargeCityId'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.dischargeCityId : resultMdm[1].incoTermDestination[0].extJson[2].value;\r\n                \/\/ payLoad1['dischargeCityId'] = resultMdm[1].incoTermDestination[0].extJson[2].value;\r\n                payLoad1['countryOfOriginCountryId'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.CountryOfOrigin : getFromMdm(updatedData.viewgmrbasic.countryOfOriginCountryName, 'countriesComboDataFromDB');\r\n                payLoad1['comments'] = updatedData.supplierlisting.MaterialDescription ? updatedData.supplierlisting.MaterialDescription : updatedData.viewgmrbasic.comments;\r\n                payLoad1['specialInstructions'] = \"\";\r\n                payLoad1['createSupplierAssay'] = \"\";\r\n                payLoad1['vesselName'] = vesselName && vesselName != '' ? vesselName : '';\r\n                payLoad1['suppRepId'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.SupplierRepresentative : getFromMdm(updatedData.viewgmrbasic.supplierRepresentaive, 'businesspartnercontactperson');\r\n                payLoad1['senderId'] = resultMdm[0].contractQuality[0].extJson[4].value;\r\n                payLoad1['sendersAddress'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.cpAddress : updatedData.viewgmrbasic.supplierAddress;\r\n                getDropdown([{\r\n                  \"serviceKey\": \"cityComboDataFromDB\",\r\n                  \"dependsOn\": [\r\n                    payLoad1['loadingCountryId'],\r\n                    \"City\"\r\n                  ]\r\n                }]).then(function (city) {\r\n\r\n                  if (city.hasOwnProperty('cityComboDataFromDB'))\r\n                    output['cityComboDataFromDB'] = city['cityComboDataFromDB'];\r\n                  payLoad1['loadingCityId'] = getFromMdm(updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.LoadingLocationCityDisplayName : updatedData.supplierlisting.loadingCity, 'cityComboDataFromDB');\r\n                  if (payLoad1.hasOwnProperty('deliveryItemRefNo')) {\r\n                    delete payLoad1['deliveryItemRefNo']\r\n                  }\r\n                  var shipment = {\r\n                    method: 'POST',\r\n                    url: req.body.propertyList.eka_ctrm_host + '\/api\/logistic\/editShipment',\r\n                    headers: {\r\n                      'Content-Type': 'application\/json',\r\n                      Accept: 'application\/json',\r\n                      Authorization: req.headers.authorization,\r\n                      'X-TenantID': req.headers['x-tenantid']\r\n                    },\r\n                    body: payLoad1,\r\n                    json: true\r\n                  };\r\n                  function get_shipment() {\r\n                    return new Promise(function (resolve, reject) {\r\n                      console.log('Request - ' + shipment.url);\r\n                      request(shipment, function (err, response, body) {\r\n                        console.log('Response - ' + body);\r\n                        console.log('Errors - ' + err);\r\n                        if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                          console.log('Success');\r\n                          resolve(body);\r\n                        } else {\r\n                          console.log(\"errors\")\r\n                          let errorMsg = '';\r\n                          if (body.hasOwnProperty(\"ErrorList: \") && (Array.isArray(body[\"ErrorList: \"])) && (body[\"ErrorList: \"].length > 0)) {\r\n                            for (let i = 0; i < body[\"ErrorList: \"].length; i++) {\r\n                              if (i != body[\"ErrorList: \"].length - 1) {\r\n                                errorMsg = errorMsg + body[\"ErrorList: \"][i] + ' ,'\r\n                              } else {\r\n                                errorMsg = errorMsg + body[\"ErrorList: \"][i];\r\n                              }\r\n                            }\r\n                          }\r\n                          if (errorMsg != '') {\r\n                            reject(errorMsg)\r\n                          } else {\r\n                            console.log(body.error);\r\n                            reject(err || body)\r\n                          }\r\n                        }\r\n                      });\r\n                    });\r\n                  }\r\n                  function postNotificationElastic() {\r\n                    return new Promise(function (resolve, reject) {\r\n                      console.log('Request - ' + notificationElastic.url);\r\n                      console.log('Notificaiton Body', JSON.stringify(notificationElastic.body))\r\n                      request(notificationElastic, function (err, response, body) {\r\n                        console.log('Response - ' + body);\r\n                        if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                          console.log('Success');\r\n                          resolve(body);\r\n                        } else {\r\n                          console.log(body.error);\r\n                          reject(err || body)\r\n                        }\r\n                      });\r\n                    });\r\n                  }\r\n                  console.log(\"stringifyDAta\", JSON.stringify(payLoad1))\r\n                  var start = new Date();\r\n                  get_shipment().then(function (result) {\r\n                    var end1 = new Date() - start;\r\n                    console.log('Edit Shipment', end1);\r\n                    var data = result;\r\n                    \/\/ new notificaion api\r\n                    function getContainerSize(data, key) {\r\n                      let final = ''\r\n                      data.forEach((item, index) => {\r\n                        if (key == 'containerNo' && item.hasOwnProperty('transportId')) {\r\n                          key = 'transportId';\r\n                        }\r\n                        if (item.hasOwnProperty(key)) {\r\n                          if (index > data.length - 2) {\r\n                            final = final + item[key]\r\n                          } else {\r\n                            final = final + item[key] + ', ';\r\n                          }\r\n                        }\r\n                      })\r\n                      return final;\r\n                    }\r\n\r\n                    function totalQuantity(data) {\r\n                      let totalQuantity = 0;\r\n                      data.forEach((item) => {\r\n                        totalQuantity += Number(item.netWeight);\r\n                      })\r\n                      totalQuantity = totalQuantity.toString();\r\n                      return totalQuantity;\r\n                    }\r\n                    console.log(destMdmDATA);\r\n                    notificationPayload['numberOfContainers'] = payLoad1.noOfContainers;\r\n                    notificationPayload['contractType'] = updatedData.supplierlisting.contractType;\r\n                    notificationPayload['wnSStatus'] = updatedData.supplierlisting.wnSStatus;\r\n                    notificationPayload['dischargeCountry'] = destMdmDATA.incoTermDestination[0].countryName;\r\n                    notificationPayload['modeOfTransport'] = updatedData.supplierlisting.modeOfTransport;\r\n                    notificationPayload['shipmentdate'] = payLoad1.loadingDate;\r\n                    notificationPayload['dischargeCity'] = destMdmDATA.incoTermDestination[0].cityName;\r\n                    notificationPayload['updatedDate'] = moment(new Date()).format('DD-MMM-YYYY HH:mm');\r\n                    notificationPayload['gmrRefNo'] = updatedData.supplierlisting.gmrRefNo;\r\n                    notificationPayload['currentPricingStatus'] = updatedData.supplierlisting.currentPricingStatus;\r\n                    notificationPayload['eta'] = payLoad1.expectedTimeOfArrival;\r\n                    notificationPayload['latestActivityBy'] = moment(updatedData.supplierlisting.eta).format(\"YYYY-MM-DD\") + 'T05:30:00.000+05:30';\r\n                    notificationPayload['gmrCreatedDate'] = moment(updatedData.supplierlisting.gmrCreatedDate).format(\"YYYY-MM-DD\") + 'T05:30:00.000+05:30';\r\n                    notificationPayload['currentQuantity'] = updatedData.supplierlisting.currentQuantity;\r\n                    notificationPayload['containerSize'] = getContainerSize(payLoad1.stockList, 'containerSize');\r\n                    notificationPayload['isIntercompany'] = updatedData.supplierlisting.isIntercompany;\r\n                    notificationPayload['updatedBy'] = 'Portal User';\r\n                    notificationPayload['entityVersionMap'] = updatedData.supplierlisting.entityVersionMap;\r\n                    notificationPayload['releasedQuantity'] = updatedData.supplierlisting.releasedQuantity;\r\n                    notificationPayload['earliestPriceFixation'] = updatedData.viewgmrbasic.earliestPriceFixation;\r\n                    notificationPayload['cpName'] = updatedData.supplierlisting.cpName;\r\n                    notificationPayload['inventoryStatus'] = updatedData.supplierlisting.inventoryStatus;\r\n                    notificationPayload['totalNoOfRecords'] = updatedData.supplierlisting.totalNoOfRecords;\r\n                    notificationPayload['isWarrantGmr'] = updatedData.supplierlisting.isWarrantGmr;\r\n                    notificationPayload['landedQuantity'] = updatedData.supplierlisting.landedQuantity;\r\n                    notificationPayload['internalGmrRefNo'] = updatedData.supplierlisting.internalGmrRefNo;\r\n                    notificationPayload['qualityName'] = updatedData.supplierlisting.qualityName;\r\n                    notificationPayload['deliveryItemRefNo'] = updatedData.supplierlisting.deliveryItemRefNo;\r\n                    notificationPayload['markedForUmpireDisplay'] = updatedData.supplierlisting.markedForUmpireDisplay;\r\n                    notificationPayload['containerNo'] = getContainerSize(payLoad1.stockList, 'containerNo')\r\n                    notificationPayload['quantityUnit'] = updatedData.supplierlisting.quantityUnit;\r\n                    notificationPayload['portalUpdatedUser'] = payLoad1.portalUserDetails.updateFirstName + ',' + payLoad1.portalUserDetails.updateLastName;\r\n                    notificationPayload['loadingCountry'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.LoadingLocationCountryDisplayName : updatedData.supplierlisting.loadingCountry; \/\/2005``\r\n                    notificationPayload['corporateId'] = updatedData.supplierlisting.corporateId;\r\n                    notificationPayload['gmrRefNo_hidden'] = updatedData.supplierlisting.gmrRefNo_hidden;\r\n                    notificationPayload['latestAssayType'] = updatedData.supplierlisting.latestAssayType;\r\n                    notificationPayload['portalCreatedUser'] = payLoad1.portalUserDetails.createFirstName + ',' + payLoad1.portalUserDetails.createLastName;\r\n                    notificationPayload['blDate'] = moment(updatedData.supplierlisting.blDate).format(\"YYYY-MM-DD\") + 'T05:30:00.000+05:30';\r\n                    notificationPayload['shippedQuantity'] = updatedData.supplierlisting.shippedQuantity;\r\n                    notificationPayload['applyContainerCharges'] = updatedData.supplierlisting.applyContainerCharges;\r\n                    notificationPayload['senderRefNo'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.SupplierReference : updatedData.viewgmrbasic.sendersRefNo;\r\n                    notificationPayload['rnum'] = updatedData.supplierlisting.rnum;\r\n                    notificationPayload['loadingCity'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.LoadingLocationCityDisplayName : updatedData.supplierlisting.loadingCity; \/\/2005\r\n                    notificationPayload['product'] = updatedData.supplierlisting.product;\r\n                    notificationPayload['quantity'] = totalQuantity(payLoad1.stockList) || '';\r\n                    notificationPayload['internalContractRefNo'] = updatedData.supplierlisting.internalContractRefNo;\r\n                    notificationPayload['applyFreightAllowance'] = updatedData.supplierlisting.applyFreightAllowance;\r\n                    notificationPayload['bolidenAssayAsFinal'] = payLoad1.useBolidenAssay;\r\n                    notificationPayload['isPassThroughGMR'] = updatedData.supplierlisting.isPassThroughGMR;\r\n                    notificationPayload['bolidenAssayAsFinalDisplay'] = updatedData.supplierlisting.bolidenAssayAsFinalDisplay;\r\n                    notificationPayload['isInternalMovementGMR'] = updatedData.supplierlisting.isInternalMovementGMR;\r\n                    notificationPayload['corporate'] = updatedData.supplierlisting.corporate;\r\n                    notificationPayload['contractRefNo'] = updatedData.supplierlisting.contractRefNo;\r\n                    notificationPayload['createdBy'] = updatedData.supplierlisting.createdBy;\r\n                    notificationPayload['incoLocation'] = destMdmDATA.incoTermDestination[0].value;\r\n                    notificationPayload['markedForUmpire'] = updatedData.supplierlisting.markedForUmpire;\r\n                    notificationPayload['countryOfOrigin'] = updatedData.editgmrbasicgmrdetails ? updatedData.editgmrbasicgmrdetails.CountryOfOriginDisplayName : updatedData.supplierlisting.countryOfOrigin; \/\/2105\r\n                    notificationPayload['runId'] = updatedData.supplierlisting.runId;\r\n                    notificationPayload['weightStatus'] = updatedData.supplierlisting.weightStatus;\r\n                    console.log(notificationPayload);\r\n                    postNotificationElastic().then(result => {\r\n                      console.log(JSON.stringify(result));\r\n                      res.status(200).send(data);\r\n                    }).catch(function (err) {\r\n                      console.log(err);\r\n                    });\r\n                  })\r\n                    .catch((err) => { \/\/added6\r\n                      console.log(err);\r\n                      err = err.hasOwnProperty('Error') ? err.Error : err;\r\n                      res.status(500).send(err)\r\n                    })\r\n                })\r\n              }).catch((err) => {\r\n                console.log(err);\r\n                res.status(500).send(err)\r\n              })\r\n                .catch((err) => { \/\/952\r\n                  console.log(err);\r\n                  res.status(500).send(err)\r\n                })\r\n            }).catch((err) => { \/\/923\r\n              console.log(err);\r\n              res.status(500).send(err)\r\n            })\r\n\r\n        }).catch((err) => { \/\/847\r\n          console.log(err);\r\n          res.status(500).send(err)\r\n        })\r\n      })\r\n      .catch((err) => { \/\/779\r\n        console.log(err);\r\n        res.status(500).send(err)\r\n      })\r\n  \r\n   ",
  "sys__UUID" : "866f7e93-23aa-4a87-8e9c-e4639828884f"
}