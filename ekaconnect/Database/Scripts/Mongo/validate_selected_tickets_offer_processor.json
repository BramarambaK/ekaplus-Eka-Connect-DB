{
  "_id": "validate_selected_tickets_offer_processor",
  "name": "validate_selected_tickets_offer_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "sys__UUID": "7b11828e-2e96-4eb1-a919-3eba0e6a6055",
  "snippet": "var moment = require('moment');\r\nconst today = moment(moment().format('YYYY-MM-DD HH'), 'YYYY-MM-DD HH');\r\nconst errorMsg = 'Entry errors identified. Please review';\r\nconst maxErrorMsg = 'Maximum 10 tickets can be selected. Please review';\r\nconst send = (status, message) => {\r\n    return res.status(status).send(message);\r\n  };\r\n\r\n  const proceedOffer = body =>\r\n    new Promise(function(resolve, reject) {\r\n      request(\r\n        {\r\n          method: 'GET',\r\n          url:\r\n            req.body.propertyList.eka_connect_host +\r\n            '/data/12325a98-a959-4939-9005-4158d136afcd/6d10c2dd-c5c5-451e-88f5-3de80e151bc3',\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            'X-TenantID': req.headers['x-tenantid']\r\n          },\r\n          body,\r\n          json: true\r\n        },\r\n        function(err, response, body) {\r\n          if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  const payload1 = req.body.enterwarehousedticketoffercomposite ? req.body.enterwarehousedticketoffercomposite : [];\r\n  const payload2 = req.body.enterwarehousedticketofferlistingcomposite\r\n    ? req.body.enterwarehousedticketofferlistingcomposite\r\n    : [];\r\n\r\n  let tickets =\r\n    payload1.length != 0\r\n      ? payload1.warehousedticketenteroffer\r\n      : payload2.length != 0\r\n      ? payload2.warehousedticketlistingenteroffer\r\n      : [];\r\n  let buyerData =\r\n    payload1.length != 0 ? payload1.warehousedticketselectbuyers.buyer : payload2.warehousedticketselectbuyers.buyer;\r\n\r\n  let buyerObj = {\r\n    filterData: {\r\n      filter: [\r\n        {\r\n          fieldName: 'bpName',\r\n          operator: 'eq',\r\n          value: buyerData\r\n        }\r\n      ]\r\n    }\r\n  };\r\n\r\n  let selectedTickets = [];\r\n  for (let i in tickets) {\r\n    if (tickets[i]['__selected__']) {\r\n      selectedTickets.push(tickets[i]);\r\n    }\r\n  }\r\n\r\n  const data = selectedTickets.map(element => ({\r\n    ...element,\r\n    buyer: buyerData\r\n  }));\r\n\r\n  try {\r\n    if (data.length > 0 && data.length <= 10) {\r\n      for (let j in data) {\r\n        for (let i in data[j]) {\r\n          if (\r\n            (i === 'offerExpiryDate' || i === 'offerPrice' || i === 'buyer') &&\r\n            (data[j][i] === null || data[j][i] === '' || data[j][i] === undefined)\r\n          ) {\r\n            return send(400, errorMsg);\r\n          }\r\n          if (i === 'offerExpiryDate' && moment(data[j][i], 'YYYY-MM-DD HH').isBefore(today)) {\r\n            return send(400, errorMsg);\r\n          }\r\n          if (i === 'offerPrice' && data[j][i] <= 0.0) {\r\n            return send(400, errorMsg);\r\n          }\r\n        }\r\n      }\r\n\r\n      proceedOffer(buyerObj)\r\n        .then(buyerDetails => {\r\n          const modifiedData = data.map(i => ({\r\n            ...i,\r\n            ticketHandlerBpRefNo: buyerDetails[0].bpRefNo,\r\n            ticketHandlerCode: buyerDetails[0].bpExternalCode\r\n          }));\r\n          const updatedData =\r\n            payload1.length > 0\r\n              ? {\r\n                  warehousedticketselectbuyers: payload1.warehousedticketselectbuyers,\r\n                  warehousedticketenteroffer: payload1.warehousedticketenteroffer,\r\n                  data: modifiedData\r\n                }\r\n              : {\r\n                  warehousedticketselectbuyers: payload2.warehousedticketselectbuyers,\r\n                  warehousedticketlistingenteroffer: payload2.warehousedticketlistingenteroffer,\r\n                  data: modifiedData\r\n                };\r\n          send(200, updatedData);\r\n        })\r\n        .catch('Error on fetching bp master data');\r\n    } else if (data.length > 10) {\r\n      return send(400, maxErrorMsg);\r\n    } else {\r\n      send(400, errorMsg);\r\n    }\r\n  } catch (err) {\r\n    send(500, {\r\n      errorCode: '004',\r\n      errorMessage: err.message || err,\r\n      errorContext: err.message || err,\r\n      errorLocalizedMessage: 'Internal server error'\r\n    });\r\n  }"
}
