{
  "_id": "validate_create_notifytonnage_processor",
  "name": "validate_create_notifytonnage_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const getRequestBody = (url) => ({\r\n  method: 'GET',\r\n  url,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid']\r\n  },\r\n  json: true\r\n});\r\nconst connectRegionMasterData = getRequestBody(req.body.propertyList.eka_connect_host + '/data/12325a98-a959-4939-9005-4158d136afcd/ac4bf583-a9a4-446d-b6f9-3c083c3e1030');\r\nconst connectProductMasterData = getRequestBody(req.body.propertyList.eka_connect_host + '/data/12325a98-a959-4939-9005-4158d136afcd/ae5f314e-c377-419e-9dfa-1f296f6fccfa');\r\nconst connectSeasonMasterData = getRequestBody(req.body.propertyList.eka_connect_host + '/data/12325a98-a959-4939-9005-4158d136afcd/1f3e680b-f3dd-418a-8fd4-888e38714cc3');\r\nfunction getData(requestBody) {\r\n  return new Promise(function(resolve, reject) {\r\n    request(requestBody, function(err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\nPromise.all([\r\n  getData(connectSeasonMasterData),\r\n  getData(connectRegionMasterData),\r\n  getData(connectProductMasterData)\r\n]).then(data => {\r\n  const seasonMasterData = data[0];\r\n  const regionMasterData = data[1];\r\n  const productMasterData = data[2];\r\n  const tonnagelimits = req.body.bulkPayLoadData;\r\n  \r\n  if(seasonMasterData && seasonMasterData.length > 0\r\n      && regionMasterData && regionMasterData.length > 0\r\n      && productMasterData && productMasterData.length > 0) {\r\n    let message = '';\r\n\tlet arr = [];\r\n    tonnagelimits.forEach(limit => {\t\r\n      if(seasonMasterData.find(i => i.bpRefNo == limit.bpRefNo && (i.currentSeason == limit.season || i.previousSeason == limit.season))) {\r\n        if (regionMasterData.find(i => i.region == limit.region && i.site == limit.site)) {\r\n          if(productMasterData.find(i => i.product == limit.product && i.quality == limit.quality)) {\r\n            if(limit.dailypurchased > limit.dailyLimit) {\r\n                message = 'Daily limit should be higher than dailypurchased';\r\n\t\t\t\tarr.push(`false@${message}`);\r\n            } else {\r\n              arr.push('true@');\r\n            }\r\n          } else {\r\n            message = 'No grade/product combination exists';\r\n\t\t\tarr.push(`false@${message}`);\r\n          }\r\n        } else {\r\n          message = 'No site/portzone combination exists';\r\n\t\t  arr.push(`false@${message}`);\r\n        }\r\n      } else {\r\n        // no season/bpRefNo combination\r\n        message = 'No previous/current season combination exists for bpRefNo';\r\n\t\tarr.push(`false@${message}`);\r\n      }\r\n    })\r\n\tvar flag = true;\r\n\tfor (let index = 0; index < arr.length; index++) {\r\n\t\tvar temp = arr[index].split('@')[0];\r\n\t\tif(temp == 'false') {\r\n\t\t\tflag = false;\r\n\t\t\tres.status(500).send(arr[index].split('@')[1]);  \r\n\t\t}\r\n    }\r\n\tif(flag) {\r\n\t\tres.status(200).send(tonnagelimits) \r\n\t}\r\n\r\n  }\r\n})",
  "sys__UUID": "d4c3a821-be52-4150-b4c3-6033cf452791"
}
