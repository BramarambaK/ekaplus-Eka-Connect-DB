{
  "_id": "pricelisting_processor",
  "name": "pricelisting_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const appId = '12325a98-a959-4939-9005-4158d136afcd';\r\nconst pricesObjId = 'ab3fc628-ecbc-43e0-81cb-aa2d5b6e5c40';\r\nconst clientTimeozone = req.body.selectedData.clientTimeozone * -1;\r\nconst today = moment(moment().format('YYYY-MM-DDTHH:mm:ssZ'), 'YYYY-MM-DDTHH:mm:ssZ');\r\nconst tenant = req.headers['x-tenantid'];\r\nconst serverTimezoneOffset = new Date().getTimezoneOffset();\r\nvar taskId = req.body.taskId;\r\n\r\nconst getObjectUri = id => `${req.body.propertyList.eka_connect_host}/data/${appId}/${id}`;\r\nconst getData = (url, getDataBody) =>\r\n  new Promise(function(resolve, reject) {\r\n    console.log('url', url);\r\n    console.log('body', JSON.stringify(getDataBody));\r\n    request(\r\n      {\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': tenant\r\n        },\r\n        body: getDataBody,\r\n        json: true\r\n      },\r\n      function(err, response, body) {\r\n        if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\nconst priceStatus = price => {\r\n  const start = moment(price.startDateTime, 'YYYY-MM-DDTHH:mm:ssZ');\r\n  const end = moment(price.endDateTime, 'YYYY-MM-DDTHH:mm:ssZ');\r\n  let status = price.status;\r\n  if (status != 'Expired' && moment(start).isValid() && moment(end).isValid()) {\r\n    if (moment(end).isSameOrAfter(today) && moment(start).isSameOrBefore(today)) {\r\n      status = 'Active';\r\n    } else if (moment(start).isAfter(today) && moment(end).isAfter(today)) {\r\n      status = 'Scheduled';\r\n    } else if (moment(start).isBefore(today) && moment(end).isBefore(today)) {\r\n      status = 'Expired';\r\n    }\r\n  }\r\n\r\n  return status;\r\n};\r\n\r\nconst getPrices = bpList => {\r\n  return new Promise((resolve, reject) => {\r\n    var body = {\r\n      filterData: {\r\n        filter: [\r\n          {\r\n            fieldName: 'bpRefNo',\r\n            operator: 'in',\r\n            value: bpList.map(e => e.bpRefNo)\r\n          },\r\n          {\r\n            \"fieldName\": \"endDateTime\",\r\n            \"operator\": \"gte\",\r\n            \"value\": today.utc().format('YYYY-MM-DDT00:00:00Z'),\r\n          }\r\n        ]\r\n      }\r\n    };\r\n    if (bpList[0].bpExternalCode) {\r\n      body.filterData.filter.push({\r\n        fieldName: 'bpExternalCode',\r\n        operator: 'inCaseInsensitive',\r\n        value: bpList.map(e => e.bpExternalCode)\r\n      });\r\n    }\r\n    getData(getObjectUri(pricesObjId), body)\r\n      .then(price => {\r\n        resolve(\r\n          price.map(i => ({\r\n            ...i,\r\n            formattedEnddate: moment(i.endDateTime)\r\n              .utcOffset(clientTimeozone)\r\n              .format('DD/MM/YYYY'),\r\n            formattedStartDate: moment(i.startDateTime)\r\n              .utcOffset(clientTimeozone)\r\n              .format('DD/MM/YYYY'),\r\n            // formattedStarttime: moment(i.startDateTime).format('HH:mm'),\r\n            // formattedEndtime: moment(i.endDateTime).format('HH:mm'),\r\n            formattedStarttime: moment(i.startDateTime)\r\n              .utcOffset(clientTimeozone)\r\n              .format('HH:mm'),\r\n            formattedEndtime: moment(i.endDateTime)\r\n              .utcOffset(clientTimeozone)\r\n              .format('HH:mm'),\r\n            originalStatus: i.status,\r\n            status: priceStatus(i),\r\n            type: 'price',\r\n            quantityUnit: 'MT',\r\n            serverTimezoneOffset: serverTimezoneOffset,\r\n            today: today,\r\n            formattedSustainable:\r\n              i.sustainable == true || i.sustainable == 'yes' || i.sustainable == 'Yes' ? 'Yes' : '-'\r\n          }))\r\n        );\r\n      })\r\n      .catch(err => {\r\n        reject('Error when fetching price');\r\n      });\r\n  });\r\n};\r\nconst userInfo = req.body.propertyList.eka_connect_host + '/api/getbpuserinfo';\r\nconst getCollectionMapper = config =>\r\n  new Promise((resolve, reject) => {\r\n    const r = {\r\n      method: 'POST',\r\n      url: `${req.body.propertyList.eka_connect_host}/collectionmapper/${config.appId}/${\r\n        config.objectId\r\n      }/fetchCollectionRecords`,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        ttl: 600,\r\n        'X-TenantID': config.tenant,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: {\r\n        collectionName: config.collectionName\r\n      },\r\n      json: true\r\n    };\r\n    request(r, (err, response, body) => {\r\n      if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\nconst subGroupMaster = {\r\n  appId: appId,\r\n  objectId: 'd59b8c10-8c94-4b87-a430-f6fd69888a37' /* not at all relevant object id */,\r\n  collectionName: 'BP Sub Group Setup',\r\n  tenant: tenant\r\n};\r\nconst subGroupCode = userDetails =>\r\n  new Promise((resolve, reject) =>\r\n    getCollectionMapper(subGroupMaster)\r\n      .then(result => {\r\n        if (result && Array.isArray(result)) {\r\n          const config = result.find(i => i.Workflow == taskId && i.UserType == userDetails.customerType);\r\n\r\n          if (config) {\r\n            resolve(config.SubGroupCode);\r\n          } else {\r\n            console.log(\r\n              `Sub group configuration not found for ${taskId} and ${\r\n                userDetails.customerType\r\n              }. Defaulting to not applicable.`\r\n            );\r\n            resolve(null);\r\n          }\r\n        } else {\r\n          reject('Sub group configuration is missing');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        reject(err);\r\n      })\r\n  );\r\n\r\nconst bpList = new Promise((resolve, reject) => {\r\n  getData(userInfo, null)\r\n    .then(t => {\r\n      const userDetails = t.data;\r\n      if (userDetails.BusinessPartyDetails) {\r\n        subGroupCode(userDetails)\r\n          .then(code => {\r\n            let bpResolver;\r\n            if (code) {\r\n              // bpResolver = (masterdata) =>\r\n              bpResolver = userDetails.BusinessPartyDetails\r\n                // .filter((bp) =>masterdata.includes(bp.refNo)\r\n                // )\r\n                .reduce((acc, bp) => {\r\n                  if (bp.subGroup && bp.subGroup.length > 0) {\r\n                    const subGroup = bp.subGroup.filter(i => i.code && i.code.toLowerCase() == code.toLowerCase());\r\n                    if (subGroup && subGroup.length > 0) {\r\n                      for (let n in subGroup) {\r\n                        acc.push({\r\n                          bpRefNo: `${bp.refNo}`, // @#@ ${bp.name} @#@ ${subGroup.name} @#@ ${subGroup.refNo}`,\r\n                          bpExternalCode: `${subGroup[n].refNo}` //``${bp.name} - ${bp.refNo} - ${subGroup.name}`,\r\n                        });\r\n                      }\r\n                    }\r\n                  }\r\n                  return acc;\r\n                }, []);\r\n            } else {\r\n              // bpResolver = (masterdata) =>\r\n              bpResolver = userDetails.BusinessPartyDetails\r\n                // .filter((bp) =>\r\n                //   masterdata.includes(bp.refNo)\r\n                // )\r\n                .map(bp => ({\r\n                  bpRefNo: `${bp.refNo}` // @#@ ${bp.name}`,\r\n                }));\r\n            }\r\n            // console.log(bpResolver(''));\r\n            resolve(bpResolver);\r\n          })\r\n          .catch(err => {\r\n            reject(err);\r\n          });\r\n      } else {\r\n        reject('BusinessPartyDetails missing in user details.');\r\n      }\r\n    })\r\n    .catch(err => {\r\n      reject(err);\r\n    });\r\n});\r\nbpList\r\n  .then(bpListResponse => {\r\n    getPrices(bpListResponse)\r\n      .then(function(data) {\r\n        return res.status(200).send(data);\r\n      })\r\n      .catch(function(err) {\r\n        console.log(err);\r\n        return res.status(500).send(err);\r\n      });\r\n  })\r\n  .catch(function(err) {\r\n    console.log(err);\r\n    return res.status(500).send(err);\r\n  });",
  "sys__UUID": "2729f428-7838-4428-aaf7-796f7aa8dcc9"
}
