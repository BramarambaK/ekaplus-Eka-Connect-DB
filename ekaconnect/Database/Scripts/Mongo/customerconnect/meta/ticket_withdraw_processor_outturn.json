{
  "_id": "ticket_withdraw_processor_outturn",
  "name": "ticket_withdraw_processor_outturn",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const send = (status, message) => res.status(status).send(message);\r\n    var payloadData;\r\n    if(req.body.bulkPayLoadData)\r\n    {\r\n      var reqst=req.body.bulkPayLoadData.map(item => item.requestId).join(',');\r\n    }\r\n\r\n    if (!Array.isArray(req.body.bulkPayLoadData)) {\r\n      payloadData = [\r\n        (({ requestId, ticketRefNo, cropYear }) => ({\r\n          requestId,\r\n          ticketRefNo,\r\n          cropYear,\r\n          requestStatus: 'Withdrawn',\r\n          isRequestActive: false\r\n        }))(req.body)\r\n      ];\r\n    } else {\r\n      payloadData = req.body.bulkPayLoadData.map(({ requestId, ticketRefNo, cropYear }) => ({\r\n        requestId: requestId,\r\n        ticketRefNo: ticketRefNo,\r\n        cropYear: cropYear,\r\n        requestStatus: 'Withdrawn',\r\n        isRequestActive: false\r\n      }));\r\n    }\r\n\r\n    var connectUpdateTicketRequestData = {\r\n      method: 'POST',\r\n      url: req.body.propertyList.eka_connect_host + '/workflow',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        requestid: req.headers['requestid'] + '-processor-withdraw'\r\n      },\r\n      body: {\r\n        output: {\r\n          elastic_updateTicketOfferData_withoutOfferExecution_internal: []\r\n        },\r\n        task: 'elastic_updateTicketOfferData_withoutOfferExecution_internal',\r\n        appId: '12325a98-a959-4939-9005-4158d136afcd',\r\n        workflowTaskName: 'elastic_updateTicketOfferData_withoutOfferExecution_internal'\r\n      },\r\n      json: true\r\n    };\r\n\r\n    connectUpdateTicketRequestData.body.output.elastic_updateTicketOfferData_withoutOfferExecution_internal = payloadData;\r\n\r\n    function get_connectData(connectUrl) {\r\n      return new Promise(function(resolve, reject) {\r\n        request(connectUrl, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    get_connectData(connectUpdateTicketRequestData)\r\n      .then(result => {\r\n\r\n        send(200, {\r\n          selectedCount: req.body.bulkPayLoadData ? req.body.bulkPayLoadData.length : 1,\r\n          requestId: req.body.bulkPayLoadData ? reqst: req.body.requestId\r\n        });\r\n      })\r\n      .catch(err => {\r\n        send(400, {\r\n          errorCode: 400,\r\n          errorMessage: 'Unable to withdraw request',\r\n          errorContext: null,\r\n          errorLocalizedMessage: 'Unable to withdraw request'\r\n        });\r\n      });\r\n",
  "object": "a26737b3-a5a9-4fe9-b6f7-29218a3bc45a",
  "sys__UUID": "f82f200c-e88c-4f81-a5c3-3758e32733f4"
}
