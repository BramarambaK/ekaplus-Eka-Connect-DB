{
  "_id": "accounts_mdm_processor",
  "name": "accounts_bp_list",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const serviceKey = JSON.parse(req.body.mdmProcessorServiceKey)[0].serviceKey;\r\nconst userInfo = req.body.propertyList.eka_connect_host + '/api/getbpuserinfo';\r\nconst businessParties = req.body.propertyList.platform_url + '/spring/customers/getBusinessPartyDetails';\r\nconst appId = req.body.appId;\r\nconst financeMasterData = {\r\n  objectId: 'd59b8c10-8c94-4b87-a430-f6fd69888a37',\r\n  collectionName: 'Finance Master Data',\r\n  tenant: req.headers['X-TenantID']\r\n};\r\n\r\nconst reqBody = url => ({\r\n  method: 'GET',\r\n  url,\r\n  headers: {\r\n    Authorization: req.headers.authorization\r\n  },\r\n  json: true\r\n});\r\nconst getCollectionMapper = (appId, objectId, collectionName, tenant) =>\r\n  new Promise((resolve, reject) => {\r\n    const r = {\r\n      method: 'POST',\r\n      url: `${req.body.propertyList.eka_connect_host}/collectionmapper/${appId}/${objectId}/fetchCollectionRecords`,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        ttl: 600,\r\n        'X-TenantID': tenant,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: {\r\n        collectionName: collectionName\r\n      },\r\n      json: true\r\n    };\r\n    request(r, (err, response, body) => {\r\n      if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n\r\nconst getData = url =>\r\n  new Promise(function(resolve, reject) {\r\n    request(reqBody(url), function(err, response, body) {\r\n      if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n\r\nfunction formatData(n) {\r\n  return n\r\n    .toString()\r\n    .split(/(?=(?:\\d{3})+(?:\\.|$))/g)\r\n    .join(' ');\r\n}\r\n\r\nconst objSorter = prop => (obj1, obj2) => {\r\n  if (obj1[prop] < obj2[prop]) {\r\n    return -1;\r\n  }\r\n  if (obj1[prop] > obj2[prop]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst bpList = new Promise((resolve, reject) => {\r\n  getData(userInfo)\r\n    .then(result => {\r\n      if (result.data.customerType === 'Grower') {\r\n        resolve(\r\n          result.data.BusinessPartyDetails.reduce((acc, bp) => {\r\n            acc.push(\r\n              ...bp.subGroup.map(item => ({\r\n                key: item.refNo,\r\n                value: `${bp.name}\\n${item.refNo}\\n${item.name}`\r\n              }))\r\n            );\r\n            return acc;\r\n          }, []).sort(objSorter('value'))\r\n        );\r\n      } else if (result.data.customerType == 'Demand Customer') {\r\n        getData(businessParties)\r\n          .then(result => {\r\n            resolve(\r\n              result.data\r\n              .map(bp => ({\r\n                key: bp.c1,\r\n                value: `${bp.c2}\\n${formatData(bp.c1)}`\r\n              }))\r\n              .sort(objSorter('value'))\r\n            );\r\n          })\r\n          .catch(err => {\r\n            reject(err);\r\n          });\r\n      } else {\r\n        getData(businessParties)\r\n          .then(result => {\r\n            resolve(\r\n              result.data\r\n              .map(bp => ({\r\n                key: bp.c1,\r\n                value: `${bp.c2}\\n${bp.c1}`\r\n              }))\r\n              .sort(objSorter('value'))\r\n            );\r\n          })\r\n          .catch(err => {\r\n            reject(err);\r\n          });\r\n      }\r\n    })\r\n    .catch(err => {\r\n      reject(err);\r\n    });\r\n});\r\nconst financialYears = new Promise((resolve, reject) => {\r\n  getCollectionMapper(appId, financeMasterData.objectId, financeMasterData.collectionName, financeMasterData.tenant)\r\n    .then(result => {\r\n      const data = result.map(i => ({\r\n        monthAndYear: moment(i.Month).format('MMM-YY'),\r\n        financialYr: i['Financial Year and Quarter'],\r\n        month: i['Financial Month']\r\n      }));\r\n      const today = moment().format('MMM-YY');\r\n      const currentFY = data.find(i => i.monthAndYear === today).financialYr;\r\n\r\n      const financialYears = Array.from(new Set(data.map(i => i.financialYr)));\r\n      const monthAndYears = data.reduce((acc, curr) => {\r\n        if (!acc[curr.financialYr]) {\r\n          acc[curr.financialYr] = [];\r\n        }\r\n        acc[curr.financialYr].push(curr.month);\r\n        return acc;\r\n      }, {});\r\n\r\n      const index = financialYears.findIndex(i => i === currentFY);\r\n\r\n      const filters = {\r\n        periods: {\r\n          'Last 4 quarters': financialYears.slice(index - 3, index + 1).reverse(),\r\n          'Last 8 quarters': financialYears.slice(index - 7, index + 1).reverse()\r\n        }\r\n      };\r\n\r\n      filters.months = filters.periods['Last 8 quarters'].reduce((acc, curr) => {\r\n        acc[curr] = monthAndYears[curr];\r\n        return acc;\r\n      }, {});\r\n\r\n      filters.financialYears = Object.keys(filters.periods).reduce((acc, curr) => {\r\n        filters.periods[curr].forEach(i => {\r\n          if (!acc[i]) {\r\n            acc[i] = [];\r\n          }\r\n          acc[i].push(curr);\r\n        });\r\n        return acc;\r\n      }, {});\r\n      resolve(filters);\r\n    })\r\n    .catch(err => {\r\n      reject(err);\r\n    });\r\n});\r\nPromise.all([bpList, financialYears])\r\n  .then(data => {\r\n    res.status(200).send({\r\n      [serviceKey]: data[0],\r\n      financeFilters: [data[1]]\r\n    });\r\n  })\r\n  .catch(err => {\r\n    console.error(err);\r\n    res.status(200).send({\r\n      [serviceKey]: [],\r\n      financeFilters: [{\r\n        periods: {\r\n          'Last 4 quarters': [],\r\n          'Last 8 quarters': []\r\n        },\r\n        financialYears: {},\r\n        months: {}\r\n      }]\r\n    });\r\n  });",
  "sys__UUID": "c3ec5556-9189-4779-af75-a1a0914acced"
}
