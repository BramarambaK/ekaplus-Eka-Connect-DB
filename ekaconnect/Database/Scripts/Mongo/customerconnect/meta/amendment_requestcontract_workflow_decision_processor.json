{
  "_id": "amendment_requestcontract_workflow_decision_processor",
  "name": "amendment_requestcontract_workflow_decision_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const userInfo = req.body.propertyList.eka_connect_host + '\/api\/getbpuserinfo';\r\nconst appId = req.body.appId;\r\nconst tenant = req.headers['X-TenantID'];\r\nconst taskId = req.body.taskId;\r\nvar requestedBy;\r\n\r\nconst subGroupMaster = {\r\n  appId: appId,\r\n  objectId: 'd59b8c10-8c94-4b87-aa430-f6fd69888a37' \/* not at all relevant object id *\/,\r\n  body: { collectionName: 'BP Sub Group Setup' },\r\n  tenant: tenant\r\n};\r\n\r\nconst objSorter = prop => {\r\n  return function(obj1, obj2) {\r\n    if (obj1[prop] < obj2[prop]) {\r\n      return -1;\r\n    }\r\n    if (obj1[prop] > obj2[prop]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  };\r\n};\r\n\r\nconst programNameMaster = filters => ({\r\n  appId: appId,\r\n  objectId: '46e84f42-6288-4027-b6d0-fd1c11019259' \/* not at all relevant object id *\/,\r\n  body: {\r\n    collectionName: 'Grower Programs',\r\n    getAllRecords: true,\r\n    criteria: {\r\n      filter: Object.keys(filters).map(i => ({\r\n        fieldName: i,\r\n        operator: 'eq',\r\n        value: filters[i]\r\n      }))\r\n    },\r\n    start: '',\r\n    limit: ''\r\n  },\r\n  tenant: tenant\r\n});\r\n\r\nconst getData = url =>\r\n  new Promise(function(resolve, reject) {\r\n    request(\r\n      {\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization\r\n        },\r\n        json: true\r\n      },\r\n      function(err, response, body) {\r\n        if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\nconst getCollectionMapper = config =>\r\n  new Promise((resolve, reject) => {\r\n    const r = {\r\n      method: 'POST',\r\n      url: `${req.body.propertyList.eka_connect_host}\/collectionmapper\/${config.appId}\/${\r\n        config.objectId\r\n      }\/fetchCollectionRecords`,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        ttl: 600,\r\n        'X-TenantID': config.tenant,\r\n        'Content-Type': 'application\/json'\r\n      },\r\n      body: config.body,\r\n      json: true\r\n    };\r\n    request(r, (err, response, body) => {\r\n      if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n\r\nconst getSubGroup = (list, format, code) =>\r\n  list\r\n    .reduce((acc, bp) => {\r\n      let groups;\r\n\r\n      if (code) {\r\n        groups = (bp.subGroup || [])\r\n          .filter(i => i.code && i.code.toLowerCase() == code.toLowerCase())\r\n          .map(item => ({\r\n            key: item.refNo,\r\n            value: bp.name\r\n          }));\r\n      } else {\r\n        groups = [\r\n          {\r\n            key: bp.refNo,\r\n            value: bp.name\r\n          }\r\n        ];\r\n      }\r\n\r\n      acc.push(...groups);\r\n      return acc;\r\n    }, [])\r\n    .sort(objSorter('value'));\r\n\r\nconst subGroupCode = userDetails =>\r\n  new Promise((resolve, reject) =>\r\n    getCollectionMapper(subGroupMaster)\r\n      .then(result => {\r\n        if (result && Array.isArray(result)) {\r\n          const config = result.find(\r\n            i =>\r\n              i.Workflow == taskId &&\r\n              i.UserType == userDetails.customerType &&\r\n              i.SubGroupApplicable.toLowerCase() == 'y'\r\n          );\r\n\r\n          if (config) {\r\n            resolve(config.SubGroupCode);\r\n          } else {\r\n            console.log(\r\n              `Sub group configuration not found for ${taskId} and ${\r\n                userDetails.customerType\r\n              }. Defaulting to not applicable.`\r\n            );\r\n            resolve(null);\r\n          }\r\n        } else {\r\n          reject('Sub group configuration is missing');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        reject(err);\r\n      })\r\n  );\r\n\r\nconst bpList = new Promise((resolve, reject) => {\r\n  getData(userInfo)\r\n    .then(t => {\r\n      const userDetails = t.data;\r\n      requestedBy = t.data.firstName + ' ' + t.data.lastName;\r\n      if (userDetails.BusinessPartyDetails) {\r\n        subGroupCode(userDetails)\r\n          .then(code => {\r\n            resolve(\r\n              getSubGroup(userDetails.BusinessPartyDetails, userDetails.customerType === 'Demand Customer', code)\r\n            );\r\n          })\r\n          .catch(err => {\r\n            reject(err);\r\n          });\r\n      } else {\r\n        reject('BusinessPartyDetails missing in user details.');\r\n      }\r\n    })\r\n    .catch(err => {\r\n      reject(err);\r\n    });\r\n});\r\n\r\nvar data = {\r\n  ...req.body.amendment_requestcontractcomposite.amendment_requestcontractdetailsform\r\n};\r\n\r\ndelete data.processorDetails;\r\ndelete data.propertyList;\r\n\r\nvar output = {};\r\nvar curr_date = new Date();\r\nvar date = curr_date.getFullYear() + '-' + ('0' + (curr_date.getMonth() + 1)).slice(-2) + '-' + curr_date.getDate();\r\nvar time =\r\n  (curr_date.getHours() < 0 ? '00' : ('0' + curr_date.getHours()).slice(-2)) +\r\n  ':' +\r\n  (curr_date.getMinutes() < 0 ? '00' : ('0' + curr_date.getMinutes()).slice(-2)) +\r\n  ':' +\r\n  (curr_date.getSeconds() < 0 ? '00' : ('0' + curr_date.getSeconds()).slice(-2));\r\nvar dateTime = date + ' ' + time;\r\n\r\nfunction getValue(str, pos) {\r\n  var get = str.match(\/\\S+\\S\/g);\r\n  return get[pos - 1];\r\n}\r\n\r\nconst removeDuplicateGrade = grade => {\r\n  if (grade.multiGradeDifferentialDetail) {\r\n    let mgSpread = grade.multiGradeDifferentialDetail.filter(\r\n      i => !i.qualityName.includes(data.quality.replace(' MG', ''))\r\n    );\r\n    multiGrade.multiGradeDifferentialDetail = [];\r\n    multiGrade.multiGradeDifferentialDetail.push(...mgSpread);\r\n    return multiGrade;\r\n  }\r\n};\r\n\r\ndata.amendedShipmentFrom =\r\n  moment(data.amendedShipmentFrom).format('MM YYYY') != moment(data.shipmentPeriodFrom).format('MM YYYY') &&\r\n  moment(data.amendedShipmentFrom).format('MM YYYY') > moment(curr_date).format('MM YYYY')\r\n    ? moment(data.amendedShipmentFrom)\r\n        .startOf('month')\r\n        .format('YYYY-MM-DDT00:00:00')\r\n    : moment(data.shipmentPeriodFrom).format('MM YYYY') > moment(data.amendedShipmentFrom).format('MM YYYY') &&\r\n      moment(curr_date).format('MM YYYY') == moment(data.amendedShipmentFrom).format('MM YYYY')\r\n    ? moment(curr_date).format('YYYY-MM-DDThh:mm:ss')\r\n    : moment(data.shipmentPeriodFrom).format('YYYY-MM-DDThh:mm:ss');\r\n\/\/ : moment(curr_date).format('MM YYYY') >= moment(data.amendedShipmentFrom).format('MM YYYY') ||\r\n\/\/ ? moment(data.shipmentPeriodFrom).format('YYYY-MM-DDThh:mm:ss')\r\n\/\/ : moment(data.amendedShipmentFrom)\r\n\/\/     .startOf('month')\r\n\/\/     .format('YYYY-MM-DDT00:00:00');\r\n\r\ndata.amendedShipmentTo =\r\n  moment(data.shipmentPeriodTo).format('MM YYYY') == moment(data.amendedShipmentTo).format('MM YYYY')\r\n    ? moment(data.shipmentPeriodTo).format('YYYY-MM-DDThh:mm:ss')\r\n    : moment(data.amendedShipmentTo)\r\n        .endOf('month')\r\n        .format('YYYY-MM-DDT23:59:59');\r\n\r\ndata.shipmentPeriodFrom = data.shipmentPeriodFrom || '';\r\ndata.shipmentPeriodTo = data.shipmentPeriodTo || '';\r\n\r\ndata.INCOTerm = data.INCOTerm.toLowerCase() == 'ex-farm' ? 'Ex-Farm' : data.INCOTerm;\r\nlet multiGrade;\r\nif (data.isMultiGrade != undefined && data.isMultiGrade.toLowerCase() == 'y') {\r\n  if (data.multiGradeDifferentialDetails) {\r\n    let a = typeof data.multiGradeDifferentialDetails;\r\n    console.log('a', a);\r\n    if (typeof data.multiGradeDifferentialDetails != 'object') {\r\n      multiGrade = JSON.parse(data.multiGradeDifferentialDetails.replace(\/'\/g, '\"'));\r\n    } else {\r\n      multiGrade = data.multiGradeDifferentialDetails;\r\n    }\r\n\r\n    let baseData = {\r\n      qualityName: data.amendedQuality || data.quality.replace(' MG', ''),\r\n      multiGradeDifferential: 'BASE'\r\n    };\r\n\r\n    removeDuplicateGrade(multiGrade);\r\n\r\n    let length = multiGrade.multiGradeDifferentialDetail.length;\r\n    let position = +(length \/ 2).toFixed(0);\r\n\r\n    multiGrade.multiGradeDifferentialDetail.splice(position, 0, baseData);\r\n    data.multiGradeDifferentialDetails = JSON.stringify(multiGrade);\r\n  }\r\n  output = {\r\n    ...data,\r\n    userType: '',\r\n    submitrequestcontractcardview: '',\r\n    currentDate: dateTime,\r\n    isMultiGrade: true,\r\n    brokerReferenceNo: data.brokerReferenceNo\r\n  };\r\n  if (\r\n    data.INCOTerm != undefined &&\r\n    (data.INCOTerm.toLowerCase() == 'ex-farm' || data.INCOTerm.toLowerCase() == 'db')\r\n  ) {\r\n    output = {\r\n      ...data,\r\n      userType: '',\r\n      submitrequestcontractcardview: '',\r\n      currentDate: dateTime,\r\n      isMultiGrade: true,\r\n      isFreightDetails: true,\r\n      brokerReferenceNo: data.brokerReferenceNo\r\n    };\r\n  } else {\r\n    output = {\r\n      ...data,\r\n      userType: '',\r\n      submitrequestcontractcardview: '',\r\n      currentDate: dateTime,\r\n      isMultiGrade: true,\r\n      isFreightDetails: false,\r\n      brokerReferenceNo: data.brokerReferenceNo\r\n    };\r\n  }\r\n} else {\r\n  output = {\r\n    ...data,\r\n    userType: '',\r\n    submitrequestcontractcardview: '',\r\n    currentDate: dateTime,\r\n    isMultiGrade: false,\r\n    brokerReferenceNo: data.brokerReferenceNo\r\n  };\r\n  if (data.INCOTerm && (data.INCOTerm.toLowerCase() == 'ex-farm' || data.INCOTerm.toLowerCase() == 'db')) {\r\n    output = {\r\n      ...data,\r\n      userType: '',\r\n      submitrequestcontractcardview: '',\r\n      currentDate: dateTime,\r\n      isMultiGrade: false,\r\n      isFreightDetails: true,\r\n      brokerReferenceNo: data.brokerReferenceNo\r\n    };\r\n  } else {\r\n    output = {\r\n      ...data,\r\n      userType: '',\r\n      submitrequestcontractcardview: '',\r\n      currentDate: dateTime,\r\n      isMultiGrade: false,\r\n      isFreightDetails: false,\r\n      brokerReferenceNo: data.brokerReferenceNo\r\n    };\r\n  }\r\n}\r\nvar mandatoryFields = [data.amendedCity, data.amendedShipmentFrom, data.amendedShipmentTo];\r\nvar fieldsPresent = true;\r\nvar generalErrorMessage = 'Provide all the mandatory field values';\r\nvar mulrigradeErrorMessage = 'Provide multigrade values';\r\nvar itemQuantity = req.body.propertyList.contractItemQuantity;\r\nconst send = (status, message) => res.status(status).send(message);\r\n\r\nmandatoryFields.map((fields, index) => {\r\n  if ((fields == '' || fields == undefined || fields == null || fields == 'Invalid date') && fieldsPresent) {\r\n    if (index == 0) {\r\n      res.status(400).send('Invalid \/ No location found');\r\n    } else {\r\n      res.status(400).send('Invalid shipment period');\r\n    }\r\n\r\n    fieldsPresent = false;\r\n  }\r\n});\r\n\r\nconst ngrNameFromUrl = data.counterPartyName;\r\noutput.BPRefNo = data.BPRefNo;\r\n\r\nconst auth = req.headers.authorization;\r\n\r\nconst headers = {\r\n  Authorization: auth,\r\n  'X-TenantID': tenant,\r\n  'Content-Type': 'application\/json'\r\n};\r\n\r\nconst getDatas = req =>\r\n  new Promise((resolve, reject) => {\r\n    request(\r\n      {\r\n        ...req,\r\n        headers: headers,\r\n        json: true\r\n      },\r\n      (err, response, body) => {\r\n        if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n          resolve(body);\r\n        } else {\r\n          reject(err || body.error || body.errorMessage);\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\nconst workflow = body =>\r\n  getDatas({\r\n    method: 'POST',\r\n    url: `${req.body.propertyList.eka_connect_host}\/workflow`,\r\n    body: body\r\n  });\r\n\r\nconst checkPrice = (and, or, any, ne) => {\r\n  \/\/ const checkPrice = (and, or, ne) => {\r\n  if (req.body.propertyList.CONTRACT_PRICE_CHECK_INTEGRATION_REQ) {\r\n    let filters = Object.keys(and)\r\n      .map(i =>\r\n        typeof and[i] == 'string' && i != 'BidPeriodFrom' && i != 'BidPeriodTo' && i != 'IsSiteBid'\r\n          ? `${i} eq '${and[i]}'`\r\n          : (i == 'IsSiteBid' || i == 'issustainable') && !and[i]\r\n          ? `${i} ne true`\r\n          : `${i} eq ${and[i]}`\r\n      )\r\n      \/\/   .map(i => typeof and[i] == 'string' && i != 'BidPeriodFrom' && i != 'BidPeriodTo' ? `${i} eq '${and[i]}'` : i == 'DailyTonnageLimit' ? `${i} ge ${and[i]}` : `${i} eq ${and[i]}` \/\/   )\r\n      .join(' and ');\r\n\r\n    if (or) {\r\n      filters =\r\n        filters +\r\n        ' and (' +\r\n        Object.keys(or)\r\n          .map(i => (typeof or[i] == 'string'  && typeof or[i] != 'boolean' ? `${i} eq '${or[i]}'` : or[i] ?  `${i} eq ${or[i]}` : `${i} ne true`))\r\n          .join(' or ') +\r\n        ')';\r\n    }\r\n\r\n    if (any) {\r\n      filters =\r\n        filters +\r\n        ' and (' +\r\n        Object.keys(any)\r\n          .map(i =>\r\n            any[i]\r\n              .map(\r\n                j =>\r\n                  `${i}\/any(p: ${Object.keys(j)\r\n                    .map(k =>\r\n                      typeof j[k] == 'string' && typeof j[k] != 'boolean'\r\n                        ? `p\/${k} eq '${j[k]}'`\r\n                        : j[k]\r\n                        ? `p\/${k} eq ${j[k]}`\r\n                        : `p\/${k} ne true`\r\n                    )\r\n                    .join(' and ')})`\r\n              )\r\n              .join(' and ')\r\n          )\r\n          .join(' and ') +\r\n        ')';\r\n    }\r\n\r\n    if (ne) {\r\n      filters =\r\n        filters +\r\n        ' and ' +\r\n        Object.keys(ne)\r\n          .map(i => (typeof ne[i] == 'string' && typeof ne[i] != 'boolean' ? `${i} ne '${ne[i]}'` : ne[i] ? `${i} ne ${ne[i]}` : `${i} ne true`))\r\n          .join(' and ');\r\n    }\r\n\r\n    const t = {\r\n      workflowTaskName: 'EXTERNAL_GPS_PUBLISHED_BIDS',\r\n      task: 'EXTERNAL_GPS_PUBLISHED_BIDS',\r\n      appId: appId,\r\n      filterData: {\r\n        filter: [\r\n          {\r\n            fieldName: '$select',\r\n            operator: '=',\r\n            value:\r\n              'PublishedBidId,CommodityName,CommodityGradeName,SeasonName,Price,DailyTonnageLimit,PaymentTermName,DeliveryTermName,CompanyName,BidPeriodFrom,BidPeriodTo,IsMultigrade,PortZoneName,DeliveryZoneName,ProfitcenterName,BidType,IsPublished,IsArchived,isSustainable&$expand=Parent_PublishedBids($orderby=MgOrder;$select=IsSubgrade,IsSubGradeBase,MgSpread,CommodityGradeName,CommodityName,Price),Site($select=Name,EkaLocationCityName,DeliveryLocation),PublishedBidExtra'\r\n          },\r\n          {\r\n            fieldName: '$apply',\r\n            operator: '=',\r\n            value: `filter(IsPublished eq true and IsArchived ne true and IsExternal ne true and BidPeriodFrom le now() and BidPeriodTo ge now() and  ${filters})`\r\n          }\r\n        ]\r\n      },\r\n      output: {\r\n        EXTERNAL_GPS_PUBLISHED_BIDS: {}\r\n      }\r\n    };\r\n    console.log('Checking for price', JSON.stringify(t));\r\n    return workflow(t);\r\n  } else {\r\n    console.log('Not checking for price');\r\n    \/\/ return      res.status(200).send(output);\r\n    return new Promise((resolve, reject) => {\r\n      return res.status(200).send(output);\r\n      resolve({\r\n        data: [\r\n          {\r\n            Price: data.contractPrice\r\n          }\r\n        ]\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nconst priceReq = {\r\n  BidType: data.markettype ? data.markettype : 'CONTRACT',\r\n  \/\/ BidType: data.markettype || '',\r\n  CommodityName: data.product || '',\r\n  SeasonName: data.cropYear || '',\r\n  PaymentTermName: data.paymentTerms || '',\r\n  DeliveryTermName: data.INCOTerm || ''\r\n  \/* BidPeriodFrom: data.shipmentPeriodFrom + (data.shipmentPeriodFrom.endsWith('Z') ? '' : 'Z'), *\/\r\n  \/* BidPeriodTo: data.shipmentPeriodTo + (data.shipmentPeriodTo.endsWith('Z') ? '' : 'Z'), *\/\r\n  \/\/ Price: +data.contractPrice\r\n};\r\n\r\nif (data.isMultiGrade) {\r\n  priceReq.isMultiGrade = true;\r\n}\r\n\r\nif (data.quality) {\r\n  priceReq.CommodityGradeName = data.quality;\r\n}\r\n\r\n\/\/ if (data.dischargeLocationCountry) {\r\n\/\/   priceReq['Site\/CountryName'] = data.dischargeLocationCountry;\r\n\/\/ }\r\n\r\nif (data.dischargeLocationType) {\r\n  if (data.dischargeLocationType.toLowerCase().includes('storage location')) {\r\n    priceReq['Site\/EkaLocationCityName'] = data.amendedCity; \/\/data.dischargeLocationCity\r\n  }\r\n}\r\n\r\nif (data.bulkHandler) {\r\n  priceReq.CompanyName = data.bulkHandler;\r\n}\r\n\r\nif (data.profitCentre) {\r\n  priceReq.ProfitcenterName = data.profitCentre;\r\n}\r\n\r\n\/\/ if (data.contractItemQuantity) {\r\n\/\/   priceReq.DailyTonnageLimit = data.contractItemQuantity;\r\n\/\/ }\r\n\r\nif (data.dischargeLocationType) {\r\n  if (data.dischargeLocationType.toLowerCase().includes('storage location')) {\r\n    priceReq.IsSiteBid = true;\r\n  } else {\r\n    priceReq.IsSiteBid = false;\r\n  }\r\n}\r\n\r\nif (data.issustainable) {\r\n  priceReq.isSustainable = data.issustainable.toLowerCase() == 'y' ? true : false;\r\n}\r\n\r\n\/\/ priceReq.isSustainable = data.issustainable.toLowerCase() == 'y' ? true : false;\r\n\r\noutput.contractlistingquery = null;\r\n\r\nif (fieldsPresent == true) {\r\n  \/\/ if (\r\n  \/\/    parseInt(data.contractItemQuantity) >= parseInt(itemQuantity.min) &&  parseInt(data.contractItemQuantity) <= parseInt(itemQuantity.max)\r\n  \/\/ ) {\r\n    if (data.spread.toLowerCase().includes('floating')) {\r\n      checkPrice(\r\n        priceReq,\r\n        data.portZoneName\r\n          ? {\r\n              PortZoneName: data.portZoneName,\r\n              DeliveryZoneName: data.portZoneName\r\n            }\r\n          : null,\r\n        data.isMultiGrade\r\n          ? {\r\n              Parent_PublishedBids: [\r\n                \/\/ ...JSON.parse(data.multiGradeDifferentialDetails.replace(\/'\/g, '\"'))\r\n                \/\/   .multiGradeDifferentialDetail.filter(i => (i.multiGradeDifferential + '').toLowerCase() != 'base')\r\n                \/\/   .map(i => ({\r\n                \/\/     CommodityGradeName: i.qualityName,\r\n                \/\/     MgSpread: +i.multiGradeDifferential || 0,\r\n                \/\/     IsSubgradeBase: false\r\n                \/\/   })),\r\n                {\r\n                  \/\/ CommodityGradeName: data.quality.replace(' MG', ''),\r\n                  IsSubgradeBase: false\r\n                }\r\n              ]\r\n            }\r\n          : null,\r\n        data.isMultiGrade ? null : { isMultiGrade: true }\r\n      )\r\n        .then(prices => {\r\n          if (prices && prices.data && prices.data.length > 0) {\r\n            if (data.contractPrice && !isNaN(data.contractPrice)) {\r\n              \/\/   output.amendedPrice = prices.data[0].Price;\r\n              var multiGradeDifferentialDetail = [];\r\n              var newMG = prices.data[0].Parent_PublishedBids.map(i => ({\r\n                qualityName: i.CommodityGradeName,\r\n                multiGradeDifferential: i.MgSpread,\r\n                multiGradeDifferentialUnit: 'AUD\/MT'\r\n              }));\r\n\r\n              let baseData = {\r\n                qualityName: data.quality,\r\n                multiGradeDifferential: 'BASE'\r\n              };\r\n\r\n              let mgSpread = newMG.filter(i => !i.qualityName.includes(data.quality.replace(' MG', '')));\r\n              newMG = [];\r\n              newMG.push(...mgSpread);\r\n\r\n              let length = newMG.length;\r\n              let position = +(length \/ 2).toFixed(0);\r\n\r\n              newMG.splice(position, 0, baseData);\r\n\r\n              multiGradeDifferentialDetail.push(...newMG);\r\n              output.multiGradeDifferentialDetails = JSON.stringify({\r\n                multiGradeDifferentialDetail\r\n              });\r\n\r\n              res.status(200).send({\r\n                ...output,\r\n                requestedBy: requestedBy\r\n              });\r\n            }\r\n          } else {\r\n            res\r\n              .status(400)\r\n              .send(\r\n                'Your request was unable to be processed. Please contact the Grower Services team on 1800 447 246 if this issue persists.'\r\n              );\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.error('Price check failed', err);\r\n          send(500, 'Error in prices API');\r\n          handleErrorResponse(req, '', err, '');\r\n        });\r\n    } else {\r\n      res.status(200).send({\r\n        ...output,\r\n        requestedBy: requestedBy\r\n      });\r\n    }\r\n  \/\/ } else {\r\n  \/\/   res.status(400).send(' Entered the valid item quantity.');\r\n  \/\/   handleErrorResponse(req, '', err, '');\r\n  \/\/ }\r\n}  ",
  "sys__UUID": "77e484f9-50fb-4085-b1f9-1f0f04f9d406"
}
