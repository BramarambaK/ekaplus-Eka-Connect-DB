{
  "_id": "viewticketsdata_processor",
  "name": "viewticketsdata_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const data = req.body.hasOwnProperty('selectedData')\r\n  ? (req.body.selectedData.data && req.body.selectedData.data[0]) || req.body.selectedData.ticketDetails || req.body.selectedData\r\n  : undefined;\r\nconst send = (status, message) => res.status(status).send(message);\r\nconst connectData = {\r\n  method: 'POST',\r\n  url: req.body.propertyList.eka_connect_host + `/workflow/search/`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid']\r\n  },\r\n  body: {\r\n    pointer: ['12325a98-a959-4939-9005-4158d136afcd', 'a26737b3-a5a9-4fe9-b6f7-29218a3bc45a'],\r\n    qP: {\r\n      track_total_hits: true,\r\n      from: 0,\r\n      size: 10000,\r\n      query: {\r\n        wildcard: {}\r\n      },\r\n      sort: [\r\n        {\r\n          'sys__createdOn.raw': 'desc'\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  json: true\r\n};\r\nfunction get_connectData(connectUrl) {\r\n  return new Promise(function(resolve, reject) {\r\n    request(connectUrl, function(err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\nfunction getParsedResults(testResult) {\r\n  let splitResults = testResult.split(',');\r\n  let retrunResults = [];\r\n  try {\r\n    for (let i = 0; i < splitResults.length; i++) {\r\n      let label = splitResults[i].split('=')[0];\r\n      let suffix = label.substring(label.lastIndexOf('(') + 1, label.lastIndexOf(')')).trim();\r\n      label = label.replace(/\\(.*\\)/, '').trim();\r\n      let value = splitResults[i].split('=')[1].trim() + (suffix == '%' ? suffix : ' ' + suffix);\r\n      let _obj = {\r\n        label,\r\n        value\r\n      };\r\n      retrunResults.push(_obj);\r\n    }\r\n  } catch (err) {\r\n    return retrunResults.length ? retrunResults : [];\r\n  }\r\n  return retrunResults.length ? retrunResults : [];\r\n}\r\nif (data) {\r\n  let _testResults =\r\n    data.testResultsLong && data.testResultsLong != '' ? getParsedResults(data.testResultsLong) : [];\r\n  let ticketDetails = {\r\n    ...data,\r\n    testResults: _testResults\r\n  };\r\n  let _splitTickets = [];\r\n  let _splitTicketsObj = [];\r\n\r\n  if (data.parentticketRefNo) {\r\n    let filterParentTicket = {\r\n      'ticketRefNo.raw': {\r\n        value: data.parentticketRefNo,\r\n        boost: 1,\r\n        rewrite: 'constant_score'\r\n      }\r\n    };\r\n\r\n    let filterChildTickets = {\r\n      'parentticketRefNo.raw': {\r\n        value: data.parentticketRefNo,\r\n        boost: 1,\r\n        rewrite: 'constant_score'\r\n      }\r\n    };\r\n    connectData.body.qP.query.wildcard = {\r\n      ...filterParentTicket\r\n    };\r\n    get_connectData(connectData)\r\n      .then(parentTicket => {\r\n        if (parentTicket.hasOwnProperty('data') && parentTicket.data.length > 0) {\r\n          connectData.body.qP.query.wildcard = {\r\n            ...filterChildTickets\r\n          };\r\n          get_connectData(connectData)\r\n            .then(result => {\r\n              if (result.hasOwnProperty('data') && result.data.length > 0) {\r\n                for (let i = 0; i < result.data.length; i++) {\r\n                  _splitTickets.push(result.data[i].ticketRefNo);\r\n                  _splitTicketsObj.push(result.data[i]);\r\n                }\r\n              }\r\n              ticketDetails = {\r\n                ...ticketDetails,\r\n                splitTickets: _splitTickets\r\n              };\r\n              send(200, {\r\n                ticketDetails: { ...ticketDetails },\r\n                parentTicket: parentTicket.data[0],\r\n                splitTickets: _splitTicketsObj\r\n              });\r\n            })\r\n            .catch(error => {\r\n              assert.isNotOk(error, 'Promise error');\r\n              send(400, 'No data to available');\r\n            });\r\n        } else {\r\n          send(200, { ticketDetails: { ...ticketDetails }, parentTicket: [], splitTickets: [] });\r\n        }\r\n      })\r\n      .catch(error => {\r\n        assert.isNotOk(error, 'Promise error');\r\n        send(400, 'No data to available');\r\n      });\r\n  } else {\r\n    let childTickets = {\r\n      'parentticketRefNo.raw': {\r\n        value: data.ticketRefNo,\r\n        boost: 1,\r\n        rewrite: 'constant_score'\r\n      }\r\n    };\r\n    connectData.body.qP.query.wildcard = {\r\n      ...childTickets\r\n    };\r\n    get_connectData(connectData)\r\n      .then(result => {\r\n        if (result.hasOwnProperty('data') && result.data.length > 0) {\r\n          for (let i = 0; i < result.data.length; i++) {\r\n            _splitTickets.push(result.data[i].ticketRefNo);\r\n            _splitTicketsObj.push(result.data[i]);\r\n          }\r\n        }\r\n        ticketDetails = {\r\n          ...ticketDetails,\r\n          splitTickets: _splitTickets\r\n        };\r\n        send(200, {\r\n          ticketDetails: { ...ticketDetails },\r\n          parentTicket: [],\r\n          splitTickets: _splitTicketsObj\r\n        });\r\n      })\r\n      .catch(error => {\r\n        assert.isNotOk(error, 'Promise error');\r\n        send(400, 'No data to available');\r\n      });\r\n  }\r\n} else {\r\n  send(400, 'No data to available');\r\n}",
  "sys__UUID": "abb1b9a2-bcf4-4960-becb-d3888250386d"
}
