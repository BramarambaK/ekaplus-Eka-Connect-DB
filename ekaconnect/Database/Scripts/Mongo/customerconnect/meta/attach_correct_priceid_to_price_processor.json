{
  "_id": "attach_correct_priceid_to_price_processor",
  "name": "attach_correct_priceid_to_price_processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const appId = '12325a98-a959-4939-9005-4158d136afcd';\r\nconst priceObjId = 'ab3fc628-ecbc-43e0-81cb-aa2d5b6e5c40';\r\nvar moment = require('moment');\r\nvar currentDateTime = moment().format('YYYY-MM-DDTHH:mm:ss[Z]');\r\n\r\nvar payloadData;\r\n\/\/Format payload into object array\r\nif (!Array.isArray(req.body.bulkPayLoadData)) {\r\n  payloadData = [{ ...req.body }];\r\n  delete payloadData[0]['processorDetails'];\r\n  delete payloadData[0]['propertyList'];\r\n} else {\r\n  payloadData = req.body.bulkPayLoadData;\r\n}\r\n\r\nvar connectDataPriceByUniqueFields = {\r\n  method: 'GET',\r\n  url: req.body.propertyList.eka_connect_host + `\/data\/${appId}\/${priceObjId}`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n    requestid: req.headers['requestid'],\r\n  },\r\n  body: {\r\n    includeFields: ['priceId', 'externalPriceId'],\r\n    excludeFields: ['_id'],\r\n    filterData: {\r\n      filter: [\r\n        {\r\n          fieldName: 'externalPriceId',\r\n          operator: 'inCaseInsensitive',\r\n          value: payloadData.map((o) => o.priceId),\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  json: true,\r\n};\r\n\r\nfunction get_connectData(connectData) {\r\n  return new Promise(function (resolve, reject) {\r\n    console.log('get_connectData Request-' + JSON.stringify(connectData));\r\n    request(connectData, function (err, response, body) {\r\n      \/\/ console.log(\"get_connectData Response-\" + JSON.stringify(body));\r\n      if (response.statusCode === 200) resolve(body);\r\n      else {\r\n        reject(err || body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nget_connectData(connectDataPriceByUniqueFields)\r\n  .then((connectData) => {\r\n    var priceIdExist;\r\n    for (let i = 0; i < payloadData.length; i++) {\r\n      priceIdExist = connectData.find(\r\n        (o) => o.externalPriceId == payloadData[i].priceId\r\n      );\r\n      if (priceIdExist) {\r\n        payloadData[i].priceId = priceIdExist.priceId;\r\n        payloadData[i].externalPriceId = priceIdExist.externalPriceId;\r\n      } else {\r\n        payloadData[i].externalPriceId = payloadData[i].priceId;\r\n      }\r\n    }\r\n    console.log(payloadData);\r\n    res.status(200).send(payloadData);\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n    res.status(500).send(err);\r\n  });",
  "sys__UUID": "de38f57f-91b0-4cd4-86df-7afba1b1dad2",
  "type": "processor"
}