{
  "_id": "allocateticket_marketprice_processor",
  "name": "allocateticket_marketprice_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const send = (status, message) => res.status(status).send(message);\r\n\r\n    if (!req.body.hasOwnProperty('selectedData')) {\r\n      send(200, {});\r\n    }\r\n\r\n    if (req.body.hasOwnProperty('selectedData')) {\r\n      const data = req.body.selectedData;\r\n      if (!data.account || data.account === '') {\r\n        send(200, {\r\n          allocateticketmarketpricelist: []\r\n        });\r\n      }\r\n\r\n      const getRequestBodyPost = (url, obj) => ({\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true,\r\n        body: obj\r\n      });\r\n\r\n      function getData(requestBody) {\r\n        return new Promise(function(resolve, reject) {\r\n          request(requestBody, function(err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          });\r\n        });\r\n      }\r\n\r\n      const product = data.product;\r\n      const quality = data.quality;\r\n      const cropYear = data.cropYear;\r\n      const BPRefNo = data.bpRefNo;\r\n      const location = data.location;\r\n      let filterBody = {\r\n        filterData: {\r\n          filter: [\r\n            {\r\n              fieldName: 'quality',\r\n              operator: 'eq',\r\n              value: quality\r\n            },\r\n            {\r\n              fieldName: 'product',\r\n              operator: 'eqCaseInsensitive',\r\n              value: product\r\n            },\r\n            {\r\n              fieldName: 'location',\r\n              operator: 'eqCaseInsensitive',\r\n              value: location\r\n            },\r\n            {\r\n              fieldName: 'cropYear',\r\n              operator: 'eq',\r\n              value: cropYear\r\n            },\r\n            {\r\n              fieldName: 'bpRefNo',\r\n              operator: 'eqCaseInsensitive',\r\n              value: BPRefNo\r\n            }\r\n          ]\r\n        }\r\n      };\r\n      const ticketsData = getRequestBodyPost(\r\n        req.body.propertyList.eka_connect_host +\r\n          '/data/12325a98-a959-4939-9005-4158d136afcd/a26737b3-a5a9-4fe9-b6f7-29218a3bc45a',\r\n        filterBody\r\n      );\r\n      console.log(data);\r\n      console.log(data.bpExternalCode);\r\n      const promise = new Promise((resolve, reject) => {\r\n        getData(ticketsData)\r\n          .then(res => {\r\n            const newRes = res.map(i => ({\r\n              ...i,\r\n              price: data.price,\r\n              ticketHandlerName: data.ticketHandlerName,\r\n              ticketHandlerBpRefNo: data.ticketHandlerBpRefNo,\r\n              maxQuantityToAllocate: data.maxQuantityToAllocate,\r\n              sellingOption: data.marketType.toLowerCase() == 'cash' ? 'Cash' : 'Pool',\r\n              ticketHandlerCode: data.ticketHandlerCode,\r\n              isSustainable: data.sustainable,\r\n              acquirer: data.ticketHandlerName,\r\n              poolpricingoption: data.pricingOption,\r\n              isInternalBp: data.isInternalBp\r\n            }));\r\n            const newRes1 = newRes.filter(i => i.ticketStatus == 'Warehoused' && i.isparentTicket == 'N');\r\n            resolve(newRes1);\r\n          })\r\n          .catch(err => {\r\n            console.log('Could not set data in table', err);\r\n          });\r\n      });\r\n\r\n      promise\r\n        .then(res => {\r\n          send(200, {\r\n            allocateticketmarketpricelist: res\r\n          });\r\n        })\r\n        .catch(err => res.status(500).send(err));\r\n    }",
  "sys__UUID": "4cee4e9a-5ced-4de6-8189-00a4771723a6"
}
