{
  "_id": "elastic_update_volumelimit_data_internal_processor",
  "name": "elastic_update_volumelimit_data_internal_processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "var payloadData ={...req.body};\r\nif(!Array.isArray(req.body.bulkPayLoadData)){\r\n  delete payloadData[\"processorDetails\"];\r\n  delete payloadData[\"propertyList\"];\r\n}\r\n\r\nvar connect_update_volumelimit_data_internal = {\r\n    method: \"POST\",\r\n    url: req.body.propertyList.eka_connect_host +\r\n        \"\/workflow\",\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n        \"requestid\": req.headers[\"requestid\"] + \"-processor\"\r\n    },\r\n    body: {\r\n        \"output\": {\r\n            \"elastic_updateVolumeLimitData_internal\": Array.isArray(req.body.bulkPayLoadData) ? req.body.bulkPayLoadData : [ payloadData ],\r\n        },\r\n        \"task\": \"elastic_updateVolumeLimitData_internal\",\r\n        \"appId\": \"12325a98-a959-4939-9005-4158d136afcd\",\r\n        \"workflowTaskName\": \"elastic_updateVolumeLimitData_internal\"\r\n    },\r\n    json: true,\r\n  }\r\n  function update_volumelimit_data_internal() {\r\n    return new Promise(function(resolve, reject) {\r\n        \/\/ console.log('update_volumelimit_data_internal Request-' + JSON.stringify(connect_update_volumelimit_data_internal));\r\n        request(connect_update_volumelimit_data_internal, function(err, response, body) {\r\n            \/\/ console.log('update_volumelimit_data_internal Response-' + JSON.stringify(response));\r\n            if (response.statusCode === 200) resolve(body);\r\n            else {\r\n                reject(err || body);\r\n            }\r\n        });\r\n    });\r\n  }\r\n  \r\nupdate_volumelimit_data_internal()\r\n.then(()=>{res.status(200).send();})\r\n.catch(err => {console.log(\"update_volumelimit_data_internal error-\",err);res.status(500).send(err)});\r\n\/\/   .then(()=>{\r\n    \/\/ res.status(200).send();\r\n    \/\/ res.status(200).send([{\r\n    \/\/         successCode: 200,\r\n    \/\/         successMessage: \"Tonnage limits have been successfully created\"\r\n    \/\/     }]);\r\n\/\/   })\r\n\/\/   .catch(function(err) {\r\n    \/\/ console.log('error-' + JSON.stringify(err));\r\n        \/\/ var error = JSON.parse(err.errorMessage);\r\n        \/\/ if (error.error.code == 400 ) {\r\n        \/\/     res.status(200).send([\r\n        \/\/         {\r\n        \/\/             errorCode: error.error.code,\r\n        \/\/             errorMessage:error.error.message,\r\n        \/\/             errorContext: 'Its null',\r\n        \/\/             errorLocalizedMessage:error.error.message\r\n        \/\/         },\r\n        \/\/         {\r\n        \/\/             successCode: 200,\r\n        \/\/             successMessage: \"Tonnage limits have been successfully created\"\r\n        \/\/         }\r\n        \/\/     ]);\r\n        \/\/ }\r\n        \/\/ else if(error.StatusCode == 500){\r\n        \/\/     res.status(200).send([\r\n        \/\/         {\r\n        \/\/             errorCode: error.StatusCode,\r\n        \/\/             errorMessage:error.Message,\r\n        \/\/             errorContext: 'Its null',\r\n        \/\/             errorLocalizedMessage:error.Message\r\n        \/\/         },\r\n        \/\/         {\r\n        \/\/             successCode: 200,\r\n        \/\/             successMessage: \"Tonnage limits have been successfully created\"\r\n        \/\/         }\r\n        \/\/     ]);\r\n        \/\/ }\r\n        \/\/ else{\r\n            \/\/ res.status(500).send(err);\r\n        \/\/ }\r\n    \/\/ });",
  "sys__UUID": "3b9d3218-af2a-4fa6-9a5d-b01ac89e841c",
  "type": "processor"
}