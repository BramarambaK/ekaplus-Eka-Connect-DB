{
  "_id": "findNGR_request_contract_processor",
  "name": "findNGR_request_contract_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "sys__UUID": "57731aaf-e732-4302-bc22-bfdd76833276",
  "snippet": "    var ngrNameFromUrl = req.body.queryParams.counterPartyName;\r\n    const userInfo = req.body.propertyList.eka_connect_host + '/api/getbpuserinfo';\r\n    const appId = req.body.appId;\r\n    const tenant = req.headers['X-TenantID'];\r\n    const taskId = req.body.taskId;\r\n\r\n    const subGroupMaster = {\r\n      appId: appId,\r\n      objectId: 'd59b8c10-8c94-4b87-a430-f6fd69888a37' /* not at all relevant object id */,\r\n      collectionName: 'BP Sub Group Setup',\r\n      tenant: tenant\r\n    };\r\n\r\n    var objSorter = prop => (obj1, obj2) => {\r\n      if (obj1[prop] < obj2[prop]) {\r\n        return -1;\r\n      }\r\n      if (obj1[prop] > obj2[prop]) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    };\r\n\r\n    const getData = url =>\r\n      new Promise(function(resolve, reject) {\r\n        request(\r\n          {\r\n            method: 'GET',\r\n            url,\r\n            headers: {\r\n              Authorization: req.headers.authorization\r\n            },\r\n            json: true\r\n          },\r\n          function(err, response, body) {\r\n            if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          }\r\n        );\r\n      });\r\n\r\n    const getCollectionMapper = config =>\r\n      new Promise((resolve, reject) => {\r\n        const r = {\r\n          method: 'POST',\r\n          url: `${req.body.propertyList.eka_connect_host}/collectionmapper/${config.appId}/${\r\n            config.objectId\r\n          }/fetchCollectionRecords`,\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            ttl: 600,\r\n            'X-TenantID': config.tenant,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: {\r\n            collectionName: config.collectionName\r\n          },\r\n          json: true\r\n        };\r\n        request(r, (err, response, body) => {\r\n          if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n\r\n    const getSubGroup = (list, format, code) =>\r\n      list\r\n        .reduce((acc, bp) => {\r\n          let groups;\r\n\r\n          if (code) {\r\n            groups = (bp.subGroup || [])\r\n              .filter(i => i.code && i.code.toLowerCase() == code.toLowerCase())\r\n              .map(item => ({\r\n                key: item.refNo,\r\n                value: bp.name\r\n              }));\r\n          } else {\r\n            groups = [\r\n              {\r\n                key: bp.refNo,\r\n                value: bp.name\r\n              }\r\n            ];\r\n          }\r\n\r\n          acc.push(...groups);\r\n          return acc;\r\n        }, [])\r\n        .sort(objSorter('value'));\r\n\r\n    const subGroupCode = userDetails =>\r\n      new Promise((resolve, reject) =>\r\n        getCollectionMapper(subGroupMaster)\r\n          .then(result => {\r\n            if (result && Array.isArray(result)) {\r\n              const config = result.find(\r\n                i =>\r\n                  i.Workflow == taskId &&\r\n                  i.UserType == userDetails.customerType &&\r\n                  i.SubGroupApplicable.toLowerCase() == 'y'\r\n              );\r\n\r\n              if (config) {\r\n                resolve(config.SubGroupCode);\r\n              } else {\r\n                console.log(\r\n                  `Sub group configuration not found for ${taskId} and ${\r\n                    userDetails.customerType\r\n                  }. Defaulting to not applicable.`\r\n                );\r\n                resolve(null);\r\n              }\r\n            } else {\r\n              reject('Sub group configuration is missing');\r\n            }\r\n          })\r\n          .catch(err => {\r\n            reject(err);\r\n          })\r\n      );\r\n\r\n    const bpList = new Promise((resolve, reject) => {\r\n      getData(userInfo)\r\n        .then(t => {\r\n          const userDetails = t.data;\r\n          if (userDetails.BusinessPartyDetails) {\r\n            subGroupCode(userDetails)\r\n              .then(code => {\r\n                resolve(\r\n                  getSubGroup(userDetails.BusinessPartyDetails, userDetails.customerType === 'Demand Customer', code)\r\n                );\r\n              })\r\n              .catch(err => {\r\n                reject(err);\r\n              });\r\n          } else {\r\n            reject('BusinessPartyDetails missing in user details.');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          reject(err);\r\n        });\r\n    });\r\n\r\n    bpList\r\n      .then(bp => {\r\n        const findNgr = bp.find(i => ngrNameFromUrl == i.value);\r\n        if (findNgr) {\r\n          res.status(200).send({});\r\n        } else {\r\n          res.status(400).send('Please select from NGR dropdown field');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        res.status(400).send('Please select from NGR dropdown field');\r\n      });"
}
