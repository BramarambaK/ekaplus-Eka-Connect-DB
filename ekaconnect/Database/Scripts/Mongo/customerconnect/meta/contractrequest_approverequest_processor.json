{
  "_id": "contractrequest_approverequest_processor",
  "name": "contractrequest_approverequest_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const data = Array.isArray(req.body.data) ? req.body.data[0] : req.body.data ? req.body.data : req.body;\r\nconst tenant = req.headers['X-TenantID'];\r\nconst auth = req.headers.authorization;\r\nconst appId = req.body.appId;\r\nconst traderName = req.body.propertyList.REQ_CONTRACTS_TRADER_NAME;\r\n// const traderName = \"ADMIN BBBBB\";\r\nconst contractType =\r\n  req.body.propertyList[\r\n    data.userType.toLowerCase() === 'demand customer'\r\n      ? 'REQ_CONTRACTS_DEMAND_CONTRACT_TYPE'\r\n      : 'REQ_CONTRACTS_GROWER_CONTRACT_TYPE'\r\n  ];\r\nconst priceUnit = req.body.propertyList.REQ_CONTRACTS_PRICE_UNIT;\r\nconst weightUnit = req.body.propertyList.REQ_CONTRACTS_WEIGHT_UNIT;\r\nconst corporate = req.body.propertyList.REQ_CONTRACTS_CORPORATE;\r\nconst userInfo = req.body.propertyList.eka_connect_host + '/api/userinfo';\r\n\r\nconst send = (status, message) => res.status(status).send(message);\r\nconst replace = (data, src, dest) => (data[src] = data[dest] ? data[dest] : data[src]);\r\n\r\nreplace(\r\n  data,\r\n  'dischargeLocationCity',\r\n  data.dischargeLocationType.toLowerCase().includes('storage location') && data.amendedCity\r\n    ? 'amendedCity'\r\n    : 'dischargeLocationCity'\r\n);\r\nreplace(data, 'email', data.amendedEmail ? 'amendedEmail' : 'email');\r\nreplace(data, 'freightOrganise', data.amendedFreightOrganise ? 'amendedFreightOrganise' : 'freightOrganise');\r\nreplace(data, 'fullname', data.amendedFullname ? 'amendedFullname' : 'fullname');\r\nreplace(data, 'phonenumber', data.amendedPhonenumber ? 'amendedPhonenumber' : 'phonenumber');\r\nreplace(\r\n  data,\r\n  'pickuplocation',\r\n  data.amendedPickuplocation && data.amendedPickuplocation.length ? 'amendedPickuplocation' : 'pickuplocation'\r\n);\r\nreplace(data, 'contractPrice', data.amendedPrice != 'NaN' ? 'amendedPrice' : 'contractPrice');\r\nreplace(data, 'quality', data.amendedQuality ? 'amendedQuality' : 'quality');\r\nreplace(data, 'shipmentPeriodFrom', data.amendedShipmentFrom ? 'amendedShipmentFrom' : 'shipmentPeriodFrom');\r\nreplace(data, 'shipmentPeriodTo', data.amendedShipmentTo ? 'amendedShipmentTo' : 'shipmentPeriodTo');\r\nreplace(\r\n  data,\r\n  'counterPartyName',\r\n  data.amendmentCounterPartyName ? 'amendmentCounterPartyName' : 'counterPartyName'\r\n);\r\nreplace(data, 'brokerRefNo', data.amendedBrokerRefNo ? 'amendedBrokerRefNo' : 'brokerRefNo');\r\nreplace(data, 'brokerBPRefNo', data.amendedBrokerBPRefNo ? 'amendedBrokerBPRefNo' : data.brokerBPRefNo ? 'brokerBPRefNo' : 'refNo');\r\nreplace(data, 'spread', data.amendedSpread ? 'amendedSpread' : 'spread');\r\n\r\ndata.priceDetails = data.contractPrice + ' ' + data.contractPriceUnit;\r\n\r\nconst getData_ = url =>\r\n  new Promise(function(resolve, reject) {\r\n    request(\r\n      {\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'Content-Type': 'application/json',\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true\r\n      },\r\n      function(err, response, body) {\r\n        if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\n \r\nconst bpList = new Promise((resolve, reject) => {\r\n  getData_(userInfo)\r\n    .then(t => {\r\n      resolve({name: t.firstName + ' ' + t.lastName, type:t.customerType});\r\n    })\r\n    .catch(err => {\r\n      reject(err);\r\n    });\r\n});\r\n\r\nconst formatCTRMData = reqContract => {\r\n  const contractHeader = {\r\n    ContractType: contractType,\r\n    Corporate: corporate,\r\n    IsOriginationContract: 'Y',\r\n    TemplateName: reqContract.programName || '',\r\n    CPName: reqContract.counterPartyName || '',\r\n    CPRefNo: reqContract.BPRefNo || '',\r\n    PaymentTerm: reqContract.paymentTerms || '',\r\n    ContractIssueDate: reqContract.contractIssueDate\r\n      ? moment(reqContract.contractIssueDate).format('YYYY-MM-DDThh:mm:ss')\r\n      : moment().format('YYYY-MM-DDT00:00:00'),\r\n    TraderName: traderName,\r\n    INCOTerm: reqContract.INCOTerm || '',\r\n    BrokerRefNo: (reqContract.brokerRefNo || '') + '',\r\n    BrokerBPRefNo: reqContract.brokerBPRefNo ||  reqContract.refNo || '',\r\n    ContractRefNo: reqContract.contractRefNo,\r\n    ModificationDate: moment().format('YYYY-MM-DDTHH:MM:00'),\r\n    ModificationReason: 'Cargill Employee modification request'\r\n  };\r\n\r\n  contractHeader.IsDraftContract = 'N';\r\n  const deliveryDetails = {\r\n    DeliveryDetailCountry: reqContract.dischargeLocationCountry.split('_')[0] || '',\r\n    DeliveryLocationGroupName:\r\n      reqContract.dischargeLocationCountry.split('_')[1] ||\r\n      reqContract.deliveryLocationGroupName ||\r\n      reqContract.portzone ||\r\n      '',\r\n    DeliveryDetailCity: reqContract.dischargeLocationCity || ''\r\n  };\r\n\r\n  const itemQuantity = {\r\n    ItemQuantityValue: +reqContract.contractItemQuantityInBase || +reqContract.contractItemQuantity || '',\r\n    ItemQuantityUnitId: weightUnit\r\n  };\r\n\r\n  const shipmentPeriod = {\r\n    ShipmentFromDate: moment(reqContract.shipmentPeriodFrom).format('YYYY-MM-DDT00:00:00') || '',\r\n    ShipmentToDate: moment(reqContract.shipmentPeriodTo).format('YYYY-MM-DDT23:59:59') || ''\r\n  };\r\n\r\n  const priceDetails = {\r\n    PayInCurrency: priceUnit,\r\n    PriceType: 'Fixed',\r\n    ContractPrice: {\r\n      ContractPriceValue: +reqContract.contractPrice,\r\n      ContractPriceUnitId: priceUnit + '/' + weightUnit\r\n    }\r\n  };\r\n\r\n  const itemDetails = {\r\n    ContractItemNo: '1',\r\n    Product: reqContract.product || '',\r\n    Cropyear: reqContract.cropYear || '',\r\n    Quality: reqContract.quality.replace(' MG', ''),\r\n    IsMultiGrade:\r\n      reqContract.isMultiGrade == true || (reqContract.isMultiGrade + '').toLowerCase() == 'y' ? 'Y' : 'N',\r\n    SpreadType: !reqContract.spread\r\n      ? ''\r\n      : reqContract.spread.toLowerCase().includes('fix')\r\n      ? 'Fixed'\r\n      : reqContract.spread.toLowerCase().includes('floating')\r\n      ? 'Floating'\r\n      : '',\r\n    DeliveryDetails: deliveryDetails,\r\n    PriceDetails: priceDetails,\r\n    ItemQuantity: itemQuantity,\r\n    ShipmentPeriod: shipmentPeriod\r\n  };\r\n\r\n  if (reqContract.isMultiGrade == true || (reqContract.isMultiGrade + '').toLowerCase() == 'y') {\r\n    itemDetails.MultiGradeDetails = reqContract.multiGradeDifferentialDetails.multiGradeDifferentialDetail\r\n      .filter(i => i.qualityName != reqContract.quality)\r\n      .map(i => ({\r\n        QualityName: i.qualityName || '',\r\n        MultiGradeDiffDetails: {\r\n          MultiGradeDiffValue: parseInt(i.multiGradeDifferential) || 0,\r\n          MultiGradeDiffPriceUnitId: i.multiGradeDifferentialUnit || ''\r\n        }\r\n      }));\r\n  }\r\n\r\n  return {\r\n    ContractHeader: contractHeader,\r\n    ItemDetails: [itemDetails]\r\n  };\r\n};\r\n\r\nconst formatCCData = (reqContract, reqId, contractRefNo, employeeName) => ({\r\n  approvalStatus: 'Approved',\r\n  isRequestActive: true,\r\n  contractItemRefNo: 1,\r\n  contractRefNo: contractRefNo,\r\n  contractType: contractType,\r\n  BPRefNo: reqContract.BPRefNo || '',\r\n  contractItemQuantity: +reqContract.contractItemQuantityInBase || +reqContract.contractItemQuantity || '',\r\n  contractItemQuantityUnit: weightUnit,\r\n  contractPrice: +reqContract.contractPrice,\r\n  contractPriceUnit: priceUnit + '/' + weightUnit,\r\n  counterPartyName: reqContract.counterPartyName || '',\r\n  cropYear: reqContract.cropYear || '',\r\n  dischargeLocationCity: reqContract.dischargeLocationCity || '',\r\n  dischargeLocationCountry: reqContract.dischargeLocationCountry || '',\r\n  dischargeLocationType: reqContract.dischargeLocationType || '',\r\n  isMultiGrade:\r\n    reqContract.isMultiGrade == true || (reqContract.isMultiGrade + '').toLowerCase() == 'y' ? 'Y' : 'N',\r\n  multiGradeDifferentialDetails: reqContract.multiGradeDifferentialDetails,\r\n  INCOTerm: reqContract.INCOTerm || '',\r\n  priceType: 'Fixed',\r\n  product: reqContract.product || '',\r\n  quality: reqContract.quality.replace(' MG', '') || '',\r\n  shipmentPeriodFrom: moment(reqContract.shipmentPeriodFrom).format('YYYY-MM-DDT00:00:00') || '',\r\n  shipmentPeriodTo: moment(reqContract.shipmentPeriodTo).format('YYYY-MM-DDT23:59:59'),\r\n  corporate: corporate,\r\n  paymentTerms: reqContract.paymentTerms || '',\r\n  requestId: reqId,\r\n  requestIdUnique: reqId,\r\n  requestedDate: moment(reqContract.currentDate).format('DD-MM-YYYY'),\r\n  requestType: 'New contract',\r\n  requestedBy: reqContract.requestedBy || '',\r\n  traderName: traderName,\r\n  isRequestedByEkaCCSystem: true,\r\n  spread: reqContract.spread || '',\r\n  freightOrganise: reqContract.freightOrganise || '',\r\n  fullname: reqContract.fullname || '',\r\n  phonenumber: reqContract.phonenumber || '',\r\n  email: reqContract.email || '',\r\n  pickuplocation: reqContract.pickuplocation || [],\r\n  programName: reqContract.programName || '',\r\n  portzone:\r\n    reqContract.portzone ||\r\n    reqContract.deliveryLocationGroupName ||\r\n    reqContract.dischargeLocationCountry.split('_')[1] ||\r\n    '',\r\n  deliveryLocationGroupName:\r\n    reqContract.deliveryLocationGroupName ||\r\n    reqContract.portzone ||\r\n    reqContract.dischargeLocationCountry.split('_')[1] ||\r\n    '',\r\n  growerCreatedBy: reqContract.growerCreatedBy || '',\r\n  growerOperator: reqContract.growerOperator || '',\r\n  employeeOperatorUser: employeeName || '',\r\n  employeeCreatedByUser: employeeName || '',\r\n  locationGroupType: reqContract.locationGroupType || '',\r\n  bidid: reqContract.bidid || '',\r\n  contractIssueDate: reqContract.contractIssueDate\r\n    ? moment(reqContract.contractIssueDate).format('YYYY-MM-DDThh:mm:ss')\r\n    : moment().format('YYYY-MM-DDT00:00:00'),\r\n  ekaCCSpreadFixed: reqContract.ekaCCSpreadFixed\r\n    ? reqContract.ekaCCSpreadFixed\r\n    : !reqContract.spread\r\n    ? null\r\n    : reqContract.spread.toLowerCase().includes('fix')\r\n    ? moment().format('DD-MM-YYYY')\r\n    : null,\r\n\r\n    brokerRefNo: reqContract.brokerRefNo || '',\r\n    brokerBPRefNo: reqContract.brokerBPRefNo || reqContract.refNo || '',\r\n    amendedBrokerRefNo: reqContract.amendedBrokerRefNo || '',\r\n    amendedBrokerBPRefNo: reqContract.amendedBrokerBPRefNo || ''\r\n});\r\n\r\nconst headers = {\r\n  Authorization: auth,\r\n  'X-TenantID': tenant,\r\n  'Content-Type': 'application/json'\r\n};\r\n\r\nconst getData = req =>\r\n  new Promise((resolve, reject) => {\r\n    request(\r\n      {\r\n        ...req,\r\n        headers: headers,\r\n        json: true\r\n      },\r\n      (err, response, body) => {\r\n        if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n          resolve(body);\r\n        } else {\r\n          reject(err || body.error || body.errorMessage);\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\nconst workflow = body =>\r\n  getData({\r\n    method: 'POST',\r\n    url: `${req.body.propertyList.eka_connect_host}/workflow`,\r\n    body: body\r\n  });\r\n\r\nconst pushContractData = (reqId, contract) => {\r\n  const t = {\r\n    workflowTaskName: 'EXTERNAL_CTRM_CONTRACT_INBOUND_API',\r\n    task: 'EXTERNAL_CTRM_CONTRACT_INBOUND_API',\r\n    appId: appId,\r\n    output: {\r\n      EXTERNAL_CTRM_CONTRACT_INBOUND_API: {\r\n        App: 'CTRM',\r\n        Object: 'contractInbound_object',\r\n        RequestNumber: reqId,\r\n        ObjectAction: 'UPDATE',\r\n        ContractDetail: contract\r\n      }\r\n    }\r\n  };\r\n  console.log('Push COntract Data', JSON.stringify(t));\r\n  return workflow(t);\r\n};\r\n\r\nconst pushContractNewData = (reqId, contract) => {\r\n  const t = {\r\n    workflowTaskName: 'EXTERNAL_CTRM_CONTRACT_INBOUND_API',\r\n    task: 'EXTERNAL_CTRM_CONTRACT_INBOUND_API',\r\n    appId: appId,\r\n    output: {\r\n      EXTERNAL_CTRM_CONTRACT_INBOUND_API: {\r\n        App: 'CTRM',\r\n        Object: 'contractInbound_object',\r\n        RequestNumber: reqId,\r\n        ObjectAction: 'CREATE',\r\n        ContractDetail: contract\r\n      }\r\n    }\r\n  };\r\n  console.log('Push COntract Data', JSON.stringify(t));\r\n  return workflow(t);\r\n};\r\n\r\nconst saveContract = t =>\r\n  Promise.all([\r\n    workflow({\r\n      output: {\r\n        update_contractRequestData: [t]\r\n      },\r\n      task: 'update_contractRequestData',\r\n      workflowTaskName: 'update_contractRequestData',\r\n      appId: '12325a98-a959-4939-9005-4158d136afcd'\r\n    }),\r\n    workflow({\r\n      output: {\r\n        create_contractDomainData: [t]\r\n      },\r\n      task: 'create_contractDomainData',\r\n      workflowTaskName: 'create_contractDomainData',\r\n      appId: '12325a98-a959-4939-9005-4158d136afcd'\r\n    }),\r\n    workflow({\r\n      output: {\r\n        delete_contractDomainData: [\r\n          {\r\n            contractRefNo: '-',\r\n            contractItemRefNo: +t.contractItemRefNo,\r\n            requestIdUnique: t.requestIdUnique\r\n          }\r\n        ]\r\n      },\r\n      task: 'delete_contractDomainData',\r\n      workflowTaskName: 'delete_contractDomainData',\r\n      appId: '12325a98-a959-4939-9005-4158d136afcd'\r\n    })\r\n  ]);\r\n\r\nconst saveAmendedContract = t =>\r\n  Promise.all([\r\n    workflow({\r\n      output: {\r\n        update_contractRequestData: [t]\r\n      },\r\n      task: 'update_contractRequestData',\r\n      workflowTaskName: 'update_contractRequestData',\r\n      appId: '12325a98-a959-4939-9005-4158d136afcd'\r\n    })\r\n  ]);\r\n\r\nconst sendError = (message, context, localizedMessage) =>\r\n  res.status(400).send({\r\n    errorCode: '004',\r\n    errorMessage: message,\r\n    errorContext: null,\r\n    errorLocalizedMessage: localizedMessage,\r\n    errors: [\r\n      {\r\n        errorCode: '004',\r\n        errorMessage: message,\r\n        errorContext: context,\r\n        errorLocalizedMessage: localizedMessage,\r\n        errors: null\r\n      }\r\n    ]\r\n  });\r\n\r\nconst objid = '46e84f42-6288-4027-b6d0-fd1c11019259';\r\nconst appid = '12325a98-a959-4939-9005-4158d136afcd';\r\n\r\nfunction getRequestStatus(userType) {\r\n  var connect = {\r\n    method: 'GET',\r\n    body: {\r\n      filterData: {\r\n        filter: [\r\n          {\r\n            fieldName: 'contractItemRefNo',\r\n            value: data.contractItemRefNo,\r\n            operator: 'eq'\r\n          },\r\n          {\r\n            fieldName: 'contractRefNo',\r\n            value: data.contractRefNo,\r\n            operator: 'eq'\r\n          },\r\n          {\r\n            fieldName: 'requestIdUnique',\r\n            value: data.requestIdUnique,\r\n            operator: 'eq'\r\n          },\r\n          {\r\n            fieldName: 'approvalStatus',\r\n            value: userType && userType.toLowerCase().includes('grower') ? 'Action required' : 'Awaiting review',\r\n            operator: 'eq'\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    url: req.body.propertyList.eka_connect_host + '/data/' + appid + '/' + objid,\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      'X-TenantID': req.headers['x-tenantid'],\r\n      requestid: req.headers['requestid'] + '-processor'\r\n    },\r\n    json: true\r\n  };\r\n  \r\n  console.log('connect obj', JSON.stringify(connect));\r\n  return new Promise(function(resolve, reject) {\r\n    request(connect, function(err, response, body) {\r\n      console.log('res', JSON.stringify(body));\r\n      if (err || body.error) {\r\n        console.log('error occured ::' + body.error);\r\n        reject(body);\r\n      } else {\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nconst formattedCTRMData = formatCTRMData(data);\r\nconsole.log('Posting contract to CTRM ', JSON.stringify(formattedCTRMData));\r\n\r\nconst createdBy = req.body.propertyList._REQ_CONTRACTS_CREATED_BY;\r\nconst operator = req.body.propertyList._REQ_CONTRACTS_OPERATOR;\r\n\r\n\r\n bpList\r\n.then(employeeName => {\r\n getRequestStatus(employeeName.type)\r\n  .then(function(sameDataExists) {\r\n    if (sameDataExists.length > 0) {\r\n          formattedCTRMData.ContractHeader.Operator =\r\n            data.growerCreatedBy || data.employeeOperatorUser || data.employeeOperatorModifiedUser || employeeName.name;\r\n          formattedCTRMData.ContractHeader.CreatedBy =\r\n            data.growerOperator || data.employeeCreatedByUser || data.employeeCreatedByModifiedUser || employeeName.name;\r\n          formattedCTRMData.ContractHeader.UpdatedBy = data.modifiedUser || employeeName.name;\r\n          if (data.requestType.toLowerCase() == 'amendment') {\r\n            // formattedCTRMData.ContractHeader.BrokerRefNo = (data.amendedBrokerRefNo || '') + '';\r\n            // formattedCTRMData.ContractHeader.BrokerBPRefNo =  data.amendedBrokerBPRefNo || '';\r\n            workflow({\r\n              output: {\r\n                update_contractDomainData: [\r\n                  {\r\n                    approvalStatus: 'Approved',\r\n                    contractRefNo: data.contractRefNo,\r\n                    requestId: data.requestId,\r\n                    requestIdUnique: data.requestIdUnique,\r\n                    contractItemRefNo: data.contractItemRefNo,\r\n                    isRequestActive: true\r\n                  }\r\n                ]\r\n              },\r\n              task: 'update_contractDomainData',\r\n              workflowTaskName: 'update_contractDomainData',\r\n              appId: appId\r\n            });\r\n            pushContractData(data.requestId, formattedCTRMData)\r\n              .then(ctrm => {\r\n                const formattedCCData = formatCCData(\r\n                  data,\r\n                  ctrm.data['Ext.RefNumber'],\r\n                  ctrm.data.EntityRefNo,\r\n                  data.growerCreatedBy || data.employeeCreatedByUser\r\n                );\r\n                formattedCCData.requestType = 'Amendment';\r\n                saveAmendedContract(formattedCCData)\r\n                  .then(() => {\r\n                    // workflow({\r\n                    //   output: {\r\n                    //     update_contractDomainData: [\r\n                    //       {\r\n                    //         approvalStatus: 'Approved',\r\n                    //         contractRefNo: data.contractRefNo,\r\n                    //         requestId: data.requestId,\r\n                    //         requestIdUnique: data.requestIdUnique,\r\n                    //         contractItemRefNo: data.contractItemRefNo,\r\n                    //         isRequestActive: true\r\n                    //       }\r\n                    //     ]\r\n                    //   },\r\n                    //   task: 'update_contractDomainData',\r\n                    //   workflowTaskName: 'update_contractDomainData',\r\n                    //   appId: appId\r\n                    // });\r\n                  })\r\n                  .catch(err => {\r\n                    console.error('Failed to push to EKA CC', err);\r\n                    send(500, {\r\n                      errorCode: '500',\r\n                      errorMessage: 'Contract cannot be created, please contact system admin',\r\n                      errorContext: null,\r\n                      errorLocalizedMessage: 'Failed to push to EKA CC'\r\n                    });\r\n                    handleErrorResponse(req, '', err, '');\r\n                  })\r\n                  .then(t => {\r\n                    send(200, {\r\n                      requestId: data.requestId,\r\n                      requestType: data.requestType,\r\n                      msg: 'Published contract',\r\n                      priceInvalid: false,\r\n                      tabIndex: 2,\r\n                      ngrCTRMFilter: data.BPRefNo,\r\n                      appHome: req.body.propertyList.CONTRACT_BROWSE_BIDS_URL\r\n                    });\r\n                  })\r\n                  .catch(err => {\r\n                    res.status(400).send(err);\r\n                    handleErrorResponse(req, '', err, '');\r\n                  });\r\n              })\r\n              .catch(err => {\r\n                workflow({\r\n                  output: {\r\n                    update_contractDomainData: [\r\n                      {\r\n                        approvalStatus: data.approvalStatus,\r\n                        contractRefNo: data.contractRefNo,\r\n                        requestId: data.requestId,\r\n                        requestIdUnique: data.requestIdUnique,\r\n                        contractItemRefNo: data.contractItemRefNo,\r\n                        isRequestActive: true\r\n                      }\r\n                    ]\r\n                  },\r\n                  task: 'update_contractDomainData',\r\n                  workflowTaskName: 'update_contractDomainData',\r\n                  appId: appId\r\n                })\r\n                console.error('Error posting data to CTRM', JSON.stringify(data));\r\n                send(500, {\r\n                  errorCode: '500',\r\n                  errorMessage: 'This request cannot be actioned at this time. Please try again later.',\r\n                  errorContext: null,\r\n                  errorLocalizedMessage: 'Contract cannot be created, error posting data to CTRM.'\r\n                });\r\n                handleErrorResponse(req, '', err, '');\r\n              });\r\n          } else {\r\n            delete formattedCTRMData.ContractHeader.ContractRefNo;\r\n            delete formattedCTRMData.ContractHeader.ModificationDate;\r\n            delete formattedCTRMData.ContractHeader.ModificationReason;\r\n            delete formattedCTRMData.ContractHeader.UpdatedBy;\r\n\r\n            // formattedCTRMData.ContractHeader.BrokerRefNo = (data.brokerRefNo || '') + '';\r\n            // formattedCTRMData.ContractHeader.BrokerBPRefNo =  data.refNo || data.brokerBPRefNo || '';\r\n            if (data.approvalStatus.toLowerCase() == 'action required') {\r\n              formattedCTRMData.ContractHeader.Operator = createdBy;\r\n              formattedCTRMData.ContractHeader.CreatedBy = operator;\r\n            }\r\n            pushContractNewData(data.requestId, formattedCTRMData)\r\n              .then(ctrm => {\r\n                const formattedCCData = formatCCData(\r\n                  data,\r\n                  ctrm.data['Ext.RefNumber'],\r\n                  ctrm.data.EntityRefNo,\r\n                  employeeName.name\r\n                );\r\n                formattedCCData.growerCreatedBy = createdBy;\r\n                formattedCCData.growerOperator = operator;\r\n                // formattedCCData.brokerRefNo = (data.brokerRefNo || '') + '';\r\n                // formattedCCData.brokerBPRefNo =  data.refNo || data.brokerBPRefNo  || '';\r\n\r\n                console.log('Formatted data to CC', JSON.stringify(formattedCCData));\r\n                saveContract(formattedCCData)\r\n                  .then(() => {\r\n                    send(200, {\r\n                      requestId: ctrm.data['Ext.RefNumber'],\r\n                      requestType: data.requestType,\r\n                      BPRefNo: data.BPRefNo,\r\n                      msg: 'Published contract',\r\n                      contractRefNo: formattedCCData.contractRefNo,\r\n                      contractItemRefNo: formattedCCData.contractItemRefNo,\r\n                      requestIdUnique: formattedCCData.requestIdUnique\r\n                    });\r\n                  })\r\n                  .catch(err => {\r\n                    console.error('Failed to push to EKA CC', err)\r\n                    send(500, {\r\n                      errorCode: '500',\r\n                      errorMessage: 'Contract cannot be created, please contact system admin',\r\n                      errorContext: null,\r\n                      errorLocalizedMessage: 'Failed to push to EKA CC'\r\n                    });\r\n                    handleErrorResponse(req, '', err, '');\r\n                  });\r\n              })\r\n              .catch(err => {\r\n                console.error('Failed to push to CTRM', err);\r\n                let formattedError = '';\r\n                let parsedErr = err ? JSON.parse(err) : '';\r\n                  \r\n                formattedError =  typeof parsedErr == 'object' ?\r\n                    (parsedErr.Error ?\r\n                      (Array.isArray(parsedErr.Error) ?\r\n                        parsedErr.Error[0] :\r\n                        typeof (parsedErr.Error) == 'string' ? (parsedErr.Error) : '') : '')\r\n                    : typeof parsedErr == 'string' ?  parsedErr : '';\r\n  \r\n              send(500, {\r\n                  errorCode: '500',\r\n                  errorMessage: err + ' Contract cannot be created, please contact system admin',\r\n                  errorContext: null,\r\n                  errorLocalizedMessage: formattedError ? formattedError : 'Contract cannot be created, please contact system admin' \r\n                });\r\n                handleErrorResponse(req, '', err, '');\r\n              });\r\n          }\r\n\r\n    } else {\r\n      sendError(\r\n        'Contract is already approved or status has been changed, please refresh the page.',\r\n        '',\r\n        'Your request was unable to be processed. Please contact the Grower Services team on 1800 447 246 if this issue persists.'\r\n      );\r\n    }\r\n  })\r\n  .catch(err => {\r\n    console.error(err);\r\n    res\r\n      .status(400)\r\n      .send(\r\n        'Your request was unable to be processed. Please contact the Grower Services team on 1800 447 246 if this issue persists.'\r\n      );\r\n    handleErrorResponse(req, '', err, '');\r\n  });\r\n})\r\n.catch(err => {\r\n  var data = {};\r\n  console.error(err);\r\n  res.status(400).send('Failed to fetch Employee name');\r\n  handleErrorResponse(req, '', err, '');\r\n});",
  "sys__UUID": "d174385c-dd3c-49ea-ade6-783d68befd92"
}
