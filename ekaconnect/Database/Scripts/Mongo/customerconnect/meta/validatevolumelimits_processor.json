{
  "_id": "validatevolumelimits_processor",
  "name": "validatevolumelimits_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": " const send = (status, message) => res.status(status).send(message);\r\n    const formElementName = 'tonnagelimits';\r\n    const appId = req.body.appId;\r\n    const tenant = req.headers['X-TenantID'];\r\n    const data = req.body.bulkPayLoadData.map((i, index) => ({ ...i, _groupNo: i._groupNo || index })) || [];\r\n    const commonMessage = 'Entry errors identified. Please review your inputs.';\r\n    const findEmptyField = data => (field, callback) => {\r\n      const e = data.filter(\r\n        i =>\r\n          i[field] === null || i[field] === '' || i[field] === undefined || i[field] === 0 || i[field] === '__empty__'\r\n      );\r\n      if (e && e.length > 0) {\r\n        const msg = callback(e);\r\n        return {\r\n          errorCode: '004',\r\n          errorMessage: commonMessage,\r\n          errorContext: null,\r\n          errorLocalizedMessage: commonMessage,\r\n          errors: [\r\n            {\r\n              errorCode: '004',\r\n              errorMessage: msg,\r\n              errorContext: `{formarray:${formElementName}}`,\r\n              errorLocalizedMessage: msg,\r\n              errors: [\r\n                ...e.reduce((acc, curr) => {\r\n                  acc.add(curr._groupNo);\r\n                  return acc;\r\n                }, new Set())\r\n              ].map(i => ({\r\n                errorCode: '004',\r\n                errorMessage: msg,\r\n                errorContext: `{formarray:${i}}`,\r\n                errorLocalizedMessage: msg,\r\n                errors: [\r\n                  {\r\n                    errorCode: '004',\r\n                    errorMessage: msg,\r\n                    errorContext: `{field:${field}}`,\r\n                    errorLocalizedMessage: msg,\r\n                    errors: null\r\n                  }\r\n                ]\r\n              }))\r\n            }\r\n          ]\r\n        };\r\n      }\r\n      return null;\r\n    };\r\n    const equal = (i, j) =>\r\n      i.region == j.region &&\r\n      i.product == j.product &&\r\n      i.site == j.site &&\r\n      i.quality == j.quality &&\r\n      i.season == j.season &&\r\n      i.bpRefNo == j.bpRefNo;\r\n    const checkwithDailyPurchse = i => i.dailypurchased != null && i.dailypurchased < i.dailyLimit;\r\n    const invalidMessages = [\r\n      {\r\n        key: 'bpRefNo',\r\n        message: () => `Please choose an account`\r\n      },\r\n      {\r\n        key: 'season',\r\n        message: () => `Please choose a harvest season`\r\n      },\r\n      {\r\n        key: 'region',\r\n        message: () => `Please select a valid portzone`\r\n      },\r\n      {\r\n        key: 'site',\r\n        message: e => `Please select the site(s)`\r\n      },\r\n      {\r\n        key: 'product',\r\n        message: e => `Please select a valid commodity`\r\n      },\r\n      {\r\n        key: 'quality',\r\n        message: e => `Please select the grade(s)`\r\n      },\r\n      {\r\n        key: 'dailyLimit',\r\n        message: e => `Please enter daily limit`\r\n      }\r\n    ];\r\n    const duplicateMessage =\r\n      'Please review errors or duplicates marked below and ensure entry is correct before proceeding to next step.';\r\n    const errorWithDailyPurchase = 'Limit must be higher than daily purchased';\r\n    const errorExistingTonnageLimit =\r\n      'The highest level limit is set for a commodity at a PortZone. Limits at lower levels cannot exceed limits at a higher level. Please review your inputs.';\r\n\r\n    const getRequestBody = url => ({\r\n      method: 'GET',\r\n      url,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': tenant\r\n      },\r\n      json: true\r\n    });\r\n\r\n    const connectVolumeLimitsData = (bpRefNo, season, bpExternalCode) => ({\r\n      ...getRequestBody(\r\n        req.body.propertyList.eka_connect_host +\r\n          '/data/12325a98-a959-4939-9005-4158d136afcd/c98119db-1f7c-4802-b72a-6678f1ecc0f3?bpRefNo=' +\r\n          bpRefNo +\r\n          '&season=' +\r\n          season +\r\n          (bpExternalCode ? `&bpExternalCode=${bpExternalCode}` : '')\r\n      ),\r\n      body: {\r\n        filterData: {\r\n          filter: []\r\n        }\r\n      }\r\n    });\r\n\r\n    function getData(requestBody) {\r\n      return new Promise(function(resolve, reject) {\r\n        request(requestBody, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    const connectMaster = {\r\n      method: 'GET',\r\n      url:\r\n        req.body.propertyList.eka_connect_host +\r\n        `/data/12325a98-a959-4939-9005-4158d136afcd/1f3e680b-f3dd-418a-8fd4-888e38714cc3`,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function get_masterData() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(connectMaster, function(error, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    try {\r\n      if (data.length > 0) {\r\n        if (data.length <= 10) {\r\n          const _findEmptyField = findEmptyField(data);\r\n          for (let i of invalidMessages) {\r\n            const error = _findEmptyField(i.key, i.message);\r\n            if (error) {\r\n              return send(400, error);\r\n            }\r\n          }\r\n\r\n          const _compareDP = data.filter(\r\n            i =>\r\n              (i.dailypurchased != null || i.dailypurchased != '') && Number(i.dailypurchased) >= Number(i.dailyLimit)\r\n          );\r\n          if (_compareDP && _compareDP.length > 0) {\r\n            return send(400, {\r\n              errorCode: '004',\r\n              errorMessage: errorWithDailyPurchase,\r\n              errorContext: null,\r\n              errorLocalizedMessage: errorWithDailyPurchase,\r\n              errors: [\r\n                {\r\n                  errorCode: '004',\r\n                  errorMessage: errorWithDailyPurchase,\r\n                  errorContext: '{formarray:tonnagelimits}',\r\n                  errorLocalizedMessage: errorWithDailyPurchase,\r\n                  errors: _compareDP.map(i => ({\r\n                    errorCode: '004',\r\n                    errorMessage: errorWithDailyPurchase,\r\n                    errorContext: `{formarray:${i._groupNo}}`,\r\n                    errorLocalizedMessage: errorWithDailyPurchase,\r\n                    errors: [\r\n                      {\r\n                        errorCode: '004',\r\n                        errorMessage: errorWithDailyPurchase,\r\n                        errorContext: `{field:dailyLimit}`,\r\n                        errorLocalizedMessage: errorWithDailyPurchase,\r\n                        errors: null\r\n                      }\r\n                    ]\r\n                  }))\r\n                }\r\n              ]\r\n            });\r\n          }\r\n\r\n          const duplicate = [\r\n            ...data\r\n              .filter((i, index, arr) => arr.findIndex(j => equal(i, j)) != index)\r\n              .reduce((acc, curr) => {\r\n                acc.add(curr._groupNo);\r\n                return acc;\r\n              }, new Set())\r\n          ];\r\n\r\n          if (duplicate && duplicate.length > 0) {\r\n            return send(400, {\r\n              errorCode: '004',\r\n              errorMessage: commonMessage,\r\n              errorContext: null,\r\n              errorLocalizedMessage: commonMessage,\r\n              errors: [\r\n                {\r\n                  errorCode: '004',\r\n                  errorMessage: duplicateMessage,\r\n                  errorContext: '{formarray:tonnagelimits}',\r\n                  errorLocalizedMessage: duplicateMessage,\r\n                  errors: duplicate.map(i => ({\r\n                    errorCode: '004',\r\n                    errorMessage: duplicateMessage,\r\n                    errorContext: `{formarray:${i}}`,\r\n                    errorLocalizedMessage: duplicateMessage,\r\n                    errors: null\r\n                  }))\r\n                }\r\n              ]\r\n            });\r\n          }\r\n\r\n          const dataDuplicateDL = data.reduce((acc, cur, index, arr) => {\r\n            if (arr.length >= 2) {\r\n              let dataItemAll = arr.filter(\r\n                dt => dt.product === cur.product && dt.region === cur.region && dt.quality == 'All' && dt.site == 'All'\r\n              )[0];\r\n              let dataItemSiteAll = arr.filter(\r\n                dt => dt.product === cur.product && dt.region === cur.region && dt.site == 'All'\r\n              )[0];\r\n              let dataItemGradeAll = arr.filter(\r\n                dt => dt.product === cur.product && dt.region === cur.region && dt.quality == 'All'\r\n              )[0];\r\n              let specificSite = arr.filter(\r\n                dt => dt.product === cur.product && dt.region === cur.region && dt.quality == 'All' && dt.site != 'All'\r\n              );\r\n              let specifcGrade = arr.filter(\r\n                dt => dt.product === cur.product && dt.region === cur.region && dt.quality != 'All' && dt.site == 'All'\r\n              );\r\n\r\n              if (dataItemAll && dataItemAll != undefined) {\r\n                if (cur.dailyLimit > dataItemAll.dailyLimit) acc.push(cur);\r\n              } else if (dataItemSiteAll && dataItemSiteAll != undefined) {\r\n                // if(cur.site!='All' && cur.quality!='All'){\r\n                //   if(cur.dailyLimit > dataItemSiteAll.dailyLimit) acc.push(cur);\r\n                // }\r\n              } else if (dataItemGradeAll && dataItemGradeAll != undefined) {\r\n                // if(cur.site!='All' && cur.quality!='All'){\r\n                //   if(cur.dailyLimit > dataItemGradeAll.dailyLimit) acc.push(cur);\r\n                // }\r\n              }\r\n              if (cur.site != 'All' || cur.quality != 'All') {\r\n                if (cur.site != 'All') {\r\n                  let _siteDL = specificSite.find(o => o.site.toString() == cur.site.toString());\r\n                  if (_siteDL) {\r\n                    _siteDL = Math.max.apply(null, [_siteDL.dailyLimit]);\r\n                    if (cur.dailyLimit > _siteDL) acc.push(cur);\r\n                  }\r\n                }\r\n                if (cur.quality != 'All') {\r\n                  let _gradeDL = specifcGrade.find(o => o.quality.toString() == cur.quality.toString());\r\n                  if (_gradeDL) {\r\n                    _gradeDL = Math.max.apply(null, [_gradeDL.dailyLimit]);\r\n                    if (cur.dailyLimit > _gradeDL) acc.push(cur);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            return acc;\r\n          }, []);\r\n\r\n          if (dataDuplicateDL && dataDuplicateDL.length > 0) {\r\n            return send(400, {\r\n              errorCode: '004',\r\n              errorMessage: errorExistingTonnageLimit,\r\n              errorContext: null,\r\n              errorLocalizedMessage: errorExistingTonnageLimit,\r\n              errors: [\r\n                {\r\n                  errorCode: '004',\r\n                  errorMessage: errorExistingTonnageLimit,\r\n                  errorContext: '{formarray:tonnagelimits}',\r\n                  errorLocalizedMessage: errorExistingTonnageLimit,\r\n                  errors: dataDuplicateDL.map(i => ({\r\n                    errorCode: '004',\r\n                    errorMessage: errorExistingTonnageLimit,\r\n                    errorContext: `{formarray:${i._groupNo}}`,\r\n                    errorLocalizedMessage: errorExistingTonnageLimit,\r\n                    errors: [\r\n                      {\r\n                        errorCode: '004',\r\n                        errorMessage: errorExistingTonnageLimit,\r\n                        errorContext: `{field:dailyLimit}`,\r\n                        errorLocalizedMessage: errorExistingTonnageLimit,\r\n                        errors: null\r\n                      }\r\n                    ]\r\n                  }))\r\n                }\r\n              ]\r\n            });\r\n          }\r\n\r\n          let acc = data[0].bpRefNo;\r\n          let hseas = data[0].season;\r\n          let bpExternalCode = data[0].bpExternalCode;\r\n          get_masterData().then(seasonMaster => {\r\n            getData(connectVolumeLimitsData(acc, hseas, bpExternalCode)).then(vlmData => {\r\n              const _vlmData = vlmData\r\n                .map(i => {\r\n                  const masterData = seasonMaster.find(\r\n                    d => d.bpRefNo == i.bpRefNo && d.bpExternalCode == i.bpExternalCode\r\n                  );\r\n                  if (masterData) {\r\n                    i.active =\r\n                      masterData.currentSeason == i.season ? 'Y' : masterData.previousSeason == i.season ? 'N' : null;\r\n                  }\r\n                  return i;\r\n                })\r\n                .filter(i => i.active != null);\r\n              if (_vlmData && _vlmData.length) {\r\n                const dbCompareDL = data.filter(newItem => {\r\n                  let dbItemAll = _vlmData.filter(\r\n                    dbi =>\r\n                      dbi.product === newItem.product &&\r\n                      dbi.region === newItem.region &&\r\n                      dbi.quality == 'All' &&\r\n                      dbi.site == 'All'\r\n                  )[0];\r\n                  let dbItemSiteAll = _vlmData.filter(\r\n                    dbi => dbi.product === newItem.product && dbi.region === newItem.region && dbi.site == 'All'\r\n                  )[0];\r\n                  let dbItemGradeAll = _vlmData.filter(\r\n                    dbi => dbi.product === newItem.product && dbi.region === newItem.region && dbi.quality == 'All'\r\n                  )[0];\r\n                  let dbOthersMax = Math.max.apply(\r\n                    null,\r\n                    _vlmData\r\n                      .filter(\r\n                        dbi =>\r\n                          dbi.product === newItem.product &&\r\n                          dbi.region === newItem.region &&\r\n                          dbi.quality != 'All' &&\r\n                          dbi.site != 'All'\r\n                      )\r\n                      .map(o => o.dailyLimit)\r\n                  );\r\n                  let dbOthersAllMax = Math.max.apply(\r\n                    null,\r\n                    _vlmData\r\n                      .filter(\r\n                        dbi =>\r\n                          dbi.product === newItem.product &&\r\n                          dbi.region === newItem.region &&\r\n                          (dbi.quality == 'All' || dbi.site == 'All')\r\n                      )\r\n                      .map(o => o.dailyLimit)\r\n                  );\r\n                  let specificSites = _vlmData.filter(\r\n                    dbi =>\r\n                      dbi.product === newItem.product &&\r\n                      dbi.region === newItem.region &&\r\n                      dbi.quality == 'All' &&\r\n                      dbi.site != 'All'\r\n                  );\r\n                  let specificGrades = _vlmData.filter(\r\n                    dbi =>\r\n                      dbi.product === newItem.product &&\r\n                      dbi.region === newItem.region &&\r\n                      dbi.quality != 'All' &&\r\n                      dbi.site == 'All'\r\n                  );\r\n                  let newItemDailyLimit =\r\n                    newItem.formattedOldDailylimit != undefined\r\n                      ? Number(newItem.formattedOldDailylimit)\r\n                      : newItem.dailyLimit;\r\n                  if (dbItemAll && dbItemAll != undefined) {\r\n                    if (newItem.site == 'All' && newItem.quality == 'All') {\r\n                      if (newItemDailyLimit < dbOthersMax) return newItem;\r\n                    } else if (newItem.site == 'All') {\r\n                      if (newItemDailyLimit > dbItemAll.dailyLimit) return newItem;\r\n                      let _qualityDL = _vlmData.find(o => o.quality.toString() == newItem.quality.toString());\r\n                      if (_qualityDL) {\r\n                        _qualityDL = Math.max.apply(null, [_qualityDL.dailyLimit]);\r\n                        if (newItemDailyLimit < _qualityDL) return newItem;\r\n                      }\r\n                      // if(newItemDailyLimit < dbOthersMax) return newItem;\r\n                    } else if (newItem.quality == 'All') {\r\n                      if (newItemDailyLimit > dbItemAll.dailyLimit) return newItem;\r\n                      let _siteDL = _vlmData.find(o => o.site.toString() == newItem.site.toString());\r\n                      if (_siteDL) {\r\n                        _siteDL = Math.max.apply(null, [_siteDL.dailyLimit]);\r\n                        if (newItemDailyLimit < _siteDL) return newItem;\r\n                      }\r\n                      // if(newItemDailyLimit < dbOthersMax) return newItem;\r\n                    } else {\r\n                      if (newItemDailyLimit > dbItemAll.dailyLimit) return newItem;\r\n                    }\r\n                  } else if (dbItemSiteAll && dbItemSiteAll != undefined) {\r\n                    if (newItem.site == 'All' && newItem.quality == 'All') {\r\n                      if (newItemDailyLimit < dbOthersAllMax) return newItem;\r\n                      if (newItemDailyLimit < dbOthersMax) return newItem;\r\n                    } else if (newItem.site == 'All') {\r\n                      let _qualityDL = _vlmData.find(o => o.quality.toString() == newItem.quality.toString());\r\n                      if (_qualityDL) {\r\n                        _qualityDL = Math.max.apply(null, [_qualityDL.dailyLimit]);\r\n                        if (newItemDailyLimit < _qualityDL) return newItem;\r\n                      }\r\n                      // if(newItemDailyLimit < dbOthersMax) return newItem;\r\n                    } else if (newItem.quality == 'All') {\r\n                      let _siteDL = _vlmData.find(o => o.site.toString() == newItem.site.toString());\r\n                      if (_siteDL) {\r\n                        _siteDL = Math.max.apply(null, [_siteDL.dailyLimit]);\r\n                        if (newItemDailyLimit < _siteDL) return newItem;\r\n                      }\r\n                      // if(newItemDailyLimit < dbOthersMax) return newItem;\r\n                    } else {\r\n                      // if(newItemDailyLimit > dbItemSiteAll.dailyLimit) return newItem;\r\n                    }\r\n                  } else if (dbItemGradeAll && dbItemGradeAll != undefined) {\r\n                    if (newItem.site == 'All' && newItem.quality == 'All') {\r\n                      if (newItemDailyLimit < dbOthersAllMax) return newItem;\r\n                      if (newItemDailyLimit < dbOthersMax) return newItem;\r\n                    } else if (newItem.site == 'All') {\r\n                      let _qualityDL = _vlmData.find(o => o.quality.toString() == newItem.quality.toString());\r\n                      if (_qualityDL) {\r\n                        _qualityDL = Math.max.apply(null, [_qualityDL.dailyLimit]);\r\n                        if (newItemDailyLimit < _qualityDL) return newItem;\r\n                      }\r\n                      // if(newItemDailyLimit < dbOthersMax) return newItem;\r\n                    } else if (newItem.quality == 'All') {\r\n                      let _siteDL = _vlmData.find(o => o.site.toString() == newItem.site.toString());\r\n                      if (_siteDL) {\r\n                        _siteDL = Math.max.apply(null, [_siteDL.dailyLimit]);\r\n                        if (newItemDailyLimit < _siteDL) return newItem;\r\n                      }\r\n                      // if(newItemDailyLimit < dbOthersMax) return newItem;\r\n                    } else {\r\n                      // if(newItemDailyLimit > dbItemGradeAll.dailyLimit) return newItem;\r\n                    }\r\n                  } else {\r\n                    if (newItem.site == 'All' && newItem.quality == 'All') {\r\n                      if (newItemDailyLimit < dbOthersMax) return newItem;\r\n                    } else if (newItem.site == 'All') {\r\n                      let _qualityDL = _vlmData.find(o => o.quality.toString() == newItem.quality.toString());\r\n                      if (_qualityDL) {\r\n                        _qualityDL = Math.max.apply(null, [_qualityDL.dailyLimit]);\r\n                        if (newItemDailyLimit < _qualityDL) return newItem;\r\n                      }\r\n                      // if(newItemDailyLimit < dbOthersMax) return newItem;\r\n                    } else if (newItem.quality == 'All') {\r\n                      let _siteDL = _vlmData.find(o => o.site.toString() == newItem.site.toString());\r\n                      if (_siteDL) {\r\n                        _siteDL = Math.max.apply(null, [_siteDL.dailyLimit]);\r\n                        if (newItemDailyLimit < _siteDL) return newItem;\r\n                      }\r\n                      // if(newItemDailyLimit < dbOthersMax) return newItem;\r\n                    }\r\n                  }\r\n\r\n                  if (newItem.site != 'All' || newItem.quality != 'All') {\r\n                    if (newItem.site != 'All') {\r\n                      let _siteDL = specificSites.find(o => o.site.toString() == newItem.site.toString());\r\n                      if (_siteDL && newItem.quality != 'All') {\r\n                        _siteDL = Math.max.apply(null, [_siteDL.dailyLimit]);\r\n                        if (newItemDailyLimit > _siteDL) return newItem;\r\n                      }\r\n                    }\r\n                    if (newItem.quality != 'All') {\r\n                      let _gradeDL = specificGrades.find(o => o.quality.toString() == newItem.quality.toString());\r\n                      if (_gradeDL && newItem.site != 'All') {\r\n                        _gradeDL = Math.max.apply(null, [_gradeDL.dailyLimit]);\r\n                        if (newItemDailyLimit > _gradeDL) return newItem;\r\n                      }\r\n                    }\r\n                  }\r\n                });\r\n\r\n                if (dbCompareDL && dbCompareDL.length) {\r\n                  return send(400, {\r\n                    errorCode: '004',\r\n                    errorMessage: errorExistingTonnageLimit,\r\n                    errorContext: null,\r\n                    errorLocalizedMessage: errorExistingTonnageLimit,\r\n                    errors: [\r\n                      {\r\n                        errorCode: '004',\r\n                        errorMessage: errorExistingTonnageLimit,\r\n                        errorContext: '{formarray:tonnagelimits}',\r\n                        errorLocalizedMessage: errorExistingTonnageLimit,\r\n                        errors: dbCompareDL.map(i => ({\r\n                          errorCode: '004',\r\n                          errorMessage: errorExistingTonnageLimit,\r\n                          errorContext: `{formarray:${i._groupNo}}`,\r\n                          errorLocalizedMessage: errorExistingTonnageLimit,\r\n                          errors: [\r\n                            {\r\n                              errorCode: '004',\r\n                              errorMessage: errorExistingTonnageLimit,\r\n                              errorContext: `{field:dailyLimit}`,\r\n                              errorLocalizedMessage: errorExistingTonnageLimit,\r\n                              errors: null\r\n                            }\r\n                          ]\r\n                        }))\r\n                      }\r\n                    ]\r\n                  });\r\n                } else {\r\n                  send(200, data);\r\n                }\r\n              } else {\r\n                send(200, data);\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          send(400, 'Maximum of 10 records are allowed');\r\n        }\r\n      } else {\r\n        send(400, 'No data to be saved');\r\n      }\r\n    } catch (err) {\r\n      send(500, {\r\n        errorCode: '004',\r\n        errorMessage: err.message || err,\r\n        errorContext: err.message || err,\r\n        errorLocalizedMessage: 'Internal server error'\r\n      });\r\n    }",
  "sys__UUID": "68fedb17-cfc4-46b3-94ce-7e4e72b620cd"
}
