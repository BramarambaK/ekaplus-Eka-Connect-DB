{
  "_id": "contractrequest_rejectrequest_processor",
  "name": "contractrequest_rejectrequest_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "let data = req.body;\r\nconst tenant = req.headers['X-TenantID'];\r\nconst auth = req.headers.authorization;\r\nconst appId = req.body.appId;\r\nconst traderName = req.body.propertyList.REQ_CONTRACTS_TRADER_NAME;\r\nconst userInfo = req.body.propertyList.eka_connect_host + '\/api\/userinfo';\r\n\r\nconst send = (status, message) => res.status(status).send(message);\r\n\r\nconst headers = {\r\n  Authorization: auth,\r\n  'X-TenantID': tenant,\r\n  'Content-Type': 'application\/json'\r\n};\r\n\r\nfunction multiGradeData(gradeData) {\r\n  let mgData = {\r\n    Parent_PublishedBids: JSON.parse(\r\n      gradeData.multiGradeDifferentialDetails.replace(\/'\/g, '\"')\r\n    ).multiGradeDifferentialDetail.map(i => ({\r\n      CommodityGradeName: i.qualityName,\r\n      MgSpread: i.multiGradeDifferential\r\n    }))\r\n  };\r\n  return mgData.Parent_PublishedBids;\r\n}\r\n\r\nconst getData_ = url =>\r\n  new Promise(function(resolve, reject) {\r\n    request(\r\n      {\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'Content-Type': 'application\/json',\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true\r\n      },\r\n      function(err, response, body) {\r\n        if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\nconst getData = req =>\r\n  new Promise((resolve, reject) => {\r\n    request(\r\n      {\r\n        ...req,\r\n        headers: headers,\r\n        json: true\r\n      },\r\n      (err, response, body) => {\r\n        if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n          resolve(body);\r\n        } else {\r\n          reject(err || body.error || body.errorMessage);\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\nconst workflow = body =>\r\n  getData({\r\n    method: 'POST',\r\n    url: `${req.body.propertyList.eka_connect_host}\/workflow`,\r\n    body: body\r\n  });\r\n\r\nconst reqId = (reqContract, payload) =>\r\n  new Promise((resolve, reject) => {\r\n    workflow({\r\n      output: {\r\n        push_contractRequestData: [\r\n          {\r\n            requestType: 'Amendment',\r\n            requestedDate: moment(reqContract.currentDate).format('DD-MM-YYYY'),\r\n            requestedBy: reqContract.requestedBy || ''\r\n          }\r\n        ]\r\n      },\r\n      task: 'push_contractRequestData',\r\n      workflowTaskName: 'push_contractRequestData',\r\n      appId: appId\r\n    })\r\n      .then(resId => {\r\n        if (resId && resId.data && resId.data.length > 0) {\r\n          resolve(resId.data.map(i => i.requestId));\r\n        } else {\r\n          reject('Request id not found in response');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        reject(err);\r\n      });\r\n  });\r\n\r\nconst saveContract = t =>\r\n  Promise.all([\r\n    workflow({\r\n      output: {\r\n        update_contractRequestData: [\r\n          {\r\n            contractRefNo: t.contractRefNo,\r\n            requestId: t.requestId\r\n          }\r\n        ]\r\n      },\r\n      task: 'update_contractRequestData',\r\n      workflowTaskName: 'update_contractRequestData',\r\n      appId: '12325a98-a959-4939-9005-4158d136afcd'\r\n    })\r\n  ]);\r\n\r\nconst updateContract = t =>\r\n  workflow({\r\n    output: {\r\n      update_contractDomainData: [...t]\r\n    },\r\n    task: 'update_contractDomainData',\r\n    workflowTaskName: 'update_contractDomainData',\r\n    appId: '12325a98-a959-4939-9005-4158d136afcd'\r\n  });\r\n\r\nvar contractRequestConnectData = {\r\n  method: 'GET',\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    '\/data\/12325a98-a959-4939-9005-4158d136afcd\/3725efac-7f2a-462b-8af0-5462e33cf544',\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n    requestid: req.headers['requestid'] + '-processor'\r\n  },\r\n  body: {\r\n    filterData: {\r\n      filter: [\r\n        {\r\n          fieldName: 'contractRefNo',\r\n          operator: 'eq',\r\n          value: ''\r\n        },\r\n        {\r\n          fieldName: 'contractItemRefNo',\r\n          operator: 'eq',\r\n          value: ''\r\n        },\r\n        {\r\n          fieldName: 'requestType',\r\n          operator: 'eq',\r\n          value: 'New contract'\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  json: true\r\n};\r\nfunction get_contractRequestconnectData() {\r\n  return new Promise(function(resolve, reject) {\r\n    \/\/ console.log('get_contractRequestconnectData Request-' + JSON.stringify(contractRequestConnectData));\r\n    request(contractRequestConnectData, function(err, response, body) {\r\n      \/\/ console.log('get_contractRequestconnectData Response-' + JSON.stringify(response));\r\n      if (response.statusCode === 200) resolve(body);\r\n      else {\r\n        reject(err || body);\r\n      }\r\n    });\r\n  });\r\n}\r\nvar updatedContract = [\r\n  {\r\n    requestId: data.requestId,\r\n    requestIdUnique: data.requestIdUnique,\r\n    contractRefNo: data.contractRefNo,\r\n    contractItemRefNo: data.contractItemRefNo,\r\n    approvalStatus: 'Rejected',\r\n    isRequestActive: false\r\n  }\r\n];\r\n\r\nlet loggedInUserType = '';\r\nconst bpList = new Promise((resolve, reject) => {\r\n  getData_(userInfo)\r\n    .then(t => {\r\n      loggedInUserType = t.customerType;\r\n      resolve(t.firstName + ' ' + t.lastName);\r\n    })\r\n    .catch(err => {\r\n      reject(err);\r\n    });\r\n});\r\n\r\nconst sendError = (message, context, localizedMessage) =>\r\nres.status(400).send({\r\n  errorCode: \"004\",\r\n  errorMessage: message,\r\n  errorContext: null,\r\n  errorLocalizedMessage: localizedMessage,\r\n  errors: [\r\n    {\r\n      errorCode: \"004\",\r\n      errorMessage: message,\r\n      errorContext: context,\r\n      errorLocalizedMessage: localizedMessage,\r\n      errors: null,\r\n    },\r\n  ],\r\n});\r\n\r\n\r\nconst objid = \"46e84f42-6288-4027-b6d0-fd1c11019259\";\r\nconst appid = \"12325a98-a959-4939-9005-4158d136afcd\";\r\n\r\nfunction getRequestStatus() {\r\n\r\n  var connect = {\r\n    method: \"GET\",\r\n    body: {\r\n      filterData: {\r\n        filter: [\r\n          {\r\n            fieldName: \"contractItemRefNo\",\r\n            value: data.contractItemRefNo,\r\n            operator: \"eq\",\r\n          },\r\n          {\r\n            fieldName: \"contractRefNo\",\r\n            value: data.contractRefNo,\r\n            operator: \"eq\",\r\n          },\r\n          {\r\n            fieldName: \"requestIdUnique\",\r\n            value: data.requestIdUnique,\r\n            operator: \"eq\",\r\n          },\r\n          {\r\n            fieldName: \"approvalStatus\",\r\n            value: loggedInUserType && loggedInUserType.toLowerCase().includes('grower') ? 'Action required' : 'Awaiting review',\r\n            operator: \"eq\",\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    url: req.body.propertyList.eka_connect_host + \"\/data\/\" + appid + \"\/\" + objid,\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n      requestid: req.headers[\"requestid\"] + \"-processor\",\r\n    },\r\n    json: true,\r\n  };\r\n\r\n\r\n    console.log(\"connect obj\", JSON.stringify(connect));\r\n    return new Promise(function (resolve, reject) {\r\n      request(connect, function (err, response, body) {\r\n        console.log(\"res\", JSON.stringify(body));\r\n        if (err || body.error) {\r\n          console.log(\"error occured ::\" + body.error);\r\n          reject(body);\r\n        } else {\r\n          resolve(body);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  bpList\r\n  .then(employeeName => {\r\n  getRequestStatus()\r\n  .then(async function (sameDataExists) {\r\n    if (sameDataExists.length>0) {\r\n\/\/ (async () => {\r\n  if (data.requestType == 'Amendment') {\r\n    contractRequestConnectData.body.filterData.filter[0].value = data.contractRefNo;\r\n    contractRequestConnectData.body.filterData.filter[1].value = data.contractItemRefNo;\r\n     await get_contractRequestconnectData()\r\n      .then(result => {\r\n        if (result.length > 0) {\r\n          updatedContract.push({\r\n            contractRefNo: data.contractRefNo,\r\n            contractItemRefNo: data.contractItemRefNo,\r\n            approvalStatus: 'Rejected',\r\n            isRequestActive: false,\r\n            requestIdUnique: result[0].requestId + '-'\r\n          });\r\n        } else {\r\n          updatedContract.push({\r\n            contractRefNo: data.contractRefNo,\r\n            contractItemRefNo: data.contractItemRefNo,\r\n            approvalStatus: 'Rejected',\r\n            isRequestActive: false,\r\n            requestIdUnique: '-'\r\n          });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        res.status(400).send(err);\r\n        handleErrorResponse(req, '',err, '')\r\n      });\r\n  }\r\n  console.log(JSON.stringify(updatedContract));\r\n  updateContract(updatedContract)\r\n    .then(() => {\r\n      console.log('request ID', data.requestId);\r\n      data.approvalStatus = 'Rejected';\r\n      data.isRequestedByEkaCCSystem = true;\r\n      data.isMultiGrade = data.isMultiGrade ? 'Y' : 'N';\r\n      delete data.PRIMARY_ID;\r\n      saveContract(req.body)\r\n        .then(() => {\r\n          send(200, {\r\n            requestId: data.requestId,\r\n            msg: data.requestId + ' contract has been successfully created.',\r\n            priceInvalid: false,\r\n            tabIndex: 2,\r\n            ngrFilter: data.BPRefNo\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n          send(500, 'Contract cannot be created, please contact system admin');\r\n          handleErrorResponse(req, '',err, '')\r\n        });\r\n    })\r\n    .catch(err => {\r\n      console.error(err);\r\n      send(500, 'Contract cannot be created, please contact system admin');\r\n      handleErrorResponse(req, '',err, '')\r\n    })\r\n\/\/ });\r\n\/\/ })()\r\n.catch(err => {\r\n  console.log('Error:', err);\r\n  res.status(500).send(err);\r\n  handleErrorResponse(req, '',err, '')\r\n});\r\n} else {\r\n    sendError(\r\n      \"Contract is already rejected or status has been changed, please refresh the page.\",\r\n      \"\",\r\n      \"Your request was unable to be processed. Please contact the Grower Services team on 1800 447 246 if this issue persists.\"\r\n    );\r\n  }\r\n  })\r\n  .catch((err) => {\r\n  console.error(err);\r\n  res\r\n    .status(400)\r\n    .send(\r\n      \"Your request was unable to be processed. Please contact the Grower Services team on 1800 447 246 if this issue persists.\"\r\n    );\r\n    handleErrorResponse(req, '',err, '')\r\n  });\r\n})\r\n.catch(err => {\r\n  var data = {};\r\n  console.error(err);\r\n  res.status(400).send('Failed to fetch Employee name');\r\n  handleErrorResponse(req, '', err, '');\r\n});\r\n",
  "sys__UUID": "ae1aa05e-33fb-4e2b-94d1-b6f00caeee1f"
}
