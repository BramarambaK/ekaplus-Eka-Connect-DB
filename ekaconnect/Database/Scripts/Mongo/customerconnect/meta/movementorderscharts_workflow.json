{
  "_id": "movementorderscharts_workflow",
  "componentType": "UserTask",
  "objectAction": "READ",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "label": "Movement orders charts",
  "type": "workflow",
  "layout": {
    "emptyText": {
      "message": [
        "You currently have no active movement orders.",
        "All movement orders in progress will display here."
      ]
    },
    "header": {
      "label": "Quantity moved against open quantity",
      "style": {
        "font-size": "22px",
        "margin-top": "-4px"
      }
    },
    "getInitialData": false,
    "name": "chart",
    "type": "horizontalBar",
    "xAxesTick": {
      "display": false
    },
    "xAxisMax": true,
    "legend": {
      "display": false,
      "position": "top"
    },
    "yAxesTick": {
      "fontFamily": "\"Helvetica Neue LT W05 65 Medium\"",
      "fontSize": 14
    },
    "toolTipHover": {
      "enable": true,
      "valueExpression": "let moved,remaining;  if(!isNaN(${movedQuantity})&& !isNaN(${orderedQuantity})){moved = Math.round(100*${movedQuantity}/${orderedQuantity})}else{moved=0}if(!isNaN(${openQuantity})&& !isNaN(${orderedQuantity})){remaining = Math.round(100*${openQuantity}/${orderedQuantity})}else{remaining=0} ; return moved+\"% moved\"+\", \"+ remaining+\"% remaining\""
    },
    "chartLayout": {
      "padding": {
        "bottom": 0
      }
    }
  },
  "fields": [
    {
      "label": "Product",
      "key": "product",
      "type": "label",
      "sortBy": "descending"
    },
    {
      "label": "Moved quantity",
      "key": "movedQuantity",
      "backgroundColor": [
        "#9E2A2F",
        "#BE531C",
        "#CF7F00",
        "#DAAA00",
        "#ABAD25",
        "#658D1B",
        "#279989",
        "#007681",
        "#005F86"
      ],
      "fontColor": "#FFFFFF",
      "type": "value",
      "suffix": "'${quantityUnit}'"
    },
    {
      "label": "Ordered quantity",
      "key": "orderedQuantity",
      "type": "value",
      "hidden": true
    },
    {
      "label": "Open quantity",
      "key": "openQuantity",
      "backgroundColor": "#EEF2F5",
      "fontColor": "#5D646F",
      "type": "value",
      "suffix": "'${quantityUnit}'",
      "valueExpression": "let o = isNaN(Number(${orderedQuantity})) ? 0 : Number(${orderedQuantity});  let m = isNaN(Number(${movedQuantity})) ? 0 : Number(${movedQuantity}); return Math.max(o - m, 0);"
    },

    {
      "key": "dateCollector",
      "filterType": "dropdown",
      "filterBy": "dateCollector",
      "placeholder": "Select a period",
      "selectedAll": "All open deliveries",
      "multiple": true,
      "sortBy": [
        "This week",
        "Next week",
        "This month",
        "Next month",
        "Beyond next month"
      ],
      "valueExpression": "moment.updateLocale('en', {\r\n    week: {\r\n      dow: 1,\r\n      doy: 4\r\n    }\r\n  });\r\n  \r\n  let output = [],\r\n    from = moment('${deliveryFromDate}', 'DD-MM-YYYY'),\r\n    to = moment('${deliveryToDate}', 'DD-MM-YYYY'),\r\n    today = moment(),\r\n    yesterday = today.clone().subtract(1, 'd'),\r\n    weekStart = today.clone().startOf(\"week\"),\r\n    weekEnd = today.clone().endOf(\"week\"),\r\n    monthStart = today.clone().startOf(\"month\"),\r\n    monthEnd = today.clone().endOf(\"month\"),\r\n    nextWeekStart = today.clone().add(1, 'w').startOf(\"week\"),\r\n    nextWeekEnd = today.clone().add(1, 'w').endOf(\"week\"),\r\n    nextMonthStart = today.clone().add(1, 'M').startOf(\"month\"),\r\n    nextMonthEnd = today.clone().add(1, 'M').endOf(\"month\");\r\n  \r\n  if (from.isAfter(yesterday, 'd') || to.isAfter(yesterday, 'd')) {\r\n  \r\n    if (from.isSame(today, 'week') || to.isSame(today, 'week') || (from.isBefore(weekStart, 'day') && to.isAfter(weekEnd, 'day'))) {\r\n      output.push('This week');\r\n    }\r\n  \r\n    if (\r\n      (from.isAfter(nextWeekStart.clone().subtract(1, 'd'), 'day') && from.isBefore(nextWeekEnd.clone().add(1, 'd'), 'day')) ||\r\n      (to.isAfter(nextWeekStart.clone().subtract(1, 'd'), 'day') && to.isBefore(nextWeekEnd.clone().add(1, 'd'), 'day')) ||\r\n      (from.isBefore(nextWeekStart, 'day') && to.isAfter(nextWeekEnd, 'day'))\r\n    ) {\r\n      output.push('Next week');\r\n    }\r\n  \r\n    if (from.isSame(today, 'month') || to.isSame(today, 'month')) {\r\n      output.push('This month');\r\n    }\r\n  \r\n    if (\r\n      (from.isAfter(nextMonthStart.clone().subtract(1, 'd'), 'day') && from.isBefore(nextWeekEnd.clone().add(1, 'd'), 'day')) ||\r\n      (to.isAfter(nextMonthStart.clone().subtract(1, 'd'), 'day') && to.isBefore(nextMonthEnd.clone().add(1, 'd'), 'day')) ||\r\n      (from.isBefore(nextMonthStart, 'day') && to.isAfter(nextMonthEnd, 'day'))\r\n    ) {\r\n      output.push('Next month');\r\n    }\r\n  \r\n    if (from.isAfter(nextMonthEnd.clone().subtract(1, 'd'), 'day') ||\r\n      to.isAfter(nextMonthEnd.clone().subtract(1, 'd'), 'day')) {\r\n      output.push('Beyond next month');\r\n    }\r\n  \r\n  } else {\r\n    output.push('Passed end date');\r\n  }\r\n  \r\n  return output;"
    },

    {
      "key": "movementFilterStatus",
      "filterType": "filterData",
      "filterExpression": "return '${status}' === 'Approved' ? true : false"
    }
  ],
  "decisions": [
    {
      "btnClass": "",
      "objectAction": "READ",
      "labelkey": "reset",
      "decisionName": "reset",
      "selection": "chart-label",
      "outcomes": [
        {
          "name": "RELOADACTION",
          "action": "reload",
          "type": "client",
          "reload": "movementorderscardview"
        }
      ],
      "label": ""
    }
  ],
  "labelKey": "CHARTS",
  "taskId": "movementorderscharts",
  "object": "0b2d91ec-e3e8-45e2-9bb6-5e0d17cd499b"
}
