{
    "_id": "viewsplitticket_processor",
    "name": "viewsplitticket_processor",
    "type": "processor",
    "refType": "app",
    "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
    "snippet": "const textContent = req.body.hasOwnProperty('textContent') ? req.body.textContent : '';\r\nconst send = (status, message) => res.status(status).send(message);\r\nconst connectData = {\r\n  method: 'POST',\r\n  url: req.body.propertyList.eka_connect_host + `/workflow/search/`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid']\r\n  },\r\n  body: {\r\n    pointer: ['12325a98-a959-4939-9005-4158d136afcd', 'a26737b3-a5a9-4fe9-b6f7-29218a3bc45a'],\r\n    qP: {\r\n      track_total_hits: true,\r\n      from: 0,\r\n      size: 1,\r\n      query: {\r\n        wildcard: {}\r\n      },\r\n      sort: [\r\n        {\r\n          'sys__createdOn.raw': 'desc'\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  json: true\r\n};\r\nfunction get_connectData(connectUrl) {\r\n  return new Promise(function(resolve, reject) {\r\n    request(connectUrl, function(err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nif (textContent) {\r\n  let ticketDetails = {\r\n    'ticketRefNo.raw': {\r\n      value: textContent,\r\n      boost: 1,\r\n      rewrite: 'constant_score'\r\n    }\r\n  };\r\n  connectData.body.qP.query.wildcard = {\r\n    ...ticketDetails\r\n  };\r\n  get_connectData(connectData)\r\n    .then(ticket => {\r\n      if (ticket.hasOwnProperty('data') && ticket.data.length > 0) {\r\n        send(200, ticket.data[0]);\r\n      } else {\r\n        send(400, \"No data to available\");\r\n      }\r\n    })\r\n    .catch(error => {\r\n      assert.isNotOk(error, 'Promise error');\r\n      send(400, 'No data to available');\r\n    });\r\n} else {\r\n  send(400, 'No data to available');\r\n}",
    "sys__UUID": "09fe6e8c-7131-4b5f-a5d5-088deb68d62e"
  }
  