{
  "_id": "validate_allocate_warehoused_tickets_processor",
  "name": "validate_allocate_warehoused_tickets_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "var moment = require('moment');\r\n    const send = (status, message) => res.status(status).send(message);\r\n    const AESToffset = 10 * 60 * 60 * 1000;\r\n    const miliInDay = 24 * 60 * 60 * 1000;\r\n\r\n    const data = req.body;\r\n    const mgArray =\r\n      data.hasOwnProperty('multiGradeDifferentialDetails') &&\r\n      data.multiGradeDifferentialDetails.multiGradeDifferentialDetail;\r\n\r\n    const locationmgArray =\r\n      data.hasOwnProperty('optionalDischargeDetails') && data.optionalDischargeDetails.optionalDischargeDetail;\r\n\r\n    const clientCode = bpName =>\r\n      getRequestBody(\r\n        req.body.propertyList.eka_connect_host +\r\n          '/data/12325a98-a959-4939-9005-4158d136afcd/6d10c2dd-c5c5-451e-88f5-3de80e151bc3?bpName=' +\r\n          bpName\r\n      );\r\n\r\n    const getRequestBody = url => ({\r\n      method: 'GET',\r\n      url,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    });\r\n\r\n    const getRequestBodyPost = (url, obj) => ({\r\n      method: 'GET',\r\n      url,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true,\r\n      body: obj\r\n    });\r\n\r\n    function getData(requestBody) {\r\n      return new Promise(function(resolve, reject) {\r\n        request(requestBody, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    if (req.body.approvalStatus && req.body.approvalStatus.toLowerCase() != 'approved' && req.body.approvalStatus.toLowerCase() != 'withdrawn' && req.body.approvalStatus.toLowerCase() != 'rejected') {\r\n      send(400, 'You cannot proceed to allocate tickets to this contract. Contract amendment pending approval.');\r\n      return;\r\n    }\r\n\r\n    if (req.body.isMultiGrade == 'Y' && req.body.spread && req.body.spread.toLowerCase() != 'fixed') {\r\n      send(400, 'You cannot proceed to allocate tickets to this contract. Grade spreads must be fixed via Request Contract Amendment, before Tickets can be allocated. If you have not fixed the Grade spreads prior to the Fix Price Date, please contact Cargill.');\r\n      return;\r\n    }\r\n\r\n    if (((new Date(req.body.shipmentPeriodFrom)).getTime() - AESToffset > (new Date()).getTime())) {\r\n      send(400, 'Delivery period of selected contract has not opened yet.');\r\n      return;\r\n    }\r\n\r\n    if (((new Date(req.body.shipmentPeriodTo)).getTime() - AESToffset + miliInDay < (new Date()).getTime())) {\r\n      send(400, 'Delivery period of selected contract has closed.');\r\n      return;\r\n    }\r\n\r\n    const product = data.product;\r\n    const quality = data.isMultiGrade == 'Y' ? data.quality.split(' ')[0] : data.quality;\r\n    const cropYear = data.cropYear;\r\n    const BPRefNo = data.BPRefNo;\r\n    const gradeCombined = data.gradeCombined;\r\n    const locations = data.dischargeLocationCityCombined\r\n      ? data.dischargeLocationCityCombined.map(el => el.split('-')[0].trim())\r\n      : [];\r\n\r\n    const grades = [];\r\n\r\n    grades.push(quality);\r\n\r\n    if (mgArray) {\r\n      for (let i = 0; i < mgArray; i++) {\r\n        grades.push(mgArray[i].qualityName);\r\n      }\r\n    }\r\n\r\n    let obj = {\r\n      filterData: {\r\n        filter: [\r\n          {\r\n            fieldName: 'bpRefNo',\r\n            operator: 'eq',\r\n            value: BPRefNo\r\n          },\r\n          {\r\n            fieldName: 'product',\r\n            operator: 'eq',\r\n            value: product\r\n          },\r\n          {\r\n            fieldName: 'quality',\r\n            operator: 'in',\r\n            value: gradeCombined\r\n          },\r\n          {\r\n            fieldName: 'cropYear',\r\n            operator: 'eq',\r\n            value: cropYear\r\n          },\r\n          {\r\n            fieldName: 'ticketStatus',\r\n            operator: 'eq',\r\n            value: 'Warehoused'\r\n          },\r\n          {\r\n            fieldName: 'location',\r\n            operator: 'in',\r\n            value: locations\r\n          },\r\n          {\r\n            fieldName: 'isRequestedByEkaCCSystem',\r\n            value: true,\r\n            operator: 'ne'\r\n          }\r\n        ]\r\n      }\r\n    };\r\n\r\n    const allTicketData = getRequestBodyPost(\r\n      req.body.propertyList.eka_connect_host +\r\n        '/data/12325a98-a959-4939-9005-4158d136afcd/a26737b3-a5a9-4fe9-b6f7-29218a3bc45a',\r\n      obj\r\n    );\r\n\r\n    const promise = new Promise((resolve, reject) => {\r\n      getData(clientCode('AWB')).then(pprData => {\r\n        if (pprData.length == 0) {\r\n          res.status(500).send('Data not set up in Price Publish Rights');\r\n        }\r\n\r\n        getData(allTicketData).then(res => {\r\n          const newRes = res.map(i => ({\r\n            ...i,\r\n            sellingOption: 'Contract',\r\n            acquirer: data.corporate,\r\n            contractNumber: data.contractRefNo,\r\n            contractQuantity: data.itemOpenQuantityInBase,\r\n            isMultiGrade: data.isMultiGrade,\r\n            price:\r\n              mgArray && mgArray.filter(item => item.qualityName == i.quality).length > 0\r\n                ? locationmgArray &&\r\n                  locationmgArray.filter(item => item.optionalDischargeLocations.split('-')[0].trim() == i.location)\r\n                    .length > 0\r\n                  ? data.contractPrice -\r\n                    parseFloat(mgArray.filter(item => item.qualityName == i.quality)[0].multiGradeDifferential) -\r\n                    parseFloat(\r\n                      locationmgArray.filter(\r\n                        item => item.optionalDischargeLocations.split('-')[0].trim() == i.location\r\n                      )[0].dischargeLocationPD\r\n                    )\r\n                  : data.contractPrice -\r\n                    parseFloat(mgArray.filter(item => item.qualityName == i.quality)[0].multiGradeDifferential)\r\n                : locationmgArray &&\r\n                  locationmgArray.filter(item => item.optionalDischargeLocations.split('-')[0].trim() == i.location)\r\n                    .length > 0\r\n                ? data.contractPrice -\r\n                  parseFloat(\r\n                    locationmgArray.filter(\r\n                      item => item.optionalDischargeLocations.split('-')[0].trim() == i.location\r\n                    )[0].dischargeLocationPD\r\n                  )\r\n                : data.contractPrice,\r\n            priceType: data.priceType,\r\n            tonnesSold: 0,\r\n            maxQuantityToAllocate: data.itemOpenQuantityInBase,\r\n            currentdate: '2021-10-12',\r\n            shipmentStartDate: data.shipmentPeriodFrom,\r\n            shipmentEndDate: data.shipmentPeriodTo,\r\n            ticketHandlerName: data.corporate,\r\n            differential: mgArray\r\n              ? mgArray.filter(item => item.qualityName == i.quality).length > 0\r\n                ? mgArray.filter(item => item.qualityName == i.quality)[0].multiGradeDifferential\r\n                : 0\r\n              : 0,\r\n            ticketHandlerCode: pprData[0].bpExternalCode,\r\n            ticketHandlerBpRefNo: pprData[0].bpRefNo,\r\n            contractPrice: data.contractPrice\r\n          }));\r\n          resolve(newRes.filter(e => e.isparentTicket == 'N' && e.ticketStatus == 'Warehoused'));\r\n        });\r\n      });\r\n    });\r\n\r\n    promise.then(data => {\r\n      if (data.length == 0) {\r\n        send(400, 'You have no available tickets to allocate for this contract');\r\n      } else {\r\n        res.status(200).send({ warehousedtickets: data });\r\n      }\r\n    });",
  "sys__UUID": "4b64a5ca-5118-4fc9-a5be-77eb67a127e1"
}
