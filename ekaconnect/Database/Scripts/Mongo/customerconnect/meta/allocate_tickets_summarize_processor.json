{
  "_id": "allocate_tickets_processor",
  "name": "allocate_tickets_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "if (!req.body.sellingOption || req.body.sellingOption == '') {\r\n      res.status(500).send('Please select a selling option');\r\n      return;\r\n    }\r\n\r\n    if (req.body.sellingOption != 'Pool' && req.body.poolpricingoption) {\r\n      req.body.sellingOption = 'Pool';\r\n    }\r\n\r\n    if (\r\n      ((req.body.sellingOption == 'Contract' || req.body.sellingOption == 'Pool') && !req.body.acquirer) ||\r\n      req.body.acquirer == ''\r\n    ) {\r\n      res.status(500).send('Please select a contract acquirer');\r\n      return;\r\n    }\r\n\r\n    if (\r\n      req.body.sellingOption == 'Contract' &&\r\n      req.body.acquirer.split('#')[1] == ' External' &&\r\n      (!req.body.contractNumber || req.body.contractNumber == '')\r\n    ) {\r\n      res.status(500).send('Please select a contract');\r\n      return;\r\n    }\r\n\r\n    if (\r\n      req.body.sellingOption == 'Contract' &&\r\n      (!req.body.externalContractNumber || req.body.externalContractNumber == '') &&\r\n      req.body.acquirer.split('#')[1] == undefined\r\n    ) {\r\n      res.status(500).send('Please enter a contract number');\r\n      return;\r\n    }\r\n\r\n    if (\r\n      req.body.sellingOption == 'Contract' &&\r\n      (!req.body.externalQuantity || req.body.externalQuantity == '') &&\r\n      req.body.acquirer.split('#')[1] == undefined\r\n    ) {\r\n      res.status(500).send('Please enter a quantity');\r\n      return;\r\n    }\r\n\r\n    if (\r\n      req.body.sellingOption == 'Contract' &&\r\n      (!req.body.externalPrice || req.body.externalPrice == '') &&\r\n      req.body.acquirer.split('#')[1] == undefined\r\n    ) {\r\n      res.status(500).send('Please enter a price');\r\n      return;\r\n    }\r\n\r\n    if (req.body.sellingOption == 'Cash' && (!req.body.isSustainable || req.body.isSustainable == '')) {\r\n      res.status(500).send('Please select a sustainable value');\r\n      return;\r\n    }\r\n\r\n    if (req.body.sellingOption == 'Cash' && (!req.body.cashAcquirer || req.body.cashAcquirer == '')) {\r\n      res.status(500).send('Please select a cash acquirer');\r\n      return;\r\n    }\r\n\r\n    if (req.body.sellingOption == 'Cash' && (!req.body.cashPrice || req.body.cashPrice == '')) {\r\n      res.status(500).send('Please select a price');\r\n      return;\r\n    }\r\n\r\n    const getRequestBody = url => ({\r\n      method: 'GET',\r\n      url,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    });\r\n\r\n    function getData(requestBody) {\r\n      return new Promise(function(resolve, reject) {\r\n        request(requestBody, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    const mgd = contractNo =>\r\n      getRequestBody(\r\n        req.body.propertyList.eka_connect_host +\r\n          '/data/12325a98-a959-4939-9005-4158d136afcd/46e84f42-6288-4027-b6d0-fd1c11019259?contractRefNo=' +\r\n          contractNo\r\n      );\r\n\r\n    const clientCode = bpName =>\r\n      getRequestBody(\r\n        req.body.propertyList.eka_connect_host +\r\n          '/data/12325a98-a959-4939-9005-4158d136afcd/6d10c2dd-c5c5-451e-88f5-3de80e151bc3?bpName=' +\r\n          bpName\r\n      );\r\n\r\n    let cData = [];\r\n\r\n    const promise = new Promise((resolve, reject) => {\r\n      getData(\r\n        clientCode(\r\n          req.body.sellingOption == 'Cash'\r\n            ? req.body.cashAcquirer.split('#')[0].trim()\r\n            : req.body.acquirer.split('#')[0].trim()\r\n        )\r\n      )\r\n        .then(pprData => {\r\n          if (req.body.sellingOption == 'Contract' && pprData.length == 0) {\r\n            res.status(500).send('Data not set up in Price Publish Rights');\r\n          }\r\n          getData(mgd(req.body.contractNumber))\r\n            .then(data => {\r\n              const locationmgArray =\r\n                (data.length > 0 &&\r\n                  data[0].hasOwnProperty('optionalDischargeDetails') &&\r\n                  data[0].optionalDischargeDetails.optionalDischargeDetail) ||\r\n                [];\r\n              if (data.length > 0 && data[0].isMultiGrade == 'Y') {\r\n                const mgArray = data[0].multiGradeDifferentialDetails.multiGradeDifferentialDetail;\r\n\r\n                cData = (req.body.ticketlistingwarehoused || []).map((i, indx) => ({\r\n                  ...i,\r\n                  acquirer: req.body.sellingOption == 'Cash' ? req.body.cashAcquirer : req.body.acquirer,\r\n                  contractNumber: req.body.contractNumber ? req.body.contractNumber : req.body.externalContractNumber,\r\n                  contractQuantity: req.body.contractQuantity ? req.body.contractQuantity : req.body.externalQuantity,\r\n                  price: mgArray\r\n                    ? mgArray.filter(item => item.qualityName == i.quality).length > 0\r\n                      ? req.body.price -\r\n                        parseFloat(mgArray.filter(item => item.qualityName == i.quality)[0].multiGradeDifferential) -\r\n                        (locationmgArray.filter(\r\n                          item => item.optionalDischargeLocations.split('-')[0].trim() == i.location\r\n                        ).length > 0\r\n                          ? parseFloat(\r\n                              locationmgArray.filter(\r\n                                item => item.optionalDischargeLocations.split('-')[0].trim() == i.location\r\n                              )[0].dischargeLocationPD\r\n                            )\r\n                          : 0)\r\n                      : req.body.price -\r\n                        (locationmgArray.filter(\r\n                          item => item.optionalDischargeLocations.split('-')[0].trim() == i.location\r\n                        ).length > 0\r\n                          ? parseFloat(\r\n                              locationmgArray.filter(\r\n                                item => item.optionalDischargeLocations.split('-')[0].trim() == i.location\r\n                              )[0].dischargeLocationPD\r\n                            )\r\n                          : 0)\r\n                    : req.body.price\r\n                    ? req.body.price -\r\n                      (locationmgArray.filter(\r\n                        item => item.optionalDischargeLocations.split('-')[0].trim() == i.location\r\n                      ).length > 0\r\n                        ? parseFloat(\r\n                            locationmgArray.filter(\r\n                              item => item.optionalDischargeLocations.split('-')[0].trim() == i.location\r\n                            )[0].dischargeLocationPD\r\n                          )\r\n                        : 0)\r\n                    : req.body.externalPrice\r\n                    ? req.body.externalPrice\r\n                    : req.body.cashPrice\r\n                    ? req.body.cashPrice\r\n                    : req.body.poolPrice,\r\n                  sellingOption: req.body.sellingOption,\r\n                  currentdate: req.body.currentdate,\r\n                  shipmentStartDate: req.body.shipmentPeriodFrom,\r\n                  shipmentEndDate: req.body.shipmentPeriodTo,\r\n                  isMultiGrade: req.body.isMultiGrade,\r\n                  priceType: req.body.priceType,\r\n                  spread: req.body.spread,\r\n                  maxQuantityToAllocate: req.body.maxQuantityToAllocate,\r\n                  differential:\r\n                    mgArray.filter(item => item.qualityName == i.quality).length > 0\r\n                      ? mgArray.filter(item => item.qualityName == i.quality)[0].multiGradeDifferential\r\n                      : 0,\r\n\r\n                  approvalStatus: req.body.approvalStatus,\r\n                  ticketHandlerName: req.body.sellingOption == 'Cash' ? req.body.cashAcquirer : req.body.acquirer,\r\n                  ticketHandlerCode:\r\n                    req.body.sellingOption == 'Contract'\r\n                      ? pprData[0].bpExternalCode\r\n                      : req.body.sellingOption == 'Cash'\r\n                      ? req.body.cashClientCode\r\n                      : req.body.poolClientCode,\r\n                  ticketHandlerBpRefNo:\r\n                    req.body.sellingOption == 'Contract'\r\n                      ? pprData[0].bpRefNo\r\n                      : req.body.sellingOption == 'Cash'\r\n                      ? req.body.cashBpRefNumber\r\n                      : req.body.poolBpRefNumber,\r\n                  poolpricingoption: req.body.poolpricingoption,\r\n                  isInternalBp:\r\n                    req.body.sellingOption == 'Contract'\r\n                      ? pprData[0].isInternalBp\r\n                      : req.body.sellingOption == 'Cash'\r\n                      ? req.body.isInternalBpCash\r\n                      : req.body.isInternalBpPool,\r\n                  isSustainable: req.body.isSustainable,\r\n                  contractPrice: req.body.price\r\n                }));\r\n              } else {\r\n                cData = (req.body.ticketlistingwarehoused || []).map((i, indx) => ({\r\n                  ...i,\r\n                  acquirer: req.body.sellingOption == 'Cash' ? req.body.cashAcquirer : req.body.acquirer,\r\n                  contractNumber: req.body.contractNumber ? req.body.contractNumber : req.body.externalContractNumber,\r\n                  contractQuantity: req.body.contractQuantity ? req.body.contractQuantity : req.body.externalQuantity,\r\n                  price: req.body.price\r\n                    ? req.body.price -\r\n                      (locationmgArray.filter(\r\n                        item => item.optionalDischargeLocations.split('-')[0].trim() == i.location\r\n                      ).length > 0\r\n                        ? parseFloat(\r\n                            locationmgArray.filter(\r\n                              item => item.optionalDischargeLocations.split('-')[0].trim() == i.location\r\n                            )[0].dischargeLocationPD\r\n                          )\r\n                        : 0)\r\n                    : req.body.externalPrice\r\n                    ? req.body.externalPrice\r\n                    : req.body.cashPrice\r\n                    ? req.body.cashPrice\r\n                    : req.body.poolPrice,\r\n                  sellingOption: req.body.sellingOption,\r\n                  currentdate: req.body.currentdate,\r\n                  shipmentStartDate: req.body.shipmentPeriodFrom,\r\n                  shipmentEndDate: req.body.shipmentPeriodTo,\r\n                  isMultiGrade: req.body.isMultiGrade,\r\n                  priceType: req.body.priceType,\r\n                  spread: '',\r\n                  differential: 0,\r\n\r\n                  ticketHandlerCode:\r\n                    req.body.sellingOption == 'Contract'\r\n                      ? pprData[0].bpExternalCode\r\n                      : req.body.sellingOption == 'Cash'\r\n                      ? req.body.cashClientCode\r\n                      : req.body.poolClientCode,\r\n                  maxQuantityToAllocate: req.body.maxQuantityToAllocate,\r\n                  approvalStatus: req.body.approvalStatus,\r\n                  ticketHandlerName: req.body.sellingOption == 'Cash' ? req.body.cashAcquirer : req.body.acquirer,\r\n                  ticketHandlerBpRefNo:\r\n                    req.body.sellingOption == 'Contract'\r\n                      ? pprData[0].bpRefNo\r\n                      : req.body.sellingOption == 'Cash'\r\n                      ? req.body.cashBpRefNumber\r\n                      : req.body.poolBpRefNumber,\r\n                  poolpricingoption: req.body.poolpricingoption,\r\n                  isInternalBp:\r\n                    req.body.sellingOption == 'Contract'\r\n                      ? pprData[0].isInternalBp\r\n                      : req.body.sellingOption == 'Cash'\r\n                      ? req.body.isInternalBpCash\r\n                      : req.body.isInternalBpPool,\r\n                  isSustainable: req.body.isSustainable,\r\n                  contractPrice: req.body.price\r\n                }));\r\n              }\r\n              resolve(cData);\r\n              console.log(cData);\r\n              console.log('All resolve passed');\r\n            })\r\n            .catch(err => {\r\n              console.log('Error in get Data', err);\r\n              reject('Error in get Data', err);\r\n            });\r\n        })\r\n        .catch(err => {\r\n          reject('Something went wrong!');\r\n        });\r\n    });\r\n\r\n    promise\r\n      .then(data => {\r\n        console.log('All promise passed');\r\n        res.status(200).send(data);\r\n      })\r\n      .catch(function(err) {\r\n        console.log('All validations failed');\r\n        return res.status(500).send(err);\r\n      });",
  "sys__UUID": "f764ed6f-f097-4e82-8b62-aa4f6bcd18aa"
}
