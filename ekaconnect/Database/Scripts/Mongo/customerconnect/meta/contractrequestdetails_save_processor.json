{
  "_id": "contractrequestdetails_save_processor",
  "name": "contractrequestdetails_save_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const userInfo = req.body.propertyList.eka_connect_host + '/api/userinfo';\r\n    var curr_date = new Date();\r\n\r\n    const getData_ = url =>\r\n      new Promise(function(resolve, reject) {\r\n        request(\r\n          {\r\n            method: 'GET',\r\n            url,\r\n            headers: {\r\n              Authorization: req.headers.authorization\r\n            },\r\n            json: true\r\n          },\r\n          function(err, response, body) {\r\n            if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          }\r\n        );\r\n      });\r\n\r\n    const bpList = new Promise((resolve, reject) => {\r\n      getData_(userInfo)\r\n        .then(t => {\r\n          resolve(t.firstName + ' ' + t.lastName);\r\n        })\r\n        .catch(err => {\r\n          reject(err);\r\n        });\r\n    });\r\n\r\n    const data = req.body;\r\n    const modifiedData = {\r\n      approvalStatus: 'Action required',\r\n      contractRefNo: data.contractRefNo,\r\n      requestId: data.requestId,\r\n      contractItemRefNo: data.contractItemRefNo,\r\n      isRequestActive: true,\r\n      requestIdUnique: data.requestIdUnique,\r\n      growerCreatedBy: data.growerCreatedBy || '',\r\n      growerOperator: data.growerOperator || '',\r\n      employeeOperatorUser: data.employeeOperatorUser || '',\r\n      employeeCreatedByUser: data.employeeCreatedByUser || '',\r\n      brokerRefNo: data.brokerRefNo || '',\r\n      brokerBPRefNo: data.brokerBPRefNo || '',\r\n      amendedBrokerRefNo: data.amendedBrokerRefNo || '',\r\n      amendedBrokerBPRefNo: data.amendedBrokerBPRefNo || ''\r\n    };\r\n    if (data.contractPrice) {\r\n      modifiedData.contractPrice = data.contractPrice;\r\n      modifiedData.priceDetails = data.contractPrice;\r\n    }\r\n    if (data.amendedPrice) {\r\n      modifiedData.amendedPrice = data.amendedPrice;\r\n    }\r\n    if (data.amendedCity) {\r\n      modifiedData.amendedCity = data.amendedCity;\r\n    }\r\n    if (data.editShipmentFrom) {\r\n      modifiedData.shipmentPeriodFrom =  moment(data.editShipmentFrom).format(\"MM YYYY\") !=\r\n      moment(data.shipmentPeriodFrom).format(\"MM YYYY\") &&\r\n    moment(data.editShipmentFrom).format(\"MM YYYY\") >\r\n      moment(curr_date).format(\"MM YYYY\")\r\n      ? moment(data.editShipmentFrom)\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DDT00:00:00\")\r\n      : moment(data.shipmentPeriodFrom).format(\"MM YYYY\") >\r\n          moment(data.editShipmentFrom).format(\"MM YYYY\") &&\r\n        moment(curr_date).format(\"MM YYYY\") ==\r\n          moment(data.editShipmentFrom).format(\"MM YYYY\")\r\n      ? moment(curr_date).format(\"YYYY-MM-DDThh:mm:ss\")\r\n      : moment(data.shipmentPeriodFrom).format(\"YYYY-MM-DDThh:mm:ss\");\r\n    }\r\n    if (data.editShipmentTo) {\r\n      modifiedData.shipmentPeriodTo = moment(data.shipmentPeriodTo).format(\"MM YYYY\") ==\r\n      moment(data.editShipmentTo).format(\"MM YYYY\")\r\n        ? moment(data.shipmentPeriodTo).format(\"YYYY-MM-DDThh:mm:ss\")\r\n        : moment(data.editShipmentTo)\r\n            .endOf(\"month\")\r\n            .format(\"YYYY-MM-DDT23:59:59\");\r\n    }\r\n    if (data.amendedShipmentFrom) {\r\n      modifiedData.amendedShipmentFrom =\r\n        moment(data.amendedShipmentFrom).format('MM YYYY') != moment(data.editAmendedShipmentFrom).format('MM YYYY') &&\r\n        moment(data.editAmendedShipmentFrom).format('MM YYYY') > moment(curr_date).format('MM YYYY')\r\n          ? moment(data.editAmendedShipmentFrom)\r\n              .startOf('month')\r\n              .format('YYYY-MM-DDT00:00:00')\r\n          : moment(data.amendedShipmentFrom).format('MM YYYY') >\r\n              moment(data.editAmendedShipmentFrom).format('MM YYYY') &&\r\n            moment(curr_date).format('MM YYYY') == moment(data.editAmendedShipmentFrom).format('MM YYYY')\r\n          ? moment(curr_date).format('YYYY-MM-DDThh:mm:ss')\r\n          : moment(data.amendedShipmentFrom).format('YYYY-MM-DDThh:mm:ss');\r\n    }\r\n    if (data.amendedShipmentTo) {\r\n      modifiedData.amendedShipmentTo =\r\n        moment(data.editAmendedShipmentTo).format('MM YYYY') == moment(data.amendedShipmentTo).format('MM YYYY')\r\n          ? moment(data.amendedShipmentTo).format('YYYY-MM-DDThh:mm:ss')\r\n          : moment(data.editAmendedShipmentTo)\r\n              .endOf('month')\r\n              .format('YYYY-MM-DDT23:59:59');\r\n    }\r\n\r\n    const tenant = req.headers['X-TenantID'];\r\n    const auth = req.headers.authorization;\r\n    const appId = req.body.appId;\r\n    const headers = {\r\n      Authorization: auth,\r\n      'X-TenantID': tenant,\r\n      'Content-Type': 'application/json'\r\n    };\r\n    const getData = req =>\r\n      new Promise((resolve, reject) => {\r\n        request(\r\n          {\r\n            ...req,\r\n            headers: headers,\r\n            json: true\r\n          },\r\n          (err, response, body) => {\r\n            if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(err || body.error || body.errorMessage);\r\n            }\r\n          }\r\n        );\r\n      });\r\n    const workflow = body => {\r\n      console.log('body', JSON.stringify(body));\r\n      return getData({\r\n        method: 'POST',\r\n        url: `${req.body.propertyList.eka_connect_host}/workflow`,\r\n        body: body\r\n      });\r\n    };\r\n\r\n    const sendError = (message, context, localizedMessage) =>\r\n    res.status(400).send({\r\n      errorCode: \"004\",\r\n      errorMessage: message,\r\n      errorContext: null,\r\n      errorLocalizedMessage: localizedMessage,\r\n      errors: [\r\n        {\r\n          errorCode: \"004\",\r\n          errorMessage: message,\r\n          errorContext: context,\r\n          errorLocalizedMessage: localizedMessage,\r\n          errors: null,\r\n        },\r\n      ],\r\n    });\r\n\r\n    const objid = \"46e84f42-6288-4027-b6d0-fd1c11019259\";\r\n    const appid = \"12325a98-a959-4939-9005-4158d136afcd\";\r\n    var connect = {\r\n      method: \"GET\",\r\n      body: {\r\n        filterData: {\r\n          filter: [\r\n            {\r\n              fieldName: \"contractItemRefNo\",\r\n              value: data.contractItemRefNo,\r\n              operator: \"eq\",\r\n            },\r\n            {\r\n              fieldName: \"contractRefNo\",\r\n              value: data.contractRefNo,\r\n              operator: \"eq\",\r\n            },\r\n            {\r\n              fieldName: \"requestIdUnique\",\r\n              value: data.requestIdUnique,\r\n              operator: \"eq\",\r\n            },\r\n            {\r\n              fieldName: \"approvalStatus\",\r\n              value: 'Awaiting review',\r\n              operator: \"eq\",\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      url: req.body.propertyList.eka_connect_host + \"/data/\" + appid + \"/\" + objid,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n        requestid: req.headers[\"requestid\"] + \"-processor\",\r\n      },\r\n      json: true,\r\n    };\r\n\r\n\r\n    function getRequestStatus() {\r\n      console.log(\"connect obj\", JSON.stringify(connect));\r\n      return new Promise(function (resolve, reject) {\r\n        request(connect, function (err, response, body) {\r\n          console.log(\"res\", JSON.stringify(body));\r\n          if (err || body.error) {\r\n            console.log(\"error occured ::\" + body.error);\r\n            reject(body);\r\n          } else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n\r\n    getRequestStatus()\r\n  .then(function (sameDataExists) {\r\n    if (sameDataExists.length>0) {\r\n    bpList\r\n      .then(employeeName => {\r\n        modifiedData.modifiedUser = employeeName || '';\r\n        modifiedData.employeeOperatorModifiedUser = employeeName || '';\r\n        modifiedData.employeeCreatedByModifiedUser = employeeName || '';\r\n        workflow({\r\n          output: {\r\n            update_contractDomainData: [modifiedData]\r\n          },\r\n          task: 'update_contractDomainData',\r\n          workflowTaskName: 'update_contractDomainData',\r\n          appId: appId\r\n        })\r\n          .then(t => {\r\n            console.log('modifiedData', JSON.stringify(modifiedData));\r\n            res.status(200).send(modifiedData);\r\n          })\r\n          .catch(err => {\r\n            console.error(err);\r\n            res.status(400).send(err);\r\n          });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        res.status(400).send('Failed to fetch Employee name');\r\n      });\r\n    } else {\r\n      sendError(\r\n        \"Contract is already withdrawn / approved or status has been changed, please refresh the page.\",\r\n        \"\",\r\n        \"Your request was unable to be processed. Please contact the Grower Services team on 1800 447 246 if this issue persists.\"\r\n      );\r\n    }\r\n    })\r\n    .catch((err) => {\r\n    console.error(err);\r\n    res\r\n      .status(400)\r\n      .send(\r\n        \"Your request was unable to be processed. Please contact the Grower Services team on 1800 447 246 if this issue persists.\"\r\n      );\r\n      handleErrorResponse(req, '', err, '')\r\n    });\r\n    // if (\r\n    //   data.amendedCity != null ||\r\n    //   data.amendedShipmentFrom != null ||\r\n    //   data.amendedShipmentTo != null ||\r\n    //   data.amendedPrice != ''\r\n    // ) {\r\n    //   if (\r\n    //     moment(data.amendedShipmentFrom).format('YYYY-MM-DD') < moment(data.amendedShipmentTo).format('YYYY-MM-DD')\r\n    //   ) {\r\n    //   } else {\r\n    //     res.status(400).send('Delivery from date cannot be the past date of Delivery to.');\r\n    //   }\r\n    // } else {\r\n    //   res.status(400).send('Please fill all the mandatory fields.');}",
  "sys__UUID": "c4c36abd-3f66-48d4-9cc3-d6b14779a357"
}
