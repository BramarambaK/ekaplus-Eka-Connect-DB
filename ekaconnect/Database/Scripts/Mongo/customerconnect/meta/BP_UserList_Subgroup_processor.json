{
  "_id": "BP_UserList_Subgroup_processor",
  "name": "BP_UserList_Subgroup",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const serviceKey = JSON.parse(req.body.mdmProcessorServiceKey)[0].serviceKey;\r\nconst userInfo = req.body.propertyList.eka_connect_host + '/api/getbpuserinfo';\r\nconst appId = req.body.appId;\r\nconst tenant = req.headers['X-TenantID'];\r\nconst taskId = req.body.taskId;\r\n\r\nconst subGroupMaster = {\r\n  appId: appId,\r\n  objectId: 'd59b8c10-8c94-4b87-a430-f6fd69888a37' /* not at all relevant object id */,\r\n  collectionName: 'BP Sub Group Setup',\r\n  tenant: tenant\r\n};\r\n\r\nconst getData = url =>\r\n  new Promise(function(resolve, reject) {\r\n    request(\r\n      {\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization\r\n        },\r\n        json: true\r\n      },\r\n      function(err, response, body) {\r\n        if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\nconst getCollectionMapper = config =>\r\n  new Promise((resolve, reject) => {\r\n    const r = {\r\n      method: 'POST',\r\n      url: `${req.body.propertyList.eka_connect_host}/collectionmapper/${config.appId}/${\r\n        config.objectId\r\n      }/fetchCollectionRecords`,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        ttl: 600,\r\n        'X-TenantID': config.tenant,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: {\r\n        collectionName: config.collectionName\r\n      },\r\n      json: true\r\n    };\r\n    request(r, (err, response, body) => {\r\n      if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n\r\nfunction formatData(n) {\r\n  return n\r\n    .toString()\r\n    .split(/(?=(?:\\d{3})+(?:\\.|$))/g)\r\n    .join(' ');\r\n}\r\n\r\nconst objSorter = prop => (obj1, obj2) => {\r\n  if (obj1[prop] < obj2[prop]) {\r\n    return -1;\r\n  }\r\n  if (obj1[prop] > obj2[prop]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst getSubGroup = (list, format, code) =>\r\n  list\r\n    .reduce((acc, bp) => {\r\n      let groups;\r\n\r\n      if (code) {\r\n        groups = (bp.subGroup || [])\r\n          .filter(i => i.code && i.code.toLowerCase() == code.toLowerCase())\r\n          .map(item => ({\r\n            key: item.refNo,\r\n            value: `${bp.name}\\n${format ? formatData(bp.refNo) : bp.refNo}\\n${item.name}`\r\n          }));\r\n      } else {\r\n        groups = [\r\n          {\r\n            key: bp.refNo,\r\n            value: `${bp.name}\\n${format ? formatData(bp.refNo) : bp.refNo}`\r\n          }\r\n        ];\r\n      }\r\n\r\n      acc.push(...groups);\r\n      return acc;\r\n    }, [])\r\n    .sort(objSorter('value'));\r\n\r\nconst subGroupCode = userDetails =>\r\n  new Promise((resolve, reject) =>\r\n    getCollectionMapper(subGroupMaster)\r\n      .then(result => {\r\n        if (result && Array.isArray(result)) {\r\n          const config = result.find(i => i.Workflow == taskId && i.UserType == userDetails.customerType && i.SubGroupApplicable.toLowerCase() == 'y');\r\n\r\n          if (config) {\r\n            resolve(config.SubGroupCode);\r\n          } else {\r\n            console.log(\r\n              `Sub group configuration not found for ${taskId} and ${\r\n                userDetails.customerType\r\n              }. Defaulting to not applicable.`\r\n            );\r\n            resolve(null);\r\n          }\r\n        } else {\r\n          reject('Sub group configuration is missing');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        reject(err);\r\n      })\r\n  );\r\n\r\nconst bpList = new Promise((resolve, reject) => {\r\n  getData(userInfo)\r\n    .then(t => {\r\n      const userDetails = t.data;\r\n      if (userDetails.BusinessPartyDetails) {\r\n        subGroupCode(userDetails)\r\n          .then(code => {\r\n            resolve(\r\n              getSubGroup(userDetails.BusinessPartyDetails, userDetails.customerType === 'Demand Customer', code)\r\n            );\r\n          })\r\n          .catch(err => {\r\n            reject(err);\r\n          });\r\n      } else {\r\n        reject('BusinessPartyDetails missing in user details.');\r\n      }\r\n    })\r\n    .catch(err => {\r\n      reject(err);\r\n    });\r\n});\r\n\r\nbpList\r\n  .then(data => {\r\n    res.status(200).send({\r\n      [serviceKey]: data\r\n    });\r\n  })\r\n  .catch(err => {\r\n    console.error('Failed to fetch BPList', err);\r\n    res.status(200).send({\r\n      [serviceKey]: []\r\n    });\r\n  });\r\n",
  "sys__UUID": "248783d1-1167-4d08-808a-43dde17b6100"
}
