{
  "_id": "deeplink_processor",
  "name": "deeplink_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const _ = require('lodash');\r\n    const userInfo = req.body.propertyList.eka_connect_host + '/api/getbpuserinfo';\r\n    const appId = '12325a98-a959-4939-9005-4158d136afcd';\r\n    const tenant = req.headers['x-tenantid'];\r\n\r\n    const send = (status, message) => {\r\n      return res.status(status).send(message);\r\n    };\r\n    const getObjectUri = id => `${req.body.propertyList.eka_connect_host}/data/${appId}/${id}`;\r\n    const formatFilter = obj => ({\r\n      filterData: {\r\n        filter: Object.keys(obj).map(i => ({\r\n          fieldName: i,\r\n          value: obj[i],\r\n          operator: 'eq'\r\n        }))\r\n      }\r\n    });\r\n\r\n    const getData = (url, b) =>\r\n      new Promise(function(resolve, reject) {\r\n        request(\r\n          {\r\n            method: 'GET',\r\n            url,\r\n            headers: {\r\n              Authorization: req.headers.authorization,\r\n              'X-TenantID': tenant,\r\n              'x-tenantid': tenant,\r\n              ttl: 600\r\n            },\r\n            json: true,\r\n            body: b\r\n          },\r\n          function(err, response, body) {\r\n            console.log(url);\r\n            if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          }\r\n        );\r\n      });\r\n\r\n    const userType = new Promise((resolve, reject) => {\r\n      getData(userInfo)\r\n        .then(r => {\r\n          resolve(r.data.customerType);\r\n        })\r\n        .catch(err => {\r\n          console.log('Error in fetching customer details');\r\n          reject(err);\r\n        });\r\n    });\r\n\r\n    const getPath = (object, data, userType) => {\r\n      /* some logic to ascertain which object and workflow it should be going to */\r\n      let path = [];\r\n      let receivedData = data[0];\r\n      if (object == 'contractdomain_object') {\r\n        path.push('contractdomain_object');\r\n\r\n        const contractType = receivedData.contractType ? receivedData.contractType.toLowerCase() : null;\r\n        const requestType = receivedData.requestType ? receivedData.requestType.toLowerCase() : null;\r\n\r\n        if (userType.toLowerCase() == 'grower') {\r\n          path.push('grower');\r\n        } else if (userType.toLowerCase() == 'demand customer') {\r\n          path.push('demand');\r\n\r\n          if (contractType == 'sell') {\r\n            path.push('buy');\r\n          } else if (contractType == 'buy') {\r\n            path.push('sell');\r\n          }\r\n        }\r\n\r\n        if (receivedData.isRequestedByEkaCCSystem) {\r\n          if (userType.toLowerCase() == 'grower' && requestType == 'offer to sell') {\r\n            path.push('offer');\r\n          } else {\r\n            path.push('request');\r\n          }\r\n        } else if (\r\n          (receivedData.fulfillmentStatus && receivedData.fulfillmentStatus.toLowerCase() === 'fulfilled') ||\r\n          (receivedData.positionStatus && receivedData.positionStatus.toLowerCase() == 'cancelled')\r\n        ) {\r\n          path.push('complete');\r\n        } else if (\r\n          receivedData.fulfillmentStatus &&\r\n          receivedData.fulfillmentStatus.toLowerCase() != 'fulfilled' &&\r\n          receivedData.positionStatus &&\r\n          receivedData.positionStatus.toLowerCase() != 'cancelled'\r\n        ) {\r\n          path.push('open');\r\n        }\r\n      } else if (object == 'tickets_object') {\r\n        path.push('tickets_object');\r\n        path.push(\r\n          receivedData.isRequestedByEkaCCSystem\r\n            ? receivedData.requestType == 'Offer for warehoused tickets'\r\n              ? 'offerRequest'\r\n              : receivedData.requestType == 'Amendment'\r\n              ? 'amendRequest'\r\n              : 'transferRequest'\r\n            : receivedData.ticketStatus == 'Warehoused'\r\n            ? 'warehoused'\r\n            : 'sold'\r\n        );\r\n      }\r\n\r\n      return path.join('.');\r\n    };\r\n\r\n    const setGlobalState = (ngr, taskId) => {\r\n      if (ngr) {\r\n        if (taskId == 'contractlistingcomposite' || taskId == 'contractdomaincompoaite')\r\n          return { ngrCTRMFilter: ngr.toString() };\r\n        else return { ngrFilter: ngr.toString() };\r\n      } else return null;\r\n    };\r\n\r\n    const setTab = tab => {\r\n      if (tab) {\r\n        return { tabIndex: parseInt(tab) };\r\n      } else return null;\r\n    };\r\n\r\n    const data = req.body.navigateTo;\r\n    const object = data.object || data.Object;\r\n\r\n    // exception only for Ex-farm contract\r\n    if (data.uniqueFields && data.uniqueFields.contractRefNo && data.uniqueFields.contractRefNo == '-') {\r\n      delete data.uniqueFields.contractRefNo;\r\n    }\r\n\r\n    const objectMap = {\r\n      contractdomain_object: '46e84f42-6288-4027-b6d0-fd1c11019259',\r\n      tickets_object: 'a26737b3-a5a9-4fe9-b6f7-29218a3bc45a'\r\n    };\r\n    const selectionMap = {\r\n      contractdomain_object: {\r\n        grower: {\r\n          open: ['selected.contractlistingcomposite.contractopen'],\r\n          complete: ['selected.contractlistingcomposite.contractcomplete'],\r\n          offer: ['selected.contractlistingcomposite.contractrequests'],\r\n          request: ['selected.contractlistingcomposite.contractrequests']\r\n        },\r\n        demand: {\r\n          buy: {\r\n            open: ['selected.contractbuyerlistingcomposite.contractopen_demand'],\r\n            complete: ['selected.contractbuyerlistingcomposite.contractcomplete_demand'],\r\n            request: ['selected.contractbuyerlistingcomposite.contractrequests_demand']\r\n          },\r\n          sell: {\r\n            open: ['selected.contractsellerlistingcomposite.contractopen_demandsell'],\r\n            complete: ['selected.contractsellerlistingcomposite.contractcomplete_demandsell'],\r\n            request: ['selected.contractsellerlistingcomposite.contractrequests_demandsell']\r\n          }\r\n        }\r\n      },\r\n      tickets_object: {\r\n        warehoused: ['selected.viewticketwarehousedcomposite.data'],\r\n        sold: ['selected.viewticketsoldcomposite.data'],\r\n        offerRequest: ['selected.viewticketrequestcomposite.ticketDetails'],\r\n        amendRequest: ['selected.ticketlistingcomposite.ticketlistingrequests'],\r\n        transferRequest: ['selected.ticketlistingcomposite.ticketlistingrequests']\r\n      }\r\n    };\r\n\r\n    const taskIdMap = {\r\n      contractdomain_object: {\r\n        grower: {\r\n          open: 'viewcontractdetailscomposite',\r\n          complete: 'viewcontractdetailscompletecomposite',\r\n          offer: 'offercontractdetailscomposite',\r\n          request: 'viewcontractdetailsrequestcomposite'\r\n        },\r\n        demand: {\r\n          buy: {\r\n            open: 'viewcontractdemandbuyingcomposite',\r\n            complete: 'viewcontractdemandbuyingcompletecomposite',\r\n            request: 'viewcontractdemandbuyingrequestcomposite'\r\n          },\r\n          sell: {\r\n            open: 'viewcontractdemandsellingcomposite',\r\n            complete: 'viewcontractdemandsellingcompletecomposite',\r\n            request: 'viewcontractdemandsellingrequestcomposite'\r\n          }\r\n        }\r\n      },\r\n      tickets_object: {\r\n        warehoused: 'viewticketwarehousedcomposite',\r\n        sold: 'viewticketsoldcomposite',\r\n        offerRequest: 'viewticketrequestcomposite',\r\n        amendRequest: 'viewamendticketrequestcomposite',\r\n        transferRequest: 'viewtickettransferreqdetails'\r\n      }\r\n    };\r\n\r\n    const formatDataMap = {\r\n      contractdomain_object: {\r\n        grower: {\r\n          offer: dt => dt,\r\n          request: dt => dt\r\n        }\r\n      },\r\n      tickets_object: {\r\n        warehoused: dt => dt,\r\n        sold: dt => dt,\r\n        amendRequest: dt => dt\r\n      }\r\n    };\r\n\r\n    const tabMap = {\r\n      ticketlistingcomposite: {\r\n        warehoused: 0,\r\n        sold: 1,\r\n        requests: 2\r\n      },\r\n      contractlistingcomposite: {\r\n        open: 0,\r\n        complete: 1,\r\n        requests: 2\r\n      }\r\n    };\r\n\r\n    const queryMap = {\r\n      ticketlistingcomposite: 'ticketsquery',\r\n      contractlistingcomposite: 'contractlistingquery',\r\n      ticketscomposite: 'ticketlistingquery',\r\n      contractdomaincomposite: 'contractlistingquery',\r\n      inventorycomposite: 'inventoryquery'\r\n    };\r\n\r\n    if (data.taskId) {\r\n      try {\r\n        if (data.defaultTab) var tabNum = tabMap[data.taskId][data.defaultTab];\r\n        send(200, {\r\n          taskId: data.taskId,\r\n          tabIndex: data.defaultTab ? setTab(tabNum) : null,\r\n          setNgr: data.defaultTab ? setGlobalState(data.defaultNgr, data.taskId) : null,\r\n          queryComponent: _.get(queryMap, data.taskId, null)\r\n        });\r\n      } catch (error) {\r\n        console.error(error);\r\n        send(500, 'There is an error in the deeplink.');\r\n      }\r\n    } else {\r\n      Promise.all([userType, getData(getObjectUri(objectMap[object]), formatFilter(data.uniqueFields))])\r\n        .then(arr => {\r\n          const type = arr[0];\r\n          const dt = arr[1];\r\n          if (dt.length == 0) console.log('Record not found.');\r\n          const path = getPath(object, dt, type);\r\n          const format = _.get(formatDataMap, path, dt => dt[0]);\r\n          send(200, {\r\n            data: format(dt),\r\n            object: object,\r\n            setSelected: _.get(selectionMap, path, []),\r\n            taskId: _.get(taskIdMap, path, '')\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n          send(500, 'Something went wrong. Kindly check after some time.');\r\n        });\r\n    }",
  "sys__UUID": "7e26cb27-0a97-4311-ac9f-a04cab4e7a6c"
}
