{
    "_id" : "contractpayload_processor",
    "name" : "contractpayload_processor",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "12325a98-a959-4939-9005-4158d136afcd",
    "snippet" : "var contractPayload = req.body.bulkPayLoadData[0];\r\nvar contractPayloadForDelete = JSON.parse(\r\n  JSON.stringify(req.body.bulkPayLoadData[0])\r\n);\r\n\r\nvar contractItemRefNos = [];\r\nvar contractRefNo = contractPayload.contractHeader.contractRefNo;\r\n\r\nvar connectData = {\r\n  method: 'GET',\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    '\/data\/12325a98-a959-4939-9005-4158d136afcd\/46e84f42-6288-4027-b6d0-fd1c11019259',\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n    requestid: req.headers['requestid'] + '-processor',\r\n  },\r\n  body: {},\r\n  json: true,\r\n};\r\n\r\nvar itemsPayload = [];\r\nvar noOfItems = 0;\r\nvar connectDeleteData = {\r\n  method: 'POST',\r\n  url: req.body.propertyList.eka_connect_host + '\/workflow',\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n    requestid: req.headers['requestid'] + '-processor-delete',\r\n  },\r\n  body: {\r\n    output: {\r\n      elastic_deleteContractDomainData: [],\r\n    },\r\n    task: 'elastic_deleteContractDomainData',\r\n    appId: '12325a98-a959-4939-9005-4158d136afcd',\r\n    workflowTaskName: 'elastic_deleteContractDomainData',\r\n  },\r\n  json: true,\r\n};\r\n\r\nvar contractRequestConnectData = {\r\n  method: 'GET',\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    '\/data\/12325a98-a959-4939-9005-4158d136afcd\/3725efac-7f2a-462b-8af0-5462e33cf544',\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n    requestid: req.headers['requestid'] + '-processor',\r\n  },\r\n  body: {\r\n    filterData: {\r\n      filter: [],\r\n    },\r\n  },\r\n  json: true,\r\n};\r\n\r\nfunction get_connectData() {\r\n  return new Promise(function (resolve, reject) {\r\n    \/\/ console.log('get_connectData Request-' + JSON.stringify(connectData));\r\n    request(connectData, function (err, response, body) {\r\n      \/\/ console.log('get_connectData Response-' + JSON.stringify(response));\r\n      if (response.statusCode === 200) resolve(body);\r\n      else {\r\n        reject(err || body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction get_deleteConnectData() {\r\n  return new Promise(function (resolve, reject) {\r\n    \/\/ console.log('get_deleteConnectData Request-' + JSON.stringify(connectDeleteData));\r\n    request(connectDeleteData, function (err, response, body) {\r\n      \/\/ console.log('get_deleteConnectData Response-' + JSON.stringify(response));\r\n      if (response.statusCode === 200) resolve(body);\r\n      else {\r\n        reject(err || body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction get_contractRequestconnectData() {\r\n  return new Promise(function (resolve, reject) {\r\n    \/\/ console.log('get_contractRequestconnectData Request-' + JSON.stringify(contractRequestConnectData));\r\n    request(contractRequestConnectData, function (err, response, body) {\r\n      \/\/ console.log('get_contractRequestconnectData Response-' + JSON.stringify(response));\r\n      if (response.statusCode === 200) resolve(body);\r\n      else {\r\n        reject(err || body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nvar connectUpdateContractDomainData = {\r\n  method: 'POST',\r\n  url: req.body.propertyList.eka_connect_host + '\/workflow',\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n    requestid: req.headers['requestid'] + '-processor-delete',\r\n  },\r\n  body: {\r\n    output: {\r\n      update_contractDomainData: [],\r\n    },\r\n    task: 'update_contractDomainData',\r\n    appId: '12325a98-a959-4939-9005-4158d136afcd',\r\n    workflowTaskName: 'update_contractDomainData',\r\n  },\r\n  json: true,\r\n};\r\nfunction update_contractDomainconnectData() {\r\n  return new Promise(function (resolve, reject) {\r\n    \/\/ console.log('update_contractDomainconnectData Request-' + JSON.stringify(connectUpdateContractDomainData));\r\n    request(connectUpdateContractDomainData, function (err, response, body) {\r\n      \/\/ console.log('update_contractDomainconnectData Response-' + JSON.stringify(response));\r\n      if (response.statusCode === 200) resolve(body);\r\n      else {\r\n        reject(err || body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nvar connectUpdateContractRequestData = {\r\n  method: 'POST',\r\n  url: req.body.propertyList.eka_connect_host + '\/workflow',\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n    requestid: req.headers['requestid'] + '-processor-delete',\r\n  },\r\n  body: {\r\n    output: {\r\n      update_contractRequestData: [],\r\n    },\r\n    task: 'update_contractRequestData',\r\n    appId: '12325a98-a959-4939-9005-4158d136afcd',\r\n    workflowTaskName: 'update_contractRequestData',\r\n  },\r\n  json: true,\r\n};\r\nfunction update_contractRequestconnectData() {\r\n  return new Promise(function (resolve, reject) {\r\n    \/\/ console.log('update_contractRequestconnectData Request-' + JSON.stringify(connectUpdateContractRequestData));\r\n    request(connectUpdateContractRequestData, function (err, response, body) {\r\n      \/\/ console.log('update_contractRequestconnectData Response-' + JSON.stringify(response));\r\n      if (response.statusCode === 200) resolve(body);\r\n      else {\r\n        reject(err || body);\r\n      }\r\n    });\r\n  });\r\n}\r\n(async () => {\r\n  noOfItems =\r\n    contractPayload &&\r\n    contractPayload.contractItems &&\r\n    contractPayload.contractItems.contractItem &&\r\n    contractPayload.contractItems.contractItem.length;\r\n  let noOfItemsForDelete = [];\r\n  for (let i = 0; i < noOfItems; i++) {\r\n    let item = {};\r\n    let contractItemDetails = contractPayload.contractItems.contractItem[i];\r\n    let multiGradeKey = '';\r\n    if (\r\n      contractItemDetails.hasOwnProperty('priceDetail') &&\r\n      contractItemDetails.priceDetail.hasOwnProperty('isMultigrade')\r\n    ) {\r\n      if (contractItemDetails.priceDetail.isMultigrade == 'Y') {\r\n        multiGradeKey = ' MG';\r\n      }\r\n    }\r\n    let gradeCombined = [];\r\n    let dischargeLocationCityCombined = [];\r\n    item.contractType = contractPayload.contractGeneral.contractType;\r\n    item.contractSubType = contractPayload.contractGeneral.contractSubType;\r\n    item.userType = contractPayload.contractGeneral.userType;\r\n\r\n    item.corporate = contractPayload.contractGeneral.corporate;\r\n\r\n    item.brokerBPRefNo = contractPayload.contractHeader.brokerBPRefNo\r\n      ? contractPayload.contractHeader.brokerBPRefNo\r\n      : null;\r\n    item.brokerRefNo = contractPayload.contractHeader.brokerRefNo;\r\n    item.BPRefNo = contractPayload.contractHeader.BPRefNo;\r\n    item.INCOTerm = contractPayload.contractHeader.INCOTerm;\r\n    item.approvalStatus = '';\r\n    if (item.userType == 'Grower') {\r\n      item.approvalStatus = 'Approved';\r\n    } else {\r\n      item.approvalStatus = contractPayload.contractHeader.approvalStatus;\r\n    }\r\n    item.counterPartyName = contractPayload.contractHeader.counterPartyName;\r\n    item.contractRefNo = contractPayload.contractHeader.contractRefNo;\r\n    item.positionStatus = contractPayload.contractHeader.positionStatus;\r\n    item.modificationDate = contractPayload.contractHeader.modificationDate;\r\n    item.paymentTerms = contractPayload.contractHeader.paymentTerms;\r\n    item.contractIssueDate = contractPayload.contractHeader.contractIssueDate;\r\n\r\n    item.contractItemRefNo = contractItemDetails.contractItemRefNo;\r\n\r\n    contractItemRefNos.push(item.contractItemRefNo);\r\n\r\n    item.product = contractItemDetails.productDetail.product;\r\n    item.origin = contractItemDetails.productDetail.origin;\r\n    item.quality = contractItemDetails.productDetail.quality + multiGradeKey;\r\n    gradeCombined.push(contractItemDetails.productDetail.quality);\r\n    item.cropYear = contractItemDetails.productDetail.cropYear;\r\n    item.contractItemQuantity =\r\n      contractItemDetails.quantityDetail.contractItemQuantity;\r\n    item.contractItemQuantityInBase =\r\n      contractItemDetails.quantityDetail.contractItemQuantityInBase;\r\n    item.contractItemQuantityUnit =\r\n      contractItemDetails.quantityDetail.contractItemQuantityUnit;\r\n    item.contractItemQuantityUnitInBase =\r\n      contractItemDetails.quantityDetail.contractItemQuantityUnitInBase;\r\n    item.itemExecutedQty =\r\n      contractItemDetails.contractItemListingDetail.itemExecutedQty;\r\n    item.itemExecutedQtyInBase =\r\n      contractItemDetails.contractItemListingDetail.itemExecutedQtyInBase;\r\n    item.itemOpenQuantity =\r\n      contractItemDetails.contractItemListingDetail.itemOpenQuantity;\r\n    item.itemOpenQuantityInBase =\r\n      contractItemDetails.contractItemListingDetail.itemOpenQuantityInBase;\r\n    item.fulfillmentStatus =\r\n      contractItemDetails.contractItemListingDetail.fulfillmentStatus;\r\n    item.priceDetails =\r\n      contractItemDetails.contractItemListingDetail.priceDetails;\r\n    item.deliveryLocationGroupName =\r\n      contractItemDetails.deliveryDetails.deliveryDetail[0].dischargeLocationGroupName;\r\n    item.dischargeLocationCity =\r\n      contractItemDetails.deliveryDetails.deliveryDetail[0].dischargeLocationCity;\r\n    item.dischargeLocationCountry =\r\n      contractItemDetails.deliveryDetails.deliveryDetail[0].dischargeLocationCountry;\r\n    dischargeLocationCityCombined.push(\r\n      contractItemDetails.deliveryDetails.deliveryDetail[0]\r\n        .dischargeLocationCity\r\n    );\r\n    if (\r\n      contractItemDetails.deliveryDetails.deliveryDetail[0]\r\n        .optionalDischargeDetails\r\n    ) {\r\n      contractItemDetails.deliveryDetails.deliveryDetail[0].optionalDischargeDetails.optionalDischargeDetail.forEach(\r\n        (selected) => {\r\n          if (selected.optionalDischargeLocations) {\r\n            selected.optionalDischargeLocations =\r\n              selected.optionalDischargeLocations.replace(\r\n                ',' + item.dischargeLocationCountry,\r\n                ''\r\n              );\r\n            dischargeLocationCityCombined.push(\r\n              selected.optionalDischargeLocations\r\n            );\r\n          }\r\n        }\r\n      );\r\n    }\r\n    item.dischargeLocationCityCombined = dischargeLocationCityCombined;\r\n    item.optionalDischargeDetails =\r\n      contractItemDetails.deliveryDetails.deliveryDetail[0].optionalDischargeDetails;\r\n\r\n    item.dischargeLocationType =\r\n      contractItemDetails.deliveryDetails.deliveryDetail[0].dischargeLocationType;\r\n    item.loadingLocationCity =\r\n      contractItemDetails.deliveryDetails.deliveryDetail[0].loadingLocationCity;\r\n    item.loadingLocationCountry =\r\n      contractItemDetails.deliveryDetails.deliveryDetail[0].loadingLocationCountry;\r\n    item.loadingLocationType =\r\n      contractItemDetails.deliveryDetails.deliveryDetail[0].loadingLocationType;\r\n    item.shipmentPeriodFrom =\r\n      contractItemDetails.deliveryPeriod.shipmentPeriodFrom;\r\n    item.shipmentPeriodTo = contractItemDetails.deliveryPeriod.shipmentPeriodTo;\r\n    \/\/priceDetail\r\n    item.contractPrice = contractItemDetails.priceDetail.contractPrice;\r\n    item.contractPriceUnit = contractItemDetails.priceDetail.contractPriceUnit;\r\n    item.isMultiGrade = contractItemDetails.priceDetail.isMultigrade;\r\n    item.multiGradeDifferentialDetails =\r\n      contractItemDetails.priceDetail.multiGradeDifferentialDetails;\r\n    if (contractItemDetails.priceDetail.isMultigrade == 'Y') {\r\n      contractItemDetails.priceDetail.multiGradeDifferentialDetails.multiGradeDifferentialDetail.forEach(\r\n        (selected) => {\r\n          gradeCombined.push(selected.qualityName);\r\n        }\r\n      );\r\n    }\r\n    item.gradeCombined = gradeCombined;\r\n    item.priceType = contractItemDetails.priceDetail.priceType;\r\n    item.spread = contractItemDetails.priceDetail.spreadType;\r\n\r\n    \/\/quantityDetail\r\n    item.toleranceLowerQty =\r\n      contractItemDetails.quantityDetail.toleranceLowerQty;\r\n    item.toleranceUpperQty =\r\n      contractItemDetails.quantityDetail.toleranceUpperQty;\r\n    item.isRequestActive = false;\r\n\r\n    item.requestIdUnique = '-';\r\n    \/\/Contract Request data\r\n    if (item.userType == 'Grower') {\r\n      contractRequestConnectData.body.filterData.filter = [\r\n        {\r\n          fieldName: 'contractRefNo',\r\n          operator: 'eq',\r\n          value: contractPayload.contractHeader.contractRefNo,\r\n        },\r\n        {\r\n          fieldName: 'contractItemRefNo',\r\n          operator: 'eq',\r\n          value: contractItemDetails.contractItemRefNo,\r\n        },\r\n        {\r\n          fieldName: 'requestType',\r\n          operator: 'eq',\r\n          value: 'New contract',\r\n        },\r\n      ];\r\n      await get_contractRequestconnectData()\r\n        .then(async (result1) => {\r\n          if (result1.length > 0)\r\n            item.requestIdUnique = result1[0].requestId + '-';\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n          res.status(400).send(err);\r\n        });\r\n      filter = {\r\n        filterData: {\r\n          filter: [\r\n            {\r\n              fieldName: 'contractRefNo',\r\n              value: contractPayload.contractHeader.contractRefNo,\r\n              operator: 'eq',\r\n            },\r\n            {\r\n              fieldName: 'contractItemRefNo',\r\n              value: contractItemDetails.contractItemRefNo,\r\n              operator: 'eq',\r\n            },\r\n            {\r\n              fieldName: 'isRequestedByEkaCCSystem',\r\n              value: true,\r\n              operator: 'eq',\r\n            },\r\n            {\r\n              fieldName: 'approvalStatus',\r\n              operator: 'in',\r\n              value: ['Awaiting review', 'Action required', 'Approved'],\r\n            },\r\n          ],\r\n        },\r\n      };\r\n      connectData.body = filter;\r\n\r\n      await get_connectData()\r\n        .then(async (result) => {\r\n          if (result.length > 0 && result[0].approvalStatus == 'Approved') {\r\n            \/\/ itemsPayload.push({\r\n            \/\/   isRequestActive: false,\r\n            \/\/   requestIdUnique: result[0].requestIdUnique,\r\n            \/\/   contractRefNo: result[0].contractRefNo,\r\n            \/\/   contractItemRefNo: result[0].contractItemRefNo,\r\n            \/\/ });\r\n\r\n            item.requestId = result[0].requestId || '';\r\n            item.requestType = result[0].requestType || '';\r\n            item.requestedDate = result[0].requestedDate || '';\r\n            item.requestedBy = result[0].requestedBy || '';\r\n            item.spread = (item.spread ? item.spread : result[0].spread) || '';\r\n            item.freightOrganise = result[0].freightOrganise || '';\r\n            item.fullname = result[0].fullname || '';\r\n            item.phonenumber = result[0].phonenumber || '';\r\n            item.email = result[0].email || '';\r\n            item.pickuplocation =\r\n              result[0].amendedPickuplocation &&\r\n              result[0].amendedPickuplocation.length > 0\r\n                ? result[0].amendedPickuplocation\r\n                : result[0].pickuplocation\r\n                ? result[0].pickuplocation\r\n                : null;\r\n            item.programName = result[0].programName || '';\r\n\r\n            item.markettype = result[0].markettype || '';\r\n            item.issustainable = result[0].issustainable || '';\r\n            item.bidid = result[0].bidid || '';\r\n            item.portzone = result[0].portzone || '';\r\n            item.deliveryLocationGroupName =\r\n              (item.deliveryLocationGroupName\r\n                ? item.deliveryLocationGroupName\r\n                : result[0].deliveryLocationGroupName) || '';\r\n            item.bulkHandler = result[0].bulkHandler || '';\r\n            item.dischargeLocationState =\r\n              result[0].dischargeLocationState || '';\r\n            item.profitCentre =\r\n              contractItemDetails.productDetail.profitCentre ||\r\n              result[0].profitCentre ||\r\n              '';\r\n            item.growerCreatedBy = result[0].growerCreatedBy || '';\r\n            item.growerOperator = result[0].growerOperator || '';\r\n            item.employeeOperatorUser = result[0].employeeOperatorUser || '';\r\n            item.employeeCreatedByUser = result[0].employeeCreatedByUser || '';\r\n            item.employeeOperatorModifiedUser =\r\n              result[0].employeeOperatorModifiedUser || '';\r\n            item.employeeCreatedByModifiedUser =\r\n              result[0].employeeCreatedByModifiedUser || '';\r\n            item.ekaCCSpreadFixed = result[0].ekaCCSpreadFixed || null;\r\n            \/\/ item.multiGradeDifferentialDetails =\r\n            \/\/   result[0].multiGradeDifferentialDetails || '';\r\n\r\n            \/\/   connectData.body = filter;\r\n            \/\/   await get_connectData()\r\n            \/\/     .then((ContractRequestTabData) => {\r\n            \/\/       \/\/\tconsole.log(\"get data output: \"+JSON.stringify(ContractRequestTabData));\r\n            \/\/       for (let i = 0; i < ContractRequestTabData.length; i++) {\r\n            \/\/         connectUpdateContractDomainData.body.output.update_contractDomainData.push(\r\n            \/\/           {\r\n            \/\/             approvalStatus: 'Approved',\r\n            \/\/             isRequestActive: false,\r\n            \/\/             requestIdUnique: ContractRequestTabData[i].requestIdUnique,\r\n            \/\/             contractRefNo: ContractRequestTabData[i].contractRefNo,\r\n            \/\/             contractItemRefNo:\r\n            \/\/               ContractRequestTabData[i].contractItemRefNo,\r\n            \/\/           }\r\n            \/\/         );\r\n            \/\/         \/\/ console.log(\"to be deleted contract items \" + JSON.stringify(ContractRequestTabData[i]));\r\n            \/\/       }\r\n\r\n            \/\/       connectUpdateContractRequestData.body.output.update_contractRequestData.push(\r\n            \/\/         {\r\n            \/\/           requestId: result[0].requestId,\r\n            \/\/           isRequestActive: false,\r\n            \/\/         }\r\n            \/\/       );\r\n\r\n            \/\/       update_contractDomainconnectData();\r\n            \/\/       update_contractRequestconnectData();\r\n            \/\/     })\r\n            \/\/     .catch((err) => {\r\n            \/\/       console.log(JSON.stringify(err));\r\n            \/\/       res.status(500).send(err);\r\n            \/\/     });\r\n          } else if (\r\n            result &&\r\n            result.length > 0 &&\r\n            (result[0].approvalStatus == 'Awaiting review' ||\r\n              result[0].approvalStatus == 'Action required')\r\n          ) {\r\n            delete item.approvalStatus;\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n          res.status(400).send(err);\r\n        });\r\n    }\r\n\r\n    itemsPayload.push(item);\r\n    \/\/ console.log('itemsPayload output: ' + JSON.stringify(itemsPayload));\r\n  }\r\n\r\n  var filter = {\r\n    filterData: {\r\n      filter: [\r\n        {\r\n          fieldName: 'contractRefNo',\r\n          value: [contractRefNo],\r\n          operator: 'in',\r\n        },\r\n        {\r\n          fieldName: 'contractItemRefNo',\r\n          value: contractItemRefNos,\r\n          operator: 'nin',\r\n        },\r\n      ],\r\n    },\r\n  };\r\n  connectData.body = filter;\r\n  await get_connectData()\r\n    .then((result) => {\r\n      \/\/\tconsole.log(\"get data output: \"+JSON.stringify(result));\r\n      for (let i = 0; i < result.length; i++) {\r\n        noOfItemsForDelete.push({\r\n          contractItemRefNo: result[i]['contractItemRefNo'],\r\n        });\r\n        \/\/ console.log(\"to be deleted contract items \" + JSON.stringify(noOfItemsForDelete));\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(JSON.stringify(err));\r\n      res.status(500).send(err);\r\n    });\r\n  if (noOfItemsForDelete.length > 0) {\r\n    \/\/\tconsole.log(\"noItermsToDelete :\"+JSON.stringify(noOfItemsForDelete));\r\n    contractPayloadForDelete.contractItems.contractItem = noOfItemsForDelete;\r\n    connectDeleteData.body.output.elastic_deleteContractDomainData.push(\r\n      contractPayloadForDelete\r\n    );\r\n    \/\/console.log(\"calling delete api with details :\"+JSON.stringify(connectDeleteData));\r\n    await get_deleteConnectData().catch((err) => {\r\n      console.error(err);\r\n      res.status(400).send(err);\r\n    });\r\n  }\r\n  \/\/ console.log(\"massaged payload :\"+itemsPayload);\r\n  res.status(200).send(itemsPayload);\r\n})();",
    "sys__UUID" : "f0b436fc-63d9-42fd-9639-8bbf5bfc10a1"
}
