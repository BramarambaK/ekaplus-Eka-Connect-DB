{
  "_id": "validatetickettransfer_processor",
  "name": "validatetickettransfer_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": " const send = (status, message) => res.status(status).send(message);\r\n    const formElementName = 'ngrdetails';\r\n    const totalQuantity = req.body.tickettransfercomposite.selectedtickets[0].totalQuantity;\r\n    const transfermethod = req.body.tickettransfercomposite.transfermethod.transferpercentage;\r\n    const commonMessage = 'Entry errors identified. Please review your inputs.';\r\n    const data =\r\n      req.body.ngrdetails.map((i, index) => ({\r\n        ...i,\r\n        totalQuantity: totalQuantity,\r\n        transferMethod: transfermethod,\r\n        _groupNo: i._groupNo || index\r\n      })) || [];\r\n    const findEmptyField = data => (field, callback) => {\r\n      const e = data.filter(i => i[field] === null || i[field] === '' || i[field] === undefined || i[field] === 0);\r\n      if (e && e.length > 0) {\r\n        const msg = callback(e);\r\n        return {\r\n          errorCode: '004',\r\n          errorMessage: msg,\r\n          errorContext: null,\r\n          errorLocalizedMessage: msg,\r\n          errors: [\r\n            {\r\n              errorCode: '004',\r\n              errorMessage: msg,\r\n              errorContext: `{formarray:ngrdetails}`,\r\n              errorLocalizedMessage: msg,\r\n              errors: [\r\n                ...e.reduce((acc, curr) => {\r\n                  acc.add(curr._groupNo);\r\n                  return acc;\r\n                }, new Set())\r\n              ].map(i => ({\r\n                errorCode: '004',\r\n                errorMessage: msg,\r\n                errorContext: `{formarray:${i}}`,\r\n                errorLocalizedMessage: msg,\r\n                errors: [\r\n                  {\r\n                    errorCode: '004',\r\n                    errorMessage: msg,\r\n                    errorContext: `{field:${field}}`,\r\n                    errorLocalizedMessage: msg,\r\n                    errors: null\r\n                  }\r\n                ]\r\n              }))\r\n            }\r\n          ]\r\n        };\r\n      }\r\n      return null;\r\n    };\r\n    const equal = (i, j) => i.ngr == j.ngr;\r\n\r\n    const invalidMessages = [\r\n      {\r\n        key: 'ngr',\r\n        message: () => `Cannot leave blank`\r\n      },\r\n      {\r\n        key: 'ngrtradingname',\r\n        message: () => `Cannot leave blank`\r\n      },\r\n      {\r\n        key: 'transferquantitypercentage',\r\n        message: () => `Cannot leave blank`\r\n      }\r\n    ];\r\n    const invalidMessagesFortonnage = [\r\n      {\r\n        key: 'ngr',\r\n        message: () => `Cannot leave blank`\r\n      },\r\n      {\r\n        key: 'ngrtradingname',\r\n        message: () => `Cannot leave blank`\r\n      },\r\n      {\r\n        key: 'transferqty',\r\n        message: () => `Cannot leave blank`\r\n      }\r\n    ];\r\n    const duplicateMessage =\r\n      'Please review errors or duplicates marked below and ensure entry is correct before proceeding to next step.';\r\n\r\n    try {\r\n      if (data.length > 0) {\r\n        if (data.length <= 10) {\r\n          const _findEmptyField = findEmptyField(data);\r\n          if (data[0].transferMethod === 'By tonnage') {\r\n            for (let i of invalidMessagesFortonnage) {\r\n              const error = _findEmptyField(i.key, i.message);\r\n              if (error) {\r\n                return send(400, error);\r\n              }\r\n            }\r\n          } else {\r\n            for (let i of invalidMessages) {\r\n              const error = _findEmptyField(i.key, i.message);\r\n              if (error) {\r\n                return send(400, error);\r\n              }\r\n            }\r\n          }\r\n\r\n          const duplicate = [\r\n            ...data\r\n              .filter((i, index, arr) => arr.findIndex(j => equal(i, j)) != index)\r\n              .reduce((acc, curr) => {\r\n                acc.add(curr._groupNo);\r\n                return acc;\r\n              }, new Set())\r\n          ];\r\n\r\n          if (duplicate && duplicate.length > 0) {\r\n            return send(400, {\r\n              errorCode: '004',\r\n              errorMessage: commonMessage,\r\n              errorContext: null,\r\n              errorLocalizedMessage: commonMessage,\r\n              errors: [\r\n                {\r\n                  errorCode: '004',\r\n                  errorMessage: duplicateMessage,\r\n                  errorContext: '{formarray:ngrdetails}',\r\n                  errorLocalizedMessage: duplicateMessage,\r\n                  errors: duplicate.map(i => ({\r\n                    errorCode: '004',\r\n                    errorMessage: duplicateMessage,\r\n                    errorContext: `{formarray:${i}}`,\r\n                    errorLocalizedMessage: duplicateMessage,\r\n                    errors: null\r\n                  }))\r\n                }\r\n              ]\r\n            });\r\n          } else {\r\n            send(200, {\r\n              data: data,\r\n              selectedtickets: req.body.tickettransfercomposite.selectedtickets,\r\n              bpName: req.body.tickettransfercomposite.bpName,\r\n              bpRefNo: req.body.tickettransfercomposite.bpRefNo\r\n            });\r\n          }\r\n        } else {\r\n          send(400, 'Maximum of 4 records are allowed');\r\n        }\r\n      } else {\r\n        send(400, 'No data to be saved');\r\n      }\r\n    } catch (err) {\r\n      send(500, {\r\n        errorCode: '004',\r\n        errorMessage: err.message || err,\r\n        errorContext: err.message || err,\r\n        errorLocalizedMessage: 'Internal server error'\r\n      });\r\n    }",
  "sys__UUID": "5eadb9dd-3242-43c5-a884-ce951b3ad5d6"
}
