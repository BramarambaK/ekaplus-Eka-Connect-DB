{
  "_id": "volumeLimits_mdm_processor",
  "name": "volumeLimits_mdm",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "req.body.mdmProcessorServiceKey = JSON.parse(req.body.mdmProcessorServiceKey);\r\n    const serviceKey = req.body.mdmProcessorServiceKey[0].serviceKey;\r\n    const appId = req.body.appId;\r\n    const tenant = req.headers['X-TenantID'];\r\n    const taskId = req.body.taskId;\r\n    var moment = require('moment');\r\n    var todayDate = moment()\r\n      .utc()\r\n      .format('DD-MM-YYYY');\r\n\r\n    const getRequestBody = url => ({\r\n      method: 'GET',\r\n      url,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': tenant\r\n      },\r\n      json: true\r\n    });\r\n\r\n    const userInfo = getRequestBody(req.body.propertyList.eka_connect_host + '\/api\/getbpuserinfo');\r\n\r\n    const connectRegionMasterData = getRequestBody(\r\n      req.body.propertyList.eka_connect_host +\r\n        '\/data\/12325a98-a959-4939-9005-4158d136afcd\/ac4bf583-a9a4-446d-b6f9-3c083c3e1030'\r\n    );\r\n    const connectProductMasterData = getRequestBody(\r\n      req.body.propertyList.eka_connect_host +\r\n        '\/data\/12325a98-a959-4939-9005-4158d136afcd\/ae5f314e-c377-419e-9dfa-1f296f6fccfa'\r\n    );\r\n\r\n    const connectSeasonMasterData = getRequestBody(\r\n      req.body.propertyList.eka_connect_host +\r\n        '\/data\/12325a98-a959-4939-9005-4158d136afcd\/1f3e680b-f3dd-418a-8fd4-888e38714cc3'\r\n    );\r\n\r\n    const connectVolumeLimitsData = body => ({\r\n      ...getRequestBody(\r\n        req.body.propertyList.eka_connect_host +\r\n          '\/data\/12325a98-a959-4939-9005-4158d136afcd\/c98119db-1f7c-4802-b72a-6678f1ecc0f3'\r\n      ),\r\n      body\r\n    });\r\n    const connectTicketData = body => ({\r\n      ...getRequestBody(\r\n        req.body.propertyList.eka_connect_host +\r\n          '\/data\/12325a98-a959-4939-9005-4158d136afcd\/a26737b3-a5a9-4fe9-b6f7-29218a3bc45a'\r\n      ),\r\n      body\r\n    });\r\n\r\n    const getCollectionMapper = config =>\r\n      new Promise((resolve, reject) => {\r\n        const r = {\r\n          method: 'POST',\r\n          url: `${req.body.propertyList.eka_connect_host}\/collectionmapper\/${config.appId}\/${\r\n            config.objectId\r\n          }\/fetchCollectionRecords`,\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            ttl: 600,\r\n            'X-TenantID': config.tenant,\r\n            'Content-Type': 'application\/json'\r\n          },\r\n          body: {\r\n            collectionName: config.collectionName\r\n          },\r\n          json: true\r\n        };\r\n        request(r, (err, response, body) => {\r\n          if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n\r\n    function getData(requestBody) {\r\n      console.log('requestBody', JSON.stringify(requestBody));\r\n      return new Promise(function(resolve, reject) {\r\n        request(requestBody, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    function prepareMdmCollection(platformres) {\r\n      let mdmCollection = {\r\n        portzoneKey: {},\r\n        commodityKey: {},\r\n        harvestSeasonKey: {}\r\n      };\r\n\r\n      function getOption(serviceKey, key, dependent, dependent1 = null) {\r\n        if (!mdmCollection[serviceKey][key]) {\r\n          if (dependent != '') {\r\n            mdmCollection[serviceKey][key] = {\r\n              [dependent]: true\r\n            };\r\n          }\r\n          if (dependent1 != null && dependent1 != '') {\r\n            mdmCollection[serviceKey][key] = {\r\n              ...mdmCollection[serviceKey][key],\r\n              [dependent1]: true\r\n            };\r\n          }\r\n        } else {\r\n          if (!mdmCollection[serviceKey][key][dependent] && dependent != '') {\r\n            mdmCollection[serviceKey][key] = {\r\n              ...mdmCollection[serviceKey][key],\r\n              [dependent]: true\r\n            };\r\n          }\r\n          if (dependent1 != null && dependent1 != '') {\r\n            if (!mdmCollection[serviceKey][key][dependent1]) {\r\n              mdmCollection[serviceKey][key] = {\r\n                ...mdmCollection[serviceKey][key],\r\n                [dependent1]: true\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      platformres.forEach(item => {\r\n        for (let key in item) {\r\n          key === 'region' && getOption('portzoneKey', item[key], item['site']);\r\n          key === 'product' && getOption('commodityKey', item[key], item['quality']);\r\n          key === 'bpRefNo' && getOption('harvestSeasonKey', item[key], item['currentSeason'], item['previousSeason']);\r\n        }\r\n      });\r\n\r\n      return mdmCollection;\r\n    }\r\n\r\n    const getFilterData = params => {\r\n      let filterData = [];\r\n      for (let key in params) {\r\n        let operator = Array.isArray(params[key]) ? 'in' : 'eq';\r\n        filterData.push({\r\n          fieldName: key,\r\n          value: params[key],\r\n          operator: operator\r\n        });\r\n      }\r\n      return { filter: filterData };\r\n    };\r\n\r\n    const subGroupMaster = {\r\n      appId: appId,\r\n      objectId: 'd59b8c10-8c94-4b87-a430-f6fd69888a37' \/* not at all relevant object id *\/,\r\n      collectionName: 'BP Sub Group Setup',\r\n      tenant: tenant\r\n    };\r\n\r\n    const subGroupCode = userDetails =>\r\n      new Promise((resolve, reject) =>\r\n        getCollectionMapper(subGroupMaster)\r\n          .then(result => {\r\n            if (result && Array.isArray(result)) {\r\n              const config = result.find(i => i.Workflow == taskId && i.UserType == userDetails.customerType);\r\n\r\n              if (config) {\r\n                resolve(config.SubGroupCode);\r\n              } else {\r\n                console.log(\r\n                  `Sub group configuration not found for ${taskId} and ${\r\n                    userDetails.customerType\r\n                  }. Defaulting to not applicable.`\r\n                );\r\n                resolve(null);\r\n              }\r\n            } else {\r\n              reject('Sub group configuration is missing');\r\n            }\r\n          })\r\n          .catch(err => {\r\n            reject(err);\r\n          })\r\n      );\r\n\r\n    const bpList = new Promise((resolve, reject) => {\r\n      getData(userInfo)\r\n        .then(t => {\r\n          const userDetails = t.data;\r\n          if (userDetails.BusinessPartyDetails) {\r\n            subGroupCode(userDetails)\r\n              .then(code => {\r\n                let bpResolver;\r\n                if (code) {\r\n                  bpResolver = masterdata =>\r\n                    userDetails.BusinessPartyDetails.filter(bp =>\r\n                      masterdata.map(i => i.bpRefNo).includes(bp.refNo)\r\n                    ).reduce((acc, bp) => {\r\n                      if (bp.subGroup && bp.subGroup.length > 0) {\r\n                        const subGroup = bp.subGroup.filter(\r\n                          i =>\r\n                            i.code &&\r\n                            i.code.toLowerCase() == code.toLowerCase() &&\r\n                            masterdata.map(j => j.bpExternalCode).includes(i.refNo)\r\n                        );\r\n                        if (subGroup && subGroup.length > 0) {\r\n                          for (let n in subGroup) {\r\n                            acc.push({\r\n                              key: `${bp.refNo} @#@ ${bp.name} @#@ ${subGroup[n].name} @#@ ${subGroup[n].refNo}`,\r\n                              value: `${bp.name} - ${bp.refNo} - ${subGroup[n].name}`\r\n                            });\r\n                          }\r\n                        }\r\n                      }\r\n                      return acc;\r\n                    }, []);\r\n                } else {\r\n                  bpResolver = masterdata =>\r\n                    userDetails.BusinessPartyDetails.filter(bp =>\r\n                      masterdata.map(i => i.bpRefNo).includes(bp.refNo)\r\n                    ).map(bp => ({\r\n                      key: `${bp.refNo} @#@ ${bp.name}`,\r\n                      value: `${bp.name} - ${bp.refNo}`\r\n                    }));\r\n                }\r\n                resolve(bpResolver);\r\n              })\r\n              .catch(err => {\r\n                reject(err);\r\n              });\r\n          } else {\r\n            reject('BusinessPartyDetails missing in user details.');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          reject(err);\r\n        });\r\n    });\r\n\r\n    if (\r\n      serviceKey == 'gradeKey' ||\r\n      serviceKey == 'siteKey' ||\r\n      serviceKey == 'harvestSeasonKey' ||\r\n      serviceKey == 'oldDailylimitKey'\r\n    ) {\r\n      if (serviceKey == 'gradeKey') {\r\n        let dependsOn = req.body.mdmProcessorServiceKey[0].dependsOn[0];\r\n        let requetParams = {\r\n          bpRefNo: req.body.selectedData.enterlimits.bpRefNo.split(' @#@ ')[0],\r\n          bpExternalCode: req.body.selectedData.enterlimits.bpRefNo.split(' @#@ ')[3],\r\n          season: req.body.selectedData.enterlimits.season,\r\n          region: req.body.mdmProcessorServiceKey[1].dependsOn[0],\r\n          product: req.body.mdmProcessorServiceKey[1].dependsOn[1],\r\n          quality: req.body.mdmProcessorServiceKey[1].dependsOn[2],\r\n          site: req.body.mdmProcessorServiceKey[1].dependsOn[3]\r\n        };\r\n        let body = {\r\n          includeFields: ['dailyLimit', 'dailypurchased'],\r\n          excludeFields: ['_id'],\r\n          filterData: getFilterData(requetParams)\r\n        };\r\n        if (dependsOn == '' || dependsOn == null) {\r\n          res.status(200).send({\r\n            gradeKey: []\r\n          });\r\n        } else {\r\n          getData(connectProductMasterData)\r\n            .then(productMasterData => {\r\n              getData(connectVolumeLimitsData(body)).then(volumentlimitsData => {\r\n                let dObj = {\r\n                  dailypurchasedKey: null,\r\n                  oldDailylimitKey: null\r\n                };\r\n                if (volumentlimitsData && volumentlimitsData.length > 0) {\r\n                  dObj.oldDailylimitKey =\r\n                    Math.max(...volumentlimitsData.map(i => i.dailyLimit).filter(i => i != undefined)) < 0\r\n                      ? '-'\r\n                      : Math.max(...volumentlimitsData.map(i => i.dailyLimit).filter(i => i != undefined));\r\n                  dObj.dailypurchasedKey =\r\n                    Math.max(...volumentlimitsData.map(i => i.dailypurchased).filter(i => i != undefined)) < 0\r\n                      ? '0.00'\r\n                      : Number(\r\n                          Math.max(\r\n                            ...volumentlimitsData.map(i => i.dailypurchased).filter(i => i != undefined)\r\n                          ).toFixed(2)\r\n                        );\r\n                }\r\n                let mdmCollection = prepareMdmCollection(productMasterData);\r\n                const grades = Object.keys(mdmCollection['commodityKey'][dependsOn]);\r\n                if (grades.length > 0) {\r\n                  grades.unshift('All');\r\n                }\r\n                res.status(200).send({\r\n                  gradeKey: grades.map(item => ({\r\n                    key: item,\r\n                    value: item\r\n                  })),\r\n                  dailypurchasedKey: dObj.dailypurchasedKey,\r\n                  oldDailylimitKey: dObj.oldDailylimitKey\r\n                });\r\n              });\r\n            })\r\n            .catch(console.log);\r\n        }\r\n      }\r\n\r\n      if (serviceKey == 'harvestSeasonKey') {\r\n        let dependsOn = req.body.mdmProcessorServiceKey[0].dependsOn[0];\r\n        if (dependsOn == '' || dependsOn == null) {\r\n          res.status(200).send({\r\n            harvestSeasonKey: []\r\n          });\r\n        } else {\r\n          getData(connectSeasonMasterData)\r\n            .then(seasonMasterData => {\r\n              let subGroup = seasonMasterData;\r\n              let bpRefNo = dependsOn.split(' @#@ ')[0];\r\n              let dependsOnExternalCode = dependsOn.split(' @#@ ')[3];\r\n              if (dependsOnExternalCode) {\r\n                subGroup = seasonMasterData.filter(\r\n                  i => i.bpRefNo == bpRefNo && i.bpExternalCode == dependsOnExternalCode\r\n                );\r\n              }\r\n              let mdmCollection = prepareMdmCollection(subGroup);\r\n              res.status(200).send({\r\n                harvestSeasonKey: Object.keys(mdmCollection['harvestSeasonKey'][bpRefNo]).map(item => ({\r\n                  key: item,\r\n                  value: item\r\n                }))\r\n              });\r\n            })\r\n            .catch(console.log);\r\n        }\r\n      }\r\n      if (serviceKey == 'siteKey') {\r\n        let dependsOn = req.body.mdmProcessorServiceKey[0].dependsOn[0];\r\n        let requetParams = {\r\n          bpRefNo: req.body.selectedData.enterlimits.bpRefNo.split(' @#@ ')[0],\r\n          bpExternalCode: req.body.selectedData.enterlimits.bpRefNo.split(' @#@ ')[3],\r\n          season: req.body.selectedData.enterlimits.season,\r\n          region: req.body.mdmProcessorServiceKey[1].dependsOn[0],\r\n          product: req.body.mdmProcessorServiceKey[1].dependsOn[1],\r\n          quality: req.body.mdmProcessorServiceKey[1].dependsOn[2],\r\n          site: req.body.mdmProcessorServiceKey[1].dependsOn[3]\r\n        };\r\n        let body = {\r\n          includeFields: ['dailyLimit', 'dailypurchased'],\r\n          excludeFields: ['_id'],\r\n          filterData: getFilterData(requetParams)\r\n        };\r\n        if (dependsOn == '' || dependsOn == null) {\r\n          res.status(200).send({\r\n            siteKey: []\r\n          });\r\n        } else {\r\n          getData(connectRegionMasterData)\r\n            .then(regionMasterData => {\r\n              getData(connectVolumeLimitsData(body)).then(volumentlimitsData => {\r\n                let dObj = {\r\n                  dailypurchasedKey: null,\r\n                  oldDailylimitKey: null\r\n                };\r\n                if (volumentlimitsData && volumentlimitsData.length > 0) {\r\n                  dObj.oldDailylimitKey =\r\n                    Math.max(...volumentlimitsData.map(i => i.dailyLimit).filter(i => i != undefined)) < 0\r\n                      ? '-'\r\n                      : Math.max(...volumentlimitsData.map(i => i.dailyLimit).filter(i => i != undefined));\r\n                  dObj.dailypurchasedKey =\r\n                    Math.max(...volumentlimitsData.map(i => i.dailypurchased).filter(i => i != undefined)) < 0\r\n                      ? '0.00'\r\n                      : Number(\r\n                          Math.max(\r\n                            ...volumentlimitsData.map(i => i.dailypurchased).filter(i => i != undefined)\r\n                          ).toFixed(2)\r\n                        );\r\n                }\r\n                let mdmCollection = prepareMdmCollection(regionMasterData);\r\n                const sites = Object.keys(mdmCollection['portzoneKey'][dependsOn]);\r\n                if (sites.length > 0) {\r\n                  sites.unshift('All');\r\n                }\r\n                res.status(200).send({\r\n                  siteKey: sites.map(item => ({\r\n                    key: item,\r\n                    value: item\r\n                  })),\r\n                  dailypurchasedKey: dObj.dailypurchasedKey,\r\n                  oldDailylimitKey: dObj.oldDailylimitKey\r\n                });\r\n                \/\/ res.status(200).send({\r\n                \/\/   gradeKey: grades.map(item => ({\r\n                \/\/     key: item,\r\n                \/\/     value: item\r\n                \/\/   }))\r\n                \/\/ });\r\n              });\r\n            })\r\n            .catch(console.log);\r\n        }\r\n      }\r\n      if (serviceKey == 'oldDailylimitKey') {\r\n        if (\r\n          req.body.selectedData.enterlimits.bpRefNo != null &&\r\n          req.body.selectedData.enterlimits.bpRefNo != '' &&\r\n          req.body.selectedData.enterlimits.bpRefNo != undefined &&\r\n          req.body.selectedData.enterlimits.season != null &&\r\n          req.body.selectedData.enterlimits.season != '' &&\r\n          req.body.selectedData.enterlimits.season != undefined &&\r\n          req.body.mdmProcessorServiceKey[0].dependsOn[0] != null &&\r\n          req.body.mdmProcessorServiceKey[0].dependsOn[0] != '' &&\r\n          req.body.mdmProcessorServiceKey[0].dependsOn[0] != undefined &&\r\n          req.body.mdmProcessorServiceKey[0].dependsOn[1] != null &&\r\n          req.body.mdmProcessorServiceKey[0].dependsOn[1] != '' &&\r\n          req.body.mdmProcessorServiceKey[0].dependsOn[1] != undefined &&\r\n          req.body.mdmProcessorServiceKey[0].dependsOn[2][0] != null &&\r\n          req.body.mdmProcessorServiceKey[0].dependsOn[2][0] != '' &&\r\n          req.body.mdmProcessorServiceKey[0].dependsOn[2][0] != undefined &&\r\n          req.body.mdmProcessorServiceKey[0].dependsOn[3][0] != null &&\r\n          req.body.mdmProcessorServiceKey[0].dependsOn[3][0] != '' &&\r\n          req.body.mdmProcessorServiceKey[0].dependsOn[3][0] != undefined\r\n        ) {\r\n          let requetParams = {\r\n            bpRefNo: req.body.selectedData.enterlimits.bpRefNo.split(' @#@ ')[0],\r\n            bpExternalCode: req.body.selectedData.enterlimits.bpRefNo.split(' @#@ ')[3],\r\n            season: req.body.selectedData.enterlimits.season,\r\n            region: req.body.mdmProcessorServiceKey[0].dependsOn[0],\r\n            product: req.body.mdmProcessorServiceKey[0].dependsOn[1],\r\n            quality: req.body.mdmProcessorServiceKey[0].dependsOn[2],\r\n            site: req.body.mdmProcessorServiceKey[0].dependsOn[3]\r\n          };\r\n          let body = {\r\n            includeFields: ['dailyLimit', 'dailypurchased'],\r\n            excludeFields: ['_id'],\r\n            filterData: getFilterData(requetParams)\r\n          };\r\n          connectRegionMasterData;\r\n          getData(connectRegionMasterData)\r\n            .then(regionMasterData => {\r\n              regionMasterData = regionMasterData.filter(\r\n                o => o.region == req.body.mdmProcessorServiceKey[0].dependsOn[0]\r\n              );\r\n              let bodyticket = {\r\n                includeFields: ['quantity'],\r\n                excludeFields: ['_id'],\r\n                filterData: {\r\n                  filter: [\r\n                    {\r\n                      fieldName: 'ticketHandlerBpRefNo',\r\n                      operator: 'eq',\r\n                      value: req.body.selectedData.enterlimits.bpRefNo.split(' @#@ ')[0]\r\n                    },\r\n                    {\r\n                      fieldName: 'ticketHandlerCode',\r\n                      operator: 'eqCaseInsensitive',\r\n                      value: req.body.selectedData.enterlimits.bpRefNo.split(' @#@ ')[3]\r\n                    },\r\n                    {\r\n                      fieldName: 'allocationDate',\r\n                      operator: 'eq',\r\n                      value: `${todayDate}`\r\n                    },\r\n                    {\r\n                      fieldName: 'ticketStatus',\r\n                      operator: 'eq',\r\n                      value: 'Complete'\r\n                    },\r\n                    {\r\n                      fieldName: 'cropYear',\r\n                      operator: 'eq',\r\n                      value: req.body.selectedData.enterlimits.season\r\n                    },\r\n                    {\r\n                      fieldName: 'product',\r\n                      operator: 'eqCaseInsensitive',\r\n                      value: req.body.mdmProcessorServiceKey[0].dependsOn[1]\r\n                    },\r\n                    {\r\n                      fieldName: 'quantity',\r\n                      operator: 'exists',\r\n                      value: true\r\n                    },\r\n                    {\r\n                      fieldName: 'requestType',\r\n                      operator: 'nin',\r\n                      value: ['Offer for warehoused tickets']\r\n                    },\r\n                    {\r\n                      fieldName: 'isparentTicket',\r\n                      operator: 'ne',\r\n                      value: 'Y'\r\n                    },\r\n                    {\r\n                      fieldName: 'pricingOption',\r\n                      operator: 'ne',\r\n                      value: 'Contract'\r\n                    }\r\n                  ]\r\n                }\r\n              };\r\n              if (req.body.mdmProcessorServiceKey[0].dependsOn[2] != 'All')\r\n                bodyticket.filterData.filter.push({\r\n                  fieldName: 'quality',\r\n                  operator: 'in',\r\n                  value: req.body.mdmProcessorServiceKey[0].dependsOn[2]\r\n                });\r\n              if (req.body.mdmProcessorServiceKey[0].dependsOn[3] != 'All')\r\n                bodyticket.filterData.filter.push({\r\n                  fieldName: 'location',\r\n                  operator: 'inCaseInsensitive',\r\n                  value: req.body.mdmProcessorServiceKey[0].dependsOn[3]\r\n                });\r\n              else if (req.body.mdmProcessorServiceKey[0].dependsOn[3] == 'All' && regionMasterData.length > 0) {\r\n                bodyticket.filterData.filter.push({\r\n                  fieldName: 'location',\r\n                  operator: 'inCaseInsensitive',\r\n                  value: regionMasterData.map(o => o.site)\r\n                });\r\n              }\r\n              Promise.all([getData(connectVolumeLimitsData(body)), getData(connectTicketData(bodyticket))])\r\n                .then(result => {\r\n                  const volumelist = result[0];\r\n                  if (volumelist && volumelist.length > 0) {\r\n                    res.status(200).send({\r\n                      oldDailylimitKey:\r\n                        Math.max(...volumelist.map(i => i.dailyLimit).filter(i => i != undefined)) < 0\r\n                          ? '-'\r\n                          : Math.max(...volumelist.map(i => i.dailyLimit).filter(i => i != undefined)),\r\n                      dailypurchasedKey:\r\n                        Math.max(...volumelist.map(i => i.dailypurchased).filter(i => i != undefined)) < 0\r\n                          ? result[1].length > 0\r\n                            ? result[1].reduce((partialSum, a) => partialSum + a.quantity, 0)\r\n                            : '0.00'\r\n                          : Number(\r\n                              Math.max(...volumelist.map(i => i.dailypurchased).filter(i => i != undefined)).toFixed(2)\r\n                            )\r\n                    });\r\n                  } else {\r\n                    res.status(200).send({\r\n                      oldDailylimitKey: '-',\r\n                      dailypurchasedKey:\r\n                        result[1].length > 0 ? result[1].reduce((partialSum, a) => partialSum + a.quantity, 0) : '0.00'\r\n                    });\r\n                  }\r\n                })\r\n                .catch(err => {\r\n                  res.status(200).send({\r\n                    oldDailylimitKey: '-',\r\n                    dailypurchasedKey: '0.00'\r\n                  });\r\n                });\r\n            })\r\n            .catch(err => {\r\n              res.status(200).send({\r\n                oldDailylimitKey: '-',\r\n                dailypurchasedKey: '0.00'\r\n              });\r\n            });\r\n        } else {\r\n          res.status(200).send({\r\n            oldDailylimitKey: '-',\r\n            dailypurchasedKey: '0.00'\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      bpList\r\n        .then(bpResolver => {\r\n          getData(connectSeasonMasterData)\r\n            .then(seasonsres => {\r\n              let data = {};\r\n              let mdmSeasonMasterCollection = prepareMdmCollection(seasonsres);\r\n              let bpRefMasterData = Object.keys(mdmSeasonMasterCollection['harvestSeasonKey']);\r\n              let mdmData = bpResolver(\r\n                seasonsres.filter(\r\n                  i =>\r\n                    (i.currentSeason != undefined && i.currentSeason != null && i.currentSeason != '') ||\r\n                    (i.previousSeason != undefined && i.previousSeason != null && i.previousSeason != '')\r\n                )\r\n              );\r\n              data[serviceKey] = mdmData;\r\n              data['harvestSeasonKey'] = Object.keys(mdmSeasonMasterCollection['harvestSeasonKey']).map(item => ({\r\n                key: item,\r\n                value: item\r\n              }));\r\n\r\n              getData(connectRegionMasterData)\r\n                .then(regionMasterData => {\r\n                  let mdmCollection = prepareMdmCollection(regionMasterData);\r\n                  data['portzoneKey'] = Object.keys(mdmCollection['portzoneKey']).map(item => ({\r\n                    key: item,\r\n                    value: item\r\n                  }));\r\n                  getData(connectProductMasterData)\r\n                    .then(productMasterData => {\r\n                      let mdmCollection = prepareMdmCollection(productMasterData);\r\n                      data['commodityKey'] = Object.keys(mdmCollection['commodityKey']).sort().map(item => ({\r\n                        key: item,\r\n                        value: item\r\n                      }));\r\n                      res.status(200).send(data);\r\n                    })\r\n                    .catch(console.log);\r\n                })\r\n                .catch(console.log);\r\n            })\r\n            .catch(console.log);\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          res.status(200).send({\r\n            [serviceKey]: []\r\n          });\r\n        });\r\n    }",
  "sys__UUID": "37b2cf15-cca1-489b-80b6-9f0c1f2b7c57"
}
