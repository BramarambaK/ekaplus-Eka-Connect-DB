{
  "_id": "contractrequesteditdetailsmdm_processor",
  "name": "contractrequesteditdetailsmdm_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "req.body.mdmProcessorServiceKey = JSON.parse(req.body.mdmProcessorServiceKey);\r\n    var objData = req.body.selectedData.data;\r\n    var cityNameKey = req.body.mdmProcessorServiceKey[0].serviceKey;\r\n    const spFromKey = req.body.mdmProcessorServiceKey[req.body.mdmProcessorServiceKey.length == 6 ? 1 : 0].serviceKey;\r\n    const spToKey = req.body.mdmProcessorServiceKey[req.body.mdmProcessorServiceKey.length == 6 ? 2 : 1].serviceKey;\r\n    var disableKey =\r\n      req.body.mdmProcessorServiceKey.length == 6\r\n        ? req.body.mdmProcessorServiceKey[3].serviceKey\r\n        : req.body.mdmProcessorServiceKey[2].serviceKey;\r\n    const shipmentFrom = moment(\r\n      spFromKey == 'spEditFromAmendKey' ? objData.amendedShipmentFrom : objData.shipmentPeriodFrom\r\n    ).format('MMM YYYY');\r\n    const shipmentTo = moment(\r\n      spToKey == 'spEditToAmendKey' ? objData.amendedShipmentTo : objData.shipmentPeriodTo\r\n    ).format('MMM YYYY');\r\n    var spFromArray = [{ key: shipmentFrom, value: shipmentFrom }];\r\n    var spToArray = [{ key: shipmentTo, value: shipmentTo }];\r\n    spFromArray.push({\r\n      key: moment(shipmentFrom)\r\n        .add(-1, 'months')\r\n        .format('MMM YYYY'),\r\n      value: moment(shipmentFrom)\r\n        .add(-1, 'months')\r\n        .format('MMM YYYY')\r\n    });\r\n    spToArray.push({\r\n      key: moment(shipmentTo)\r\n        .add(1, 'months')\r\n        .format('MMM YYYY'),\r\n      value: moment(shipmentTo)\r\n        .add(1, 'months')\r\n        .format('MMM YYYY')\r\n    });\r\n    var elasticdata = [];\r\n    function getData(requestBody) {\r\n      return new Promise(function(resolve, reject) {\r\n        request(requestBody, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    const connectElasticData = workflowTask => ({\r\n      method: 'POST',\r\n      url: req.body.propertyList.eka_connect_host + `\/workflow\/data\/`,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['X-TenantID']\r\n      },\r\n      body: {\r\n        appId: req.body.appId,\r\n        workFlowTask: workflowTask,\r\n        sD: [],\r\n        payLoadData: '',\r\n        params: {},\r\n        qP: {\r\n          from: 0,\r\n          size: 10000\r\n        }\r\n      },\r\n      json: true\r\n    });\r\n\r\n    const getLocationGroupsNew = city =>\r\n      new Promise((resolve, reject) => {\r\n        if (city) {\r\n          const values = connectElasticData('locationsQueryElastic');\r\n          getData(values)\r\n            .then(locationData => {\r\n              elasticdata = locationData;\r\n              const result = locationData.data.filter(\r\n                pzdetails => pzdetails['locationcityname'] === city && pzdetails['source'] === 'EKA'\r\n              );\r\n              if (result.length > 0) {\r\n                for (var i = 0; i < result.length; i++) {\r\n                  if (\r\n                    result[i]['locgrouptype'].toLowerCase() == 'port zone' ||\r\n                    result[i]['locgrouptype'].toLowerCase() == 'delivery zone'\r\n                  ) {\r\n                    resolve({\r\n                      isPortZone: true,\r\n                      portZoneName: result[i]['locationgroupname']\r\n                    });\r\n                    return;\r\n                  }\r\n                }\r\n                resolve({\r\n                  isPortZone: false,\r\n                  cityName: result[0]['locationcityname']\r\n                });\r\n              } else {\r\n                reject('No Portzone name found');\r\n              }\r\n            })\r\n            .catch(err => {\r\n              console.error(err);\r\n              reject('No Portzone name found');\r\n            });\r\n        }\r\n      });\r\n\r\n    const getListOfCities = portZoneName => {\r\n      let result = elasticdata.data.filter(\r\n        details =>\r\n          details['locationgroupname'] === portZoneName &&\r\n          details['source'] === 'EKA' &&\r\n          details['locationreftypeid'].toLowerCase() == 'storage location'\r\n      );\r\n      return result.reduce((acc, curr) => {\r\n        acc.push(curr['locationcityname']);\r\n        return acc;\r\n      }, []);\r\n    };\r\n\r\n    const getCities = city =>\r\n      new Promise((resolve, reject) => {\r\n        getLocationGroupsNew(city)\r\n          .then(locationGroups => {\r\n            if (locationGroups.isPortZone) {\r\n              let listofCities = getListOfCities(locationGroups.portZoneName);\r\n              resolve([...new Set(listofCities)].map(i => ({ key: i, value: i })));\r\n            } else {\r\n              resolve([{ key: locationGroups.cityName, value: locationGroups.cityName }]);\r\n            }\r\n          })\r\n          .catch(err => {\r\n            console.error(err);\r\n            resolve([{ key: city, value: city }]);\r\n            \/\/ reject(err);\r\n          });\r\n      });\r\n\r\n    const currDate = moment(new Date()).format('MM-YYYY');\r\n    let disableDeliveryKey;\r\n    if (currDate < moment(objData.amendedShipmentFrom).format('MM-YYYY')) {\r\n      disableDeliveryKey = false;\r\n    } else {\r\n      disableDeliveryKey = true;\r\n    }\r\n\r\n    if(objData.shipmentPeriodFrom && currDate >= moment(objData.shipmentPeriodFrom).format('MM-YYYY') && !objData.amendedShipmentFrom) {\r\n      spFromArray.pop();\r\n    }\r\n    if(objData.amendedShipmentFrom && currDate >= moment(objData.amendedShipmentFrom).format('MM-YYYY')) {\r\n      spFromArray.pop();\r\n    }\r\n    var locationCity = objData.amendedCity;\r\n    if (req.body.mdmProcessorServiceKey.length == 6) {\r\n      if(objData.dischargeLocationType != 'Storage Location' && objData.deliveryLocationGroupName) {\r\n        let deliveryGroupName = [\r\n          {\r\n            key: locationCity,\r\n            value: locationCity\r\n          }\r\n        ];\r\n        res.status(200).send({\r\n          [spFromKey]: spFromArray,\r\n          [spToKey]: spToArray,\r\n          [cityNameKey]: deliveryGroupName,\r\n          [disableKey]: disableDeliveryKey\r\n        });\r\n      } else {\r\n        getCities(locationCity)\r\n        .then(names => {\r\n          res.status(200).send({\r\n            [spFromKey]: spFromArray,\r\n            [spToKey]: spToArray,\r\n            [cityNameKey]: names,\r\n            [disableKey]: disableDeliveryKey\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n          res.status(200).send({\r\n            [spFromKey]: [],\r\n            [spToKey]: [],\r\n            [cityNameKey]: [],\r\n            [disableKey]: []\r\n          });\r\n        });\r\n      }\r\n    } else {\r\n      res.status(200).send({ [spFromKey]: spFromArray, [spToKey]: spToArray, [disableKey]: disableDeliveryKey });\r\n    }",
  "sys__UUID": "2f707092-6494-418c-9c96-c05bada6a18a"
}
