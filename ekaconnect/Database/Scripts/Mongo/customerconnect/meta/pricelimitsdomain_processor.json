{
  "_id": "pricelimitsdomain_processor",
  "name": "pricelimitsdomain_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const appId = '12325a98-a959-4939-9005-4158d136afcd';\r\nconst pricesObjId = 'ab3fc628-ecbc-43e0-81cb-aa2d5b6e5c40';\r\nconst tonnageObjId = 'c98119db-1f7c-4802-b72a-6678f1ecc0f3';\r\nconst today = moment(moment().format('YYYY-MM-DD HH:mm'), 'YYYY-MM-DD HH:mm');\r\nconst tenant = req.headers['x-tenantid'];\r\nconst serverTimezoneOffset = new Date().getTimezoneOffset();\r\nvar taskId = req.body.taskId;\r\nconst requestID = req.headers.requestid;\r\nlet startRequest = new Date().getTime();\r\nconst getObjectUri = (id) =>\r\n  `${req.body.propertyList.eka_connect_host}/data/${appId}/${id}`;\r\nconst getData = (url, getDataBody) =>\r\n  new Promise(function (resolve, reject) {\r\n    console.log('url', url);\r\n    console.log('body', JSON.stringify(getDataBody));\r\n    request(\r\n      {\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': tenant,\r\n        },\r\n        body: getDataBody,\r\n        json: true,\r\n      },\r\n      function (err, response, body) {\r\n        if (\r\n          response &&\r\n          response.statusCode >= 200 &&\r\n          response.statusCode <= 299\r\n        ) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      }\r\n    );\r\n  });\r\nconst connectMaster = {\r\n  method: 'GET',\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    `/data/12325a98-a959-4939-9005-4158d136afcd/1f3e680b-f3dd-418a-8fd4-888e38714cc3`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n  },\r\n  json: true,\r\n};\r\nfunction get_masterData() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(connectMaster, function (error, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nconst priceStatus = (price) => {\r\n  const start = moment(\r\n    price.startDate + ' ' + price.startTime,\r\n    'YYYY-MM-DD HH:mm'\r\n  );\r\n  const end = moment(price.endDate + ' ' + price.endTime, 'YYYY-MM-DD HH:mm');\r\n  const offset = price.clientTimezoneOffset\r\n    ? price.clientTimezoneOffset - serverTimezoneOffset\r\n    : 0;\r\n  start.add(offset, 'minutes');\r\n  end.add(offset, 'minutes');\r\n\r\n  let status = price.status || '';\r\n  if (status != 'Expired') {\r\n    if (moment(start).isValid() && moment(end).isValid()) {\r\n      if (\r\n        moment(end).isSameOrAfter(today) &&\r\n        moment(start).isSameOrBefore(today)\r\n      ) {\r\n        status = 'Active';\r\n      }\r\n      if (moment(start).isAfter(today) && moment(end).isAfter(today)) {\r\n        status = 'Scheduled';\r\n      }\r\n      if (moment(start).isBefore(today) && moment(end).isBefore(today)) {\r\n        status = 'Expired';\r\n      }\r\n    }\r\n  }\r\n\r\n  return status;\r\n};\r\n\r\nconst tonnageStatus = (tonnage, masterData) => {\r\n  const _masterData = masterData.filter(\r\n    (d) =>\r\n      d.bpRefNo == tonnage.bpRefNo && d.bpExternalCode == tonnage.bpExternalCode\r\n  );\r\n  if (_masterData.find((i) => i.currentSeason == tonnage.season)) {\r\n    return 'Y';\r\n  }\r\n  if (_masterData.find((i) => i.previousSeason == tonnage.season)) {\r\n    return 'N';\r\n  }\r\n  return null;\r\n};\r\nconst matchingPrice = (tonnage, prices, status) =>\r\n  prices.find(\r\n    (i) =>\r\n      i.bpRefNo == tonnage.bpRefNo &&\r\n      i.bpExternalCode == tonnage.bpExternalCode &&\r\n      i.season == tonnage.season &&\r\n      i.region == tonnage.region &&\r\n      i.product == tonnage.product &&\r\n      (i.quality == tonnage.quality || tonnage.quality == 'All') &&\r\n      (i.site == tonnage.site || tonnage.site == 'All') &&\r\n      i.status == status\r\n  );\r\n\r\nconst getPrices = (bpList) => {\r\n  return new Promise((resolve, reject) => {\r\n    var body = {\r\n      filterData: {\r\n        filter: [\r\n          {\r\n            fieldName: 'bpRefNo',\r\n            operator: 'in',\r\n            value: bpList.map((e) => e.bpRefNo),\r\n          },\r\n          {\r\n            fieldName: 'status',\r\n            operator: 'ne',\r\n            value: 'Expired',\r\n          },\r\n          {\r\n            \"fieldName\": \"endDateTime\",\r\n            \"operator\": \"gte\",\r\n            \"value\": today.utc().format('YYYY-MM-DDT00:00:00Z'),\r\n          }\r\n        ],\r\n      },\r\n    };\r\n    if (bpList[0].bpExternalCode) {\r\n      body.filterData.filter.push({\r\n        fieldName: 'bpExternalCode',\r\n        operator: 'inCaseInsensitive',\r\n        value: bpList.map((e) => e.bpExternalCode),\r\n      });\r\n    }\r\n    startRequest = new Date().getTime();\r\n    getData(getObjectUri(pricesObjId), body)\r\n      .then((price) => {\r\n        console.log(`REQ ID: ${requestID}>>>>>>>>>>getPrices method >>>-${new Date().getTime()-startRequest}`);\r\n        resolve(\r\n          price.map((i) => ({\r\n            ...i,\r\n            status: priceStatus(i),\r\n            type: 'price',\r\n            quantityUnit: 'MT',\r\n          }))\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        reject('Error when fetching price');\r\n      });\r\n  });\r\n};\r\n\r\nconst getTonnage = (bpList) => {\r\n  return new Promise((resolve, reject) => {\r\n    var body = {\r\n      filterData: {\r\n        filter: [\r\n          {\r\n            fieldName: 'bpRefNo',\r\n            operator: 'in',\r\n            value: bpList.map((e) => e.bpRefNo),\r\n          },\r\n        ],\r\n      },\r\n    };\r\n    if (bpList[0].bpExternalCode) {\r\n      body.filterData.filter.push({\r\n        fieldName: 'bpExternalCode',\r\n        operator: 'inCaseInsensitive',\r\n        value: bpList.map((e) => e.bpExternalCode),\r\n      });\r\n    }\r\n    let startRequest = new Date().getTime();\r\n    get_masterData()\r\n      .then((data) => {\r\n        console.log(`REQ ID: ${requestID}>>>>>>>>>>get_masterData method >>>-${new Date().getTime()-startRequest}`);\r\n        startRequest = new Date().getTime();\r\n        getData(getObjectUri(tonnageObjId), body)\r\n          .then((tonnage) => {\r\n            console.log(`REQ ID: ${requestID}>>>>>>>>>>getTonnage method >>>-${new Date().getTime()-startRequest}`);\r\n            resolve(\r\n              tonnage\r\n                .map((i) => ({\r\n                  ...i,\r\n                  type: 'tonnage',\r\n                  active: tonnageStatus(i, data),\r\n                  quantityUnit: 'MT',\r\n                }))\r\n                .filter((i) => i.active != null && i.active != '')\r\n            );\r\n          })\r\n          .catch((err) => {\r\n            reject('Error when fetching tonnage');\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        reject('Error when fetching tonnage');\r\n      });\r\n  });\r\n};\r\n// .catch((err)=>{\r\n//     reject('Error when fetching tonnage');\r\n// })\r\n\r\nconst userInfo =\r\n  req.body.propertyList.eka_connect_host + '/api/getbpuserinfo';\r\nconst getCollectionMapper = (config) =>\r\n  new Promise((resolve, reject) => {\r\n    const r = {\r\n      method: 'POST',\r\n      url: `${req.body.propertyList.eka_connect_host}/collectionmapper/${config.appId}/${config.objectId}/fetchCollectionRecords`,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        ttl: 600,\r\n        'X-TenantID': config.tenant,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: {\r\n        collectionName: config.collectionName,\r\n      },\r\n      json: true,\r\n    };\r\n    request(r, (err, response, body) => {\r\n      if (\r\n        response &&\r\n        response.statusCode >= 200 &&\r\n        response.statusCode <= 299\r\n      ) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\nconst subGroupMaster = {\r\n  appId: appId,\r\n  objectId:\r\n    'd59b8c10-8c94-4b87-a430-f6fd69888a37' /* not at all relevant object id */,\r\n  collectionName: 'BP Sub Group Setup',\r\n  tenant: tenant,\r\n};\r\nconst subGroupCode = (userDetails) =>\r\n  new Promise((resolve, reject) =>\r\n    {\r\n    startRequest = new Date().getTime();\r\n    getCollectionMapper(subGroupMaster)\r\n      .then((result) => {\r\n        console.log(`REQ ID: ${requestID}>>>>>>>>>>getCollectionMapper method >>>-${new Date().getTime()-startRequest}`);\r\n        if (result && Array.isArray(result)) {\r\n          const config = result.find(\r\n            (i) => i.Workflow == taskId && i.UserType == userDetails.customerType\r\n          );\r\n\r\n          if (config) {\r\n            resolve(config.SubGroupCode);\r\n          } else {\r\n            console.log(\r\n              `Sub group configuration not found for ${taskId} and ${userDetails.customerType}. Defaulting to not applicable.`\r\n            );\r\n            resolve(null);\r\n          }\r\n        } else {\r\n          reject('Sub group configuration is missing');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      })}\r\n  );\r\n\r\nconst bpList = new Promise((resolve, reject) => {\r\n    startRequest = new Date().getTime();\r\n  getData(userInfo, null)\r\n    .then((t) => {\r\n      const userDetails = t.data;\r\n      console.log(`REQ ID: ${requestID}>>>>>>>>>>userInfo method >>>-${new Date().getTime()-startRequest}`);\r\n      if (userDetails.BusinessPartyDetails) {\r\n        startRequest = new Date().getTime();\r\n        subGroupCode(userDetails)\r\n          .then((code) => {\r\n            console.log(`REQ ID: ${requestID}>>>>>>>>>>subGroupCode method >>>-${new Date().getTime()-startRequest}`);\r\n            let bpResolver;\r\n            if (code) {\r\n              // bpResolver = (masterdata) =>\r\n              bpResolver = userDetails.BusinessPartyDetails\r\n                // .filter((bp) =>masterdata.includes(bp.refNo)\r\n                // )\r\n                .reduce((acc, bp) => {\r\n                  if (bp.subGroup && bp.subGroup.length > 0) {\r\n                    const subGroup = bp.subGroup.filter(\r\n                      (i) =>\r\n                        i.code && i.code.toLowerCase() == code.toLowerCase()\r\n                    );\r\n                    if (subGroup && subGroup.length > 0) {\r\n                      for(let n in subGroup){\r\n                        acc.push({\r\n                          bpRefNo: `${bp.refNo}`, // @#@ ${bp.name} @#@ ${subGroup.name} @#@ ${subGroup.refNo}`,\r\n                          bpExternalCode: `${subGroup[n].refNo}`, //``${bp.name} - ${bp.refNo} - ${subGroup.name}`,\r\n                        });\r\n                      }\r\n                    }\r\n                  }\r\n                  return acc;\r\n                }, []);\r\n            } else {\r\n              // bpResolver = (masterdata) =>\r\n              bpResolver = userDetails.BusinessPartyDetails\r\n                // .filter((bp) =>\r\n                //   masterdata.includes(bp.refNo)\r\n                // )\r\n                .map((bp) => ({\r\n                  bpRefNo: `${bp.refNo}`, // @#@ ${bp.name}`,\r\n                }));\r\n            }\r\n            // console.log(bpResolver(''));\r\n            resolve(bpResolver);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      } else {\r\n        reject('BusinessPartyDetails missing in user details.');\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      reject(err);\r\n    });\r\n});\r\n\r\nbpList\r\n  .then((bpListResponse) => {\r\n    startRequest = new Date().getTime();\r\n    Promise.all([getPrices(bpListResponse), getTonnage(bpListResponse)])\r\n      .then((arr) => {\r\n        console.log(`REQ ID: ${requestID}>>>>>>>>>>IMEDIATE RESPOSE pricelimitsdomain_processor >>>`+(new Date().getTime() - startRequest));\r\n        let prices = arr[0];\r\n        let tonnages = arr[1];\r\n        console.log(`REQ ID: ${requestID}>>>>>>>>>>PRICEs COUNT pricelimitsdomain_processor >>>`+prices.length);\r\n        console.log(`REQ ID: ${requestID}>>>>>>>>>>TONNAGEs COUNT pricelimitsdomain_processor >>>`+tonnages.length);\r\n        tonnages.forEach((tonnage) => {\r\n          const activePrice = matchingPrice(tonnage, prices, 'Active');\r\n          const expiredPrice = matchingPrice(tonnage, prices, 'Expired');\r\n          if (activePrice || expiredPrice) {\r\n            if (activePrice) {\r\n              tonnage['priceStatus'] =\r\n                activePrice.status == 'Active' &&\r\n                (activePrice.purchased == undefined\r\n                  ? 0\r\n                  : activePrice.purchased) <\r\n                  (tonnage.dailyLimit == undefined ? 0 : tonnage.dailyLimit)\r\n                  ? 'Active'\r\n                  : activePrice.status == 'Scheduled'\r\n                  ? activePrice.status\r\n                  : 'Expired';\r\n              tonnage['purchased'] = activePrice.purchased;\r\n              tonnage['price'] = activePrice.price;\r\n              tonnage['priceMatch'] = true;\r\n            } else if (expiredPrice) {\r\n              tonnage['priceStatus'] =\r\n                expiredPrice.status == 'Active' &&\r\n                (expiredPrice.purchased == undefined\r\n                  ? 0\r\n                  : expiredPrice.purchased) <\r\n                  (tonnage.dailyLimit == undefined ? 0 : tonnage.dailyLimit)\r\n                  ? 'Active'\r\n                  : expiredPrice.status == 'Scheduled'\r\n                  ? expiredPrice.status\r\n                  : 'Expired';\r\n              tonnage['purchased'] = expiredPrice.purchased;\r\n              tonnage['price'] = expiredPrice.price;\r\n              tonnage['priceMatch'] = true;\r\n            } else {\r\n              tonnage['priceMatch'] = false;\r\n            }\r\n          } else {\r\n            tonnage['priceMatch'] = false;\r\n          }\r\n        });\r\n        console.log('>>>>>>>>>>>>>>>>>>>>>pricelimitsdomain_processor'+(new Date().getTime() - startRequest));\r\n        res.status(200).send([...prices, ...tonnages]);\r\n      })\r\n      .catch((err) => {\r\n        console.log(`REQ ID: ${requestID}>>>>>>>>>>CATCH BLOCK-[prices,tonnages] pricelimitsdomain_processor >>>`,err);\r\n        console.log(err);\r\n        res.status(500).send(err);\r\n      });\r\n  })\r\n  .catch((err) => {\r\n    console.log(`REQ ID: ${requestID}>>>>>>>>>>CATCH bpList pricelimitsdomain_processor >>>`,err);\r\n    console.log(err);\r\n    res.status(500).send(err);\r\n  });",
  "sys__UUID": "0cf1a6f1-0e3e-4e3b-8103-c19ce67d6221"
}
