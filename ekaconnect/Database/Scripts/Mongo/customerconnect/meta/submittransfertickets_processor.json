{
  "_id": "submittransfertickets_processor",
  "name": "submittransfertickets_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": " const send = (status, message) => res.status(status).send(message);\r\n    const userData = {};\r\n\r\n    const url = req.body.propertyList.eka_connect_host + '/api/getbpuserinfo';\r\n    const wholeData = req.body.submittickettransfercomposite;\r\n    const bpName = wholeData.selectedtickets[0].bpName;\r\n    const bpRefNo = wholeData.selectedtickets[0].bpRefNo;\r\n    let getInfo = () => {\r\n      const user = {\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['X-TenantID']\r\n        },\r\n        json: true\r\n      };\r\n      getData(user).then(userinfo => {\r\n        userData['firstName'] = userinfo.data.firstName;\r\n        userData['lastName'] = userinfo.data.lastName;\r\n        submitTransferTicket(wholeData);\r\n      });\r\n    };\r\n\r\n    const appId = req.body.appId;\r\n\r\n    const requestBody = {\r\n      workflowTaskName: 'EXTERNAL_GCS_TICKET_TRANSFER_API',\r\n      task: 'EXTERNAL_GCS_TICKET_TRANSFER_API',\r\n      appId: appId,\r\n      output: {\r\n        EXTERNAL_GCS_TICKET_TRANSFER_API: []\r\n      }\r\n    };\r\n    getInfo();\r\n    function submitTransferTicket(data) {\r\n      let ngrList = data.submittickettransfertableview.map(i => {\r\n        return {\r\n          transferQuantity: i.transferquantity,\r\n          newBpRefNo: i.ngr\r\n        };\r\n      });\r\n      let arr = data.selectedtickets.map(item => {\r\n        return {\r\n          cropYear: item.cropYear,\r\n          ticketRefNo: item.ticketRefNo,\r\n          requestedBy: userData.firstName,\r\n          splits: ngrList\r\n        };\r\n      });\r\n      requestBody.output.EXTERNAL_GCS_TICKET_TRANSFER_API = arr;\r\n\r\n      let apiBody = getRequestBodyPostMethod(req.body.propertyList.eka_connect_host + '/workflow', requestBody);\r\n      getData(apiBody)\r\n        .then(data => {\r\n          if (data.data.Status == 200) {\r\n            const msgs = JSON.parse(data.data.StatusMessage);\r\n            const dataTosend = [];\r\n            const failedTickets = msgs.filter(item => item.status == 400);\r\n            const successTickets = msgs.filter(item => item.status == 200);\r\n            if (failedTickets.length > 0) {\r\n              if (failedTickets.length == msgs.length) {\r\n                send(500, 'This request cannot be actioned at this time. Please try again later.');\r\n              } else {\r\n                const faillist = getSuccessOrFailedList(wholeData.selectedtickets, failedTickets);\r\n                const failedObj = handlePartialFailedTickets(faillist, 'Failed');\r\n                const successlist = getSuccessOrFailedList(wholeData.selectedtickets, successTickets);\r\n                const succeedObj = handlePartialFailedTickets(successlist, 'Approved');\r\n                dataTosend.push(failedObj);\r\n                dataTosend.push(succeedObj);\r\n                updateElastic(dataTosend);\r\n              }\r\n            } else {\r\n              const allSuccess = getSuccessOrFailedList(wholeData.selectedtickets, msgs);\r\n              const succeedObj = handlePartialFailedTickets(allSuccess, 'Approved');\r\n              dataTosend.push(succeedObj);\r\n              updateElastic(dataTosend);\r\n            }\r\n          } else {\r\n            console.log(response);\r\n            send(500, 'Request cannot be approved, please contact system admin');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          send(400, {\r\n            errorCode: err.Status,\r\n            errorMessage: 'The request cannot be created at this moment.',\r\n            errorContext: 'This is null',\r\n            errorLocalizedMessage: 'The request cannot be created at this moment.'\r\n          });\r\n        });\r\n    }\r\n    const getSuccessOrFailedList = (selectTickets, dataToFilter) => {\r\n      const result = selectTickets.filter(item => {\r\n        return dataToFilter.find(t => t.ticketRefNo == item.ticketRefNo);\r\n      });\r\n      return result;\r\n    };\r\n    const handlePartialFailedTickets = (responeTickets, status) => {\r\n      const cropYear = responeTickets[0].cropYear;\r\n      const location = responeTickets[0].location;\r\n      const selectNGRList = wholeData.submittickettransfertableview;\r\n      const userType = responeTickets[0].userType;\r\n      const ticketStatus = responeTickets[0].ticketStatus;\r\n      const quantityUnit = responeTickets[0].quantityUnit;\r\n      const bulkHandler = responeTickets[0].bulkHandler;\r\n      const ticketStrings = {\r\n        ticketRefNo: '',\r\n        product: '',\r\n        quality: '',\r\n        quantity: 0\r\n      };\r\n      responeTickets.forEach(item => {\r\n        ticketStrings.ticketRefNo = ticketStrings.ticketRefNo + item.ticketRefNo + ' ';\r\n        ticketStrings.product = ticketStrings.product + item.product + ' ';\r\n        ticketStrings.quality = ticketStrings.quality + item.quality + ' ';\r\n        ticketStrings.quantity = ticketStrings.quantity + item.quantity;\r\n      });\r\n      return {\r\n        requestType: 'Transfer',\r\n        requestBy: userData['firstName'] + ' ' + userData['lastName'],\r\n        bpRefNo: bpRefNo,\r\n        bpName: bpName,\r\n        ticketRefNo: ticketStrings.ticketRefNo,\r\n        product: ticketStrings.product,\r\n        quality: ticketStrings.quality,\r\n        quantity: ticketStrings.quantity,\r\n        cropYear: cropYear,\r\n        location: location,\r\n        requestStatus: status,\r\n        userType: userType,\r\n        ticketStatus: ticketStatus,\r\n        quantityUnit: quantityUnit,\r\n        bulkHandler: bulkHandler,\r\n        requestedDate: moment(new Date()).format('DD-MM-YYYY'),\r\n        isRequestedByEkaCCSystem: true,\r\n        selectedTicketList: responeTickets,\r\n        selectNGRList: selectNGRList\r\n      };\r\n    };\r\n    const updateElastic = dataTosend => {\r\n      const requestBody = {\r\n        workflowTaskName: 'elastic_updateTicket_addRequestId_internal',\r\n        task: 'elastic_updateTicket_addRequestId_internal',\r\n        appId: appId,\r\n        appName: 'customerconnect',\r\n        output: {\r\n          elastic_updateTicket_addRequestId_internal: []\r\n        }\r\n      };\r\n      requestBody.output.elastic_updateTicket_addRequestId_internal = dataTosend;\r\n      let apiBody = getRequestBodyPostMethod(req.body.propertyList.eka_connect_host + '/workflow', requestBody);\r\n      // console.log(JSON.stringify(apiBody.body));\r\n      getData(apiBody)\r\n        .then(res => {\r\n          send(200, {\r\n            successCode: 200,\r\n            tabIndex: 0,\r\n            requestId: res.data.map(item => item.requestId).join(','),\r\n            successMessage: 'Request has been successfully sent.',\r\n            successContext: 'This is null',\r\n            successLocalizedMessage: 'Request has been successfully sent.'\r\n          });\r\n        })\r\n        .catch(error => {\r\n          console.log(JSON.stringify(error));\r\n          send(500, 'Request cannot be approved, please contact system admin');\r\n        });\r\n    };\r\n\r\n    const getRequestBodyPostMethod = (url, obj) => ({\r\n      method: 'POST',\r\n      url,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['X-TenantID']\r\n      },\r\n      json: true,\r\n      body: obj\r\n    });\r\n\r\n    function getData(requestBody) {\r\n      return new Promise(function(resolve, reject) {\r\n        request(requestBody, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }",
  "sys__UUID": "ce675d0a-e0f0-4f17-936d-813b8b2252c7"
}
