{
  "_id": "validate_searched_tickets_offer_processor",
  "name": "validate_searched_tickets_offer_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "sys__UUID": "1daa3a38-a7e1-41ca-9c85-bc691841409c",
  "snippet": "const tenant = req.headers['X-TenantID'];\r\n\r\n  const getSearchedValue = body =>\r\n    new Promise(function(resolve, reject) {\r\n      request(\r\n        {\r\n          method: 'GET',\r\n          url:\r\n            req.body.propertyList.eka_connect_host +\r\n            '/data/12325a98-a959-4939-9005-4158d136afcd/a26737b3-a5a9-4fe9-b6f7-29218a3bc45a',\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            'X-TenantID': tenant,\r\n            requestid: req.headers['requestid'] + '-processor'\r\n          },\r\n          body,\r\n          json: true\r\n        },\r\n        function(err, response, body) {\r\n          if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  const send = (status, message) => res.status(status).send(message);\r\n  const sendError = (message, field) =>\r\n    res.status(400).send({\r\n      rrorCode: '004',\r\n      errorMessage: message,\r\n      errorContext: null,\r\n      errorLocalizedMessage: message,\r\n      errors: [\r\n        {\r\n          errorCode: '004',\r\n          errorMessage: message,\r\n          errorContext: `{field:${field}}`,\r\n          errorLocalizedMessage: message,\r\n          errors: null\r\n        }\r\n      ]\r\n    });\r\n\r\n  const commonMessage = 'Entry errors identified. Please review your inputs.';\r\n  const invalidMessages = [\r\n    {\r\n      key: 'offerBpRefNo',\r\n      message: `Please choose a NGR`\r\n    },\r\n    {\r\n      key: 'offerLocation',\r\n      message: `Please choose the site`\r\n    },\r\n    {\r\n      key: 'offerProduct',\r\n      message: `Please choose the commodity`\r\n    },\r\n    {\r\n      key: 'offerQuality',\r\n      message: `Please choose the grade`\r\n    },\r\n    {\r\n      key: 'offerCropYear',\r\n      message: `Please choose the season`\r\n    },\r\n    {\r\n      key: 'offersustainable',\r\n      message: `Please select the sustainable`\r\n    },\r\n    {\r\n      key: 'offerPrice',\r\n      message: `Please enter the offer price`\r\n    },\r\n    {\r\n      key: 'offerExpiryDate',\r\n      message: `Please select the offer expiry date`\r\n    }\r\n  ];\r\n\r\n  const enteredData = {\r\n    offerBpRefNo: req.body.offerBpRefNo,\r\n    offerLocation: req.body.offerLocation,\r\n    offerProduct: req.body.offerProduct,\r\n    offerQuality: req.body.offerQuality,\r\n    offerCropYear: req.body.offerCropYear,\r\n    offerPrice: req.body.offerPrice,\r\n    offerExpiryDate: req.body.offerExpiryDate,\r\n    offersustainable: req.body.offersustainable\r\n  };\r\n\r\n  try {\r\n    if (Object.values(enteredData).length > 0) {\r\n      for (let i in enteredData) {\r\n        if (enteredData[i] === null || enteredData[i] === '' || enteredData[i] === undefined) {\r\n          const msg = invalidMessages.find(x => x.key === i);\r\n          return sendError(msg.message, msg.key);\r\n        }\r\n      }\r\n\r\n      let filterBody = {\r\n        filterData: {\r\n          filter: [\r\n            {\r\n              fieldName: 'bpRefNo',\r\n              value: req.body.offerBpRefNo.split(' - ')[0],\r\n              operator: 'eq'\r\n            },\r\n            {\r\n              fieldName: 'location',\r\n              value: enteredData.offerLocation,\r\n              operator: 'eq'\r\n            },\r\n            {\r\n              fieldName: 'product',\r\n              value: enteredData.offerProduct,\r\n              operator: 'eq'\r\n            },\r\n            {\r\n              fieldName: 'quality',\r\n              value: enteredData.offerQuality,\r\n              operator: 'eq'\r\n            },\r\n            {\r\n              fieldName: 'cropYear',\r\n              value: enteredData.offerCropYear,\r\n              operator: 'eq'\r\n            },\r\n            {\r\n              fieldName: 'isparentTicket',\r\n              value: 'Y',\r\n              operator: 'ne'\r\n            },\r\n            {\r\n              fieldName: 'ticketStatus',\r\n              value: 'Warehoused',\r\n              operator: 'eq'\r\n            }\r\n          ]\r\n        }\r\n      };\r\n\r\n      getSearchedValue(filterBody)\r\n        .then(searchedData => {\r\n          if (searchedData.length > 0) {\r\n            const reducedData = searchedData.reduce(\r\n              (acc, curr) => {\r\n                acc.totalQuantity += parseFloat(curr.quantity);\r\n                return acc;\r\n              },\r\n              {\r\n                totalQuantity: 0\r\n              }\r\n            );\r\n\r\n            const requiredData = searchedData.map(element => ({\r\n              ...element,\r\n              bpRefNo: req.body.offerBpRefNo.split(' - ')[0],\r\n              bpName: req.body.offerBpRefNo.split(' - ')[1],\r\n              totalQuantity: reducedData.totalQuantity,\r\n              offerPrice: req.body.offerPrice,\r\n              offerExpiryDate: req.body.offerExpiryDate,\r\n              offersustainable: req.body.offersustainable\r\n            }));\r\n            send(200, requiredData);\r\n          } else {\r\n            send(400, 'No search results found');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          send(500, 'Something went wrong.')\r\n        });\r\n    } else {\r\n      send(400, 'No data to be saved');\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    send(500, {\r\n      errorCode: '004',\r\n      errorMessage: err.message || err,\r\n      errorContext: err.message || err,\r\n      errorLocalizedMessage: 'Internal server error'\r\n    });\r\n  }"
}
