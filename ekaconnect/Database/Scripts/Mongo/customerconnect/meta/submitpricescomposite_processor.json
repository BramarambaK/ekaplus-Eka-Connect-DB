{
  "_id": "submitpricescomposite_processor",
  "name": "submitpricescomposite_processor",
  "type": "processor",
  "refType": "app",
  "isNode":true,
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "var connectUrl = req.body.propertyList.eka_connect_host + '\/workflow\/data';\r\nvar connectBody = {\r\n  appId: req.body.appId,\r\n  workFlowTask: 'fileslist',\r\n};\r\nvar connect = {\r\n  method: 'POST',\r\n  body: connectBody,\r\n  url: connectUrl,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n  },\r\n  json: true,\r\n};\r\nvar connectDataPaymentTerm = {\r\n  method: 'GET',\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    '\/data\/12325a98-a959-4939-9005-4158d136afcd\/6d10c2dd-c5c5-451e-88f5-3de80e151bc3',\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n    requestid: req.headers['requestid'] + '-processor',\r\n  },\r\n  body: {},\r\n  json: true,\r\n};\r\nfunction get_connectData(connectRequest) {\r\n  \/\/ console.log('connectRequest',JSON.stringify(connectRequest));\r\n  return new Promise(function (resolve, reject) {\r\n    request(connectRequest, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\nfunction get_connect() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(connect, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\nget_connect().then(function (resultData) {\r\n  let data = resultData.data;\r\n  var fileId = req.body.selectedData.id;\r\n  var result;\r\n  for (let i = 0; i < data.length; i++) {\r\n    if (data[i]['id'] === fileId) {\r\n      result = data[i]['data'];\r\n      break;\r\n    }\r\n  }\r\n  result = JSON.parse(result);\r\n\r\n  var output = [];\r\n  let splitarr = req.body.selectedData.account.split('@#@');\r\n  connectDataPaymentTerm.body = {\r\n    includeFields: ['pricingOption', 'paymentTerm'],\r\n    excludeFields: ['_id'],\r\n    filterData: {\r\n      filter: [\r\n        {\r\n          fieldName: 'bpRefNo',\r\n          value: splitarr[0].trim(),\r\n          operator: 'eq',\r\n        },\r\n        {\r\n          fieldName: 'bpExternalCode',\r\n          value: splitarr[3].trim(),\r\n          operator: 'eqCaseInsensitive',\r\n        },\r\n        {\r\n          fieldName: 'season',\r\n          value: req.body.selectedData.harvestseason,\r\n          operator: 'eq',\r\n        },\r\n        {\r\n          fieldName: 'signed',\r\n          value: 'Y',\r\n          operator: 'eq',\r\n        },\r\n        {\r\n          fieldName: 'isActive',\r\n          value: 'Y',\r\n          operator: 'eq',\r\n        },\r\n        {\r\n          fieldName: 'marketType',\r\n          value: 'Contract',\r\n          operator: 'ne',\r\n        },\r\n        {\r\n          fieldName: 'pricingOption',\r\n          value: [...new Set(result.map((o) => o['Pricing Option']))],\r\n          operator: 'inCaseInsensitive',\r\n        },\r\n      ],\r\n    },\r\n  };\r\n  get_connectData(connectDataPaymentTerm)\r\n    .then((paymentTermData) => {\r\n      var paymentTermEntry;\r\n      for (var j = 0; j < result.length; j++) {\r\n        paymentTermEntry = paymentTermData.find(\r\n          (entry) => entry['pricingOption'] === result[j]['Pricing Option']\r\n        );\r\n        output.push({\r\n          accno: splitarr[0].trim(),\r\n          bpRefNo: req.body.selectedData.account,\r\n          bpName: splitarr[1].trim(),\r\n          bpExternalName: result[j].bpExternalName,\r\n          bpExternalCode: result[j].bpExternalCode,\r\n          endDate: result[j]['End date'],\r\n          endTime: result[j]['End time'],\r\n          endDateTime: result[j].endDateTime,\r\n          product: result[j]['Product'],\r\n          quality: result[j]['Quality'],\r\n          season: req.body.selectedData.harvestseason,\r\n          length: result.length,\r\n          price: result[j]['Price'],\r\n          pricingOption: result[j]['Pricing Option'],\r\n          site: result[j]['Site'],\r\n          region: result[j]['Region'],\r\n          startDate: result[j]['Start date'],\r\n          startTime: result[j]['Start time'],\r\n          startDateTime: result[j].startDateTime,\r\n          status: 'Active',\r\n          sustainable: result[j]['Sustainable'],\r\n          marketType: result[j]['Market type'],\r\n          paymentTerm:\r\n            paymentTermEntry && paymentTermEntry.paymentTerm\r\n              ? paymentTermEntry.paymentTerm\r\n              : null,\r\n        });\r\n      }\r\n      var response = {};\r\n      response.submitprices = output;\r\n      res.status(200).send(response);\r\n    })\r\n    .catch((err) => {\r\n      console.error(err);\r\n      res.status(400).send(err);\r\n    });\r\n});",
  "sys__UUID": "c4d51713-b3a0-4fb3-ab15-aa8e569fb732",
  "sys__createdBy": "ekauser@ekaplus.com"
} 
