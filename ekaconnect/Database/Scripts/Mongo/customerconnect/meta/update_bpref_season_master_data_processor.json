{
    "_id" : "update_bpref_season_master_data_processor",
    "name" : "update_bpref_season_master_data_processor",
    "refType" : "app",
    "refTypeId" : "12325a98-a959-4939-9005-4158d136afcd",
    "snippet" : "const appId = '12325a98-a959-4939-9005-4158d136afcd';\r\nconst seasonMasterDataObjId = '4aa9caf8-8dd8-49a7-8fad-a229c376327c';\r\nconst bprefSeasonDetailsMasterDataObjId =\r\n  '6d10c2dd-c5c5-451e-88f5-3de80e151bc3';\r\n\r\nvar connectSeasonMasterData = {\r\n  method: 'GET',\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    `\/data\/${appId}\/${seasonMasterDataObjId}`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n  },\r\n  body: {\r\n    pagination: {\r\n      start: 0,\r\n      limit: 2,\r\n    },\r\n    sort: {\r\n      season: 'Desc',\r\n    },\r\n  },\r\n  json: true,\r\n};\r\n\r\nvar connectBPRefSeasonDetailsMasterData = {\r\n  method: 'GET',\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    `\/data\/${appId}\/${bprefSeasonDetailsMasterDataObjId}`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n  },\r\n  body: {\r\n    filterData: {\r\n      filter: [\r\n        {\r\n          fieldName: 'bpRefNo',\r\n          operator: 'in',\r\n          value: [],\r\n        },\r\n        {\r\n          fieldName: 'bpExternalCode',\r\n          operator: 'in',\r\n          value: [],\r\n        },\r\n        {\r\n          fieldName: 'marketType',\r\n          operator: 'ne',\r\n          value: 'Contract',\r\n        },\r\n        {\r\n          fieldName: 'signed',\r\n          operator: 'eq',\r\n          value: 'Y',\r\n        },\r\n        {\r\n          fieldName: 'isActive',\r\n          operator: 'eq',\r\n          value: 'Y',\r\n        },\r\n        {\r\n          fieldName: 'season',\r\n          operator: 'exists',\r\n          value: true,\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  json: true,\r\n};\r\n\r\nfunction get_connectData_SeasonMasterData() {\r\n  return new Promise(function (resolve, reject) {\r\n    console.log('SeasonMasterData Request - ' + connectSeasonMasterData.url);\r\n    console.log(\r\n      'SeasonMasterData Body -' + JSON.stringify(connectSeasonMasterData.body)\r\n    );\r\n    request(connectSeasonMasterData, function (err, response, body) {\r\n      console.log('SeasonMasterData Response - ' + JSON.stringify(body));\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body); \/\/Success\r\n      } else {\r\n        reject(body); \/\/Failure\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction get_connectData_bprefSeasonDetailsMasterData() {\r\n  return new Promise(function (resolve, reject) {\r\n    console.log(\r\n      'BPRefSeasonDetailsMasterData Request - ' +\r\n        connectBPRefSeasonDetailsMasterData.url\r\n    );\r\n    console.log(\r\n      'BPRefSeasonDetailsMasterData Body -' +\r\n        JSON.stringify(connectBPRefSeasonDetailsMasterData.body)\r\n    );\r\n    request(\r\n      connectBPRefSeasonDetailsMasterData,\r\n      function (err, response, body) {\r\n        console.log(\r\n          'BPRefSeasonDetailsMasterData Response - ' + JSON.stringify(body)\r\n        );\r\n        if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n          resolve(body); \/\/Success\r\n        } else {\r\n          reject(body); \/\/Failure\r\n        }\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\nvar bprefSeasonDetailsMasterDataReceived = req.body.bulkPayLoadData;\r\nconsole.log(\r\n  'bprefSeasonDetailsMasterDataReceived-' +\r\n    JSON.stringify(bprefSeasonDetailsMasterDataReceived)\r\n);\r\n\r\nvar bpRefNoListFiltered = [];\r\nvar bpExternalCodeListFiltered = [];\r\nvar bpRefNo_bpExternalCode_ListFiltered = [];\r\n\/\/Filter out any bad ticket records\r\nbprefSeasonDetailsMasterDataReceived.forEach((bprefSeasonDetailsMasterData) => {\r\n  if (bprefSeasonDetailsMasterData['bpRefNo']) {\r\n    bpRefNoListFiltered.push(bprefSeasonDetailsMasterData['bpRefNo']);\r\n  }\r\n  if (bprefSeasonDetailsMasterData['bpExternalCode']) {\r\n    bpExternalCodeListFiltered.push(\r\n      bprefSeasonDetailsMasterData['bpExternalCode']\r\n    );\r\n  }\r\n  if (\r\n    bprefSeasonDetailsMasterData['bpRefNo'] &&\r\n    bprefSeasonDetailsMasterData['bpExternalCode']\r\n  ) {\r\n    bpRefNo_bpExternalCode_ListFiltered.push({\r\n      bpRefNo: bprefSeasonDetailsMasterData['bpRefNo'],\r\n      bpExternalCode: bprefSeasonDetailsMasterData['bpExternalCode'],\r\n    });\r\n  }\r\n});\r\nif (bpRefNoListFiltered.length > 0 && bpExternalCodeListFiltered.length > 0) {\r\n  \/\/Get unique bpRefNo list\r\n  var bpRefNoListFilteredUnique = bpRefNoListFiltered.filter(\r\n    (x, i, a) => a.indexOf(x) === i\r\n  );\r\n  \/\/Get unique bpExternalCode list\r\n  var bpExternalCodeListFilteredUnique = bpExternalCodeListFiltered.filter(\r\n    (x, i, a) => a.indexOf(x) === i\r\n  );\r\n\r\n  var bpRefNo_bpExternalCode_ListFilteredUnique =\r\n    bpRefNo_bpExternalCode_ListFiltered.filter(\r\n      ({ bpRefNo, bpExternalCode }, index, a) =>\r\n        a.findIndex(\r\n          (e) => bpRefNo === e.bpRefNo && bpExternalCode === e.bpExternalCode\r\n        ) === index\r\n    );\r\n\r\n  \/\/Add unique bpRefNo list to connectBPRefSeasonDetailsMasterData\r\n  connectBPRefSeasonDetailsMasterData.body.filterData.filter[0].value =\r\n    bpRefNoListFilteredUnique;\r\n  \/\/Add unique bpExternalCode list to connectBPRefSeasonDetailsMasterData\r\n  connectBPRefSeasonDetailsMasterData.body.filterData.filter[1].value =\r\n    bpExternalCodeListFilteredUnique;\r\n\r\n  Promise.all([\r\n    get_connectData_SeasonMasterData(),\r\n    get_connectData_bprefSeasonDetailsMasterData(),\r\n  ])\r\n    .then(function (result) {\r\n      const SeasonMasterDataList = result[0].map((item) => item['season']);\r\n      const bprefSeasonDetailsMasterDataList = result[1];\r\n      var bprefSeasonMasterData = [];\r\n\r\n      const bprefSeasonDetailsMasterDataListGrouped = Array.from(\r\n        bprefSeasonDetailsMasterDataList.reduce((m, o) => {\r\n          var key = JSON.stringify(\r\n            Object.assign(\r\n              ...['bpRefNo', 'bpExternalCode'].map((k) => ({ [k]: o[k] }))\r\n            )\r\n          );\r\n          return m.set(key, (m.get(key) || []).concat(o.season));\r\n        }, new Map()),\r\n        ([key, season]) => Object.assign(JSON.parse(key), { season })\r\n      );\r\n\r\n      bprefSeasonDetailsMasterDataListGrouped.forEach(\r\n        (bprefSeasonDetailsMasterData) => {\r\n          var bprefCurrentPreviousSeason = SeasonMasterDataList.filter(\r\n            (bprefSeason) =>\r\n              bprefSeasonDetailsMasterData['season'].includes(bprefSeason)\r\n          ).map((season) =>\r\n            typeof season === 'undefined' || !season ? '' : season\r\n          );\r\n          bprefSeasonMasterData.push({\r\n            bpRefNo: bprefSeasonDetailsMasterData['bpRefNo'],\r\n            bpExternalCode: bprefSeasonDetailsMasterData['bpExternalCode'],\r\n            currentSeason:\r\n              typeof bprefCurrentPreviousSeason[0] === 'undefined' ||\r\n              !bprefCurrentPreviousSeason[0]\r\n                ? ''\r\n                : bprefCurrentPreviousSeason[0],\r\n            previousSeason:\r\n              typeof bprefCurrentPreviousSeason[1] === 'undefined' ||\r\n              !bprefCurrentPreviousSeason[1]\r\n                ? ''\r\n                : bprefCurrentPreviousSeason[1],\r\n          });\r\n        }\r\n      );\r\n\r\n      bpRefNo_bpExternalCode_ListFilteredUnique\r\n        .filter(\r\n          (item) =>\r\n            typeof bprefSeasonMasterData.find(\r\n              (item1) =>\r\n                item.bpRefNo == item1.bpRefNo &&\r\n                item.bpExternalCode == item1.bpExternalCode\r\n            ) === 'undefined'\r\n        )\r\n        .forEach((item) => {\r\n          bprefSeasonMasterData.push({\r\n            bpRefNo: item.bpRefNo,\r\n            bpExternalCode: item.bpExternalCode,\r\n            currentSeason: '',\r\n            previousSeason: '',\r\n          });\r\n        });\r\n\r\n      console.log(JSON.stringify(bprefSeasonMasterData));\r\n      res.status(200).send(bprefSeasonMasterData);\r\n    })\r\n    .catch((err) => res.status(500).send(err));\r\n} else {\r\n  res.status(200).send();\r\n}",
    "sys__UUID" : "a0779480-b5e1-4984-8118-66a279a53884",
    "type" : "processor"
}