{
  "_id": "amendment_submitrequestcontracts_processor",
  "name": "amendment_submitrequestcontracts_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const data = req.body.amendment_submitrequestcontractcomposite.data;\r\n    const tenant = req.headers['X-TenantID'];\r\n    const auth = req.headers.authorization;\r\n    const appId = req.body.appId;\r\n    \r\n    const objid = \"46e84f42-6288-4027-b6d0-fd1c11019259\";\r\n    var connect = {\r\n      method: \"GET\",\r\n      body: {\r\n        filterData: {\r\n          filter: [\r\n            {\r\n              fieldName: \"contractItemRefNo\",\r\n              value: data.contractItemRefNo,\r\n              operator: \"eq\",\r\n            },\r\n            {\r\n              fieldName: \"contractRefNo\",\r\n              value: data.contractRefNo,\r\n              operator: \"eq\",\r\n            },\r\n            {\r\n              fieldName: \"requestIdUnique\",\r\n              value: data.requestIdUnique,\r\n              operator: \"eq\",\r\n            },\r\n            {\r\n              fieldName: \"approvalStatus\",\r\n              value: ['Approved', 'Withdrawn', 'Rejected', 'Expired'],\r\n              operator: \"in\",\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      url: req.body.propertyList.eka_connect_host + \"/data/\" + appId + \"/\" + objid,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n        requestid: req.headers[\"requestid\"] + \"-processor\",\r\n      },\r\n      json: true,\r\n    };\r\n    \r\n      function getRequestStatus() {\r\n        console.log(\"connect obj\", JSON.stringify(connect));\r\n        return new Promise(function (resolve, reject) {\r\n          request(connect, function (err, response, body) {\r\n            console.log(\"res\", JSON.stringify(body));\r\n            if (err || body.error) {\r\n              console.log(\"error occured ::\" + body.error);\r\n              reject(body);\r\n            } else {\r\n              resolve(body);\r\n            }\r\n          });\r\n        });\r\n      }\r\n\r\n\r\n\r\n\r\n    const traderName = req.body.propertyList.REQ_CONTRACTS_TRADER_NAME;\r\n    const weightUnit = req.body.propertyList.REQ_CONTRACTS_WEIGHT_UNIT;\r\n    const priceUnit = req.body.propertyList.REQ_CONTRACTS_PRICE_UNIT;\r\n    const updatedBy = req.body.propertyList._REQ_CONTRACTS_UPDATED_BY;\r\n    var _ = require('lodash');\r\n    const userInfo = req.body.propertyList.eka_connect_host + '/api/userinfo';\r\n    let requestedByUserInfo = '';\r\n\r\n    const send = (status, message) => res.status(status).send(message);\r\n\r\n    const contractType =\r\n      req.body.propertyList[\r\n        data.userType.toLowerCase() === 'demand customer'\r\n          ? 'REQ_CONTRACTS_DEMAND_CONTRACT_TYPE'\r\n          : 'REQ_CONTRACTS_GROWER_CONTRACT_TYPE'\r\n      ];\r\n\r\n    const headers = {\r\n      Authorization: auth,\r\n      'X-TenantID': tenant,\r\n      'Content-Type': 'application/json'\r\n    };\r\n\r\n    const getData = req =>\r\n      new Promise((resolve, reject) => {\r\n        request(\r\n          {\r\n            ...req,\r\n            headers: headers,\r\n            json: true\r\n          },\r\n          (err, response, body) => {\r\n            if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(err || body.error || body.errorMessage);\r\n            }\r\n          }\r\n        );\r\n      });\r\n\r\n    // const bpList = new Promise((resolve, reject) => {\r\n    //   getData_(userInfo)\r\n    //     .then(t => {\r\n    //       resolve(t.firstName + ' ' + t.lastName);\r\n    //     })\r\n\r\n    //     .catch(err => {\r\n    //       reject(err);\r\n    //     });\r\n    // });\r\n    const bpList = new Promise((resolve, reject) => {\r\n      getData({\r\n        method: 'GET',\r\n        url: userInfo\r\n      })\r\n        .then(t => {\r\n          requestedByUserInfo = t.firstName + ' ' + t.lastName;\r\n          resolve(requestedByUserInfo);\r\n        })\r\n        .catch(err => {\r\n          var data = {};\r\n          console.error(err);\r\n          res.status(400).send('Failed to fetch logged-in user details');\r\n          handleErrorResponse(req, '', err, '')\r\n        });\r\n    });\r\n\r\n    // bpList();\r\n\r\n    const formatCTRMData = reqContract => {\r\n      const contractHeader = {\r\n        CreatedBy: reqContract.growerCreatedBy,\r\n        Operator: reqContract.growerOperator,\r\n        UpdatedBy: updatedBy,\r\n        ContractType: contractType || '',\r\n        Corporate: reqContract.corporate,\r\n        IsOriginationContract: 'Y',\r\n        TemplateName: reqContract.programName || '',\r\n        CPName: reqContract.counterPartyName || '',\r\n        CPRefNo: reqContract.BPRefNo || '',\r\n        PaymentTerm: reqContract.paymentTerms || '',\r\n        ContractIssueDate: reqContract.contractIssueDate\r\n          ? moment(reqContract.contractIssueDate).format('YYYY-MM-DDThh:mm:ss')\r\n          : moment().format('YYYY-MM-DDT00:00:00'),\r\n        TraderName: traderName,\r\n        INCOTerm: reqContract.INCOTerm || '',\r\n        BrokerRefNo: (reqContract.amendedBrokerRefNo || '') + '',\r\n        ContractRefNo: reqContract.contractRefNo,\r\n        ModificationDate: moment().format('YYYY-MM-DDT00:00:00'),\r\n        ModificationReason: 'Cargill Employee modification request',\r\n        BrokerBPRefNo :  reqContract.amendedRefNo || ''\r\n      };\r\n\r\n      contractHeader.IsDraftContract = 'N';\r\n      const deliveryDetails = {\r\n        DeliveryDetailCountry: reqContract.dischargeLocationCountry.split('_')[0] || '',\r\n        DeliveryLocationGroupName:\r\n          reqContract.dischargeLocationCountry.split('_')[1] ||\r\n          reqContract.portzone ||\r\n          reqContract.DeliveryLocationGroupName ||\r\n          '',\r\n        DeliveryDetailCity: reqContract.dischargeLocationCity || ''\r\n      };\r\n\r\n      const itemQuantity = {\r\n        ItemQuantityValue: +reqContract.contractItemQuantity || +reqContract.contractItemQuantityInBase || '',\r\n        ItemQuantityUnitId: weightUnit\r\n      };\r\n\r\n      const shipmentPeriod = {\r\n        ShipmentFromDate:\r\n          reqContract.amendedShipmentFrom ||\r\n          moment(reqContract.shipmentPeriodFrom)\r\n            .startOf('month')\r\n            .format('YYYY-MM-DDT00:00:00') ||\r\n          '',\r\n        ShipmentToDate:\r\n          reqContract.amendedShipmentTo ||\r\n          moment(reqContract.shipmentPeriodTo)\r\n            .endOf('month')\r\n            .format('YYYY-MM-DDT23:59:59') ||\r\n          ''\r\n      };\r\n\r\n      const priceDetails = {\r\n        PayInCurrency: priceUnit,\r\n        PriceType: 'Fixed',\r\n        ContractPrice: {\r\n          ContractPriceValue: +reqContract.contractPrice,\r\n          ContractPriceUnitId: priceUnit + '/' + weightUnit\r\n        }\r\n      };\r\n\r\n      const itemDetails = {\r\n        ContractItemNo: '1',\r\n        Product: reqContract.product || '',\r\n        Cropyear: reqContract.cropYear || '',\r\n        Quality: reqContract.quality.replace(' MG', ''),\r\n        IsMultiGrade:\r\n          reqContract.isMultiGrade == true || (reqContract.isMultiGrade + '').toLowerCase() == 'y' ? 'Y' : 'N',\r\n        SpreadType: !reqContract.amendedSpread\r\n          ? ''\r\n          : reqContract.amendedSpread.toLowerCase().includes('fix')\r\n          ? 'Fixed'\r\n          : reqContract.amendedSpread.toLowerCase().includes('floating')\r\n          ? 'Floating'\r\n          : '',\r\n        DeliveryDetails: deliveryDetails,\r\n        PriceDetails: priceDetails,\r\n        ItemQuantity: itemQuantity,\r\n        ShipmentPeriod: shipmentPeriod\r\n      };\r\n\r\n      if (reqContract.isMultiGrade == true || (reqContract.isMultiGrade + '').toLowerCase() == 'y') {\r\n        if (typeof reqContract.multiGradeDifferentialDetails == 'string') {\r\n          itemDetails.MultiGradeDetails = JSON.parse(reqContract.multiGradeDifferentialDetails.replace(/'/g, '\"'))\r\n            .multiGradeDifferentialDetail.filter(i => (i.multiGradeDifferential + '').toLowerCase() != 'base')\r\n            .map(i => ({\r\n              QualityName: i.qualityName || '',\r\n              MultiGradeDiffDetails: {\r\n                MultiGradeDiffValue: +i.multiGradeDifferential || 0,\r\n                MultiGradeDiffPriceUnitId: i.multiGradeDifferentialUnit || ''\r\n              }\r\n            }));\r\n        } else {\r\n          itemDetails.MultiGradeDetails = reqContract.multiGradeDifferentialDetails.multiGradeDifferentialDetail\r\n            .filter(i => i.qualityName != reqContract.quality)\r\n            .map(i => ({\r\n              QualityName: i.qualityName || '',\r\n              MultiGradeDiffDetails: {\r\n                MultiGradeDiffValue: parseInt(i.multiGradeDifferential) || 0,\r\n                MultiGradeDiffPriceUnitId: i.multiGradeDifferentialUnit || ''\r\n              }\r\n            }));\r\n        }\r\n      }\r\n\r\n      return {\r\n        ContractHeader: contractHeader,\r\n        ItemDetails: [itemDetails]\r\n      };\r\n    };\r\n\r\n    function multiGradeData(gradeData) {\r\n      // let mgData = gradeData.multiGradeDifferentialDetails.multiGradeDifferentialDetail.filter(\r\n      //   i => (i.multiGradeDifferential + '').toLowerCase() != 'base'\r\n      // );\r\n      let mgData = {\r\n        Parent_PublishedBids: JSON.parse(gradeData.multiGradeDifferentialDetails.replace(/'/g, '\"'))\r\n      };\r\n      // const finalData = mgData.multiGradeDifferentialDetail.filter(i => typeof i.multiGradeDifferential == 'number');\r\n      return mgData.Parent_PublishedBids;\r\n    }\r\n\r\n    const workflow = body =>\r\n      getData({\r\n        method: 'POST',\r\n        url: `${req.body.propertyList.eka_connect_host}/workflow`,\r\n        body: body\r\n      });\r\n\r\n    const reqId = (reqContract, payload) =>\r\n      new Promise((resolve, reject) => {\r\n        workflow({\r\n          output: {\r\n            push_contractRequestData: [\r\n              {\r\n                requestType: 'Amendment',\r\n                requestedDate: moment(reqContract.currentDate).format('DD-MM-YYYY'),\r\n                requestedBy: requestedByUserInfo || ''\r\n              }\r\n            ]\r\n            // requestPayload: payload\r\n          },\r\n          task: 'push_contractRequestData',\r\n          workflowTaskName: 'push_contractRequestData',\r\n          appId: appId\r\n        })\r\n          .then(resId => {\r\n            if (resId && resId.data && resId.data.length > 0) {\r\n              resolve(resId.data.map(i => i.requestId));\r\n            } else {\r\n              reject('Request id not found in response');\r\n            }\r\n          })\r\n          .catch(err => {\r\n            reject(err);\r\n          });\r\n      });\r\n\r\n    const saveContract = t =>\r\n      Promise.all([\r\n        workflow({\r\n          output: {\r\n            create_contractDomainData: [t]\r\n          },\r\n          task: 'create_contractDomainData',\r\n          workflowTaskName: 'create_contractDomainData',\r\n          appId: '12325a98-a959-4939-9005-4158d136afcd'\r\n        }),\r\n        workflow({\r\n          output: {\r\n            update_contractRequestData: [t]\r\n          },\r\n          task: 'update_contractRequestData',\r\n          workflowTaskName: 'update_contractRequestData',\r\n          appId: '12325a98-a959-4939-9005-4158d136afcd'\r\n        })\r\n      ]);\r\n\r\n    const updateContract = t =>\r\n      workflow({\r\n        output: {\r\n          update_contractDomainData: [t]\r\n        },\r\n        task: 'update_contractDomainData',\r\n        workflowTaskName: 'update_contractDomainData',\r\n        appId: '12325a98-a959-4939-9005-4158d136afcd'\r\n      });\r\n\r\n    const objectsEqual = (obj1, obj2) =>\r\n      typeof obj1 === 'object' && Object.keys(obj1).length > 0\r\n        ? Object.keys(obj1).length === Object.keys(obj2).length &&\r\n          Object.keys(obj1).every(p => objectsEqual(obj1[p], obj2[p]))\r\n        : obj1 === obj2;\r\n\r\n    let isAmended = false;\r\n\r\n    if(data.userRole.toLowerCase().includes('dxp_cacp_grower') && data.brokerRefNo ){\r\n      data.amendedBrokerRefNo = data.brokerRefNo;\r\n    }\r\n\r\n    let amendedValues = [\r\n      data.userRole.toLowerCase().includes('dxp_cacp_broker') ? data.amendedBrokerRefNo : '',\r\n      data.amendedCity,\r\n      moment(data.amendedShipmentFrom).format('YYYY-MM'),\r\n      moment(data.amendedShipmentTo).format('YYYY-MM'),\r\n      data.amendedFreightOrganise ? data.amendedFreightOrganise : '',\r\n      data.amendedFullname ? data.amendedFullname : '',\r\n      isNaN(data.amendedPhonenumber) ? '' : data.amendedPhonenumber,\r\n      data.amendedEmail ? data.amendedEmail : '',\r\n      data.amendedPickuplocation ? data.amendedPickuplocation : ''\r\n    ];\r\n    let originalValues = [\r\n      data.userRole.toLowerCase().includes('dxp_cacp_broker') ? data.brokerRefNo : '',\r\n      data.dischargeLocationType.toLowerCase().includes(\"storage location\") ? data.dischargeLocationCity : data.deliveryLocationGroupName,\r\n      moment(data.shipmentPeriodFrom).format('YYYY-MM'),\r\n      moment(data.shipmentPeriodTo).format('YYYY-MM'),\r\n      data.freightOrganise ? data.freightOrganise : '',\r\n      data.fullname ? data.fullname : '',\r\n      isNaN(data.phonenumber) ? '' : data.phonenumber,\r\n      data.email ? data.email : '',\r\n      data.pickuplocation ? data.pickuplocation : ''\r\n    ];\r\n\r\n    const formatCCData = (reqContract, reqId, contractRefNo) => ({\r\n      approvalStatus: 'Approved',\r\n      isRequestActive: true,\r\n      contractItemRefNo: 1,\r\n      contractRefNo: contractRefNo,\r\n      contractType: contractType,\r\n      BPRefNo: reqContract.BPRefNo || '',\r\n      contractItemQuantity: +reqContract.contractItemQuantityInBase || +reqContract.contractItemQuantity || '',\r\n      contractItemQuantityUnit: weightUnit,\r\n      contractPrice: +reqContract.contractPrice,\r\n      contractPriceUnit: priceUnit + '/' + weightUnit,\r\n      counterPartyName: reqContract.counterPartyName || '',\r\n      cropYear: reqContract.cropYear || '',\r\n      dischargeLocationCity: reqContract.dischargeLocationCity || '',\r\n      dischargeLocationCountry: reqContract.dischargeLocationCountry || '',\r\n      dischargeLocationType: reqContract.dischargeLocationType || '',\r\n      isMultiGrade:\r\n        reqContract.isMultiGrade == true || (reqContract.isMultiGrade + '').toLowerCase() == 'y' ? 'Y' : 'N',\r\n      multiGradeDifferentialDetails: reqContract.multiGradeDifferentialDetails\r\n        ? JSON.parse(reqContract.multiGradeDifferentialDetails.replace(/'/g, '\"'))\r\n        : [],\r\n      INCOTerm: reqContract.INCOTerm || '',\r\n      locationGroupType: reqContract.locationGroupType,\r\n      priceType: 'Fixed',\r\n      product: reqContract.product || '',\r\n      quality: reqContract.quality.replace(' MG', '') || '',\r\n      shipmentPeriodFrom:\r\n        reqContract.amendedShipmentFrom ||\r\n        moment(reqContract.shipmentPeriodFrom)\r\n          .startOf('month')\r\n          .format('YYYY-MM-DDT00:00:00') ||\r\n        '',\r\n      shipmentPeriodTo:\r\n        reqContract.amendedShipmentTo ||\r\n        moment(reqContract.shipmentPeriodTo)\r\n          .endOf('month')\r\n          .format('YYYY-MM-DDT23:59:59'),\r\n      corporate: reqContract.corporate || '',\r\n      paymentTerms: reqContract.paymentTerms || '',\r\n      requestId: reqId,\r\n      requestIdUnique: reqId,\r\n      requestedDate: moment(reqContract.currentDate).format('DD-MM-YYYY'),\r\n      requestType: 'Amendment',\r\n      requestedBy: requestedByUserInfo || '',\r\n      traderName: traderName,\r\n      isRequestedByEkaCCSystem: true,\r\n      spread: reqContract.amendedSpread || '',\r\n      freightOrganise: reqContract.freightOrganise || '',\r\n      fullname: reqContract.fullname || '',\r\n      phonenumber: reqContract.phonenumber || '',\r\n      email: reqContract.email || '',\r\n      pickuplocation: reqContract.pickuplocation || [],\r\n      programName: reqContract.programName || '',\r\n      portzone:\r\n        reqContract.portzone ||\r\n        reqContract.deliveryLocationGroupName ||\r\n        reqContract.dischargeLocationCountry.split('_')[1] ||\r\n        '',\r\n      deliveryLocationGroupName:\r\n        reqContract.deliveryLocationGroupName ||\r\n        reqContract.portzone ||\r\n        reqContract.dischargeLocationCountry.split('_')[1] ||\r\n        '',\r\n      growerCreatedBy: reqContract.growerCreatedBy || '',\r\n      growerOperator: reqContract.growerOperator || '',\r\n      employeeOperatorUser: reqContract.employeeOperatorUser || '',\r\n      employeeCreatedByUser: reqContract.employeeCreatedByUser || '',\r\n      contractIssueDate: reqContract.contractIssueDate\r\n        ? moment(reqContract.contractIssueDate).format('YYYY-MM-DDThh:mm:ss')\r\n        : moment().format('YYYY-MM-DDT00:00:00'),\r\n     ekaCCSpreadFixed: reqContract.amendedSpread ? (reqContract.ekaCCSpreadFixed && reqContract.spread.toLowerCase().includes('fix') && reqContract.amendedSpread.toLowerCase().includes('fix') ? reqContract.ekaCCSpreadFixed : reqContract.spread.toLowerCase().includes('float') && reqContract.amendedSpread.toLowerCase().includes('fix') ? moment().format('DD-MM-YYYY')  : null) : null,\r\n\r\n     brokerRefNo: reqContract.brokerRefNo || '',\r\n     brokerBPRefNo: reqContract.brokerBPRefNo || '',\r\n     amendedBrokerRefNo: reqContract.amendedBrokerRefNo || '',\r\n     amendedBrokerBPRefNo: reqContract.amendedRefNo || ''\r\n    });\r\n\r\n    function valuesCheck() {\r\n      amendedValues.forEach((i, index) => {\r\n        if (!isAmended) {\r\n          if (typeof i != 'object') {\r\n            if (amendedValues[index] == originalValues[index]) {\r\n              isAmended = false;\r\n            } else {\r\n              isAmended = true;\r\n            }\r\n          } else {\r\n            if ((index, _.isEqual(amendedValues[index], originalValues[index]))) {\r\n              isAmended = false;\r\n            } else {\r\n              isAmended = true;\r\n            }\r\n          }\r\n        }\r\n      });\r\n      return isAmended;\r\n    }\r\n    const sendError = (message, context, localizedMessage) =>\r\n    res.status(400).send({\r\n      errorCode: \"004\",\r\n      errorMessage: message,\r\n      errorContext: null,\r\n      errorLocalizedMessage: localizedMessage,\r\n      errors: [\r\n        {\r\n          errorCode: \"004\",\r\n          errorMessage: message,\r\n          errorContext: context,\r\n          errorLocalizedMessage: localizedMessage,\r\n          errors: null,\r\n        },\r\n      ],\r\n    });\r\n    getRequestStatus()\r\n    .then(function (sameDataExists) {\r\n      if (sameDataExists.length>0) {\r\n        var updatedContract = {\r\n          requestIdUnique: data.requestIdUnique,\r\n          contractRefNo: data.contractRefNo,\r\n          contractItemRefNo: data.contractItemRefNo,\r\n          approvalStatus: data.userType.toLowerCase() == 'grower' ? 'Awaiting review' : 'Action required'\r\n        };\r\n        updateContract(updatedContract)\r\n                  .catch(err => {\r\n                    console.error(err);\r\n                    send(500, 'Contract cannot be created, please contact system admin');\r\n                    handleErrorResponse(req, '', err, '')\r\n                  });\r\n        \r\n                  valuesCheck();\r\n\r\n                  const pushContractData = (reqId, contract) => {\r\n                    const t = {\r\n                      workflowTaskName: 'EXTERNAL_CTRM_CONTRACT_INBOUND_API',\r\n                      task: 'EXTERNAL_CTRM_CONTRACT_INBOUND_API',\r\n                      appId: appId,\r\n                      output: {\r\n                        EXTERNAL_CTRM_CONTRACT_INBOUND_API: {\r\n                          App: 'CTRM',\r\n                          Object: 'contractInbound_object',\r\n                          RequestNumber: reqId,\r\n                          ObjectAction: 'UPDATE',\r\n                          ContractDetail: contract\r\n                        }\r\n                      }\r\n                    };\r\n                    console.log('Push COntract Data', JSON.stringify(t));\r\n                    return workflow(t);\r\n                  };\r\n              \r\n                  const formattedCTRMData = formatCTRMData(data);\r\n              \r\n                  data.requestType = 'Amendment';\r\n              \r\n                  if (data.spread && data.amendedSpread && data.isMultiGrade && data.spread.toLowerCase().includes('fix') != data.amendedSpread.toLowerCase().includes('fix') && !isAmended) {\r\n                    delete data._PRIMARY_KEY_;\r\n                    bpList\r\n                      .then(userName => {\r\n                        reqId(data, null)\r\n                          .then(id => {\r\n                            if (id && id.length > 0) {\r\n                              pushContractData(id[0], formattedCTRMData)\r\n                                .then(ctrm => {\r\n                                  const formattedCCData = formatCCData(data, id[0], data.contractRefNo);\r\n                                  formattedCCData.requestedBy = userName;\r\n                                  saveContract({\r\n                                          ...formattedCCData,\r\n                                          approvalStatus: 'Approved',\r\n                                          contractRefNo: data.contractRefNo,\r\n                                          requestId: id[0],\r\n                                          requestIdUnique: id[0],\r\n                                          contractItemRefNo: data.contractItemRefNo,\r\n                                          isRequestActive: true\r\n                                        })\r\n                                    .then(t => {\r\n                                      send(200, {\r\n                                        requestId: id[0],\r\n                                        msg: id[0] + ' has been successfully approved',\r\n                                        isDelay: true,\r\n                                        priceInvalid: false,\r\n                                        tabIndex: 2,\r\n                                        ngrCTRMFilter: data.BPRefNo,\r\n                                        appHome: req.body.propertyList.CONTRACT_BROWSE_BIDS_URL\r\n                                      });\r\n                                    })\r\n                                    .catch(err => {res.status(400).send(err); handleErrorResponse(req, '', err, '')});\r\n                                })\r\n                                .catch(err => {\r\n                                  console.error('Error posting data to CTRM', JSON.stringify(formattedCCData));\r\n                                  updatedContract.approvalStatus= 'Approved';\r\n                                  updateContract(updatedContract)\r\n                                            .catch(err => {\r\n                                              console.error(err);\r\n                                              send(500, 'Contract cannot be created, please contact system admin');\r\n                                              handleErrorResponse(req, '', err, '')\r\n                                            });\r\n              \r\n                                  send(500, {\r\n                                    errorCode: '500',\r\n                                    errorMessage: 'This request cannot be actioned at this time. Please try again later.',\r\n                                    errorContext: null,\r\n                                    errorLocalizedMessage: 'Contract cannot be created, error posting data to CTRM.'\r\n                                  });\r\n                                  handleErrorResponse(req, '', err, '')\r\n                                });\r\n                            }\r\n                          })\r\n                          .catch(err => {\r\n                            updatedContract.approvalStatus= 'Approved';\r\n                            updateContract(updatedContract)\r\n                                      .catch(err => {\r\n                                        console.error(err);\r\n                                        send(500, 'Contract cannot be created, please contact system admin');\r\n                                        handleErrorResponse(req, '', err, '')\r\n                                      });\r\n                            var data = {};\r\n                            console.error(err);\r\n                            res.status(500).send('Contract cannot be created, please contact system admin');\r\n                            handleErrorResponse(req, '', err, '')\r\n                          });\r\n                      })\r\n                      .catch(err => {\r\n                        updatedContract.approvalStatus= 'Approved';\r\n                        updateContract(updatedContract)\r\n                                  .catch(err => {\r\n                                    console.error(err);\r\n                                    send(500, 'Contract cannot be created, please contact system admin');\r\n                                    handleErrorResponse(req, '', err, '')\r\n                                  });\r\n                        console.error(err);\r\n                        send(400, 'Contract cannot be created, please contact system admin');\r\n                        handleErrorResponse(req, '', err, '')\r\n                      });\r\n                  } else {\r\n                    bpList\r\n                      .then(userName => {\r\n                        reqId(data, null)\r\n                          .then(id => {\r\n                            if (id && id.length > 0) {\r\n                              // pushContractData(id[0], formattedData)\r\n                              //   .then(ctrm => {\r\n                              // const updatedContract = {\r\n                              //   requestId: id[0],\r\n                              //   requestIdUnique: data.requestIdUnique,\r\n                              //   contractRefNo: data.contractRefNo,\r\n                              //   contractItemRefNo: data.contractItemRefNo,\r\n                              //   approvalStatus: data.userType.toLowerCase() == 'grower' ? 'Awaiting review' : 'Action required',\r\n                              //   isRequestActive: true\r\n                              // };\r\n                              // updateContract(updatedContract)\r\n                              //   .then(() => {\r\n                                  data.requestId = id[0];\r\n                                  data.requestIdUnique = id[0];\r\n                                  console.log('request ID', id[0]);\r\n                                  data.approvalStatus =\r\n                                    data.userType.toLowerCase() == 'grower' ? 'Awaiting review' : 'Action required';\r\n                                  data.isRequestedByEkaCCSystem = true;\r\n                                  data.multiGradeDifferentialDetails = data.isMultiGrade ? multiGradeData(data) : null;\r\n                                  data.isMultiGrade = data.isMultiGrade ? 'Y' : 'N';\r\n                                  data.requestedBy = userName || '';\r\n                                  data.requestType = 'Amendment';\r\n                                  data.requestedDate = moment(data.currentDate).format('DD-MM-YYYY');\r\n                                  delete data.PRIMARY_ID;\r\n                                  data.amendedPickuplocation =  data.amendedPickuplocation && data.pickuplocation && objectsEqual(data.amendedPickuplocation, data.pickuplocation) ? [] : data.amendedPickuplocation;\r\n                                  data.amendedFullname = data.amendedFullname && data.fullname && data.amendedFullname == data.fullname ? '' : data.amendedFullname;\r\n                                data.amendedPhonenumber = data.amendedPhonenumber && data.phonenumber && data.amendedPhonenumber + '' == data.phonenumber + '' ? NaN : data.amendedPhonenumber;\r\n                                data.amendedFreightOrganise = data.amendedFreightOrganise || '';\r\n                                  data.amendedSpread = data.amendedSpread || '';\r\n                                data.amendedEmail = data.amendedEmail && data.email && data.amendedEmail == data.email ? '' : data.amendedEmail;\r\n                                data.ekaCCSpreadFixed = data.amendedSpread ? (data.ekaCCSpreadFixed && data.spread.toLowerCase().includes('fix') && data.amendedSpread.toLowerCase().includes('fix') ? data.ekaCCSpreadFixed : data.spread.toLowerCase().includes('float') && data.amendedSpread.toLowerCase().includes('fix') ? moment().format('DD-MM-YYYY')  : '') : '';\r\n\r\n                                data.brokerRefNo = data.brokerRefNo || '';\r\n                                data.brokerBPRefNo = data.brokerBPRefNo || '';\r\n                                data.amendedBrokerRefNo = data.amendedBrokerRefNo || '';\r\n                                data.amendedBrokerBPRefNo = data.amendedRefNo || '';\r\n\r\n                                  saveContract(data)\r\n                                    .then(() => {\r\n                                      send(200, {\r\n                                        requestId: data.requestId,\r\n                                        msg: data.requestId + ' contract has been successfully created.',\r\n                                        priceInvalid: false,\r\n                                        tabIndex: 2,\r\n                                        ngrFilter: data.BPRefNo\r\n                                      });\r\n                                    })\r\n                                    .catch(err => {\r\n                                      updatedContract.approvalStatus= 'Approved';\r\n                                      updateContract(updatedContract)\r\n                                                .catch(err => {\r\n                                                  console.error(err);\r\n                                                  send(500, 'Contract cannot be created, please contact system admin');\r\n                                                  handleErrorResponse(req, '', err, '')\r\n                                                });\r\n                                      console.error(err);\r\n                                      send(500, 'Contract cannot be created, please contact system admin');\r\n                                      handleErrorResponse(req, '', err, '')\r\n                                    });\r\n                                // })\r\n                                // .catch(err => {\r\n                                //   console.error(err);\r\n                                //   send(500, 'Contract cannot be created, please contact system admin');\r\n                                //   handleErrorResponse(req, '', err, '')\r\n                                // });\r\n              \r\n                              // })\r\n                              // .catch(err => {\r\n                              //   console.error(err);\r\n                              //   send(500, 'Contract cannot be created, please contact system admin');\r\n                              // });\r\n                            }\r\n                          })\r\n                          .catch(err => {\r\n                            updatedContract.approvalStatus= 'Approved';\r\n                            updateContract(updatedContract)\r\n                                      .catch(err => {\r\n                                        console.error(err);\r\n                                        send(500, 'Contract cannot be created, please contact system admin');\r\n                                        handleErrorResponse(req, '', err, '')\r\n                                      });\r\n                            var data = {};\r\n                            console.error(err);\r\n                            res.status(400).send('Failed to fetch logged-in user details');\r\n                            handleErrorResponse(req, '', err, '')\r\n                          });\r\n                      })\r\n                      .catch(err => {\r\n                        updatedContract.approvalStatus= 'Approved';\r\n                        updateContract(updatedContract)\r\n                                  .catch(err => {\r\n                                    console.error(err);\r\n                                    send(500, 'Contract cannot be created, please contact system admin');\r\n                                    handleErrorResponse(req, '', err, '')\r\n                                  });\r\n                        console.error(err);\r\n                        send(500, 'Contract cannot be created, please contact system admin');\r\n                        handleErrorResponse(req, '', err, '')\r\n                      });\r\n                  }\r\n      }\r\n      else {\r\n        send(\r\n          \"Contract is being processed or status has been changed, please refresh the contract listing page.\",\r\n          \"\",\r\n          \"Your request was unable to be processed. Please contact the Grower Services team on 1800 447 246 if this issue persists.\"\r\n        );\r\n      }\r\n    }).catch((err) => {\r\n      console.error(err);\r\n      res\r\n        .status(400)\r\n        .send(\r\n          \"Your request was unable to be processed. Please contact the Grower Services team on 1800 447 246 if this issue persists.\"\r\n        );\r\n        handleErrorResponse(req, '', err, '')\r\n      })",
  "sys__UUID": "8e124e05-50b7-4da6-be79-f5f234ec3a72"
}
