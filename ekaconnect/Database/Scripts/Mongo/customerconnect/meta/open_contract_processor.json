{
  "_id" : "open_contract_processor",
  "name" : "open_contract_processor",
  "type" : "processor",
  "refType" : "app",
  "refTypeId" : "12325a98-a959-4939-9005-4158d136afcd",
  "snippet" : "const send = (status, message) => res.status(status).send(message);\r\n \r\n    if(!req.body.hasOwnProperty('selectedData')) {\r\n      send(200, {});\r\n    };\r\n\r\n    if(req.body.hasOwnProperty('selectedData')) {\r\n      const data = req.body.selectedData;\r\n\r\n     if(!data.hasOwnProperty('contractRefNo') && data.warehousedtickets.length > 0 ) {\r\n       return send(200, {\r\n         warehousedtickets: data.warehousedtickets\r\n       });\r\n     }\r\n    const getRequestBody = url => ({\r\n      method: 'GET',\r\n      url,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    });\r\n    \r\n    function getData(requestBody) {\r\n      return new Promise(function(resolve, reject) {\r\n        request(requestBody, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    const product = data.product;\r\n    const quality = data.quality;\r\n    const cropYear = data.cropYear;\r\n    const BPRefNo = data.BPRefNo;\r\n\r\n    const ticketData = (quality, product, bpRefno, cropYear) => getRequestBody(req.body.propertyList.eka_connect_host + '\/data\/12325a98-a959-4939-9005-4158d136afcd\/a26737b3-a5a9-4fe9-b6f7-29218a3bc45a?quality='+quality+'&product='+product+'&bpRefNo='+bpRefno+'&cropYear'+cropYear);\r\n\r\n    const promise = new Promise((resolve, reject) => {\r\n      getData(ticketData(quality, product, BPRefNo, cropYear))\r\n        .then(res => {\r\n          const newRes = res.map(i => ({\r\n            ...i,\r\n            sellingOption: 'Contract',\r\n            acquirer: data.corporate,\r\n            contractNumber: data.contractRefNo,\r\n            contractQuantity: data.itemOpenQuantityInBase,\r\n            price: data.contractPrice,\r\n            isMultiGrade: data.isMultiGrade,\r\n            priceType: data.priceType,\r\n            tonnesSold: 0\r\n          }));\r\n          resolve(newRes);\r\n        }); \r\n    })\r\n\r\n    promise.then(data => {\r\n        res.status(200).send({warehousedtickets:data});\r\n    })\r\n    };",
  "sys__UUID" : "94856bf6-5879-4467-96a6-97aa1335f319"
}