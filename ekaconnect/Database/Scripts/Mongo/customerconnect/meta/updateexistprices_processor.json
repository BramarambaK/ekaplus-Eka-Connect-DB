{
  "_id": "updateexistprices_processor",
  "name": "updateexistprices_processor",
  "type": "processor",
  "refType": "app",
  "isNode":true,
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const appId = '12325a98-a959-4939-9005-4158d136afcd';\r\nconst pricesObjId = 'ab3fc628-ecbc-43e0-81cb-aa2d5b6e5c40';\r\nconst serverTimezoneOffset = new Date().getTimezoneOffset();\r\nconst today = moment(moment().format('YYYY-MM-DDTHH:mm:ssZ'), 'YYYY-MM-DDTHH:mm:ssZ');\r\nconst tenant = req.headers['X-TenantID'];\r\nconst getPricesId = `${req.body.propertyList.eka_connect_host}/data/${appId}/${pricesObjId}`;\r\nconst userInfo = `${req.body.propertyList.eka_connect_host}/api/getbpuserinfo`;\r\nlet data = req.body.bulkPayLoadData || [];\r\nconst getData = (url) =>\r\n  new Promise(function (resolve, reject) {\r\n    request(\r\n      {\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization\r\n        },\r\n        json: true,\r\n      },\r\n      function (err, response, body) {\r\n        if (\r\n          response &&\r\n          response.statusCode >= 200 &&\r\n          response.statusCode <= 299\r\n        ) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      }\r\n    );\r\n  });\r\nconst getPriceData = (url) =>\r\n  new Promise(function (resolve, reject) {\r\n    request(\r\n      {\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': tenant\r\n        },\r\n        json: true,\r\n      },\r\n      function (err, response, body) {\r\n        if (\r\n          response &&\r\n          response.statusCode >= 200 &&\r\n          response.statusCode <= 299\r\n        ) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      }\r\n    );\r\n  });\r\nconst equal = (i, j) =>\r\n  i.bpRefNo == j.bpRefNo &&\r\n  i.bpExternalCode == j.bpExternalCode &&\r\n  i.season == j.season &&\r\n  i.product == j.product &&\r\n  i.quality == j.quality &&\r\n  i.region == j.region &&\r\n  i.site == j.site &&\r\n  i.pricingOption == j.pricingOption &&\r\n  i.sustainable == j.sustainable;\r\nconst priceStatus = (price) => {\r\n  const start = moment(price.startDateTime, 'YYYY-MM-DDTHH:mm:ssZ');\r\n  const end = moment(price.endDateTime, 'YYYY-MM-DDTHH:mm:ssZ');\r\n  let status = price.status;\r\n  if (\r\n    status != 'Expired' &&\r\n    moment(start).isValid() &&\r\n    moment(end).isValid()\r\n  ) {\r\n    if (\r\n      moment(end).isSameOrAfter(today) &&\r\n      moment(start).isSameOrBefore(today)\r\n    ) {\r\n      status = 'Active';\r\n    } else if (\r\n      moment(start).isAfter(today) &&\r\n      moment(end).isAfter(today)\r\n    ) {\r\n      status = 'Scheduled';\r\n    } else if (\r\n      moment(start).isBefore(today) &&\r\n      moment(end).isBefore(today)\r\n    ) {\r\n      status = 'Expired';\r\n    }\r\n  }\r\n\r\n  return status;\r\n};\r\n\r\nconst getDBDuplicates = (price) => {\r\n  const filterDbDuplicatePrices = price.filter((j)=>{\r\n    return data.some((i) => {\r\n      if(equal(i,j) && \r\n        j.status != 'Expired' &&\r\n        !(moment(moment(i.startDateTime)).isAfter(moment(j.endDateTime))) &&\r\n        !(moment(moment(i.endDateTime)).isBefore(moment(j.startDateTime)))\r\n      ){\r\n        //.subtract(1,'seconds')\r\n        let dateExchangeUTC = moment(i.startDateTime).subtract(1,'seconds').utc();\r\n        let dateExchangeUTCEnddate = moment(i.endDateTime).add(1,'seconds').utc();\r\n        let dateExchangeUTCNow = moment().utc();\r\n        let dateExchnageWithTimezoneNow = dateExchangeUTCNow.clone().subtract(i.clientTimezoneOffset? i.clientTimezoneOffset: 0, \"minutes\");\r\n        let dateExchnageWithTimezoneEnddate = dateExchangeUTCEnddate.clone().subtract(i.clientTimezoneOffset? i.clientTimezoneOffset: 0, \"minutes\");\r\n        let dateExchangeWithTimezone = dateExchangeUTC.clone().subtract(i.clientTimezoneOffset? i.clientTimezoneOffset: 0, \"minutes\");\r\n        if(j['status'] == 'Scheduled'){\r\n          if(\r\n            moment(moment(i.startDateTime)).isSameOrBefore(moment(j.startDateTime)) &&\r\n            moment(moment(i.endDateTime)).isBefore(moment(j.endDateTime))\r\n          ){\r\n            j['startDateTime'] = dateExchangeUTCEnddate.format(\"YYYY-MM-DDTHH:mm:ss[Z]\");;\r\n            j['startDate'] = dateExchnageWithTimezoneEnddate.format(\"YYYY-MM-DD\");;\r\n            j['startTime'] = dateExchnageWithTimezoneEnddate.format(\"HH:mm\");\r\n          }else if(\r\n            moment(moment(i.startDateTime)).isBefore(moment(j.startDateTime)) &&\r\n            moment(moment(i.endDateTime)).isAfter(moment(j.endDateTime))\r\n          ){\r\n            j['startDateTime'] = dateExchangeUTCNow.format(\"YYYY-MM-DDTHH:mm:ss[Z]\");;\r\n            j['startDate'] = dateExchnageWithTimezoneNow.format(\"YYYY-MM-DD\");;\r\n            j['startTime'] = dateExchnageWithTimezoneNow.format(\"HH:mm\");\r\n            j['endDateTime'] = dateExchangeUTCNow.format(\"YYYY-MM-DDTHH:mm:ss[Z]\");;\r\n            j['endDate'] = dateExchnageWithTimezoneNow.format(\"YYYY-MM-DD\");;\r\n            j['endTime'] = dateExchnageWithTimezoneNow.format(\"HH:mm\");\r\n            j['status'] = 'Expired';\r\n          }else{\r\n            j['endDateTime'] = dateExchangeUTC.format(\"YYYY-MM-DDTHH:mm:ss[Z]\");;\r\n            j['endDate'] = dateExchangeWithTimezone.format(\"YYYY-MM-DD\");;\r\n            j['endTime'] = dateExchangeWithTimezone.format(\"HH:mm\");\r\n          }\r\n        }else{\r\n          j['endDateTime'] = dateExchangeUTC.format(\"YYYY-MM-DDTHH:mm:ss[Z]\");;\r\n          j['endDate'] = dateExchangeWithTimezone.format(\"YYYY-MM-DD\");;\r\n          j['endTime'] = dateExchangeWithTimezone.format(\"HH:mm\");\r\n        }\r\n\r\n        if(j['status'] == 'Active' || j['status'] == 'Scheduled') delete j['status'];\r\n        return j;\r\n      }\r\n    })\r\n  });\r\n  return filterDbDuplicatePrices;\r\n}\r\n\r\ngetData(userInfo).then(userDetails => {\r\n  const userName = userDetails.data.firstName + ' ' + userDetails.data.lastName;\r\n  \r\n  getPriceData(getPricesId).then((price)=>{\r\n    price = price.map(i=>({...i,\r\n      status: priceStatus(i)\r\n    }));\r\n\r\n    const dbDuplicates = getDBDuplicates(price);\r\n    res.status(200).send([...data,...dbDuplicates.map(i=>({...i,withdrawnBy:userName}))]);\r\n  })\r\n  .catch(err=>{\r\n    console.log(err);\r\n  });\r\n})\r\n.catch(err=>{\r\n  console.log(err);\r\n});",
  "sys__UUID": "319b89cb-09b7-4409-ad1d-16e3df50ccef"
}
