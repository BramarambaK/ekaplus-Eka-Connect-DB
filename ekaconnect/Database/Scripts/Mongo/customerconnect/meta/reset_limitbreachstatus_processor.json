{
  "_id": "reset_limitbreachstatus_processor",
  "name": "reset_limitbreachstatus_processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const appId = '12325a98-a959-4939-9005-4158d136afcd';\r\nconst volumeLimitObjId = 'c98119db-1f7c-4802-b72a-6678f1ecc0f3';\r\nconst procssorName = req.body.processorDetails.name;\r\nvar volumeLimitArrayReceived;\r\n\/\/Format payload into object array\r\nif (!Array.isArray(req.body.bulkPayLoadData)) {\r\n  volumeLimitArrayReceived = [{ ...req.body }];\r\n  delete volumeLimitArrayReceived[0]['processorDetails'];\r\n  delete volumeLimitArrayReceived[0]['propertyList'];\r\n} else {\r\n  volumeLimitArrayReceived = req.body.bulkPayLoadData;\r\n}\r\n\/\/ console.log(\r\n\/\/   'volumeLimitArrayReceived',\r\n\/\/   JSON.stringify(volumeLimitArrayReceived)\r\n\/\/ );\r\nvar connectMetaVolumeLimit = {\r\n  method: 'GET',\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    `\/meta\/app\/${appId}\/object\/${volumeLimitObjId}`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n    requestid: req.headers['requestid'] + '-' + procssorName,\r\n  },\r\n};\r\nvar connectDataVolumeLimit = {\r\n  method: 'GET',\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    `\/data\/${appId}\/${volumeLimitObjId}`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n  },\r\n  body: {\r\n    filterData: {\r\n      filter: [],\r\n    },\r\n  },\r\n  json: true,\r\n};\r\nfunction get_connectDataOrMeta(connectData) {\r\n  return new Promise(function (resolve, reject) {\r\n    console.log('get_connectDataOrMeta Request-' + JSON.stringify(connectData));\r\n    request(connectData, function (err, response, body) {\r\n      \/\/ console.log(\"get_connectData Response-\" + JSON.stringify(body));\r\n      if (response.statusCode === 200) resolve(body);\r\n      else {\r\n        reject(err || body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nget_connectDataOrMeta(connectMetaVolumeLimit)\r\n  .then(async (metaVolumeLimit) => {\r\n    var volumeLimitUniqueFields = JSON.parse(metaVolumeLimit).uniqueFields;\r\n    volumeLimitUniqueFields\r\n      .filter((e) => !(e == 'site' || e == 'quality'))\r\n      .forEach((element) => {\r\n        connectDataVolumeLimit.body.filterData.filter.push({\r\n          fieldName: element,\r\n          operator: 'in',\r\n          value: [...new Set(volumeLimitArrayReceived.map((e) => e[element]))],\r\n        });\r\n      });\r\n\r\n    \/\/If Daily limit is greater than or equal to daily purchase set limitBreachStatus = 'N'\r\n    await get_connectDataOrMeta(connectDataVolumeLimit)\r\n      .then((volumeLimitDataFromDB) => {\r\n        if (volumeLimitArrayReceived[0].sys__data__state != 'Delete') {\r\n          volumeLimitArrayReceived.forEach((element) => {\r\n            let existInDB = false;\r\n            for (let i = 0; i < volumeLimitDataFromDB.length; i++) {\r\n              existInDB = false;\r\n              if (\r\n                volumeLimitUniqueFields.filter(\r\n                  (o) => element[o] == volumeLimitDataFromDB[i][o]\r\n                ).length == volumeLimitUniqueFields.length\r\n              ) {\r\n                existInDB = true;\r\n                element.dailypurchased =\r\n                  volumeLimitDataFromDB[i].dailypurchased;\r\n                if (element.dailyLimit && element.dailypurchased) {\r\n                  if (element.dailypurchased <= element.dailyLimit) {\r\n                    element.limitBreachStatus = 'N';\r\n                  } else {\r\n                    element.limitBreachStatus = 'Y';\r\n                  }\r\n                }\r\n\r\n                volumeLimitDataFromDB[i] = element;\r\n                break;\r\n              }\r\n            }\r\n            if (!existInDB && element.sys__data__state != 'Delete') {\r\n              if (element.dailyLimit && element.dailypurchased) {\r\n                if (element.dailypurchased <= element.dailyLimit) {\r\n                  element.limitBreachStatus = 'N';\r\n                } else {\r\n                  element.limitBreachStatus = 'Y';\r\n                }\r\n              }\r\n              volumeLimitDataFromDB.push(element);\r\n            }\r\n          });\r\n        }\r\n        \/\/UnBreach lower limits if higher bucket is unBreached\r\n        var volumeLimitDataFromDBSorted = [];\r\n        if (volumeLimitArrayReceived[0].sys__data__state == 'Delete')\r\n          volumeLimitArrayReceived\r\n            .filter((o) => o.site == 'All' || o.quality == 'All')\r\n            .map((o) => (o.limitBreachStatus = 'N'));\r\n        volumeLimitDataFromDBSorted.push(\r\n          \/\/ ...(volumeLimitArrayReceived[0].sys__data__state == 'Delete'\r\n          \/\/   ? volumeLimitArrayReceived.filter(\r\n          \/\/       (o) =>\r\n          \/\/         (o.site == 'All' && o.quality != 'All') ||\r\n          \/\/         (o.site != 'All' && o.quality == 'All')\r\n          \/\/     )\r\n          \/\/   : []),\r\n          ...volumeLimitArrayReceived.filter(\r\n            (o) =>\r\n              o.limitBreachStatus != 'Y' &&\r\n              o.site == 'All' &&\r\n              o.quality == 'All'\r\n          ),\r\n          ...volumeLimitArrayReceived.filter(\r\n            (o) =>\r\n              o.limitBreachStatus != 'Y' &&\r\n              ((o.site == 'All' && o.quality != 'All') ||\r\n                (o.site != 'All' && o.quality == 'All'))\r\n          )\r\n          \/\/ ...(volumeLimitArrayReceived[0].sys__data__state == 'Delete'\r\n          \/\/   ? volumeLimitArrayReceived.filter(\r\n          \/\/       (o) => o.site == 'All' && o.quality == 'All'\r\n          \/\/     )\r\n          \/\/   : [])\r\n          \/\/ ,...volumeLimitDataFromDB.filter(o=>o.site!='All' && o.quality!='All')\r\n        );\r\n\r\n        volumeLimitDataFromDBSorted\r\n          \/\/ .filter(\r\n          \/\/   (o) => o.limitBreachStatus != 'Y'\r\n          \/\/   \/\/ && o.site == 'All' || o.quality == 'All'\r\n          \/\/ )\r\n          .forEach((o) => {\r\n            if (o.site == 'All' && o.quality == 'All') {\r\n              volumeLimitDataFromDB\r\n                .filter(\r\n                  (entry) =>\r\n                    o.bpRefNo === entry.bpRefNo &&\r\n                    o.bpExternalCode.toLowerCase() ===\r\n                      entry.bpExternalCode.toLowerCase() &&\r\n                    o.season === entry.season &&\r\n                    o.product.toLowerCase() === entry.product.toLowerCase() &&\r\n                    o.region.toLowerCase() === entry.region.toLowerCase() &&\r\n                    entry.limitBreachStatus == 'Y'\r\n                )\r\n                .forEach((entry) => {\r\n                  if (\r\n                    !entry.dailypurchased ||\r\n                    entry.dailypurchased <= entry.dailyLimit\r\n                  ) {\r\n                    entry.limitBreachStatus = 'N';\r\n                    \/\/ volumeLimitArrayReceived.push(entry);\r\n                  }\r\n                });\r\n            } else if (o.site == 'All') {\r\n              volumeLimitDataFromDB\r\n                .filter(\r\n                  (entry) =>\r\n                    o.bpRefNo === entry.bpRefNo &&\r\n                    o.bpExternalCode.toLowerCase() ===\r\n                      entry.bpExternalCode.toLowerCase() &&\r\n                    o.season === entry.season &&\r\n                    o.product.toLowerCase() === entry.product.toLowerCase() &&\r\n                    o.region.toLowerCase() === entry.region.toLowerCase() &&\r\n                    o.quality.toLowerCase() === entry.quality.toLowerCase() &&\r\n                    entry.limitBreachStatus == 'Y'\r\n                )\r\n                .forEach((entry) => {\r\n                  if (\r\n                    !entry.dailypurchased ||\r\n                    entry.dailypurchased <= entry.dailyLimit\r\n                  ) {\r\n                    entry.limitBreachStatus = 'N';\r\n                    \/\/ volumeLimitArrayReceived.push(entry);\r\n                  }\r\n                });\r\n            } else if (o.quality == 'All') {\r\n              volumeLimitDataFromDB\r\n                .filter(\r\n                  (entry) =>\r\n                    o.bpRefNo === entry.bpRefNo &&\r\n                    o.bpExternalCode.toLowerCase() ===\r\n                      entry.bpExternalCode.toLowerCase() &&\r\n                    o.season === entry.season &&\r\n                    o.product.toLowerCase() === entry.product.toLowerCase() &&\r\n                    o.region.toLowerCase() === entry.region.toLowerCase() &&\r\n                    o.site.toLowerCase() === entry.site.toLowerCase() &&\r\n                    entry.limitBreachStatus == 'Y'\r\n                )\r\n                .forEach((entry) => {\r\n                  if (\r\n                    !entry.dailypurchased ||\r\n                    entry.dailypurchased <= entry.dailyLimit\r\n                  ) {\r\n                    entry.limitBreachStatus = 'N';\r\n                    \/\/ volumeLimitArrayReceived.push(entry);\r\n                  }\r\n                });\r\n            }\r\n          });\r\n\r\n        \/\/Breach limit if higher bucket is breached\r\n        volumeLimitDataFromDBSorted = [];\r\n        volumeLimitDataFromDBSorted.push(\r\n          ...volumeLimitDataFromDB.filter(\r\n            (o) => o.site == 'All' && o.quality == 'All'\r\n          ),\r\n          ...volumeLimitDataFromDB.filter(\r\n            (o) =>\r\n              (o.site == 'All' && o.quality != 'All') ||\r\n              (o.site != 'All' && o.quality == 'All')\r\n          )\r\n          \/\/ ,...volumeLimitDataFromDB.filter(o=>o.site!='All' && o.quality!='All')\r\n        );\r\n        var volumeLimitDataLimitBreachedHavingAll =\r\n          volumeLimitDataFromDBSorted.filter(\r\n            (o) => o.limitBreachStatus == 'Y'\r\n            \/\/ && (o.site == 'All' || o.quality == 'All')\r\n          );\r\n        volumeLimitDataLimitBreachedHavingAll.forEach((o) => {\r\n          if (o.site == 'All' && o.quality == 'All')\r\n            volumeLimitDataFromDB\r\n              .filter(\r\n                (entry) =>\r\n                  o.bpRefNo === entry.bpRefNo &&\r\n                  o.bpExternalCode.toLowerCase() ===\r\n                    entry.bpExternalCode.toLowerCase() &&\r\n                  o.season === entry.season &&\r\n                  o.product.toLowerCase() === entry.product.toLowerCase() &&\r\n                  o.region.toLowerCase() === entry.region.toLowerCase() &&\r\n                  entry.limitBreachStatus != 'Y'\r\n              )\r\n              .forEach((entry) => (entry.limitBreachStatus = 'Y'));\r\n          else if (o.site == 'All')\r\n            volumeLimitDataFromDB\r\n              .filter(\r\n                (entry) =>\r\n                  o.bpRefNo === entry.bpRefNo &&\r\n                  o.bpExternalCode.toLowerCase() ===\r\n                    entry.bpExternalCode.toLowerCase() &&\r\n                  o.season === entry.season &&\r\n                  o.product.toLowerCase() === entry.product.toLowerCase() &&\r\n                  o.region.toLowerCase() === entry.region.toLowerCase() &&\r\n                  o.quality.toLowerCase() === entry.quality.toLowerCase() &&\r\n                  entry.limitBreachStatus != 'Y'\r\n              )\r\n              .forEach((entry) => (entry.limitBreachStatus = 'Y'));\r\n          else if (o.quality == 'All')\r\n            volumeLimitDataFromDB\r\n              .filter(\r\n                (entry) =>\r\n                  o.bpRefNo === entry.bpRefNo &&\r\n                  o.bpExternalCode.toLowerCase() ===\r\n                    entry.bpExternalCode.toLowerCase() &&\r\n                  o.season === entry.season &&\r\n                  o.product.toLowerCase() === entry.product.toLowerCase() &&\r\n                  o.region.toLowerCase() === entry.region.toLowerCase() &&\r\n                  o.site.toLowerCase() === entry.site.toLowerCase() &&\r\n                  entry.limitBreachStatus != 'Y'\r\n              )\r\n              .forEach((entry) => (entry.limitBreachStatus = 'Y'));\r\n        });\r\n        \/\/ console.log(JSON.stringify(volumeLimitDataFromDB));\r\n        res.status(200).send(volumeLimitDataFromDB);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        res.status(500).send(err);\r\n      });\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n    res.status(500).send(err);\r\n  });",
  "sys__UUID": "6af28a74-dbae-47af-b74d-289b9d04441c",
  "type": "processor"
}