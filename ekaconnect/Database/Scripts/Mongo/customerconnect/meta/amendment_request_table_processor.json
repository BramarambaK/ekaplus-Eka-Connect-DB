{
    "_id": "amendment_request_table_processor",
    "name": "amendment_request_table_processor",
    "type": "processor",
    "refType": "app",
    "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
    "snippet": "\r\n    let data = req.body.ticketapprovecomposite;\r\n    const tenant = req.headers['X-TenantID'];\r\n    const auth = req.headers.authorization;\r\n    const appId = req.body.appId;\r\n    const send = (status, message) => res.status(status).send(message);\r\n    const headers = {\r\n      Authorization: auth,\r\n      'X-TenantID': tenant,\r\n      'Content-Type': 'application\/json',\r\n      requestid: data.requestId\r\n    };\r\n    const requestBody = {\r\n      workflowTaskName: 'EXTERNAL_GCS_TICKET_AMENDMENT_API',\r\n      task: 'EXTERNAL_GCS_TICKET_AMENDMENT_API',\r\n      appId: appId,\r\n      output: {\r\n        EXTERNAL_GCS_TICKET_AMENDMENT_API: []\r\n      }\r\n    };\r\n    if (data.currentTicketList && data.currentTicketList.length) {\r\n      let arr = data.currentTicketList.map(item => {\r\n        return {\r\n          cropYear: item.cropYear,\r\n          ticketRefNo: item.ticketRefNo,\r\n          varietyName: item.varietyName,\r\n          contractId: item.contractId,\r\n          paddockLocation: item.paddockLocation,\r\n          truckRegistration: item.truckRegistration,\r\n          requestedBy: data.requestBy\r\n        };\r\n      });\r\n      requestBody.output.EXTERNAL_GCS_TICKET_AMENDMENT_API = arr;\r\n    } else {\r\n      send(400, 'No data');\r\n      return;\r\n    }\r\n    const requestFunction = req =>\r\n      new Promise((resolve, reject) => {\r\n        request(\r\n          {\r\n            ...req,\r\n            json: true\r\n          },\r\n          (err, response, body) => {\r\n            if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(err || body.error || body.errorMessage);\r\n            }\r\n          }\r\n        );\r\n      });\r\n    const workflow = (body, headers) =>\r\n      requestFunction({\r\n        method: 'POST',\r\n        url: `${req.body.propertyList.eka_connect_host}\/workflow`,\r\n        body: body,\r\n        headers: headers\r\n      });\r\n    const approveRequest = (requestBody, headers) => workflow(requestBody, headers);\r\n    const partialTicketsRequest = (requestBody, headers) => workflow(requestBody, headers);\r\n    approveRequest(requestBody, headers)\r\n      .then(response => {\r\n        if (response.data.Status == 200) {\r\n          const x = JSON.parse(response.data.StatusMessage);\r\n\r\n          const failedTickets = x.filter(item => item.Status >= 400);\r\n          \/\/ const failledlength=failedTickets.length;\r\n\r\n          if (failedTickets.length > 0) {\r\n            send(400, {\r\n\r\n              errorCode: '500',\r\n\r\n              errorMessage: 'This request cannot be actioned at this time. Please try again later.',\r\n\r\n              errorContext: 'This request cannot be actioned at this time. Please try again later.',\r\n\r\n              errorLocalizedMessage: 'This request cannot be actioned at this time. Please try again later.'\r\n            });\r\n          } else {\r\n            updateElastic(data);\r\n          }\r\n        } else {\r\n          console.log(response);\r\n          send(400, 'Request cannot be approved, please contact system admin');\r\n        }\r\n      })\r\n      .catch(error => {\r\n        send(400, 'This request cannot be actioned at this time. Please try again later.');\r\n        handleErrorResponse(req, '', error, '')\r\n      });\r\n    const updateElastic = data => {\r\n      const tenant = req.headers['X-TenantID'];\r\n      const auth = req.headers.authorization;\r\n      const appId = req.body.appId;\r\n      const send = (status, message) => res.status(status).send(message);\r\n      const headers = {\r\n        Authorization: auth,\r\n        'X-TenantID': tenant,\r\n        'Content-Type': 'application\/json'\r\n      };\r\n      const getData = req =>\r\n        new Promise((resolve, reject) => {\r\n          request(\r\n            {\r\n              ...req,\r\n              headers: headers,\r\n              json: true\r\n            },\r\n            (err, response, body) => {\r\n              if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n              } else {\r\n                reject(err || body.error || body.errorMessage);\r\n              }\r\n            }\r\n          );\r\n        });\r\n      const workflow = body =>\r\n        getData({\r\n          method: 'POST',\r\n          url: `${req.body.propertyList.eka_connect_host}\/workflow`,\r\n          body: body\r\n        });\r\n      const updateTicket = t =>\r\n        workflow({\r\n          output: {\r\n            elastic_updateTicketOfferData_withoutOfferExecution_internal: [t]\r\n          },\r\n          task: 'elastic_updateTicketOfferData_withoutOfferExecution_internal',\r\n          workflowTaskName: 'elastic_updateTicketOfferData_withoutOfferExecution_internal',\r\n          appId: '12325a98-a959-4939-9005-4158d136afcd'\r\n        });\r\n\r\n      const updatedTicket = {\r\n        requestId: data.requestId,\r\n        ticketRefNo: data.ticketRefNo,\r\n        cropYear: data.cropYear,\r\n        requestStatus: 'Approved',\r\n        isRequestActive: false\r\n      };\r\n      updateTicket(updatedTicket)\r\n        .then(() => {\r\n          console.log('request ID', data.requestId);\r\n          send(200, {\r\n            requestId: data.requestId,\r\n            msg: data.requestId + ' has been successfully approved.',\r\n\r\n            tabIndex: 2,\r\n            ngrFilter: data.BPRefNo\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n          send(400, 'Request cannot be approved, please contact system admin');\r\n          handleErrorResponse(req, '', err, '')\r\n        });\r\n    };\r\n  ",
    "sys__UUID": "6d97fd2e-bd5e-4d8e-baba-10a61f7dc7e1"
  }
  