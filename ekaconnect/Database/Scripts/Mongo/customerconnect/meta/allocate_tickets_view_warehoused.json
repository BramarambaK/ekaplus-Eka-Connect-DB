{
  "_id": "allocate_tickets_view_warehoused_processor",
  "name": "allocate_tickets_view_warehoused_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": " const fields = [\r\n      'allocatedBy',\r\n      'allocationDate',\r\n      'basePrice',\r\n      'bpName',\r\n      'bpRefNo',\r\n      'bulkHandler',\r\n      'contractId',\r\n      'cropYear',\r\n      'isOnFarmPickup',\r\n      'isparentTicket',\r\n      'location',\r\n      'origin',\r\n      'parentticketRefNo',\r\n      'payGrade',\r\n      'pickUpFee',\r\n      'product',\r\n      'quality',\r\n      'quantity',\r\n      'quantityUnit',\r\n      'receivalDate',\r\n      'receivalFee',\r\n      'testResultsLong',\r\n      'testResultsShort',\r\n      'ticketHandlerBpRefNo',\r\n      'ticketHandlerCode',\r\n      'ticketHandlerName',\r\n      'ticketRefNo',\r\n      'ticketStatus',\r\n      'upgradeStatus',\r\n      'userId',\r\n      'userType',\r\n    'varietyName',\r\n    'paddockLocation',\r\n    'truckRegistration'\r\n    ];\r\n    const send = (status, message) => res.status(status).send(message);\r\n    const tenant = req.headers['X-TenantID'];\r\n    const objectData = fields.reduce((acc, curr) => ({ ...acc, [curr]: req.body[curr] }), {});\r\n    const data = {\r\n      ticketAction: req.body.ticketAction || ''\r\n    };\r\n    let ticketsArr = [];\r\n\r\n    const getValidatedTickets = body =>\r\n      new Promise(function(resolve, reject) {\r\n        request(\r\n          {\r\n            method: 'GET',\r\n            url:\r\n              req.body.propertyList.eka_connect_host +\r\n              '/data/12325a98-a959-4939-9005-4158d136afcd/a26737b3-a5a9-4fe9-b6f7-29218a3bc45a',\r\n            headers: {\r\n              Authorization: req.headers.authorization,\r\n              'X-TenantID': tenant\r\n            },\r\n            body,\r\n            json: true\r\n          },\r\n          function(err, response, body) {\r\n            if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          }\r\n        );\r\n      });\r\n\r\n    let filterBody = {\r\n      filterData: {\r\n        filter: [\r\n          {\r\n            fieldName: 'ticketRefNo',\r\n            operator: 'in',\r\n            value: ticketsArr\r\n          },\r\n          {\r\n            fieldName: 'requestType',\r\n            operator: 'eq',\r\n            value: 'Offer for warehoused tickets'\r\n          },\r\n          {\r\n            fieldName: 'isRequestedByEkaCCSystem',\r\n            operator: 'eq',\r\n            value: true\r\n          }\r\n        ]\r\n      }\r\n    };\r\n\r\n    let filterBody2 = {\r\n      filterData: {\r\n        filter: [\r\n          {\r\n            fieldName: 'ticketRefNo',\r\n            operator: 'in',\r\n            value: ticketsArr\r\n          },\r\n          {\r\n            fieldName: 'isRequestedByEkaCCSystem',\r\n            operator: 'eq',\r\n            value: true\r\n          }\r\n        ]\r\n      }\r\n    };\r\n\r\n    if (req.body.ticketAction == 'Make an offer') {\r\n      ticketsArr.push(objectData.ticketRefNo);\r\n      getValidatedTickets(filterBody)\r\n        .then(values => {\r\n          if (values.length == 0) {\r\n            const requiredData = {\r\n              ...data,\r\n              warehousedticketoffersearched: [objectData]\r\n            };\r\n            send(200, requiredData);\r\n          } else {\r\n            send(400, 'Request already available for the ticket, please check the request tab.');\r\n          }\r\n        })\r\n          .catch(err => {\r\n              console.log(err);\r\n              send(500, 'Something went wrong.')\r\n        });\r\n    } else if (req.body.ticketAction == 'Allocate Ticket') {\r\n      let allocateData = {\r\n        ...data,\r\n        ticketlistingwarehoused: [objectData]\r\n      };\r\n      res.status(200).send(allocateData);\r\n    } else if (req.body.ticketAction == 'Amend ticket') {\r\n      ticketsArr.push(objectData.ticketRefNo);\r\n      getValidatedTickets(filterBody2)\r\n        .then(values => {\r\n            if (values.length == 0) {\r\n                const requiredData = {\r\n                    ...data,\r\n      \r\n                    amendticketlist: [objectData].map(item => {\r\n                      return { ...item, amendProduct: item.product, amendCropYear: item.cropYear, amendedPaddockLocation:item.paddockLocation,amendedTruckRegistration:item.truckRegistration, amendedContractId:item.contractId, varietyNameList:item.varietyName }\r\n                    })\r\n                  };\r\n            send(200, requiredData);\r\n          } else {\r\n            send(400, 'Request already available for the ticket, please check the request tab.');\r\n          }\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            send(500, 'Something went wrong.')\r\n      });\r\n    } else if (req.body.ticketAction == 'Transfer ticket') {\r\n      ticketsArr.push(objectData.ticketRefNo);\r\n      getValidatedTickets(filterBody2)\r\n        .then(values => {\r\n          if (values.length == 0) {\r\n            send(200, { ...data, selectedtickets: [objectData] });\r\n          } else {\r\n            send(400, 'Request already available for the ticket, please check the request tab.');\r\n          }\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            send(500, 'Something went wrong.')\r\n      });\r\n    }",
  "sys__UUID": "ef57041c-0d74-4073-955f-27b1eeb0cb8e"
}
