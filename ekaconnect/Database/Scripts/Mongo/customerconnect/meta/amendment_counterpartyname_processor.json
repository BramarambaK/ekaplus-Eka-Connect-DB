{
  "_id": "amendment_counterpartyname_processor",
  "name": "amendment_counterpartyname_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "sys__UUID": "1fe72ab7-b3e2-4262-8fdc-165026c44582",
  "snippet": "req.body.mdmProcessorServiceKey = JSON.parse(req.body.mdmProcessorServiceKey);\r\n    var objData = req.body.selectedData.requesteddetails.data || req.body.selectedData.amendment_requestcontractcomposite || req.body.selectedData.amendment_requestcontractcomposite.amendment_requestcontractdetailsform;\r\n    \/\/ if (\r\n    \/\/   req.body.selectedData.amendment_requestcontractcomposite &&\r\n    \/\/   req.body.selectedData.amendment_requestcontractcomposite.amendment_requestcontractdetailsform\r\n    \/\/ ) {\r\n    \/\/   objData = req.body.selectedData.amendment_requestcontractcomposite.amendment_requestcontractdetailsform;\r\n    \/\/ } else {\r\n    \/\/   objData = req.body.selectedData.requesteddetails.data;\r\n    \/\/ }\r\n    var cpNameKey = req.body.mdmProcessorServiceKey[0].serviceKey;\r\n    var cityNameKey = req.body.mdmProcessorServiceKey[1].serviceKey;\r\n    var spFromKey = req.body.mdmProcessorServiceKey[2].serviceKey;\r\n    var spToKey = req.body.mdmProcessorServiceKey[3].serviceKey;\r\n    var disableKey = req.body.mdmProcessorServiceKey[4].serviceKey;\r\n\r\n    var shipmentFrom = moment(objData.shipmentPeriodFrom).format('MMM YYYY');\r\n    var shipmentTo = moment(objData.shipmentPeriodTo).format('MMM YYYY');\r\n    var spFromArray = [{ key: shipmentFrom, value: shipmentFrom }];\r\n    var spToArray = [{ key: shipmentTo, value: shipmentTo }];\r\n    var elasticdata = [];\r\n    spFromArray.push({\r\n      key: moment(shipmentFrom)\r\n        .add(-1, 'months')\r\n        .format('MMM YYYY'),\r\n      value: moment(shipmentFrom)\r\n        .add(-1, 'months')\r\n        .format('MMM YYYY')\r\n    });\r\n    spToArray.push({\r\n      key: moment(shipmentTo)\r\n        .add(1, 'months')\r\n        .format('MMM YYYY'),\r\n      value: moment(shipmentTo)\r\n        .add(1, 'months')\r\n        .format('MMM YYYY')\r\n    });\r\n\r\n    var ngrNameFromUrl = objData.counterPartyName;\r\n    var businessParties = {\r\n      method: 'GET',\r\n      url: req.body.propertyList.platform_url + '\/spring\/customers\/getBusinessPartyDetails',\r\n      headers: {\r\n        Authorization: req.headers.authorization\r\n      },\r\n      json: true\r\n    };\r\n    function get_businessParties() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(businessParties, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    \/\/ var email = {\r\n    \/\/   method: 'GET',\r\n    \/\/   url: req.body.propertyList.platform_url + '\/cac-security\/api\/userinfo',\r\n    \/\/   headers: {\r\n    \/\/     Authorization: req.headers.authorization\r\n    \/\/   },\r\n    \/\/   json: true\r\n    \/\/ };\r\n    \/\/ function get_email() {\r\n    \/\/   return new Promise(function(resolve, reject) {\r\n    \/\/     request(email, function(err, response, body) {\r\n    \/\/       if (err || body.error) reject(body);\r\n    \/\/       else {\r\n    \/\/         resolve(body);\r\n    \/\/       }\r\n    \/\/     });\r\n    \/\/   });\r\n    \/\/ }\r\n\r\n    var customer = {\r\n      method: 'GET',\r\n      url: req.body.propertyList.eka_connect_host + '\/api\/getTenantCustomerData',\r\n      headers: {\r\n        Authorization: req.headers.authorization\r\n      },\r\n      json: true\r\n    };\r\n    function get_customer() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(customer, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    function getData(requestBody) {\r\n      return new Promise(function(resolve, reject) {\r\n        request(requestBody, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    const connectElasticData = workflowTask => ({\r\n      method: 'POST',\r\n      url: req.body.propertyList.eka_connect_host + `\/workflow\/data\/`,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['X-TenantID']\r\n      },\r\n      body: {\r\n        appId: req.body.appId,\r\n        workFlowTask: workflowTask,\r\n        sD: [],\r\n        payLoadData: '',\r\n        params: {},\r\n        qP: {\r\n          from: 0,\r\n          size: 10000\r\n        }\r\n      },\r\n      json: true\r\n    });\r\n\r\n    const getCollectionMapper = (appId, objectId, collectionName, tenant, filters) =>\r\n      new Promise((resolve, reject) => {\r\n        const r = {\r\n          method: 'POST',\r\n          url: `${req.body.propertyList.eka_connect_host}\/collectionmapper\/${appId}\/${objectId}\/fetchCollectionRecords`,\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            ttl: 600,\r\n            'X-TenantID': tenant,\r\n            'Content-Type': 'application\/json'\r\n          },\r\n          body: filters\r\n            ? {\r\n                collectionName,\r\n                getAllRecords: true,\r\n                criteria: {\r\n                  filter: Object.keys(filters).map(i => ({\r\n                    fieldName: i,\r\n                    operator: 'eq',\r\n                    value: filters[i]\r\n                  }))\r\n                },\r\n                start: '',\r\n                limit: ''\r\n              }\r\n            : {\r\n                collectionName\r\n              },\r\n          json: true\r\n        };\r\n        request(r, (err, response, body) => {\r\n          if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n\r\n    const getLocationGroupsNew = city =>\r\n      new Promise((resolve, reject) => {\r\n        if (city) {\r\n          const values = connectElasticData('locationsQueryElastic');\r\n          getData(values)\r\n            .then(locationData => {\r\n              elasticdata = locationData;\r\n              const result = locationData.data.filter(\r\n                pzdetails => pzdetails['locationcityname'] === city && pzdetails['source'] === 'EKA'\r\n              );\r\n              if (result.length > 0) {\r\n                for (var i = 0; i < result.length; i++) {\r\n                  if (\r\n                    result[i]['locgrouptype'].toLowerCase() == 'port zone' ||\r\n                    result[i]['locgrouptype'].toLowerCase() == 'delivery zone'\r\n                  ) {\r\n                    resolve({\r\n                      isPortZone: true,\r\n                      portZoneName: result[i]['locationgroupname']\r\n                    });\r\n                    return;\r\n                  }\r\n                }\r\n                resolve({\r\n                  isPortZone: false,\r\n                  cityName: result[0]['locationcityname']\r\n                });\r\n              } else {\r\n                reject('No Portzone name found');\r\n              }\r\n            })\r\n            .catch(err => {\r\n              console.error(err);\r\n              reject('No Portzone name found');\r\n            });\r\n        }\r\n      });\r\n\r\n    const getListOfCities = portZoneName => {\r\n      let result = elasticdata.data.filter(\r\n        details =>\r\n          details['locationgroupname'] === portZoneName &&\r\n          details['source'] === 'EKA' &&\r\n          details['locationreftypeid'].toLowerCase() == 'storage location'\r\n      );\r\n      return result.reduce((acc, curr) => {\r\n        acc.push(curr['locationcityname']);\r\n        return acc;\r\n      }, []);\r\n    };\r\n\r\n    const getCities = city =>\r\n      new Promise((resolve, reject) => {\r\n        getLocationGroupsNew(city)\r\n          .then(locationGroups => {\r\n            if (locationGroups.isPortZone) {\r\n              let listofCities = getListOfCities(locationGroups.portZoneName);\r\n              resolve([...new Set(listofCities)].map(i => ({ key: i, value: i })));\r\n            } else {\r\n              resolve([{ key: locationGroups.cityName, value: locationGroups.cityName }]);\r\n            }\r\n          })\r\n          .catch(err => {\r\n            console.error(err);\r\n            resolve([{ key: city, value: city }]);\r\n            \/\/ reject(err);\r\n          });\r\n      });\r\n\r\n    const currDate = moment(new Date()).format('DD-MM-YYYY');\r\n    let disableDeliveryKey;\r\n    if (currDate < moment(objData.shipmentPeriodFrom).format('DD-MM-YYYY')) {\r\n      disableDeliveryKey = true;\r\n    } else {\r\n      disableDeliveryKey = false;\r\n    }\r\n\r\n    var output = {};\r\n    \/\/ get_email()\r\n    \/\/   .then(user => {\r\n    \/\/     customer.url = customer.url + user.email;\r\n        get_customer()\r\n          .then(userInfo => {\r\n            let customerType = userInfo.customerType;\r\n            get_businessParties()\r\n              .then(result => {\r\n                let businessPartiesList = result.data;\r\n                var mdmData = [];\r\n                var data = {};\r\n                businessPartiesList.forEach(bp => {\r\n                  mdmData.push({ key: bp.c2, value: `${bp.c2} - ${bp.c1}` });\r\n                });\r\n                if (req.body.selectedData.requesteddetails.data.dischargeLocationType != 'Storage Location') {\r\n                  let deliveryGroupName = [\r\n                    {\r\n                      key: req.body.selectedData.requesteddetails.data.deliveryLocationGroupName,\r\n                      value: req.body.selectedData.requesteddetails.data.deliveryLocationGroupName\r\n                    }\r\n                  ];\r\n                  data[cpNameKey] = mdmData;\r\n                  data[spFromKey] = spFromArray;\r\n                  data[spToKey] = spToArray;\r\n                  data[disableKey] = disableDeliveryKey;\r\n                  data[cityNameKey] = deliveryGroupName;\r\n                  res.status(200).send(data);\r\n                } else {\r\n                  getCities(req.body.selectedData.requesteddetails.data.dischargeLocationCity)\r\n                    .then(names => {\r\n                      \/\/ cityNames = names;\r\n                      data[cpNameKey] = mdmData;\r\n                      data[spFromKey] = spFromArray;\r\n                      data[spToKey] = spToArray;\r\n                      data[cityNameKey] = names;\r\n                      data[disableKey] = disableDeliveryKey;\r\n                      res.status(200).send(data);\r\n                    })\r\n                    .catch(err => {\r\n                      console.error(err);\r\n                      res.status(400).send('Locations not found');\r\n                      handleErrorResponse(req, '', err, '')\r\n                    });\r\n                }\r\n              })\r\n              .catch(err => {\r\n                var data = {};\r\n                data[cpNameKey] = [];\r\n                data[spFromKey] = [];\r\n                data[spToKey] = [];\r\n                res.status(400).send('Error when fetching list of cities');\r\n                handleErrorResponse(req, '', err, '')\r\n              });\r\n          })\r\n          .catch(err => {\r\n            var data = {};\r\n            data[cpNameKey] = [];\r\n            data[spFromKey] = [];\r\n            data[spToKey] = [];\r\n            res.status(400).send('Error when fetching list of cities');  \r\n            handleErrorResponse(req, '', err, '')\r\n          });\r\n    \/\/   })\r\n    \/\/   .catch(err => {\r\n    \/\/     var data = {};\r\n    \/\/     data[cpNameKey] = [];\r\n    \/\/     data[spFromKey] = [];\r\n    \/\/     data[spToKey] = [];\r\n    \/\/     res.status(400).send('Contract cannot be created. Please contact system admin.');\r\n    \/\/     handleErrorResponse(req, '', err, '')\r\n    \/\/   });\r\n\r\n    var objSorter = prop => (obj1, obj2) => {\r\n      if (obj1[prop] < obj2[prop]) {\r\n        return -1;\r\n      }\r\n      if (obj1[prop] > obj2[prop]) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    };"
}
