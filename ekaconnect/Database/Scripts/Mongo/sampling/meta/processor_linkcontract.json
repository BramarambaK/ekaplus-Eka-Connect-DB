{
  "_id": "processor_linkcontract",
  "name": "linkcontract",
  "type": "processor",
  "refType": "app",
  "refTypeId": "bcb79287-04fb-4af2-ae97-61af272b2c45",
  "version": "V2",
  "snippet": "\r\n    var connectHeadersUrl = req.body.propertyList.eka_connect_host + '/workflow/data';\r\n    var connectLinkUrl = req.body.propertyList.eka_connect_host + '/workflow/data';\r\n    var connectInstuctionUrl = req.body.propertyList.eka_connect_host + '/workflow/data';\r\n    var connectHeaderBody = {\r\n      appId: req.body.appId,\r\n      workFlowTask: 'linkcontractCOPY'\r\n    };\r\n    var connectLinkBody = {\r\n      appId: req.body.appId,\r\n      workFlowTask: 'linkcontractlistCOPY'\r\n    };\r\n    var connectInstructionBody = {\r\n      appId: req.body.appId,\r\n      workFlowTask: 'samplinginstructionlistCOPY'\r\n    };\r\n    var connectHeader = {\r\n      method: 'POST',\r\n      body: connectHeaderBody,\r\n      url: connectHeadersUrl,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    var connectLink = {\r\n      method: 'POST',\r\n      body: connectLinkBody,\r\n      url: connectLinkUrl,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    var connectInstruction = {\r\n      method: 'POST',\r\n      body: connectInstructionBody,\r\n      url: connectInstuctionUrl,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function get_connectHeader() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(connectHeader, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_connectLink() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(connectLink, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_connectInstruction() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(connectInstruction, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    Promise.all([get_connectHeader(), get_connectLink(), get_connectInstruction()])\r\n      .then(function(result) {\r\n        var x = req.body;\r\n        var sample_instruction_id = req.body.selectedData.sample_instruction_id;\r\n        var sample_no = req.body.selectedData.sample_no;\r\n        var header = result[0].data;\r\n        var link = result[1].data;\r\n        var instruction = result[2].data;\r\n        var allocated_to = [];\r\n        for (var k = 0; k < link.length; k++) {\r\n          if (sample_instruction_id == link[k]['sample_instruction_id'] && sample_no == link[k]['sample_no']) {\r\n            allocated_to.push(link[k]['ref_no']);\r\n          }\r\n        }\r\n        for (var j = 0; j < header.length; j++) {\r\n          if (sample_instruction_id == header[j]['sample_instruction_id'] && sample_no == header[j]['sample_no']) {\r\n            var headerdata = {};\r\n            headerdata = header[j];\r\n          }\r\n        }\r\n        headerdata['sample_approval_status'] = '';\r\n        if (headerdata['sample_status']) headerdata['sample_approval_status'] = headerdata['sample_status'];\r\n\r\n        for (var i = 0; i < instruction.length; i++) {\r\n          if (instruction[i]['sample_instruction_id'] == headerdata['sample_instruction_id']) {\r\n            headerdata['sample_drawn_from'] = '';\r\n            headerdata['quality'] = '';\r\n            headerdata['origin'] = '';\r\n            headerdata['sample_sent_to'] = '';\r\n            headerdata['allocated_to'] = '';\r\n            if (instruction[i]['instruction_against_ref_no'])\r\n              headerdata['allocated_to'] = instruction[i]['instruction_against_ref_no'];\r\n            if (instruction[i]['sample_drawnfromvalue'])\r\n              headerdata['sample_drawn_from'] = instruction[i]['sample_drawnfromvalue'];\r\n            if (instruction[i]['quality']) headerdata['quality'] = instruction[i]['quality'];\r\n            if (instruction[i]['origin']) headerdata['origin'] = instruction[i]['origin'];\r\n            if (instruction[i]['send_sample_to']) headerdata['sample_sent_to'] = instruction[i]['send_sample_to_name'];\r\n            if (instruction[i]['sample_instruction_id_display'])\r\n              headerdata['sample_instruction_id'] = instruction[i]['sample_instruction_id_display'];\r\n            if (instruction[i]['sample_status'] === 'Pending')\r\n              headerdata['sample_approval_status'] = instruction[i]['sample_status'];\r\n          }\r\n        }\r\n        var response = [];\r\n        response.push(headerdata);\r\n        // res.status(200).send(response);\r\n        success(response, 200);\r\n      })\r\n      .catch(err => {\r\n        // res.status(500).send(err);\r\n        error(err, 500);\r\n      });\r\n ",
  "sys__UUID": "638a08b2-14f3-49ab-9eff-51af77bfddde",
  "sys__createdOn": ISODate("2019-05-22T09:51:04.600Z"),
  "sys__createdBy": "srini@ekaplus.com"
}
