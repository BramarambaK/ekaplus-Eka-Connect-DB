{
    "_id" : "samplingdomain_processor",
    "name" : "samplingdomainlistingprocessor",
    "type" : "processor",
    "refType" : "app",
    "version" : "V2",
    "refTypeId" : "bcb79287-04fb-4af2-ae97-61af272b2c45",
    "snippet" : "\r\n    var moment = require('moment');\r\n    var connectDatasampleinstruction = {\r\n      method: 'GET',\r\n      url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '\/data\/bcb79287-04fb-4af2-ae97-61af272b2c45\/37ee3da6-dfa5-487e-920d-ed7656ee2795',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        json: true\r\n      }\r\n    };\r\n\r\n    function get_connectDatasampleinstruction() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(connectDatasampleinstruction, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var connectDatasampledetail = {\r\n      method: 'GET',\r\n      url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '\/data\/bcb79287-04fb-4af2-ae97-61af272b2c45\/24c1476d-ad5c-45a6-a23b-934940630175',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        json: true\r\n      }\r\n    };\r\n\r\n    function get_connectDatasampledetail() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(connectDatasampledetail, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var connectDatasamplequalityinstruction = {\r\n      method: 'GET',\r\n      url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '\/data\/bcb79287-04fb-4af2-ae97-61af272b2c45\/aacbf12d-7d98-469a-b149-1ec66e9ecb8c',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        json: true\r\n      }\r\n    };\r\n\r\n    function get_connectDataqualityinstructiondata() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(connectDatasamplequalityinstruction, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var connectDatasamplequality = {\r\n      method: 'GET',\r\n      url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '\/data\/bcb79287-04fb-4af2-ae97-61af272b2c45\/ddec290e-71ee-4538-8ec9-37bbcc0cdca1',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        json: true\r\n      }\r\n    };\r\n\r\n    function get_connectDataqualitydata() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(connectDatasamplequality, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    function getFirstLetterCaps(string) {\r\n      string = string[0].toUpperCase() + string.slice(1);\r\n\r\n      return string;\r\n    }\r\n    function handleMultiValue(final){\r\n      return  [...final.filter(item=>item['Sample Drawn From'].split(',').length<=1 && item['Instruction Against Ref No'].split(',').length<=1 ),\r\n      ...final.filter(item=>item['Sample Drawn From'].split(',').length>1 || item['Instruction Against Ref No'].split(',').length>1 ).reduce((acc,item)=>{\r\n        let sampledrawnvalue = item['Sample Drawn From'].split(',')\r\n        let instructionAgainstvalue = item['Instruction Against Ref No'].split(',')\r\n        let max = Math.max(sampledrawnvalue.length , instructionAgainstvalue.length)\r\n        let i = 0\r\n        while(max > 0){\r\n          let newObject = JSON.parse(JSON.stringify(item))\r\n          newObject['Sample Drawn From'] = i<sampledrawnvalue.length ? sampledrawnvalue[i] : ''\r\n          newObject['Instruction Against Ref No'] = i<instructionAgainstvalue.length ? instructionAgainstvalue[i] : ''\r\n          acc.push(newObject)\r\n          max = max - 1\r\n          i++;\r\n        }\r\n        return acc\r\n      },[])]\r\n    } \r\n\r\n    get_connectDatasampleinstruction().then(function(result) {\r\n      get_connectDatasampledetail().then(function(data) {\r\n        get_connectDataqualitydata().then(function(data1) {\r\n          get_connectDataqualityinstructiondata().then(function(data2) {\r\n            let sampledetails = JSON.parse(data);\r\n            let qualitydata = JSON.parse(data1);\r\n            let sampleinst = JSON.parse(result);\r\n            let samplequalityins = JSON.parse(data2);\r\n            let qualitymergedata = [];\r\n            var final = [];\r\n            for (var p = 0; p < samplequalityins.length; p++) {\r\n              for (var q = 0; q < qualitydata.length; q++) {\r\n                if (samplequalityins[p].quality_ref_no == qualitydata[q].quality_ref_no) {\r\n                  qualitymergedata.push({ ...samplequalityins[p], ...qualitydata[q] });\r\n                }\r\n              }\r\n            }\r\n            for (var i = 0; i < sampleinst.length; i++) {\r\n              if (sampleinst[i].status == 'active') {\r\n                let sampleno = '';\r\n                let sample_quantity = '';\r\n                let sample_quantity_value = '';\r\n                let sample_sent = '';\r\n                let sample_result = '';\r\n                for (var j = 0; j < sampledetails.length; j++) {\r\n                  if (sampledetails[j].sample_instruction_id == sampleinst[i].sample_instruction_id) {\r\n                    sampleno = sampleno + sampledetails[j].sample_no + ', ';\r\n                    if (sampledetails[j].sample_quantity) {\r\n                      sample_quantity = sample_quantity + sampledetails[j].sample_quantity + ', ';\r\n                    }\r\n                    sample_quantity_value = sample_quantity_value + sampledetails[j].sample_quantity_value + ', ';\r\n                    if (sampledetails[j].sample_sent) {\r\n                      sample_sent = sample_sent + sampledetails[j].sample_sent.split('T')[0] + ', ';\r\n                    }\r\n                    if (sampledetails[j].sample_result) {\r\n                      sample_result = sample_result + sampledetails[j].sample_result.split('T')[0] + ', ';\r\n                    }\r\n                  }\r\n                }\r\n                let quality_ref_no = '';\r\n                let quality_date = '';\r\n                let analysis = '';\r\n                let qualityresults = '';\r\n                for (var t = 0; t < qualitymergedata.length; t++) {\r\n                  if (qualitymergedata[t].sample_ref_no == sampleinst[i].sample_instruction_id_display) {\r\n                    analysis = qualitymergedata[t].quality_analysis_by;\r\n                    quality_ref_no = quality_ref_no + qualitymergedata[t].quality_ref_no + ', ';\r\n                    quality_date = quality_date + qualitymergedata[t].quality_date + ', ';\r\n                    if (qualitymergedata[t].custom) {\r\n                      qualitymergedata[t].custom.forEach((value, index) => {\r\n                        qualityresults =\r\n                          qualityresults + Object.keys(value)[0] + ' : ' + value[Object.keys(value)[0]] + ', ';\r\n                      });\r\n                    }\r\n                  }\r\n                }\r\n                sampleno = sampleno ? sampleno.replace(\/,\\s*$\/, '') : '';\r\n                sample_quantity = sample_quantity ? sample_quantity.replace(\/,\\s*$\/, '') : '';\r\n                sample_quantity_value = sample_quantity_value ? sample_quantity_value.replace(\/,\\s*$\/, '') : '';\r\n                sample_sent = sample_sent ? sample_sent.replace(\/,\\s*$\/, '') : '';\r\n                sample_result = sample_result ? sample_result.replace(\/,\\s*$\/, '') : '';\r\n                quality_ref_no = quality_ref_no ? quality_ref_no.replace(\/,\\s*$\/, '') : '';\r\n                quality_date = quality_date ? quality_date.replace(\/,\\s*$\/, '') : '';\r\n                analysis = analysis ? analysis.replace(\/,\\s*$\/, '') : '';\r\n                qualityresults = qualityresults ? qualityresults.replace(\/,\\s*$\/, '') : '';\r\n                var collectionrowdata = {\r\n                  'Sampling Instruction Issue Date': sampleinst[i].issue_date,\r\n                  'Sampling Instruction ID': sampleinst[i].sample_instruction_id_display,\r\n                  'Instruction Against Ref No': sampleinst[i].instruction_against_ref_no\r\n                    ? sampleinst[i].instruction_against_ref_no\r\n                    : '',\r\n                  'Allocation Status': 'Open',\r\n                  'Sampling Intruction To': sampleinst[i].sample_instruction_to,\r\n                  'Sample Send To': sampleinst[i].send_sample_to_name,\r\n                  'Sample Type': sampleinst[i].sample_type_name,\r\n                  'Sample Drawn From': sampleinst[i].sample_drawnfromvalue,\r\n                  'Reserve Stock': sampleinst[i].reserve_stock ? sampleinst[i].reserve_stock : '-',\r\n                  'Sample Sent Date': sample_sent,\r\n                  'Sample Result Date': sample_result,\r\n                  'Sample Status': sampleinst[i].sample_status,\r\n                  'Sample Ref No': sampleno,\r\n                  'Sample Quantity': sample_quantity,\r\n                  'Sample Quantity UOM': sample_quantity_value,\r\n                  'Quality Results Ref No': quality_ref_no,\r\n                  'Quality Results Date': quality_date,\r\n                  'Quality Results Against Ref No': sampleinst[i].sample_instruction_id_display,\r\n                  'Quality Analysis by': analysis,\r\n                  'Quality result (concatinating)': qualityresults,\r\n                  'Sale contract item ref number (concatinating)': sampleinst[i].instruction_against_ref_no\r\n                    ? sampleinst[i].instruction_against_ref_no\r\n                    : ''\r\n                };\r\n                \r\n                final.push(collectionrowdata);\r\n              } else {\r\n              }\r\n            } \r\n            final = handleMultiValue(final)  \/\/ SMP-840 \r\n\r\n            \/\/ if (currency['sys__version'] <= 1) {\r\n            \/\/   versiondate = currency['sys__createdOn'];\r\n\r\n            \/\/   versiondate = parseInt(versiondate);\r\n\r\n            \/\/   versiondate = moment(versiondate).format('DD-MM-YYYY');\r\n            \/\/ } else {\r\n            \/\/   versiondate = currency['sys__updatedOn'];\r\n\r\n            \/\/   versiondate = parseInt(versiondate);\r\n\r\n            \/\/   versiondate = moment(versiondate).format('DD-MM-YYYY');\r\n            \/\/ }\r\n\r\n            \/\/res.status(200).send(final);\r\n            success(final, 200);\r\n          });\r\n        });\r\n      });\r\n    });\r\n\r\n  ",
    "sys__createdOn" : ISODate("2019-06-03T13:38:13.102Z"),
    "sys__UUID" : "8a2f6ce7-b10f-446a-a174-81923517a9ea",
    "sys__createdBy" : "admin@ekaplus.com"
}