{
  "_id": "processor_printsampling",
  "name": "printsample",
  "type": "processor",
  "refType": "app",
  "version": "V2",
  "refTypeId": "bcb79287-04fb-4af2-ae97-61af272b2c45",
  "snippet": "var result;\r\nvar connectDatasampledrawnfrom = {\r\n  method: \"GET\",\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    \"\/data\/bcb79287-04fb-4af2-ae97-61af272b2c45\/4638683b-aa06-474c-8cd6-66b8a463b769?sample_instruction_id=\" +\r\n    req.body.selectedData.sample_instruction_id,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    json: true,\r\n  },\r\n};\r\n\r\nvar connectDatasampledrawnto = {\r\n  method: \"GET\",\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    \"\/data\/bcb79287-04fb-4af2-ae97-61af272b2c45\/d6df33f0-0e8d-46de-91b4-9968484b5fba?sample_instruction_id=\" +\r\n    req.body.selectedData.sample_instruction_id,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    json: true,\r\n  },\r\n};\r\n\r\nvar getapp = {\r\n  method: \"POST\",\r\n  url: req.body.propertyList.eka_connect_host + \"\/meta\/app\/sampling\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    json: true,\r\n  },\r\n};\r\n\r\nvar userApp = {\r\n  method: \"GET\",\r\n  url:\r\n    req.body.propertyList.platform_url +\r\n    \"\/cac-security\/api\/userinfo?filter=all\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    json: true,\r\n  },\r\n};\r\n\r\nvar userContext = {\r\n  method: \"GET\",\r\n  url: req.body.propertyList.platform_url + \"\/api\/user\/data\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    Accept: \"application\/json\",\r\n  },\r\n  json: true,\r\n};\r\n\r\nvar connectDataSamplingDetailsObject = {\r\n  method: \"GET\",\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    \"\/data\/bcb79287-04fb-4af2-ae97-61af272b2c45\/24c1476d-ad5c-45a6-a23b-934940630175?sample_instruction_id=\" +\r\n    req.body.selectedData.sample_instruction_id,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    json: true,\r\n  },\r\n};\r\n\r\nfunction getCollectionAPI(collectionName, filter) {\r\n  var collectionAPI = {\r\n    method: \"GET\",\r\n    url:\r\n      req.body.propertyList.platform_url +\r\n      \"\/collection\/v1?collectionName=\" +\r\n      collectionName +\r\n      \"&limit=50\",\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      \"Content-Type\": \"application\/json\",\r\n      Connection: \"keep-alive\",\r\n    },\r\n    body: {\r\n      filter: filter,\r\n    },\r\n    json: true,\r\n  };\r\n  return collectionAPI;\r\n}\r\n\r\nfunction get_connectDatasampledrawnfrom() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(connectDatasampledrawnfrom, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction get_connectDatasampleto() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(connectDatasampledrawnto, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction get_appid() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(getapp, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction get_userid() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(userApp, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction get_userContext() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(userContext, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction get_sampling_physical_trade_details_collection(\r\n  value = req.body.selectedData.sample_drawnfromvalue\r\n) {\r\n  let filter = [\r\n    {\r\n      fieldName: \"Ref No\",\r\n      value: value,\r\n      operator: \"in\",\r\n    },\r\n  ];\r\n  let collectionName = \"Sampling Physical trade details\";\r\n  let api = getCollectionAPI(collectionName, filter);\r\n\r\n  return new Promise(function (resolve, reject) {\r\n    request(api, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction get_connectDataSamplingDetailsObject() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(connectDataSamplingDetailsObject, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction get_logistic_details_domain_collection() {\r\n  let api = {\r\n    method: \"POST\",\r\n    url:\r\n      req.body.propertyList.eka_connect_host +\r\n      \"\/collectionmapper\/e4ba81fc-1304-4f01-b641-7425da52a666\/e833e4b5-e278-4769-b02e-d7f9483a230d\/fetchCollectionRecords\",\r\n    headers: {\r\n      \"Content-Type\": \"application\/json\",\r\n      \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n      Authorization: req.headers.authorization,\r\n      ttl: 300,\r\n      \"X-Remote-User\": \"ekaApp\",\r\n      Connection: \"keep-alive\",\r\n    },\r\n    body: {\r\n      collectionName: \"Sampling Logistics details\",\r\n      criteria: {\r\n        filter: [\r\n          {\r\n            fieldName: \"Stock Ref No\",\r\n            value: req.body.selectedData.sample_drawnfromvalue,\r\n            operator: \"in\",\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    json: true,\r\n  };\r\n  return new Promise(function (resolve, reject) {\r\n    request(api, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else if (response.statusCode == 400) {\r\n        resolve([]);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction get_cp_domain_collection() {\r\n  let api = {\r\n    method: \"POST\",\r\n    url:\r\n      req.body.propertyList.eka_connect_host +\r\n      \"\/collectionmapper\/e4ba81fc-1304-4f01-b641-7425da52a666\/e833e4b5-e278-4769-b02e-d7f9483a230d\/fetchCollectionRecords\",\r\n    headers: {\r\n      \"Content-Type\": \"application\/json\",\r\n      \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n      Authorization: req.headers.authorization,\r\n      ttl: 300,\r\n      \"X-Remote-User\": \"ekaApp\",\r\n      Connection: \"keep-alive\",\r\n    },\r\n    body: {\r\n      collectionName: \"Sampling CP details\",\r\n      criteria: {\r\n        filter: [\r\n          {\r\n            fieldName: \"CP Name\",\r\n            value: req.body.selectedData.send_sample_to_name,\r\n            operator: \"in\",\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    json: true,\r\n  };\r\n  return new Promise(function (resolve, reject) {\r\n    request(api, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else if (response.statusCode == 400) {\r\n        resolve([]);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\nPromise.all([\r\n  get_connectDatasampledrawnfrom(),\r\n  get_appid(),\r\n  get_connectDatasampleto(),\r\n  get_userid(),\r\n  get_userContext(),\r\n  get_connectDataSamplingDetailsObject(),\r\n  get_logistic_details_domain_collection(),\r\n])\r\n  .then((results) => {\r\n    var real_logistic_details = results[6];\r\n    get_cp_domain_collection()\r\n      .then((cp) => {\r\n        let value = req.body.selectedData.sample_drawnfromvalue;\r\n        if (req.body.selectedData.instructionagainst == \"Stock-Unallocated\") {\r\n          value = real_logistic_details[0][\"Contract Ref No\"];\r\n        } else if (\r\n          req.body.selectedData.instructionagainst ==\r\n          \"Sales Contract-Allocated to Stock\"\r\n        ) {\r\n          value = req.body.selectedData.instruction_against_ref_no;\r\n        }\r\n        get_sampling_physical_trade_details_collection(value)\r\n          .then((physical) => {\r\n            var data1 = JSON.parse(results[0]);\r\n            var app = JSON.parse(results[1]);\r\n            var sample = JSON.parse(results[2])[0];\r\n            if (Array.isArray(sample)) sample = sample[0];\r\n            var userData = JSON.parse(results[3]);\r\n            var userContext = results[4];\r\n            var physical_trade_details = physical;\r\n            var connectDataSamplingDetailsObject = JSON.parse(results[5]);\r\n            var cpDetails = cp;\r\n            var add = req.body.selectedData.address.split(\",\");\r\n            var containerinfo = [];\r\n            var contract_quality = \"NA\";\r\n            var purchase_contract_ref_no = \"NA\";\r\n            var warehouse_name = \"NA\";\r\n            containerinfo.push({\r\n              containername: \"Container No.\",\r\n              marks: \"Marks\",\r\n              exchangelot: \"Exch Lot\",\r\n              warrentrefno: \"Warehouse Ref\",\r\n              warrantno: \"Warant No.\",\r\n              noofbags: \"No. of Bags\",\r\n              packingtype: \"Packing Type\",\r\n              packingsize: \"Packing Size\",\r\n            });\r\n            if (data1 && data1.length > 0) {\r\n              data1.forEach((item) => {\r\n                let _containername = item.Container_No\r\n                  ? item.Container_No\r\n                  : \"NA\";\r\n                let carrier_id = \"NA\";\r\n                let bag = \"NA\";\r\n                if (real_logistic_details && real_logistic_details.length > 0) {\r\n                  let record = real_logistic_details.filter((rec) => {\r\n                    if (item.ref_no === rec[\"Stock Ref No\"]) return rec;\r\n                  });\r\n                  if (record && record.length > 0) {\r\n                    bag = record[0][\"No Of Units\"];\r\n                    carrier_id = record[0][\"CARRIER ID\"];\r\n                  }\r\n                }\r\n                let tableRow = {\r\n                  containername: _containername,\r\n                  warrentrefno: carrier_id,\r\n                  warrantno: item.External_Stock_Ref_No\r\n                    ? item.External_Stock_Ref_No\r\n                    : \"NA\",\r\n                  packingsize: item.Packing_Size,\r\n                  packingtype: item.Packing_Type,\r\n                  noofbags: bag,\r\n                };\r\n                containerinfo.push(tableRow);\r\n              });\r\n            }\r\n\r\n            function get_ref_no(physical_trade_details, real_logistic_details) {\r\n              if (\r\n                data1[0][\"instructionagainstdrawnfrom\"] ==\r\n                  \"Purchase-Unallocated\" &&\r\n                physical_trade_details.data\r\n              ) {\r\n                purchase_contract_ref_no =\r\n                  physical_trade_details.data[0][\"Contract Ref No\"];\r\n                warehouse_name = \"NA\";\r\n              } else if (\r\n                data1[0][\"instructionagainstdrawnfrom\"] ==\r\n                  \"Sales Contract-Allocated to Purchase\" &&\r\n                physical_trade_details.data\r\n              ) {\r\n                purchase_contract_ref_no =\r\n                  physical_trade_details.data[0][\"Contract Ref No\"];\r\n                warehouse_name = \"NA\";\r\n              } else if (\r\n                data1[0][\"instructionagainstdrawnfrom\"] ==\r\n                  \"Sales Contract-Allocated to Stock\" &&\r\n                real_logistic_details\r\n              ) {\r\n                purchase_contract_ref_no =\r\n                  real_logistic_details[0][\"Contract Ref No\"];\r\n                warehouse_name = \"NA\";\r\n              } else if (\r\n                data1[0][\"instructionagainstdrawnfrom\"] ==\r\n                \"Sales Contract-Unallocated\"\r\n              ) {\r\n                purchase_contract_ref_no = \"NA\";\r\n                warehouse_name = \"NA\";\r\n              } else if (\r\n                data1[0][\"instructionagainstdrawnfrom\"] ==\r\n                  \"Stock-Unallocated\" &&\r\n                physical_trade_details.data &&\r\n                real_logistic_details\r\n              ) {\r\n                purchase_contract_ref_no =\r\n                  real_logistic_details[0][\"Contract Ref No\"];\r\n                warehouse_name = real_logistic_details[0][\"Warehouse\"];\r\n              } else {\r\n                purchase_contract_ref_no = \"NA\";\r\n                warehouse_name = \"NA\";\r\n              }\r\n              return [purchase_contract_ref_no, warehouse_name];\r\n            }\r\n\r\n            function get_quality_long_description(data) {\r\n              let q = \"NA\";\r\n              if (\r\n                Array.isArray(data) &&\r\n                data[0] &&\r\n                data[0].hasOwnProperty(\"Contract Quality Long Desc\")\r\n              ) {\r\n                q =\r\n                  data[0][\"Contract Quality Long Desc\"] != \"(Blank)\"\r\n                    ? data[0][\"Contract Quality Long Desc\"]\r\n                    : data[0][\"Quality Long Desc\"];\r\n              }\r\n              return q;\r\n            }\r\n\r\n            result = {\r\n              app: app.config.header.clientLogo.src.includes(\"\/\")\r\n                ? app.config.header.clientLogo.src\r\n                : \"assets\/uploads\/\" + app.config.header.clientLogo.src,\r\n              issue_date: req.body.selectedData.issue_date,\r\n              sample_instruction_id:\r\n                req.body.selectedData.sample_instruction_id,\r\n              sample_instruction_id_display:\r\n                req.body.selectedData.sample_instruction_id_display,\r\n              instruction_against_ref_no:\r\n                req.body.selectedData.instructionagainst ==\r\n                  \"Sales Contract-Allocated to Purchase\" ||\r\n                req.body.selectedData.instructionagainst ==\r\n                  \"Sales Contract-Allocated to Stock\" ||\r\n                req.body.selectedData.instructionagainst ==\r\n                  \"Sales Contract-Unallocated\"\r\n                  ? req.body.selectedData.instruction_against_ref_no\r\n                  : \"NA\",\r\n              send_sample_to:\r\n                req.body.selectedData.instructionagainst ==\r\n                  \"Sales Contract-Allocated to Purchase\" ||\r\n                req.body.selectedData.instructionagainst ==\r\n                  \"Sales Contract-Allocated to Stock\" ||\r\n                req.body.selectedData.instructionagainst ==\r\n                  \"Sales Contract-Unallocated\"\r\n                  ? req.body.selectedData.send_sample_to\r\n                  : \"\",\r\n              product: req.body.selectedData.product,\r\n              origin: req.body.selectedData.origin,\r\n              quality: req.body.selectedData.quality,\r\n              samplequantity:\r\n                req.body.selectedData.quantity_per_sample +\r\n                \" \" +\r\n                req.body.selectedData.quality_uom_name,\r\n              send_sample_to_name:\r\n                req.body.selectedData.send_sample_to ==\r\n                req.body.selectedData.send_sample_to_unallocated\r\n                  ? req.body.selectedData.send_sample_to_name\r\n                  : req.body.selectedData.send_sample_to_custom_cp,\r\n              addresspage1:\r\n                req.body.selectedData.send_sample_to_custom_cp_address,\r\n              container: containerinfo,\r\n              generatedBy:\r\n                userData.hasOwnProperty(\"firstName\") &&\r\n                userData.hasOwnProperty(\"lastName\")\r\n                  ? userData.firstName + \" \" + userData.lastName\r\n                  : userData.userName,\r\n              deliveryPeriod:\r\n                physical_trade_details.data.length > 0\r\n                  ? physical_trade_details.data[0][\"Delivery To Date\"] +\r\n                    \" - \" +\r\n                    physical_trade_details.data[0][\"Delivery From Date\"]\r\n                  : \"NA\",\r\n              contract_quality_long_desc: get_quality_long_description(\r\n                physical_trade_details.data\r\n              ),\r\n              cpName:\r\n                req.body.selectedData.instructionagainst ==\r\n                \"Sales Contract-Unallocated\"\r\n                  ? req.body.selectedData.sample_drawn_from_cp\r\n                  : req.body.selectedData[\"sample_instruction_to\"],\r\n              addressline1: add.slice(0, add.length \/ 2).toString(),\r\n              addressline2: add.slice(add.length \/ 2).toString(),\r\n              purchase_contract_ref_no: get_ref_no(\r\n                physical_trade_details,\r\n                real_logistic_details\r\n              )[0],\r\n              warehouse_name: get_ref_no(\r\n                physical_trade_details,\r\n                real_logistic_details\r\n              )[1],\r\n              buyer_ref_no:\r\n                cpDetails.length > 0 ? cpDetails[0][\"CP Ref No\"] : \"NA\",\r\n              remark: req.body.selectedData.remark,\r\n              corporateName: userContext.corporateDO.corporateName,\r\n              cpSampleRefNo:\r\n                connectDataSamplingDetailsObject.length > 0\r\n                  ? connectDataSamplingDetailsObject[0].ref_no\r\n                    ? connectDataSamplingDetailsObject[0].ref_no\r\n                    : \"NA\"\r\n                  : \"NA\",\r\n              ldSampleRefNo:\r\n                connectDataSamplingDetailsObject.length > 0\r\n                  ? connectDataSamplingDetailsObject[0].CP_Sample_Ref_No\r\n                    ? connectDataSamplingDetailsObject[0].CP_Sample_Ref_No\r\n                    : \"NA\"\r\n                  : \"NA\",\r\n            };\r\n            success(result, 200);\r\n          })\r\n          .catch((err) => {\r\n            console.error(err);\r\n            error(err, 500);\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n        error(err, 500);\r\n      });\r\n  })\r\n  .catch((err) => {\r\n    console.error(err);\r\n    error(err, 500);\r\n  });",
  "sys__UUID": "a27bbc00-6c7e-46df-80cc-fd74303b2597",
  "sys__createdBy": "srini@ekaplus.com"
}
