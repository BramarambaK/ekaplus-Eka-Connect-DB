{
  "_id": "submit_warehoused_tickets_processor",
  "name": "submit_warehoused_tickets_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "sys__UUID": "a2de8cc2-ce85-4d25-83bf-89608253b639",
  "snippet": "\r\n    var moment = require('moment');\r\n    const send = (status, message) => res.status(status).send(message);\r\n    const userInfo = req.body.propertyList.eka_connect_host + '/api/getbpuserinfo';\r\n    const appId = '12325a98-a959-4939-9005-4158d136afcd';\r\n    const workflow = req.body.propertyList.eka_connect_host + '/workflow';\r\n    const delayMessage =\r\n      'Your offer is taking longer than normal to process. Please review your tickets in a few minutes.';\r\n    let userName;\r\n    let data;\r\n\r\n    const getData = (url, body, requestMethod) =>\r\n      new Promise(function(resolve, reject) {\r\n        request(\r\n          {\r\n            method: requestMethod || 'GET',\r\n            url,\r\n            headers: {\r\n              Authorization: req.headers.authorization,\r\n              'X-TenantID': req.headers['x-tenantid']\r\n            },\r\n            json: true,\r\n            body: body\r\n          },\r\n          function(err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          }\r\n        );\r\n      });\r\n\r\n    const formatGCSRequest = tickets => ({\r\n      workflowTaskName: 'elastic_updateTicketOfferData_withOfferExecution_internal',\r\n      task: 'elastic_updateTicketOfferData_withOfferExecution_internal',\r\n      appId: appId,\r\n      output: {\r\n        elastic_updateTicketOfferData_withOfferExecution_internal: tickets\r\n      }\r\n    });\r\n\r\n    async function submitOffer() {\r\n      await getData(userInfo)\r\n        .then(userinfo => {\r\n          userName = userinfo.data.username;\r\n        })\r\n        .catch(err => console.log(err));\r\n\r\n      const ticketsArr = data.map(ticket => {\r\n        const ticketObj = {\r\n          requestType: 'Offer for warehoused tickets',\r\n          ticketRefNo: ticket.ticketRefNo,\r\n          product: ticket.product,\r\n          quality: ticket.quality,\r\n          cropYear: ticket.cropYear,\r\n          quantity: ticket.quantity,\r\n          sustainable: ticket.offersustainable == 'Yes',\r\n          isRequestedByEkaCCSystem: true,\r\n          offerPrice: Number(ticket.offerPrice),\r\n          offerExpiryDate: new Date(ticket.offerExpiryDate),\r\n          location: ticket.location,\r\n          ticketHandlerName: ticket.buyer,\r\n          ticketHandlerBpRefNo: ticket.ticketHandlerBpRefNo,\r\n          ticketHandlerCode: ticket.ticketHandlerCode,\r\n          requestBy: userName,\r\n          bpName: ticket.bpName,\r\n          bpRefNo: ticket.bpRefNo,\r\n          pricingOption: ticket.pricingOption,\r\n          ticketStatus: 'Request',\r\n          userType: ticket.userType,\r\n          bulkHandler: ticket.bulkHandler,\r\n          isparentTicket: ticket.isparentTicket,\r\n          quantityUnit: ticket.quantityUnit,\r\n          requestStatus: 'Awaiting review'\r\n        };\r\n        return ticketObj;\r\n      });\r\n\r\n      const gcsRequest = formatGCSRequest(ticketsArr);\r\n      getData(workflow, gcsRequest, 'POST')\r\n        .then(() => {\r\n          send(200, {\r\n            msg: 'Request has been successfully sent.'\r\n          });\r\n        })\r\n        .catch(err => {\r\n          send(400, {\r\n            errorCode: err.Status,\r\n            errorMessage: delayMessage,\r\n            errorContext: null,\r\n            errorLocalizedMessage: delayMessage\r\n          });\r\n        });\r\n    }\r\n\r\n    if (\r\n      req.body.hasOwnProperty('summarywarehousedticketoffercomposite') ||\r\n      req.body.hasOwnProperty('summarywarehousedticketofferlistingcomposite')\r\n    ) {\r\n      data = req.body.summarywarehousedticketoffercomposite\r\n        ? req.body.summarywarehousedticketoffercomposite.warehousedticketsummary\r\n        : req.body.summarywarehousedticketofferlistingcomposite.warehousedticketsummary;\r\n\r\n      submitOffer();\r\n    } else {\r\n      send(400, 'No data to submit');\r\n    }\r\n    "
}
