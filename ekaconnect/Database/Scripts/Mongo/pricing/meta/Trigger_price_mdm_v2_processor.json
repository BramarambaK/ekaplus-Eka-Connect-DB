{
    "_id" : "Trigger_price_mdm_v2_processor",
    "name" : "Mdmv2_Processor",
    "refType" : "app",
    "refTypeId" : "84d7b167-1d9f-406d-b974-bea406a25f9a",
    "snippet" : "\r\n    let mdmbody = JSON.parse(req.body.mdmProcessorServiceKey);\r\n    req.body.mdmProcessorServiceKey = JSON.parse(req.body.mdmProcessorServiceKey);\r\n    async function promiseHandler(promise) {\r\n      return promise.then(data => [null, data]).catch(err => [err]);\r\n    }\r\n    function findindex(serviceKey) {\r\n      return req.body.mdmProcessorServiceKey.findIndex(x => x.serviceKey == serviceKey);\r\n    }\r\n    function get_defaultData1(bod) {\r\n      return new Promise(function(resolve, reject) {\r\n        request(bod, function(err, response, body) {\r\n            if (response.statusCode === 200) {\r\n              resolve(body);\r\n            } else {\r\n              if (err || body.error) reject(body);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    async function getcurrencyconversion(currency) {\r\n      var defaultdata1 = {\r\n        method: 'POST',\r\n        body: {\r\n          currencyCode: currency\r\n        },\r\n        url: req.body.propertyList.eka_mdm_host + '\/mdm\/5d907cd2-7785-4d34-bcda-aa84b2158415\/currency-details',\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true\r\n      };\r\n      return await get_defaultData1(defaultdata1);\r\n    }\r\n    async function get_gmrData() {\r\n      var defaultdata1 = {\r\n        method: 'POST',\r\n        url: req.body.propertyList.eka_connect_host + '\/workflow\/data',\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true,\r\n        body: {\r\n          appId: '5d907cd2-7785-4d34-bcda-aa84b2158415',\r\n          workFlowTask: 'gmr_data_list',\r\n          filterData: {\r\n            filter: [\r\n              {\r\n                fieldName: 'internalContractItemRefNo',\r\n                value: [req.body.queryParams.internalContractItemRefNo],\r\n                operator: 'in'\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      };\r\n      return await get_defaultData1(defaultdata1);\r\n    }\r\n    async function getValueFromDensityApi(body = {}) {\r\n      return await get_defaultData1({\r\n        method: 'POST',\r\n        url: req.body.propertyList.eka_pricing_host + '\/api\/pricing\/densityConversion\/massToVolume',\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true,\r\n        body: body\r\n      });\r\n    }\r\n    async function getunitconversion(serviceKey, f, t) {\r\n      var defaultdata = {\r\n        method: 'POST',\r\n        body: [\r\n          {\r\n            dependsOn: [mdmbody[findindex('quantityUnitConversion')].dependsOn[2]],\r\n            serviceKey: serviceKey\r\n          }\r\n        ],\r\n        url: req.body.propertyList.eka_mdm_host + '\/mdm\/84d7b167-1d9f-406d-b974-bea406a25f9a\/data',\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true\r\n      };\r\n      if (f != false) {\r\n        defaultdata.body[0].dependsOn.push(f);\r\n      }\r\n      if (t != false) {\r\n        defaultdata.body[0].dependsOn.push(t);\r\n      }\r\n      return await get_defaultData1(defaultdata);\r\n    }\r\n    async function get_gmrDensity(gmr_ref_No) {\r\n      var defaultdata1 = {\r\n        method: 'POST',\r\n        url: req.body.propertyList.eka_connect_host + '\/workflow\/data',\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true,\r\n        body: {\r\n          appId: '5d907cd2-7785-4d34-bcda-aa84b2158415',\r\n          workFlowTask: 'gmr_density_list',\r\n          filterData: {\r\n            filter: [\r\n              {\r\n                fieldName: 'internalContractItemRefNo',\r\n                value: [req.body.queryParams.internalContractItemRefNo],\r\n                operator: 'in'\r\n              },\r\n              {\r\n                fieldName: 'gmrRefNo',\r\n                value: [gmr_ref_No],\r\n                operator: 'in'\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      };\r\n      return await get_defaultData1(defaultdata1);\r\n    }\r\n    async function main() {\r\n      let mdmdata = {\r\n        getGMRList: []\r\n      };\r\n      if (req.body.selectedData.hasOwnProperty('createtriggerv2composite') &&\r\n        req.body.selectedData.createtriggerv2composite.createtriggerpricev2.execution === 'Post- exection' &&\r\n        (findindex('getGMRList') != -1 ||\r\n          findindex('gmrQtyUnit') != -1 ||\r\n          findindex('gmrQty') != -1 ||\r\n          findindex('gmrQty') != -1 ||\r\n          findindex('gmrQtyFixed') != -1)\r\n      ) {\r\n        var start1 = new Date();\r\n        try {\r\n          let gmrSavedData = await get_gmrData();\r\n          var end1 = new Date() - start1;\r\n          console.log('gmrConnectData', end1);\r\n\r\n          if (Array.isArray(req.body.selectedData.listingformula.gmrPlatformData)) {\r\n            req.body.selectedData.listingformula.gmrPlatformData = req.body.selectedData.listingformula.gmrPlatformData.filter(\r\n              item => {\r\n                return item.status != 'Final';\r\n              }\r\n            );\r\n\r\n            if (findindex('getGMRList') != -1) {\r\n              mdmdata['getGMRList'] = [];\r\n              if (req.body.selectedData.listingformula.gmrPlatformData) {\r\n                for (let k = 0; k < req.body.selectedData.listingformula.gmrPlatformData.length; k++) {\r\n                  mdmdata['getGMRList'].push({\r\n                    key: req.body.selectedData.listingformula.gmrPlatformData[k].internalRefNo,\r\n                    value: req.body.selectedData.listingformula.gmrPlatformData[k].refNo\r\n                  });\r\n                }\r\n              }\r\n            }\r\n            if (findindex('gmrQtyUnit') != -1) {\r\n              for (let k = 0; k < req.body.selectedData.listingformula.gmrPlatformData.length; k++) {\r\n                if (\r\n                  mdmbody[findindex('gmrQtyUnit')].dependsOn[0] ===\r\n                  req.body.selectedData.listingformula.gmrPlatformData[k].internalRefNo\r\n                )\r\n                  mdmdata['gmrQtyUnit'] = req.body.selectedData.listingformula.gmrPlatformData[k].qtyUnit;\r\n              }\r\n            }\r\n            if (findindex('gmrQty') != -1) {\r\n              for (let k = 0; k < req.body.selectedData.listingformula.gmrPlatformData.length; k++) {\r\n                if (\r\n                  mdmbody[findindex('gmrQty')].dependsOn[0] ===\r\n                  req.body.selectedData.listingformula.gmrPlatformData[k].internalRefNo\r\n                )\r\n                  mdmdata['gmrQty'] = req.body.selectedData.listingformula.gmrPlatformData[k].qty;\r\n              }\r\n            }\r\n          }\r\n          if (findindex('gmrQtyFixed') != -1) {\r\n            let totolFixedforSelectedGmr = 0;\r\n            for (let k = 0; k < gmrSavedData.data.length; k++) {\r\n              if (mdmbody[findindex('gmrQtyFixed')].dependsOn[0] == gmrSavedData.data[k].gmrRefNo)\r\n                for (\r\n                  let i = 0;\r\n                  gmrSavedData.data[k].fixationUsed && i < gmrSavedData.data[k].fixationUsed.length;\r\n                  i++\r\n                ) {\r\n                  totolFixedforSelectedGmr =\r\n                    totolFixedforSelectedGmr + Number(gmrSavedData.data[k].fixationUsed[i].fixationQty);\r\n                }\r\n            }\r\n            if (totolFixedforSelectedGmr == 0) mdmdata['gmrQtyFixed'] = '0';\r\n            else mdmdata['gmrQtyFixed'] = totolFixedforSelectedGmr;\r\n          }\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n      if (findindex('productPriceUnit') != -1) {\r\n        mdmdata['productPriceUnit'] = req.body.selectedData.productPriceUnit;\r\n      }\r\n      if (findindex('currencyconversion') != -1) {\r\n        if (mdmbody[findindex('currencyconversion')].dependsOn[2] != 'Pre-execution') {\r\n          mdmdata['currencyconversion'] = mdmbody[findindex('currencyconversion')].dependsOn[1] + '&' + 1;\r\n        } else if (\r\n          mdmbody[findindex('currencyconversion')].dependsOn[0].split('\/')[0] ===\r\n          mdmbody[findindex('currencyconversion')].dependsOn[1]\r\n        ) {\r\n          mdmdata['currencyconversion'] =\r\n            mdmbody[findindex('currencyconversion')].dependsOn[0].split('\/')[0] +\r\n            ' -> ' +\r\n            mdmbody[findindex('currencyconversion')].dependsOn[1] +\r\n            '&' +\r\n            1;\r\n        } else {\r\n          try {\r\n            let start1 = new Date();\r\n            const [from, to] = await Promise.all([\r\n              getcurrencyconversion(mdmbody[findindex('currencyconversion')].dependsOn[0].split('\/')[0]),\r\n              getcurrencyconversion(mdmbody[findindex('currencyconversion')].dependsOn[1])\r\n            ]);\r\n            var end = new Date() - start1;\r\n            console.log('CurrencyApi', end);\r\n            let factor = 1;\r\n            let labelfrom = mdmbody[findindex('currencyconversion')].dependsOn[0].split('\/')[0];\r\n            let labelto = mdmbody[findindex('currencyconversion')].dependsOn[1];\r\n            if (from.isSubCurrency == 'Y') {\r\n              factor = factor * from.conversionFactor;\r\n              labelfrom = from.currencyCode;\r\n            }\r\n            if (to.isSubCurrency == 'Y') {\r\n              factor = factor \/ to.conversionFactor;\r\n              labelto = to.currencyCode;\r\n            }\r\n            mdmdata['currencyconversion'] = labelfrom + ' -> ' + labelto + '&' + factor;\r\n          } catch (e) {\r\n            console.log(e);\r\n            mdmdata['currencyconversion'] =\r\n              mdmbody[findindex('currencyconversion')].dependsOn[0].split('\/')[0] +\r\n              ' -> ' +\r\n              mdmbody[findindex('currencyconversion')].dependsOn[1] +\r\n              '&' +\r\n              1;\r\n          }\r\n        }\r\n      }\r\n      if (findindex('quantityUnitConversion') != -1) {\r\n        let fromUnit = mdmbody[findindex('quantityUnitConversion')].dependsOn[1].split(' -> ')[0];\r\n        let toUnit = mdmbody[findindex('quantityUnitConversion')].dependsOn[1].split(' -> ')[1];\r\n        if(fromUnit == toUnit) {\r\n          mdmdata['quantityUnitConversion'] = 1;\r\n        }\r\n        else{\r\n        let qtyunitlist = await getunitconversion('physicalproductquantitylist', false, false);\r\n        if (!qtyunitlist.hasOwnProperty('physicalproductquantitylist')) {\r\n          mdmdata['quantityUnitConversion'] = 1;\r\n        } else if (Array.isArray(qtyunitlist.physicalproductquantitylist)) {\r\n          let f = mdmbody[findindex('quantityUnitConversion')].dependsOn[1].split(' -> ')[0];\r\n          let t = mdmbody[findindex('quantityUnitConversion')].dependsOn[1].split(' -> ')[1];\r\n          if (f == 'undefined' || t == 'undefined' || f == 'null' || t == 'null') {\r\n            mdmdata['quantityUnitConversion'] = 1;\r\n          } else {\r\n            for (var i = 0; i < qtyunitlist.physicalproductquantitylist.length; i++) {\r\n              if (qtyunitlist.physicalproductquantitylist[i].value === f)\r\n                f = qtyunitlist.physicalproductquantitylist[i].key;\r\n              if (qtyunitlist.physicalproductquantitylist[i].value === t)\r\n                t = qtyunitlist.physicalproductquantitylist[i].key;\r\n            }\r\n            let conversionFactor = await getunitconversion('quantityConversionFactor', f, t);\r\n            mdmdata['quantityUnitConversion'] = conversionFactor.hasOwnProperty('quantityConversionFactor')\r\n              ? conversionFactor.quantityConversionFactor[0].value\r\n              : 1;\r\n            if (\r\n              req.body.selectedData.listingformula.densityDetailsContract.densityFactor &&\r\n              req.body.selectedData.createtriggerv2composite.createtriggerpricev2.execution === 'Pre-execution'\r\n            ) {\r\n              let conversionFactor = await getValueFromDensityApi({\r\n                densityValue: req.body.selectedData.listingformula.densityDetailsContract.densityFactor,\r\n                sourceUnitId: f,\r\n                destinationUnitId: t,\r\n                productId: mdmbody[findindex('quantityUnitConversion')].dependsOn[2],\r\n                massUnitId: req.body.selectedData.listingformula.densityDetailsContract.densityMassQtyUnitId,\r\n                volumeUnitId: req.body.selectedData.listingformula.densityDetailsContract.densityVolumeQtyUnitId\r\n              });\r\n              mdmdata['quantityUnitConversion'] =\r\n                conversionFactor.msg && conversionFactor.msg === 'Success'\r\n                  ? conversionFactor.conversionFactor\r\n                  : mdmdata['quantityUnitConversion'];\r\n            } else if (\r\n              req.body.selectedData.createtriggerv2composite.createtriggerpricev2.execution === 'Post- exection' &&\r\n              req.body.selectedData.createtriggerv2composite.createtriggerpricev2.gmrRefNo\r\n            ) {\r\n              let finddensity = await get_gmrDensity(\r\n                req.body.selectedData.createtriggerv2composite.createtriggerpricev2.gmrRefNo\r\n              );\r\n              if (Array.isArray(finddensity.data) && finddensity.data.length > 0) {\r\n                mdmdata['quantityUnitConversion'] =\r\n                finddensity.data[0].hasOwnProperty('weightedAvgConversionFactorGMRQty')\r\n                    ? Number(finddensity.data[0].weightedAvgConversionFactorGMRQty)\r\n                    : mdmdata['quantityUnitConversion'];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n      return mdmdata;\r\n    }\r\n    main().then(mdmdata => {\r\n      res.status(200).send(mdmdata);\r\n    });\r\n  ",
    "sys__UUID" : "71cede37-e716-4aa2-b739-f0c15a27ae27",
    "sys__createdBy" : "avinash.singh@ekaplus.com",
    "type" : "processor"
}