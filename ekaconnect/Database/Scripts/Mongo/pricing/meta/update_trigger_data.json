{
  "_id": "update_trigger_data",
  "name": "update_trigger_data",
  "type": "processor",
  "refType": "app",
  "refTypeId": "84d7b167-1d9f-406d-b974-bea406a25f9a",
  "snippet": "var moment = require(\"moment\");\r\nfunction get_defaultData(body) {\r\n  return new Promise(function (resolve, reject) {\r\n    request(body, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body); //Success\r\n      } else {\r\n        reject(body); //Failure\r\n      }\r\n    });\r\n  });\r\n}\r\nasync function get_triggerData() {\r\n  var defaultdata1 = {\r\n    method: \"POST\",\r\n    url: req.body.propertyList.eka_connect_host + \"/workflow/data\",\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    },\r\n    json: true,\r\n    body: {\r\n      appId: \"84d7b167-1d9f-406d-b974-bea406a25f9a\",\r\n      workFlowTask: \"trigger_data_list\",\r\n      filterData: {\r\n        filter: [\r\n          {\r\n            fieldName: \"internalContractItemRefNo\",\r\n            value: [req.body.queryParams.internalContractItemRefNo],\r\n            operator: \"in\",\r\n          },\r\n          {\r\n            fieldName: \"fixationRefNo\",\r\n            value: [req.body.fixationRefNo],\r\n            operator: \"in\",\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  };\r\n  return await get_defaultData(defaultdata1);\r\n}\r\nasync function cog_update(internalContractItemRefNo, internalGmrRefNo) {\r\n  var defaultdata1 = {\r\n    method: \"POST\",\r\n    url:\r\n      req.body.propertyList.platform_url +\r\n      \"/api/gmr/postcog?internalGMRRefNo=\" +\r\n      internalGmrRefNo +\r\n      \"&itemRefNo=\" +\r\n      internalContractItemRefNo,\r\n    body: {},\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    },\r\n    json: true,\r\n  };\r\n  return await get_defaultData(defaultdata1);\r\n}\r\nasync function gmrdata(internalContractItemRefNo) {\r\n  var defaultdata1 = {\r\n    method: \"POST\",\r\n    url: req.body.propertyList.eka_connect_host + \"/workflow/data\",\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    },\r\n    json: true,\r\n    body: {\r\n      appId: \"5d907cd2-7785-4d34-bcda-aa84b2158415\",\r\n      workFlowTask: \"gmr_data_list\",\r\n      filterData: {\r\n        filter: [\r\n          {\r\n            fieldName: \"internalContractItemRefNo\",\r\n            value: [internalContractItemRefNo],\r\n            operator: \"in\",\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  };\r\n  return await get_defaultData(defaultdata1);\r\n}\r\nasync function get_contract() {\r\n  var defaultdata1 = {\r\n    method: \"POST\",\r\n    url: req.body.propertyList.eka_connect_host + \"/workflow/data\",\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    },\r\n    json: true,\r\n    body: {\r\n      appId: \"5d907cd2-7785-4d34-bcda-aa84b2158415\",\r\n      workFlowTask: \"contract_list\",\r\n      filterData: {\r\n        filter: [\r\n          {\r\n            fieldName: \"internalContractRefNo\",\r\n            value: [req.body.queryParams.internalContractRefNo],\r\n            operator: \"in\",\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  };\r\n  return await get_defaultData(defaultdata1);\r\n}\r\nfunction getbodyOfPricing(contract_data, internalContractItemRefNo) {\r\n  let itemDetails = contract_data.itemDetails.find(\r\n    (item) => item.internalItemRefNo == internalContractItemRefNo\r\n  );\r\n  if (\r\n    itemDetails.hasOwnProperty(\"pricingStrategy\") &&\r\n    itemDetails.pricingStrategy != \"pricingStrategy-001\"\r\n  ) {\r\n  }\r\n  // itemDetails.pricing.pricingFormulaId =\r\n  //   req.body.createtriggerv2composite.createtriggerpricev2.listingformula._id;\r\n  let contract = {\r\n    contract: {\r\n      refNo: contract_data.internalContractRefNo,\r\n      itemDetails: [itemDetails],\r\n      noOfItems: 0,\r\n      asOfDate: moment().format(\"YYYY-MM-DD\") + \"T00:00:00.000+0000\",\r\n    },\r\n  };\r\n\r\n  return contract;\r\n}\r\nvar pricingurl = {\r\n  method: \"POST\",\r\n  url:\r\n    req.body.propertyList.eka_pricing_host +\r\n    \"/api/pricing/formula?mode=Detailed\",\r\n  body: {},\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n  },\r\n  json: true,\r\n};\r\nasync function pricing_call(contract, internalContractItemRefNo) {\r\n  pricingurl.body = getbodyOfPricing(contract, internalContractItemRefNo);\r\n  return new Promise(function (resolve, reject) {\r\n    request(pricingurl, function (error, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body); //Success\r\n      } else {\r\n        reject(body); //Failure\r\n      }\r\n    });\r\n  });\r\n}\r\nasync function update(tobesentdata) {\r\n  var defaultdata1 = {\r\n    method: \"POST\",\r\n    url: req.body.propertyList.eka_connect_host + \"/workflow\",\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    },\r\n    json: true,\r\n    body: {\r\n      appId: req.body.appId,\r\n      workflowTaskName: \"triggerdata_save\",\r\n      task: \"triggerdata_save\",\r\n      output: {\r\n        [\"triggerdata_save\"]: tobesentdata,\r\n      },\r\n    },\r\n  };\r\n  return await get_defaultData(defaultdata1);\r\n}\r\nasync function main() {\r\n  var message = {\r\n    status: \"\",\r\n    data: \"\",\r\n  };\r\n  let avgPrice = req.body.price.split(\" \")[0];\r\n  if (Number(avgPrice) <= 0) {\r\n    message.status = 500;\r\n    message.data = \"Avg Price of Fixation cannot be 0 or -ive\";\r\n    return message;\r\n  }\r\n  let triggerData = await get_triggerData();\r\n  let contract = await get_contract();\r\n  let preupdatedresult = triggerData.data[0];\r\n  let updatedresult = triggerData.data[0];\r\n  updatedresult[\"kfactor\"] = req.body.kfactor;\r\n  updatedresult[\"price\"] = avgPrice;\r\n  updatedresult[\"avgPrice\"] = avgPrice;\r\n  updatedresult[\"calculatedPrice\"] = Number(\r\n    Number(updatedresult[\"quantity\"]) * Number(avgPrice)\r\n  );\r\n  let updated = await update(updatedresult);\r\n  try {\r\n    let gmr = await gmrdata(req.body.queryParams.internalContractItemRefNo);\r\n    if (\r\n      (!gmr.hasOwnProperty(\"data\") || gmr.data.length == 0) &&\r\n      preupdatedresult[\"execution\"] === \"Pre-execution\"\r\n    ) {\r\n      let pricingCall = await pricing_call(\r\n        contract.data[0],\r\n        req.body.queryParams.internalContractItemRefNo\r\n      );\r\n    } else {\r\n      let internalGmrRefNo = preupdatedresult[\"gmrRefNo\"];\r\n      if (gmr.data.length > 0) {\r\n        internalGmrRefNo = gmr.data[0].gmrRefNo;\r\n      }\r\n      let pricingCall = await cog_update(\r\n        req.body.queryParams.internalContractItemRefNo,\r\n        internalGmrRefNo\r\n      );\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    message.status = \"500\";\r\n    message.data = err;\r\n    let reversed = await update(preupdatedresult);\r\n    return message;\r\n  }\r\n  message.status = \"200\";\r\n  message.data = updated;\r\n\r\n  return message;\r\n}\r\nmain().then((message) => {\r\n  if (message.status == \"200\") res.status(200).send(message.data);\r\n  else res.status(500).send(message.data);\r\n});\r\n",
  "sys__UUID": "488279cc-0421-4a92-8d6d-b40b0d04fdbd",
  "sys__createdBy": "avinash@ekaplus.com"
}
