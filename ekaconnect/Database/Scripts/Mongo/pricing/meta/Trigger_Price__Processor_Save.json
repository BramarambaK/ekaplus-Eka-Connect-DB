{
    "_id" : "Trigger_Price_Save_processor",
    "name" : "triggerpriceviewprocessor",
    "refType" : "app",
    "refTypeId" : "84d7b167-1d9f-406d-b974-bea406a25f9a",
    "snippet" : "\r\n    \r\n   \r\n    var defaultDataURL =\r\n    req.body.propertyList.eka_mdm_host + '/mdm/84d7b167-1d9f-406d-b974-bea406a25f9a/data'\r\n  var defaultdata = {\r\n    method: 'POST',\r\n    body:[\r\n      {\r\n          \"dependsOn\": [\r\n            req.body.productId\r\n          ],\r\n          \"serviceKey\": \"physicalproductquantitylist\"\r\n      }\r\n  ],\r\n    url: defaultDataURL,\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n  };\r\n  function get_defaultData() {\r\n    return new Promise(function (resolve, reject) {\r\n      request(defaultdata, function (err, response, body) {\r\n        if (err || body.error) reject(body);\r\n        else {\r\n          resolve(body);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  var moment = require('moment');\r\n  var today = new Date()\r\nvar datewithtime = req.body.fixationDate\r\n  today = moment(today).format('YYYY-MM-DD');\r\n  today = today + 'T00:00:00.000+0000'\r\n if(req.body.fixationMethod==='Index' && (!req.body.price || req.body.price===null || req.body.price ===''||req.body.price==='NA') ){\r\nres.status(500).send('Prices are Not Available');\r\n}\r\nif(!req.body.fxrate || req.body.fxrate==='null' || req.body.fxrate ===''){\r\nres.status(500).send('Please Provide the fxrate');\r\n}\r\nif(!req.body.quantity || req.body.quantity==='null' || req.body.quantity ==='' || Number(req.body.quantity)>Number(req.body.unfixedQuantity)){\r\nres.status(500).send('Quantity should be less than or equal to Unfixed Quantity');\r\n}\r\nif(moment(req.body.fixationDate)<moment(req.body.contractIssueDate)){\r\nres.status(500).send('Price Fixation Date cannot be before Contract Issue Date');\r\n}\r\nif(moment(req.body.fixationDate)>moment(req.body.activityDate)){\r\nres.status(500).send('Price Fixation date cannot be after the Activity Date');\r\n}\r\nif(moment(req.body.fixationDate)<moment(req.body.latestDate)){\r\nres.status(500).send('Price Fixation date cannot be before the Previous Fixation Date');\r\n}\r\n  delete req.body.appId\r\n  delete req.body.userId\r\n  delete req.body.processorDetails\r\n  delete req.body.processorId\r\n  delete req.body.sys__state\r\n  delete req.body.propertyList\r\n  req.body.date = today\r\n  get_defaultData().then(function (qtyunitlist) {\r\n    let f = req.body.itemQtyUnit\r\n    let t = req.body.priceUnitIdDisplayName.split('/')[1]\r\n    for(var i=0;i<qtyunitlist.physicalproductquantitylist.length;i++){\r\n      if(qtyunitlist.physicalproductquantitylist[i].value ===req.body.itemQtyUnit)\r\n          f = qtyunitlist.physicalproductquantitylist[i].key\r\n      if(qtyunitlist.physicalproductquantitylist[i].value ===req.body.unitConversion)\r\n        t = qtyunitlist.physicalproductquantitylist[i].key\r\n    }\r\n    defaultdata.body[0].dependsOn.push(f)\r\n    defaultdata.body[0].dependsOn.push(t)\r\n    defaultdata.body[0].serviceKey = 'quantityConversionFactor'\r\n      get_defaultData().then(function (conversionFactor) {\r\n      var convertedQty = Number(req.body.quantity)*conversionFactor.quantityConversionFactor[0].value\r\n      var cal = Number(req.body.price)\r\n      var conversion = 1\r\n      var qtyConversion = 1\r\n  \r\n\r\nif(req.body.priceunitforindex && req.body.priceunitforindex!=='null' && req.body.priceunitforindex !==''){\r\nreq.body.priceUnitIdDisplayName = req.body.priceunitforindex\r\n}\r\n  var currencyConversion = Number(req.body.fxrate)\r\n  if(req.body.priceUnitIdDisplayName.split('/')[1]===req.body.unitConversion){\r\n    qtyConversion = 1\r\n  conversion = currencyConversion / qtyConversion\r\n  \r\n  if(req.body.fixationMethod==='Manual'){\r\n    cal = cal*conversion*convertedQty\r\n    req.body.calculatedPrice=cal\r\n  }\r\n  else{\r\n\r\n    if(req.body.indexMultiplier){\r\n    cal = cal * Number(req.body.indexMultiplier)\r\n    }\r\n    if(req.body.differential){\r\n      cal = cal + Number(req.body.differential)\r\n      }\r\n      cal = cal*conversion*convertedQty\r\n    req.body.calculatedPrice=cal\r\n  }\r\n\r\nreq.body['qty'] = req.body.quantity\r\nreq.body['priceU'] = req.body.priceUnitIdDisplayName\r\nreq.body['triggerDate'] = req.body.fixationDate\r\nreq.body['price'] = req.body.price\r\nreq.body['internalContractItemRefNo'] =  req.body.queryParams.internalContractItemRefNo\r\nreq.body['internalContractRefNo'] = req.body.queryParams.internalContractRefNo\r\nconsole.log(req.body)\r\nres.status(200).send(req.body);\r\n  }\r\n  else{\r\n    \r\n    defaultdata.body[0].serviceKey = 'physicalproductquantitylist'\r\n    defaultdata.body[0].dependsOn = [defaultdata.body[0].dependsOn[0]]\r\n    get_defaultData().then(function (result) {\r\n      var fromUnitid = req.body.unitConversion\r\n      var toUnitid = req.body.priceUnitIdDisplayName.split('/')[1]\r\n\r\n\r\n      for(var i=0;i<result.physicalproductquantitylist.length;i++){\r\n        if(result.physicalproductquantitylist[i].value ===req.body.unitConversion)\r\n            fromUnitid = result.physicalproductquantitylist[i].key\r\n        if(result.physicalproductquantitylist[i].value === req.body.priceUnitIdDisplayName.split('/')[1])\r\n          toUnitid = result.physicalproductquantitylist[i].key\r\n      }\r\n      defaultdata.body[0].dependsOn.push(toUnitid)\r\n      defaultdata.body[0].dependsOn.push(fromUnitid)\r\n      defaultdata.body[0].serviceKey = 'quantityConversionFactor'\r\n        get_defaultData().then(function (resp) {\r\n          qtyConversion = resp.quantityConversionFactor[0].value\r\n    conversion = currencyConversion / qtyConversion\r\n  \r\n  if(req.body.fixationMethod==='Manual'){\r\n    cal = cal*conversion*convertedQty\r\n    req.body.calculatedPrice=cal\r\n  }\r\n  else{\r\n    if(req.body.indexMultiplier){\r\n    cal = cal * Number(req.body.indexMultiplier)\r\n    }\r\n    if(req.body.differential){\r\n      cal = cal + Number(req.body.differential)\r\n      }\r\n      cal = cal*conversion*convertedQty\r\n    req.body.calculatedPrice=cal\r\n  }\r\nreq.body['qty'] = req.body.quantity\r\nreq.body['priceU'] = req.body.priceUnitIdDisplayName\r\nreq.body['triggerDate'] = req.body.fixationDate\r\nreq.body['price'] = req.body.price\r\nreq.body['internalContractItemRefNo'] =  req.body.queryParams.internalContractItemRefNo\r\nreq.body['internalContractRefNo'] = req.body.queryParams.internalContractRefNo\r\nconsole.log(req.body)\r\nres.status(200).send(req.body);\r\n        })\r\n      })\r\n  }\r\n      }).catch(err => {\r\n       res.status(500).send('MdM Quantity Conversion failed')\r\n    });\r\n  }).catch(err => {\r\n       res.status(500).send('MdM Quantity Unit to get failed')\r\n    });\r\n  \r\n  \r\n  ",
    "sys__UUID" : "dbce391a-2926-494f-83c2-8edadc46f6d2",
    "sys__createdBy" : "avinash.singh@ekaplus.com",
    "sys__createdOn" : ISODate("2019-05-22T09:51:04.600Z"),
    "type" : "processor"
}