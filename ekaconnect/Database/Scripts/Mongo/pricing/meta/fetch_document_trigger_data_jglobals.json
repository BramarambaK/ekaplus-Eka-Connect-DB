{
    "_id" : "fetch_document_trigger_data_jglobals",
    "name" : "fetch_document_trigger_data_jglobals",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "84d7b167-1d9f-406d-b974-bea406a25f9a",
    "snippet" : "\r\n    var moment = require('moment');\r\n    var result;\r\n    var defaultdata1 = {\r\n      method: 'POST',\r\n      url: req.body.propertyList.eka_connect_host + '/workflow/data',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true,\r\n      body: {\r\n        appId: '5d907cd2-7785-4d34-bcda-aa84b2158415',\r\n        workFlowTask: 'contract_list',\r\n        filterData: {\r\n          filter: [\r\n            {\r\n              fieldName: 'internalContractRefNo',\r\n              value: [req.body.queryParams.internalContractRefNo],\r\n              operator: 'in'\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    };\r\n    function get_defaultData1() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(defaultdata1, function(err, response, body) {\r\n          if (response.statusCode === 200) {\r\n            resolve(body);\r\n          } else {\r\n            if (err || body.error) reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var defaultdata2 = {\r\n      method: 'POST',\r\n      url: req.body.propertyList.eka_connect_host + '/workflow/data',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true,\r\n      body: {\r\n        appId: '84d7b167-1d9f-406d-b974-bea406a25f9a',\r\n        workFlowTask: 'getting_table_Trigger_manual',\r\n        filterData: {\r\n          filter: [\r\n            {\r\n              fieldName: 'fixationRefNo',\r\n              value: [req.body.selectedData.fixationRefNo],\r\n              operator: 'in'\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    };\r\n    function get_defaultData2() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(defaultdata2, function(err, response, body) {\r\n          if (response.statusCode === 200) {\r\n            resolve(body);\r\n          } else {\r\n            if (err || body.error) reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var getapp = {\r\n      method: 'POST',\r\n      url: req.body.propertyList.eka_connect_host + '/meta/app/physicals',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        json: true\r\n      }\r\n    };\r\n    function get_appid() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(getapp, function(err, response, body) {\r\n          if (response.statusCode === 200) {\r\n            resolve(body);\r\n          } else {\r\n            if (err || body.error) reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var cpaddress = {\r\n      method: 'POST',\r\n      url: req.body.propertyList.eka_mdm_host + '/mdm/masterdatas/5d907cd2-7785-4d34-bcda-aa84b2158415/cpAddress',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        Connection: 'keep-alive'\r\n      },\r\n      body: {\r\n        cpId: 'BP-2038'\r\n      },\r\n      json: true\r\n    };\r\n    function get_address() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(cpaddress, function(err, response, body) {\r\n          if (response.statusCode === 200) {\r\n            resolve(body);\r\n          } else {\r\n            if (err || body.error) reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var internalGmrRefNo = req.body.selectedData.gmrRefNo ? req.body.selectedData.gmrRefNo : 'XYZ';\r\n    var stocks = {\r\n      method: 'GET',\r\n      url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '/data/5d907cd2-7785-4d34-bcda-aa84b2158415/00ac5c66-69c6-11eb-9439-0242ac130002?gmrRefNo=' +\r\n        internalGmrRefNo,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        Connection: 'keep-alive'\r\n      },\r\n      json: true\r\n    };\r\n    function get_stocks() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(stocks, function(err, response, body) {\r\n          if (response.statusCode === 200) {\r\n            resolve(body);\r\n          } else {\r\n            if (err || body.error) reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function getlatesteventdate(stocks) {\r\n      let date = '';\r\n      if (stocks[0] && stocks[0].stock) {\r\n        let dates = stocks[0].stock\r\n          .filter(item => {\r\n            if (item.eventDate) return item.eventDate;\r\n          })\r\n          .map(i => new Date(i.eventDate));\r\n        date = new Date(Math.max.apply(null, dates));\r\n      }\r\n\r\n      date = date.toISOString();\r\n      date = date.split('T')[0];\r\n      return moment(date).format('DD MMM YYYY');\r\n    }\r\n    function findDensity(d) {\r\n      let density = '';\r\n      if (d && d.hasOwnProperty('densityFactor')) {\r\n        density = d.densityFactor;\r\n        if (d.hasOwnProperty('densityMass') && d.hasOwnProperty('densityVolume')) {\r\n          density = density + ' ' + d.densityMass + '/' + d.densityVolume;\r\n        }\r\n      }\r\n      return density;\r\n    }\r\n    get_defaultData1().then(contract => {\r\n      get_defaultData2().then(tableData => {\r\n        var arra = [];\r\n        for (let n = 0; n < tableData.data.length; n++) {\r\n          tableData.data[n]['priceDate'] = moment\r\n            .utc(tableData.data[n]['fixationDate'])\r\n            .local()\r\n            .format('DD MMM YYYY');\r\n          if (n != 0) arra.push(tableData.data[n]);\r\n        }\r\n        // var pricingmonth =moment(tableData.data.reduce(function (a, b) { return a.fixationDate < b.fixationDate ? a.fixationDate : b.fixationDate; })).format('MMM YYYY');\r\n        // contract = JSON.parse(contract.data);\r\n        var allDisplayValue = JSON.parse(contract.data[0].generalDetailsDisplayValue);\r\n        var itemDetails = contract.data[0].itemDetails.find(\r\n          o => o.internalItemRefNo === req.body.queryParams.internalContractItemRefNo\r\n        );\r\n        allDisplayValue = {\r\n          ...allDisplayValue,\r\n          ...JSON.parse(itemDetails.itemDisplayValue)\r\n        };\r\n        cpaddress.body.cpId = contract.data[0].cpProfileId;\r\n        get_address()\r\n          .then(address => {\r\n            get_stocks()\r\n              .then(stocks => {\r\n                get_appid().then(data2 => {\r\n                  var app = JSON.parse(data2);\r\n                  let applogo = 'assets/uploads/Jglobal.png';\r\n                  if (app.config.header.hasOwnProperty('clientLogo')) {\r\n                    applogo = 'assets/uploads/' + app.config.header.clientLogo.src;\r\n                  }\r\n                  result = {\r\n                    app: applogo,\r\n                    // app : 'assets/uploads/Jglobal.png',\r\n                    issue_date: moment(new Date()).format('DD MMM YYYY'),\r\n                    differential: req.body.selectedData.differential.split(' ')[0],\r\n                    differentialUnit: req.body.selectedData.differential.split(' ')[1],\r\n                    productDisplayValue: allDisplayValue.productIdDisplayName,\r\n                    landPort: allDisplayValue.originationCityIdDisplayName,\r\n                    quality: allDisplayValue.qualityDisplayName,\r\n                    cpName: allDisplayValue.cpProfileIdDisplayName,\r\n                    calculatedPrice:\r\n                      Number(req.body.selectedData.calculatedPrice.split(' ')[0]).toFixed(2) +\r\n                      ' ' +\r\n                      req.body.selectedData.calculatedPrice.split(' ')[1],\r\n                    contractIssueDate: moment(contract.data[0].issueDate).format('DD MMM YYYY'),\r\n                    contractIssueDate1format: moment(contract.data[0].issueDate).format('Do MMM YYYY'),\r\n                    contractRefNo: contract.data[0].contractRefNo,\r\n                    itemQty: allDisplayValue.itemQtyDisplayName + ' ' + allDisplayValue.itemQtyUnitIdDisplayName,\r\n                    incoterm: allDisplayValue.incotermIdDisplayName,\r\n                    priceUnit: req.body.selectedData.price.split(' ')[1],\r\n                    paymentTerm: allDisplayValue.paymentTermIdDisplayName,\r\n                    contractDensity: findDensity(req.body.selectedData.densityDetailsContract),\r\n                    tableData1: arra,\r\n                    fixationDate: moment\r\n                      .utc(req.body.selectedData.triggerDate)\r\n                      .local()\r\n                      .format('DD MMM YYYY'),\r\n                    fixationStage:\r\n                      req.body.selectedData.execution == 'Pre-execution'\r\n                        ? 'Before the delivery of Cargo'\r\n                        : 'After the delivery of Cargo',\r\n                    rowspan: tableData.data.length > 0 ? tableData.data.length : 1,\r\n                    deliveryPeriod:\r\n                      moment(itemDetails.deliveryFromDate).format('DD MMM YYYY') +\r\n                      ' - ' +\r\n                      moment(itemDetails.deliveryToDate).format('DD MMM YYYY'),\r\n                    gmrqty:\r\n                      req.body.selectedData.execution == 'Pre-execution'\r\n                        ? req.body.selectedData.itemQty\r\n                        : req.body.selectedData.gmrQty + ' ' + req.body.selectedData.gmrQtyUnit,\r\n                    gmrfixed:\r\n                      req.body.selectedData.execution == 'Pre-execution'\r\n                        ? req.body.selectedData.itemFixedQty\r\n                        : req.body.selectedData.gmrQtyFixed + ' ' + req.body.selectedData.gmrQtyUnit,\r\n                    gmrunfixed:\r\n                      req.body.selectedData.execution == 'Pre-execution'\r\n                        ? req.body.selectedData.itemUnfixedQty\r\n                        : req.body.selectedData.gmrQtyAvailable + ' ' + req.body.selectedData.gmrQtyUnit,\r\n                    gmrdensity: '',\r\n                    previouslyfixed:\r\n                      Number(req.body.selectedData['itemQty'].split(' ')[0]) -\r\n                      Number(req.body.selectedData['itemUnfixedQty'].split(' ')[0]) -\r\n                      Number(req.body.selectedData['itemFixedQty'].split(' ')[0]),\r\n                    gmrQtylabel:\r\n                      req.body.selectedData.execution == 'Pre-execution'\r\n                        ? 'Total Cargo Qty To Be Delivered'\r\n                        : 'Total Cargo Qty Delivered',\r\n                    priceU: req.body.selectedData.priceU,\r\n                    currencyconversion: req.body.selectedData.currencyconversion\r\n                      ? '(' + req.body.selectedData.currencyconversion + ')'\r\n                      : '(' +\r\n                        req.body.selectedData.price.split('/')[1] +\r\n                        ' -> ' +\r\n                        req.body.selectedData.price.split('/')[1] +\r\n                        ')',\r\n                    fixationRefNo: req.body.selectedData.fixationRefNo,\r\n                    avgPrice: req.body.selectedData.avgPrice,\r\n                    price: tableData.data[0]['price'],\r\n                    main_add: req.body.propertyList.eka_tenant_main_address\r\n                      ? req.body.propertyList.eka_tenant_main_address\r\n                      : '',\r\n                    left_side_add: req.body.propertyList.eka_tenant_side_address\r\n                      ? req.body.propertyList.eka_tenant_side_address\r\n                      : '',\r\n                    greet: req.body.propertyList.eka_tenant_sign_expression\r\n                      ? req.body.propertyList.eka_tenant_sign_expression\r\n                      : '',\r\n                    clientname: req.body.propertyList.eka_tenant_client_name\r\n                      ? req.body.propertyList.eka_tenant_client_name\r\n                      : '',\r\n                    priceDate: tableData.data[0]['priceDate'],\r\n                    fxrate: tableData.data[0]['fxrate'],\r\n                    invoiceno: 'PSI / ' + req.body.selectedData.fixationRefNo,\r\n                    invoicedate: moment(new Date()).format('DD MMM YYYY'),\r\n                    vessel: '',\r\n                    bldate: getlatesteventdate(stocks),\r\n                    add1: !address.cpAddress ? '' : address.cpAddress.split('~')[0],\r\n                    add2: !address.cpAddress ? '' : address.cpAddress.split('~')[1],\r\n                    add3: !address.cpAddress ? '' : address.cpAddress.split('~')[2],\r\n                    pricingmonth: moment(\r\n                      tableData.data.reduce(function(a, b) {\r\n                        return a.fixationDate > b.fixationDate ? a.fixationDate : b.fixationDate;\r\n                      })\r\n                    ).format('MMM YYYY')\r\n                  };\r\n                  result.previouslyfixed = result.previouslyfixed < 0 ? 0 : result.previouslyfixed.toFixed(3);\r\n                  result.percentageTotal =\r\n                    ((Number(result.gmrfixed.split(' ')[0]) / Number(result.gmrqty.split(' ')[0])) * 100).toFixed(0) +\r\n                    ' %';\r\n                  result.unPriceVolumePercent = (\r\n                    (Number(result.gmrunfixed.split(' ')[0]) / Number(result.gmrqty.split(' ')[0])) *\r\n                    100\r\n                  ).toFixed(0);\r\n                  result.priceVolumePercent = 100 - result.unPriceVolumePercent + ' %';\r\n                  result.unPriceVolumePercent = result.unPriceVolumePercent + ' %';\r\n                  result.bldate = result.bldate == 'Invalid date' ? '' : result.bldate;\r\n                  result.priceVolume =\r\n                    Number(result.gmrqty.split(' ')[0]) -\r\n                    Number(result.gmrunfixed.split(' ')[0]) +\r\n                    ' ' +\r\n                    result.gmrunfixed.split(' ')[1];\r\n                  res.status(200).send(result);\r\n                });\r\n              })\r\n              .catch(err => {\r\n                console.log(err);\r\n                res.status(500).send('address api failed');\r\n              });\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n            res.status(500).send('Stocks Connect Failed');\r\n          });\r\n      });\r\n    });\r\n  ",
    "sys__UUID" : "8290bc1b-c5c1-47e0-aa03-886c311dfd09",
    "sys__createdOn" : ISODate("2019-06-24T13:35:31.281Z"),
    "sys__createdBy" : "avinash@ekaplus.com"
}