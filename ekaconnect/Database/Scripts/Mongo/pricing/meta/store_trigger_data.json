{
    "_id" : "store_trigger_data",
    "name" : "store_trigger_data",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "84d7b167-1d9f-406d-b974-bea406a25f9a",
    "snippet" : "\r\n    var moment = require('moment');\r\n    let tabledata = req.body.createtriggerv2composite.listingmanualtable\r\n    var qtyunitlist_body = {\r\n      method: 'POST',\r\n      body:[\r\n        {\r\n            \"dependsOn\": [\r\n        req.body.createtriggerv2composite.createtriggerpricev2.productId\r\n            ],\r\n            \"serviceKey\": \"physicalproductquantitylist\"\r\n        }\r\n    ],\r\n      url: req.body.propertyList.eka_mdm_host + '\/mdm\/84d7b167-1d9f-406d-b974-bea406a25f9a\/data',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function get_quantity() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(qtyunitlist_body, function (err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n     function gettableAvg(){\r\n        let total = 0\r\n        let valid  = 0\r\n        for(let i=0;i<req.body.createtriggerv2composite.listingmanualtable.length;i++){\r\n          if(req.body.createtriggerv2composite.listingmanualtable[i].price && req.body.createtriggerv2composite.listingmanualtable[i].price!='' && Number(req.body.createtriggerv2composite.listingmanualtable[i].fxrate)>0)\r\n          {\r\n          total = total + Number(req.body.createtriggerv2composite.listingmanualtable[i].price)\r\n          valid = valid + 1\r\n          }\r\n        }\r\n        if(valid > 0){\r\n          return (total\/valid).toFixed(req.body.createtriggerv2composite.createtriggerpricev2.decimalPrecision)\r\n        }\r\n        else {\r\n          return 0\r\n        }\r\n     }  \r\n    function getbodyOfPricing(contract_data,internalContractItemRefNo){\r\n      let itemDetails = contract_data.data[0].itemDetails.find(item=> item.internalItemRefNo == internalContractItemRefNo)\r\n      if (itemDetails.pricingStrategy != 'pricingStrategy-001') itemDetails.pricing.pricingFormulaId = req.body.createtriggerv2composite.createtriggerpricev2.listingformula._id\r\n   console.log(itemDetails.pricing.pricingFormulaId)\r\n      let contract = {\r\n        \"contract\": {\r\n          \"refNo\": contract_data.data[0].internalContractRefNo,\r\n          \"itemDetails\":[itemDetails],\r\n          \"noOfItems\": 0,\r\n          \"asOfDate\": moment().format('YYYY-MM-DD')+\"T00:00:00.000+0000\"\r\n        }\r\n       }\r\n  \r\n     return contract\r\n    }\r\n    var contractbody = {\r\n      method: 'POST',\r\n      body:{\r\n        appId: \"5d907cd2-7785-4d34-bcda-aa84b2158415\",\r\n        workFlowTask: \"contract_list\"\r\n      },\r\n      url: req.body.propertyList.eka_connect_host + '\/workflow\/data?internalContractRefNo=' + req.body.createtriggerv2composite.createtriggerpricev2.internalContractRefNo,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function get_contract() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(contractbody, function(error, response, body) {\r\n            if (response.statusCode === 200) {\r\n              resolve(body);\r\n            } else {\r\n              if (error || body.error) reject(body);\r\n              else reject(body);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    function getDensity(units,density){\r\n      let d = density\r\n      if(units && density && density.hasOwnProperty('densityMassQtyUnitId') && density.hasOwnProperty('densityVolumeQtyUnitId')){\r\n        d['densityMass']=units.reduce((acc,curr)=>{\r\n         if(curr.key == density.densityMassQtyUnitId) acc = curr.value\r\n         return acc\r\n        },'')\r\n        d['densityVolume']=units.reduce((acc,curr)=>{\r\n          if(curr.key == density.densityVolumeQtyUnitId) acc = curr.value\r\n          return acc\r\n         },'')\r\n      }\r\n      \r\n      return d\r\n    }\r\n    get_contract().then((contract)=>{\r\n     let tobesentdata ={}\r\n     req.body.createtriggerv2composite.createtriggerpricev2\r\n      if(req.body.createtriggerv2composite.createtriggerpricev2.execution == 'Pre-execution'){\r\n      tobesentdata['execution'] = req.body.createtriggerv2composite.createtriggerpricev2.execution\r\n      tobesentdata['cpName'] = req.body.createtriggerv2composite.createtriggerpricev2.cpName\r\n      tobesentdata['contractRefno']=req.body.createtriggerv2composite.createtriggerpricev2.listingformula.contractRefNo\r\n      tobesentdata['avgPrice'] = req.body.createtriggerv2composite.createtriggerpricev2.avgPrice\r\n      tobesentdata['conversion'] = req.body.createtriggerv2composite.createtriggerpricev2.conversion\r\n      tobesentdata['currencyconversion'] = req.body.createtriggerv2composite.createtriggerpricev2.currencyconversion\r\n      tobesentdata['decimalPrecision'] = req.body.createtriggerv2composite.createtriggerpricev2.decimalPrecision\r\n      tobesentdata['fixationMethod'] = req.body.createtriggerv2composite.createtriggerpricev2.fixationMethod\r\n      tobesentdata['activityDate'] = req.body.createtriggerv2composite.createtriggerpricev2.activityDate\r\n      tobesentdata['executionDisplayName'] = req.body.createtriggerv2composite.createtriggerpricev2.executionDisplayName\r\n      tobesentdata['internalContractItemRefNo'] = req.body.createtriggerv2composite.createtriggerpricev2.internalContractItemRefNo\r\n      tobesentdata['internalContractRefNo'] = req.body.createtriggerv2composite.createtriggerpricev2.internalContractRefNo\r\n      tobesentdata['quantityunitconversion'] = req.body.createtriggerv2composite.createtriggerpricev2.quantityunitconversion\r\n      tobesentdata['remarks'] = req.body.createtriggerv2composite.createtriggerpricev2.remarks\r\n      tobesentdata['price'] = req.body.createtriggerv2composite.createtriggerpricev2.avgPrice.split(\" \")[0];\r\n      tobesentdata['calculatedPrice'] = req.body.createtriggerv2composite.createtriggerpricev2.avgPrice.split(\" \")[0] * req.body.createtriggerv2composite.createtriggerpricev2.quantity;\r\n      tobesentdata['priceU'] = req.body.createtriggerv2composite.createtriggerpricev2.priceUnitIdDisplayName\r\n      tobesentdata['priceUnitIdDisplayName'] = req.body.createtriggerv2composite.createtriggerpricev2.priceUnitFormula\r\n      tobesentdata['quantity'] = req.body.createtriggerv2composite.createtriggerpricev2.quantity\r\n      tobesentdata['contractRefNo'] = req.body.createtriggerv2composite.createtriggerpricev2.contractRefNo\r\n      tobesentdata['itemQtyUnit'] = req.body.createtriggerv2composite.createtriggerpricev2.itemQtyUnit\r\n      tobesentdata['itemQty'] = Number(req.body.createtriggerv2composite.createtriggerpricev2.fixedQuantity) +  Number(req.body.createtriggerv2composite.createtriggerpricev2.unfixedQuantity)\r\n      tobesentdata['triggerDate'] = req.body.createtriggerv2composite.createtriggerpricev2.activityDate\r\n      tobesentdata['itemUnfixedQty'] = tobesentdata['itemQty'] -  Number(req.body.createtriggerv2composite.createtriggerpricev2.quantity) - Number(req.body.createtriggerv2composite.createtriggerpricev2.fixedQuantity)\r\n      tobesentdata['itemFixedQty'] = Number(req.body.createtriggerv2composite.createtriggerpricev2.quantity)\r\n      tobesentdata['differential'] = (req.body.createtriggerv2composite.createtriggerpricev2.differential=='' || req.body.createtriggerv2composite.createtriggerpricev2.differential==null) ? 0 + ' '+req.body.createtriggerv2composite.createtriggerpricev2.priceUnitFormula  : req.body.createtriggerv2composite.createtriggerpricev2.differential+ ' '+req.body.createtriggerv2composite.createtriggerpricev2.priceUnitFormula\r\n      tobesentdata['fixationStatus'] = 'Active'\r\n      tobesentdata['basePrice'] = gettableAvg() + ' ' + req.body.createtriggerv2composite.createtriggerpricev2.priceUnitIdDisplayName\r\n      tobesentdata['itemFixedQtyAvailable'] = Number(req.body.createtriggerv2composite.createtriggerpricev2.quantity)\r\n      tobesentdata['tableFixationDate'] = moment.utc(tabledata[0]['fixationDate']).utcOffset('+0530').format('YYYY-MM-DD');\r\n      tobesentdata['tableFxrate'] = tabledata[0]['fxrate'];\r\n    }\r\n    else{\r\n      tobesentdata['execution'] = req.body.createtriggerv2composite.createtriggerpricev2.execution\r\n      tobesentdata['cpName'] = req.body.createtriggerv2composite.createtriggerpricev2.cpName\r\n      tobesentdata['contractRefno']=req.body.createtriggerv2composite.createtriggerpricev2.listingformula.contractRefNo\r\n      tobesentdata['avgPrice'] = req.body.createtriggerv2composite.createtriggerpricev2.avgPrice\r\n      tobesentdata['conversion'] = req.body.createtriggerv2composite.createtriggerpricev2.conversion\r\n      tobesentdata['decimalPrecision'] = req.body.createtriggerv2composite.createtriggerpricev2.decimalPrecision\r\n      tobesentdata['fixationMethod'] = req.body.createtriggerv2composite.createtriggerpricev2.fixationMethod\r\n      tobesentdata['activityDate'] = req.body.createtriggerv2composite.createtriggerpricev2.activityDate\r\n      tobesentdata['internalContractItemRefNo'] = req.body.createtriggerv2composite.createtriggerpricev2.internalContractItemRefNo\r\n      tobesentdata['internalContractRefNo'] = req.body.createtriggerv2composite.createtriggerpricev2.internalContractRefNo\r\n      tobesentdata['quantityunitconversion'] = req.body.createtriggerv2composite.createtriggerpricev2.quantityunitconversion\r\n      tobesentdata['executionDisplayName'] = req.body.createtriggerv2composite.createtriggerpricev2.executionDisplayName\r\n      tobesentdata['price'] = req.body.createtriggerv2composite.createtriggerpricev2.avgPrice.split(\" \")[0];\r\n      tobesentdata['priceU'] = req.body.createtriggerv2composite.createtriggerpricev2.priceUnitIdDisplayName;\r\n      tobesentdata['priceUnitIdDisplayName'] = req.body.createtriggerv2composite.createtriggerpricev2.priceUnitFormula\r\n      tobesentdata['quantity'] = Number(req.body.createtriggerv2composite.createtriggerpricev2.quantity)*Number(req.body.createtriggerv2composite.createtriggerpricev2.quantityunitconversion)\r\n      tobesentdata['calculatedPrice'] = req.body.createtriggerv2composite.createtriggerpricev2.avgPrice.split(\" \")[0] *  tobesentdata['quantity'];\r\n      tobesentdata['triggerDate'] = req.body.createtriggerv2composite.createtriggerpricev2.activityDate\r\n      tobesentdata['remarks'] = req.body.createtriggerv2composite.createtriggerpricev2.remarks\r\n      tobesentdata['gmrQty'] = req.body.createtriggerv2composite.createtriggerpricev2.gmrQty\r\n      tobesentdata['gmrQtyAvailable'] = req.body.createtriggerv2composite.createtriggerpricev2.gmrQtyAvailable\r\n      tobesentdata['gmrRefNo'] = req.body.createtriggerv2composite.createtriggerpricev2.gmrRefNo\r\n      tobesentdata['gmrRefNoDisplayName'] = req.body.createtriggerv2composite.createtriggerpricev2.gmrRefNoDisplayName\r\n      tobesentdata['gmrQtyFixed'] = req.body.createtriggerv2composite.createtriggerpricev2.gmrQtyFixed\r\n      tobesentdata['gmrQtyUnit'] = req.body.createtriggerv2composite.createtriggerpricev2.gmrQtyUnit\r\n      tobesentdata['contractRefNo'] = req.body.createtriggerv2composite.createtriggerpricev2.contractRefNo\r\n      tobesentdata['itemQtyUnit'] = req.body.createtriggerv2composite.createtriggerpricev2.itemQtyUnit\r\n      tobesentdata['itemQty'] = Number(req.body.createtriggerv2composite.createtriggerpricev2.fixedQuantity) +  Number(req.body.createtriggerv2composite.createtriggerpricev2.unfixedQuantity)\r\n      tobesentdata['itemUnfixedQty'] = tobesentdata['itemQty'] -   tobesentdata['quantity'] - Number(req.body.createtriggerv2composite.createtriggerpricev2.fixedQuantity)\r\n      tobesentdata['itemFixedQty'] = Number(req.body.createtriggerv2composite.createtriggerpricev2.quantity)\r\n      tobesentdata['itemFixedQtyAvailable'] = Number(req.body.createtriggerv2composite.createtriggerpricev2.quantity)\r\n      tobesentdata['differential'] = (req.body.createtriggerv2composite.createtriggerpricev2.differential=='' || req.body.createtriggerv2composite.createtriggerpricev2.differential==null) ? 0 + ' '+req.body.createtriggerv2composite.createtriggerpricev2.priceUnitFormula  : req.body.createtriggerv2composite.createtriggerpricev2.differential+ ' '+req.body.createtriggerv2composite.createtriggerpricev2.priceUnitFormula\r\n      tobesentdata['fixationStatus'] = 'Active'\r\n      tobesentdata['basePrice'] = gettableAvg() + ' ' + req.body.createtriggerv2composite.createtriggerpricev2.priceUnitIdDisplayName\r\n      tobesentdata['tableFixationDate'] = moment.utc(tabledata[0]['fixationDate']).utcOffset('+0530').format('YYYY-MM-DD');\r\n      tobesentdata['tableFxrate'] = tabledata[0]['fxrate'];\r\n    }\r\n    if (Number(req.body.createtriggerv2composite.createtriggerpricev2.avgPrice) <= 0) {\r\n      res.status(500).send('Avg Price cannot be zero or less')\r\n      return\r\n    }\r\n\tif (Number(tobesentdata['quantity']) <= 0) {\r\n        res.status(500).send('Quantity cannot be zero or less');\r\n        return;\r\n      }\r\n    if (Number(tobesentdata['gmrQtyAvailable']) * Number(req.body.createtriggerv2composite.createtriggerpricev2.quantityunitconversion) < Number(tobesentdata['quantity'])) {\r\n        res.status(500).send('Quantity should be less than GMR available Quantity');\r\n        return;\r\n      }\r\n    if (Number(tobesentdata['itemUnfixedQty']) < 0) {\r\n      res.status(500).send('Quantity should be less than Unfixed Quantity')\r\n      return\r\n    }\r\n    if (!tobesentdata['price']|| tobesentdata['price'] == '') {\r\n      res.status(500).send('Please fill Average Price')\r\n      return\r\n    }\r\n    var defaultdata = {\r\n      method: 'POST',\r\n      url: req.body.propertyList.eka_connect_host + '\/workflow',\r\n      body: {\r\n        appId: req.body.appId,\r\n        workflowTaskName: 'triggerdata_save',\r\n        task: 'triggerdata_save',\r\n        output: {\r\n          ['triggerdata_save']: tobesentdata\r\n        }\r\n      },\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function get_defaultData() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(defaultdata, function(error, response, body) {\r\n            if (response.statusCode === 200) {\r\n              resolve(body);\r\n            } else {\r\n              if (error || body.error) reject(body);\r\n              else reject(body);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    var pricingurl = {\r\n      method: 'POST',\r\n      url: req.body.propertyList.eka_pricing_host + '\/api\/pricing\/formula?mode=Detailed',\r\n      body: getbodyOfPricing(contract, tobesentdata['internalContractItemRefNo']),\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    }\r\n    function pricing_call() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(pricingurl, function(error, response, body) {\r\n            if (response.statusCode === 200) {\r\n              resolve(body);\r\n            } else {\r\n              if (error || body.error) reject(body);\r\n              else reject(body);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    var posturl = {\r\n      method: 'POST',\r\n      url: req.body.propertyList.platform_url + '\/api\/gmr\/postcog?',\r\n      body: {},\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    }\r\n    function postcog() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(posturl, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var deleteurl = {\r\n      method: 'DELETE',\r\n      url: req.body.propertyList.eka_connect_host + '\/data\/84d7b167-1d9f-406d-b974-bea406a25f9a\/6158fca6-dd9b-4539-a777-67fcf5a0fe67\/',\r\n      body: {\r\n      },\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    }\r\n    function del_fixation() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(deleteurl, function(err, response, body) {\r\n          if (err || (body && body.error)) reject(body);\r\n          else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    }\r\n    \r\n    let datatobetabledata = []\r\n    let hashmap = {}\r\n    for(let j=0;j<tabledata.length;j++){\r\n        if(tabledata[j]['fixationDate'] && hashmap.hasOwnProperty(tabledata[j]['fixationDate'])){\r\n        res.status(500).send('Pricing Date Should not be same')\r\n      return\r\n        }\r\n      else if(tabledata[j]['fixationDate']){\r\n        hashmap[tabledata[j]['fixationDate']] = \"true\"\r\n      }\r\n      }\r\n    get_quantity().then(function (qtyunitlist) {\r\n      let f = tobesentdata['priceU'].split('\/')[1]\r\n      let t = tobesentdata['itemQtyUnit']\r\n      for(var i=0;i<qtyunitlist.physicalproductquantitylist.length;i++){\r\n        if(qtyunitlist.physicalproductquantitylist[i].value ===tobesentdata['priceU'].split('\/')[1])\r\n            f = qtyunitlist.physicalproductquantitylist[i].key\r\n        if(qtyunitlist.physicalproductquantitylist[i].value ===tobesentdata['itemQtyUnit'])\r\n          t = qtyunitlist.physicalproductquantitylist[i].key\r\n      }\r\n      qtyunitlist_body.body[0].dependsOn.push(t)\r\n      qtyunitlist_body.body[0].dependsOn.push(f)\r\n      qtyunitlist_body.body[0].serviceKey = 'quantityConversionFactor'\r\n        get_quantity().then(function (conversionFactor1) {\r\n        tobesentdata['densityDetailsContract'] = getDensity(qtyunitlist.physicalproductquantitylist,req.body.createtriggerv2composite.createtriggerpricev2.densityDetailsContract)    \r\n        tobesentdata['calculatedPrice'] = Number((Number( tobesentdata['calculatedPrice'])*conversionFactor1.quantityConversionFactor[0].value).toFixed(req.body.createtriggerv2composite.createtriggerpricev2.decimalPrecision))\r\n      get_defaultData().then(function (conversionFactor) {\r\n      defaultdata.body={ \r\n        appId: req.body.appId,\r\n        workflowTaskName: 'triggerdata_table_save',\r\n        task: 'triggerdata_table_save',\r\n        output: {\r\n          ['triggerdata_table_save']: datatobetabledata\r\n        }\r\n      }\r\n      for(let j=0;j<tabledata.length;j++){\r\n        if(tabledata[j]['fixationDate'] && tabledata[j]['price'] && tabledata[j]['fxrate']){\r\n        tabledata[j]['fixationRefNo'] = conversionFactor.data.fixationRefNo\r\n        tabledata[j]['fixationDate'] = moment.utc(tabledata[j]['fixationDate']).utcOffset('+0530').format('YYYY-MM-DD');\r\n        datatobetabledata.push(tabledata[j])\r\n        }\r\n      }\r\n      if(conversionFactor.data.execution == 'Post- exection'){\r\n        posturl.url = posturl.url + 'internalGMRRefNo=' + conversionFactor.data.gmrRefNo +'&itemRefNo=' + conversionFactor.data.internalContractItemRefNo \r\n        postcog().then(function (respose){\r\n        if(respose.IsPosted ==true){\r\n        get_defaultData().then(function (c) {\r\n          res.status(200).send(conversionFactor)\r\n        }).catch(err => {\r\n          console.log(err);\r\n          res.status(500).send('Failed to create')\r\n        })\r\n      }\r\n      else{\r\n        deleteurl.url=deleteurl.url + conversionFactor.data._id\r\n        del_fixation().then(function (su){\r\n          res.status(500).send('COG Update Failed')\r\n        }).catch(err => {\r\n          console.log(err);\r\n          res.status(500).send('Failed to Delete data')\r\n        })\r\n      }\r\n      })\r\n      }\r\n      else{\r\n      pricing_call().then(function(pricing_response){  \r\n      if((pricing_response.code && pricing_response.code == 200) || (!(pricing_response.code)&& pricing_response.hasOwnProperty('contract'))) {\r\n      get_defaultData().then(function (c) {\r\n        res.status(200).send(conversionFactor)\r\n      }).catch(err => {\r\n        console.log(err);\r\n        res.status(500).send('Failed to create')\r\n      })\r\n    }\r\n    else {\r\n      deleteurl.url=deleteurl.url + conversionFactor.data._id\r\n      del_fixation().then(function (){\r\n        if(pricing_response.hasOwnProperty('description'))res.status(500).send('Due To Some technical Error, Exposures are not updated, Hence Fixation are not Saved')\r\n        else res.status(500).send('Due To Some technical Error, Exposures are not updated, Hence Fixation are not Saved')\r\n      }).catch(err => {\r\n        console.log(err);\r\n        res.status(500).send('Failed to Delete data')\r\n      })\r\n    }\r\n    }).catch(err => {\r\n      console.log(err);\r\n      res.status(500).send(err)\r\n    })\r\n  \r\n  \r\n    }\r\n      \r\n    }).catch(err => {\r\n      console.log(err);\r\n      res.status(500).send('Failed to create') \r\n    })\r\n  })\r\n  })\r\n  }).catch(err => {\r\n    console.log(err);\r\n    res.status(500).send('Failed to Get Contract') \r\n  })\r\n  ",
    "sys__UUID" : "743e61a3-7d5a-448a-ab39-3f6cbe66f7d2",
    "sys__createdOn" : ISODate("2019-06-24T13:35:31.281Z"),
    "sys__createdBy" : "avinash@ekaplus.com"
}