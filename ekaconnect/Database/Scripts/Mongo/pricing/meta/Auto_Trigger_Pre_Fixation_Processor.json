{
    "_id" : "Auto_Trigger_Pre_Fixation_Processor",
    "name" : "Auto_Trigger_Pre_Fixation_Processor",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "84d7b167-1d9f-406d-b974-bea406a25f9a",
    "snippet" : "\r\n  var moment = require('moment');\r\n  console.log(JSON.stringify(req.body.bulkPayLoadData))\r\n  async function CallForEachItem(internalContractItemRefNo,internalContractRefNo,quantity,pricingDate,fxrate,basePrice,priceUnit,remarks,delivery_period,exchange_instrument,contractItemPriceUnit){\r\n    return new Promise(function  (resolve, reject) {\r\n  var qtyunitlist_body = {\r\n    method: 'POST',\r\n    body:[\r\n      {\r\n          \"dependsOn\": [\r\n          ],\r\n          \"serviceKey\": \"physicalproductquantitylist\"\r\n      }\r\n  ],\r\n    url: req.body.propertyList.eka_mdm_host + '\/mdm\/84d7b167-1d9f-406d-b974-bea406a25f9a\/data',\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n  };\r\n  function get_quantity() {\r\n    return new Promise(function (resolve, reject) {\r\n      request(qtyunitlist_body, function (err, response, body) {\r\n        if (err || body.error) reject(body);\r\n        else {\r\n          resolve(body);\r\n        }\r\n      });\r\n    });\r\n  } \r\n  var contractbody = {\r\n    method: 'POST',\r\n    body:{\r\n      appId: \"5d907cd2-7785-4d34-bcda-aa84b2158415\",\r\n      workFlowTask: \"contract_list\"\r\n    },\r\n    url: req.body.propertyList.eka_connect_host + '\/workflow\/data?internalContractRefNo=' + internalContractRefNo,\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n  };\r\n  function get_contract() {\r\n    return new Promise(function (resolve, reject) {\r\n      request(contractbody, function (err, response, body) {\r\n        if (err || body.error) reject(body);\r\n        else {\r\n          resolve(body);\r\n        }\r\n      });\r\n    });\r\n  } \r\n  var get_previous_fixaton_body = {\r\n    method: 'POST',\r\n    body:{\r\n      appId: \"84d7b167-1d9f-406d-b974-bea406a25f9a\",\r\n      workFlowTask: \"trigger_data_list\"\r\n    },\r\n    url: req.body.propertyList.eka_connect_host + '\/workflow\/data?internalContractItemRefNo=' + internalContractItemRefNo,\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n  };\r\n  function get_previous_fixaton() {\r\n    return new Promise(function (resolve, reject) {\r\n      request(get_previous_fixaton_body, function (err, response, body) {\r\n        if (err || body.error) reject(body);\r\n        else {\r\n          resolve(body);\r\n        }\r\n      });\r\n    });\r\n  } \r\n  function getpreviousFixed(previous_fixation){\r\n    let fixedQty = 0\r\n    if(previous_fixation.hasOwnProperty('data'))\r\n    fixedQty = previous_fixation.data.reduce((acc,val)=>{\r\n      return acc+=Number(val.quantity)\r\n    },0)\r\n    return fixedQty\r\n  }\r\n  function getbodyOfPricing(contract_data,internalContractItemRefNo){\r\n    let itemDetails = contract_data.data[0].itemDetails.find(item=> item.internalItemRefNo == internalContractItemRefNo)\r\n    let contract = {\r\n      \"contract\": {\r\n        \"refNo\": contract_data.data[0].internalContractRefNo,\r\n        \"itemDetails\":[itemDetails],\r\n        \"noOfItems\": 0,\r\n        \"asOfDate\": moment().format('YYYY-MM-DD')+\"T00:00:00.000+0000\"\r\n      }\r\n     }\r\n   return contract\r\n  }\r\n  get_previous_fixaton().then((previous_fixation)=>{\r\n  get_contract().then((contract)=>{\r\n  let item = contract.data[0].itemDetails.find(i=>i.internalItemRefNo == internalContractItemRefNo)\r\n  item = {\r\n    ...item,\r\n    ...JSON.parse(item.itemDisplayValue),\r\n    ...JSON.parse( contract.data[0].generalDetailsDisplayValue)\r\n  } \r\n  qtyunitlist_body.body[0].dependsOn.push(item.productId)\r\n  let tobesentdata ={}\r\n    tobesentdata['execution'] = 'Pre-execution'\r\n    tobesentdata['avgPrice'] =  Number(basePrice)*Number(fxrate)   \/\/ contract data\r\n    tobesentdata['fixationMethod'] = 'Manual'\r\n    tobesentdata['activityDate'] = new Date()\r\n    tobesentdata['executionDisplayName'] = 'Pre Execution'\r\n    tobesentdata['internalContractItemRefNo'] = internalContractItemRefNo\r\n    tobesentdata['internalContractRefNo'] =internalContractRefNo\r\n    tobesentdata['remarks'] = remarks\r\n    tobesentdata['price'] = basePrice\r\n    tobesentdata['calculatedPrice'] = tobesentdata['price'] * (+quantity)\r\n    tobesentdata['priceU'] = priceUnit\r\n    tobesentdata['priceUnitIdDisplayName'] =  contractItemPriceUnit  \/\/ contract\r\n    tobesentdata['quantity'] = quantity\r\n    tobesentdata['exchange_instrument'] = exchange_instrument\r\n    tobesentdata['delivery_period'] = delivery_period\r\n    tobesentdata['differential'] = 0 + ' ' + contractItemPriceUnit \/\/ contract\r\n    tobesentdata['contractRefNo'] =contract.data[0].contractRefNo  \/\/ contract data\r\n    tobesentdata['itemQtyUnit'] = item.itemQtyUnitIdDisplayName  \/\/ contract data\r\n    tobesentdata['itemQty'] =  (+item.itemQty) + (item.toleranceType=='Absolute'?(+item.toleranceMax):((+item.toleranceMax)*(+item.itemQty)\/100))  \/\/ contract data\r\n    tobesentdata['triggerDate'] = new Date()\r\n    tobesentdata['itemUnfixedQty'] = tobesentdata['itemQty'] -  (+quantity) - getpreviousFixed(previous_fixation)\r\n    tobesentdata['itemFixedQty'] =(+quantity)\r\n    tobesentdata['fixationStatus'] = 'Active'\r\n    tobesentdata['basePrice'] = basePrice + ' ' + priceUnit\r\n    tobesentdata['itemFixedQtyAvailable'] =  (+quantity)\r\n\r\n  if (Number(tobesentdata['itemUnfixedQty']) < 0) {\r\n    return resolve({\r\n      'statusCode' : 500,\r\n      'message' : 'Quantity should be less than Unfixed Quantity'\r\n    })\r\n  }\r\n  if (!tobesentdata['price']|| tobesentdata['price'] == '') {\r\n    return resolve({\r\n      'statusCode' : 500,\r\n      'message' : 'Quantity should be less than Unfixed Quantity'\r\n    })\r\n      \r\n  }\r\n  var defaultdata = {\r\n    method: 'POST',\r\n    url: req.body.propertyList.eka_connect_host + '\/workflow',\r\n    body: {\r\n      appId: req.body.appId,\r\n      workflowTaskName: 'triggerdata_save',\r\n      task: 'triggerdata_save',\r\n      output: {\r\n        ['triggerdata_save']: tobesentdata\r\n      }\r\n    },\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n  };\r\n  function get_defaultData() {\r\n    return new Promise(function(resolve, reject) {\r\n      request(defaultdata, function(err, response, body) {\r\n        if (err || body.error) reject(body);\r\n        else {\r\n          resolve(body);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  var pricingurl = {\r\n    method: 'POST',\r\n    url: req.body.propertyList.eka_pricing_host + '\/api\/pricing\/formula?mode=Detailed',\r\n    body: getbodyOfPricing(contract, tobesentdata['internalContractItemRefNo']),\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n  }\r\n  function pricing_call() {\r\n    return new Promise(function(resolve, reject) {\r\n      request(pricingurl, function(err, response, body) {\r\n        if (err || body.error) reject(body);\r\n        else {\r\n          resolve(body);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  get_quantity().then(function (qtyunitlist) {\r\n    let f = tobesentdata['priceU'].split('\/')[1]\r\n    let t = tobesentdata['itemQtyUnit']\r\n    let avgqtyunit = contractItemPriceUnit.split('\/')[1]\r\n    for(var i=0;i<qtyunitlist.physicalproductquantitylist.length;i++){\r\n      if(qtyunitlist.physicalproductquantitylist[i].value ===tobesentdata['priceU'].split('\/')[1])\r\n          f = qtyunitlist.physicalproductquantitylist[i].key\r\n      if(qtyunitlist.physicalproductquantitylist[i].value ===tobesentdata['itemQtyUnit'])\r\n        t = qtyunitlist.physicalproductquantitylist[i].key\r\n      if(qtyunitlist.physicalproductquantitylist[i].value ===contractItemPriceUnit.split('\/')[1])\r\n      avgqtyunit = qtyunitlist.physicalproductquantitylist[i].key\r\n    }\r\n    qtyunitlist_body.body[0].dependsOn.push(f)\r\n    qtyunitlist_body.body[0].dependsOn.push(t)\r\n    qtyunitlist_body.body[0].serviceKey = 'quantityConversionFactor'\r\n    get_quantity().then(function (conversionFactor1) {\r\n    tobesentdata['calculatedPrice'] = Number((Number( tobesentdata['calculatedPrice'])\/conversionFactor1.quantityConversionFactor[0].value).toFixed(5))\r\n    qtyunitlist_body.body[0].dependsOn[2] = avgqtyunit\r\n    get_quantity().then(function (basetocontract) {\r\n    tobesentdata['avgPrice']  =  Number((Number( tobesentdata['avgPrice'])\/basetocontract.quantityConversionFactor[0].value).toFixed(5))\r\n    get_defaultData().then(function (fixation_data) {\r\n      let datatobetabledata = []\r\n       datatobetabledata.push({\r\n         'fixationDate' : pricingDate,\r\n         'price' : basePrice,\r\n         'fxrate' : fxrate,\r\n         'fixationRefNo' : fixation_data.data.fixationRefNo\r\n       })\r\n    defaultdata.body={ \r\n      appId: req.body.appId,\r\n      workflowTaskName: 'triggerdata_table_save',\r\n      task: 'triggerdata_table_save',\r\n      output: {\r\n        ['triggerdata_table_save']: datatobetabledata\r\n      }\r\n    }\r\n    var deleteurl = {\r\n      method: 'DELETE',\r\n      url: req.body.propertyList.eka_connect_host + '\/data\/84d7b167-1d9f-406d-b974-bea406a25f9a\/6158fca6-dd9b-4539-a777-67fcf5a0fe67\/',\r\n      body: {\r\n      },\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    }\r\n    function del_fixation() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(deleteurl, function(err, response, body) {\r\n          if (err || (body && body.error)) reject(body);\r\n          else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    }\r\n    pricing_call().then(function(pricing_response){  \r\n      if((pricing_response.code && pricing_response.code == 200) || (!(pricing_response.code)&& pricing_response.hasOwnProperty('contract'))) {\r\n      get_defaultData().then(function (c) {\r\n        return resolve({\r\n          'statusCode' : 200,\r\n          'message' : fixation_data\r\n        })\r\n      }).catch(err => {\r\n        console.log(err);\r\n        return reject ({\r\n          'statusCode' : 500,\r\n          'message' : err\r\n        })\r\n      })\r\n    }\r\n    else {\r\n      deleteurl.url=deleteurl.url + conversionFactor.data._id\r\n      del_fixation().then(function (){\r\n        if(pricing_response.hasOwnProperty('description'))    return resolve({\r\n          'statusCode' : 500,\r\n          'message' : 'Due To Some technical Error, Exposures are not updated, Hence Fixation are not Saved'\r\n        } )\r\n        else   return resolve({\r\n          'statusCode' : 500,\r\n          'message' : 'Due To Some technical Error, Exposures are not updated, Hence Fixation are not Saved'\r\n        })\r\n      }).catch(err => {\r\n        console.log(err);\r\n        return reject({\r\n          'statusCode' : 500,\r\n          'message' : 'Failed to Delete data'\r\n        })\r\n      })\r\n    }\r\n    }).catch(err => {\r\n      console.log(err);\r\n      return reject({\r\n        'statusCode' : 500,\r\n        'message' : err\r\n      })\r\n    })\r\n  }).catch(err => {\r\n    console.log(err);\r\n    return reject({\r\n      'statusCode' : 500,\r\n      'message' : 'Failed to create'\r\n    })\r\n  })\r\n})\r\n})\r\n})\r\n}).catch(err=>{\r\n  return reject({\r\n    'statusCode' : 500,\r\n    'message' : err\r\n  })\r\n})\r\n}).catch(err=>{\r\n  return reject({\r\n    'statusCode' : 500,\r\n    'message' : err\r\n  })\r\n})\r\n})\r\n  }\r\n  async function main(){\r\n    let r = []\r\n    for(let i =0; i<req.body.bulkPayLoadData.length;i++){\r\n      let item = req.body.bulkPayLoadData[i]\r\n      let resu\r\n      resu = await CallForEachItem(item.internalContractItemRefNo,item.internalContractRefNo,item.quantity,item.pricingDate,item.fxrate,item.basePrice,item.priceUnit,item.remarks,item.delivery_period,item.exchange_instrument,item.contractItemPriceUnit)\r\n      r.push(resu)\r\n    }\r\n   return r\r\n  }\r\n  main().then(mdmdata=>{\r\n    res.status(200).send(mdmdata);\r\n  })\r\n\/\/   Promise.all((req.body.bulkPayLoadData).map((item)=>{\r\n\/\/     return CallForEachItem(item.internalContractItemRefNo,item.internalContractRefNo,item.quantity,item.pricingDate,item.fxrate,item.basePrice,item.priceUnit,item.remarks,item.delivery_period,item.exchange_instrument,item.contractItemPriceUnit)\r\n\/\/   })).then((resp)=>{\r\n\/\/     console.log(resp)\r\n\/\/     res.status(200).send(resp)\r\n\/\/   }).catch(err=>{\r\n\/\/     console.log(err)\r\n\/\/     res.status(500).send(err)\r\n\/\/   })\r\n\r\n  ",
    "sys__UUID" : "0d09ef03-8e55-4f80-bbee-347126eb10fd",
    "sys__createdBy" : "avinash@ekaplus.com"
}