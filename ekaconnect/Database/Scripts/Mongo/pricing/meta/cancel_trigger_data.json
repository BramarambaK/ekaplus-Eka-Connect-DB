{
    "_id" : "cancel_trigger_data",
    "name" : "cancel_trigger_data",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "84d7b167-1d9f-406d-b974-bea406a25f9a",
    "snippet" : "\r\n    function get_defaultData(body) {\r\n      return new Promise(function (resolve, reject) {\r\n        request(body, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body); \/\/Success\r\n          } else {\r\n            reject(body); \/\/Failure\r\n          }\r\n        });\r\n      });\r\n    }\r\n    async function get_triggerData() {\r\n      var defaultdata1 = {\r\n        method: \"POST\",\r\n        url: req.body.propertyList.eka_connect_host + \"\/workflow\/data\",\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n        },\r\n        json: true,\r\n        body: {\r\n          appId: \"84d7b167-1d9f-406d-b974-bea406a25f9a\",\r\n          workFlowTask: \"trigger_data_list\",\r\n          filterData: {\r\n            filter: [\r\n              {\r\n                fieldName: \"internalContractItemRefNo\",\r\n                value: [req.body.queryParams.internalContractItemRefNo],\r\n                operator: \"in\",\r\n              },\r\n              {\r\n                fieldName: \"execution\",\r\n                value: [\"Pre-execution\"],\r\n                operator: \"in\",\r\n              },\r\n              {\r\n                fieldName: \"fixationStatus\",\r\n                value: [\"Active\", \"ACTIVE\"],\r\n                operator: \"in\",\r\n              },\r\n            ],\r\n          },\r\n        },\r\n      };\r\n      return await get_defaultData(defaultdata1);\r\n    }\r\n    function getbodyOfPricing(contract_data, internalContractItemRefNo) {\r\n      let itemDetails = contract_data.itemDetails.find(\r\n        (item) => item.internalItemRefNo == internalContractItemRefNo\r\n      );\r\n      if (itemDetails.hasOwnProperty('pricingStrategy')&& itemDetails.pricingStrategy != \"pricingStrategy-001\"){}\r\n        \/\/ itemDetails.pricing.pricingFormulaId =\r\n        \/\/   req.body.createtriggerv2composite.createtriggerpricev2.listingformula._id;\r\n      let contract = {\r\n        contract: {\r\n          refNo: contract_data.internalContractRefNo,\r\n          itemDetails: [itemDetails],\r\n          noOfItems: 0,\r\n          asOfDate: moment().format(\"YYYY-MM-DD\") + \"T00:00:00.000+0000\",\r\n        },\r\n      };\r\n    \r\n      return contract;\r\n    }\r\n    var pricingurl = {\r\n      method: \"POST\",\r\n      url:\r\n        req.body.propertyList.eka_pricing_host +\r\n        \"\/api\/pricing\/formula?mode=Detailed\",\r\n      body: getbodyOfPricing(req.body.contract, req.body.internalContractItemRefNo),\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n      },\r\n      json: true,\r\n    };\r\n    async function pricing_call() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(pricingurl, function (error, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body); \/\/Success\r\n          } else {\r\n            reject(body); \/\/Failure\r\n          }\r\n        });\r\n      });\r\n    }\r\n    async function update(tobesentdata) {\r\n      var defaultdata1 = {\r\n        method: \"POST\",\r\n        url: req.body.propertyList.eka_connect_host + \"\/workflow\",\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n        },\r\n        json: true,\r\n        body: {\r\n          appId: req.body.appId,\r\n          workflowTaskName: \"triggerdata_save\",\r\n          task: \"triggerdata_save\",\r\n          output: {\r\n            [\"triggerdata_save\"]: tobesentdata,\r\n          },\r\n        },\r\n      };\r\n      return await get_defaultData(defaultdata1);\r\n    }\r\n    async function main() {\r\n      let triggerData = await get_triggerData();\r\n      let message = {\r\n        status: \"\",\r\n        data: \"\",\r\n      };\r\n      if (triggerData.data.length == 0) {\r\n        message.status = \"500\";\r\n        message.data = \"Price Fixed Quantity is not available for Cancellation\";\r\n      } else {\r\n        triggerData.data.sort(function (a, b) {\r\n          return new Date(b.sys__createdOn) - new Date(a.sys__createdOn);\r\n        });\r\n        let updatedresult = triggerData.data[0];\r\n        updatedresult[\"cancelledFixationQty\"] = Number(\r\n          triggerData.data[0].itemFixedQtyAvailable\r\n        );\r\n        updatedresult[\"itemFixedQty\"] =\r\n          Number(triggerData.data[0].itemFixedQty) -\r\n          Number(triggerData.data[0].itemFixedQtyAvailable);\r\n        updatedresult[\"itemUnfixedQty\"] =\r\n          Number(triggerData.data[0].itemUnfixedQty) +\r\n          Number(triggerData.data[0].itemFixedQtyAvailable);\r\n        updatedresult[\"quantity\"] =\r\n          Number(triggerData.data[0].quantity) -\r\n          Number(triggerData.data[0].itemFixedQtyAvailable);\r\n        updatedresult[\"fixationStatus\"] =\r\n          updatedresult[\"quantity\"] == 0 ? \"Cancelled\" : \"FULLY FIXED\";\r\n        updatedresult[\"itemFixedQtyAvailable\"] = 0;\r\n        updatedresult[\"calculatedPrice\"] = Number(\r\n          Number(updatedresult[\"quantity\"]) * Number(triggerData.data[0].avgPrice)\r\n        );\r\n        let updated = await update(updatedresult);\r\n        try {\r\n          let pricingCall = await pricing_call();\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n    \r\n        message.status = \"200\";\r\n        message.data = updated;\r\n      }\r\n      return message;\r\n    }\r\n    main().then((message) => {\r\n      if (message.status == \"200\") res.status(200).send(message.data);\r\n      else res.status(200).send({});\r\n    });\r\n    \r\n    ",
    "sys__UUID" : "640ffc7d-d39b-4f3d-a513-fe8116d7bb80",
    "sys__createdOn" : ISODate("2019-06-24T13:35:31.281Z"),
    "sys__createdBy" : "avinash@ekaplus.com"
}