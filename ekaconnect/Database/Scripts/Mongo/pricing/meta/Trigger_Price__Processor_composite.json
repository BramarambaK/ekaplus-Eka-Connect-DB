{
  "_id": "triggerpriceview_processor",
  "name": "triggerpriceviewMain",
  "refType": "app",
  "refTypeId": "84d7b167-1d9f-406d-b974-bea406a25f9a",
  "snippet": "async function promiseHandler(promise) {\r\n      return promise.then(data => [null, data]).catch(err => [err]);\r\n    }\r\n    var previousGmrData = {};\r\n    var previousFixation = {};\r\n    function getData(method, url, body) {\r\n      const requestObject = {\r\n        method,\r\n        url,\r\n        body,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true\r\n      };\r\n      return new Promise(function(resolve, reject) {\r\n        request(requestObject, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else resolve(body);\r\n        });\r\n      });\r\n    }\r\n\r\n    let data = {};\r\n    const moment = require('moment');\r\n    const { platform_url, eka_connect_host, eka_mdm_host } = req.body.propertyList;\r\n    const { internalContractItemRefNo, internalContractRefNo } = req.body.queryParams;\r\n\r\n    function getGMRDetails() {\r\n      const url = `${platform_url}/api/contract/gmr/${internalContractItemRefNo}`;\r\n      return getData('GET', url);\r\n    }\r\n\r\n    function getPreviousFixation() {\r\n      const url = `${eka_connect_host}/workflow/data`;\r\n      const body = {\r\n        appId: '84d7b167-1d9f-406d-b974-bea406a25f9a',\r\n        workFlowTask: 'trigger_data_list',\r\n        filterData: {\r\n          filter: [\r\n            {\r\n              fieldName: 'internalContractItemRefNo',\r\n              value: [internalContractItemRefNo],\r\n              operator: 'in'\r\n            }\r\n          ]\r\n        }\r\n      };\r\n      return getData('POST', url, body);\r\n    }\r\n\r\n    function getTieredPrice() {\r\n      const url = `${eka_connect_host}/workflow/data?internalContractItemRefNo=${internalContractItemRefNo}`;\r\n      const body = {\r\n        appId: '5d907cd2-7785-4d34-bcda-aa84b2158415',\r\n        workFlowTask: 'getTieredList'\r\n      };\r\n      return getData('POST', url, body);\r\n    }\r\n\r\n    function getContractDetails() {\r\n      const url = `${eka_connect_host}/workflow/data?internalContractRefNo=${internalContractRefNo}`;\r\n      const body = {\r\n        appId: '5d907cd2-7785-4d34-bcda-aa84b2158415',\r\n        workFlowTask: 'contract_list'\r\n      };\r\n      return getData('POST', url, body);\r\n    }\r\n\r\n    function mdmCall(dependsOn, serviceKey) {\r\n      const url = `${eka_mdm_host}/mdm/84d7b167-1d9f-406d-b974-bea406a25f9a/data`;\r\n      const body = [\r\n        {\r\n          dependsOn,\r\n          serviceKey\r\n        }\r\n      ];\r\n      return getData('POST', url, body);\r\n    }\r\n\r\n    function getFormula(urlParam) {\r\n      const url = `${eka_connect_host}/workflow/data?_id=${urlParam}`;\r\n      const body = {\r\n        appId: '84d7b167-1d9f-406d-b974-bea406a25f9a',\r\n        workFlowTask: 'formula_list'\r\n      };\r\n      return getData('POST', url, body);\r\n    }\r\n\r\n    async function addQuantityFromPreviousGMR(previousGmr, itemDetails, urlParam) {\r\n      let mapOfUniqueConversion = {};\r\n      let previousgmrqty = 0.0;\r\n      if (previousGmr.hasOwnProperty('items')) {\r\n        previousGmr.items = previousGmr.items.map(item => {\r\n          if (item.hasOwnProperty('currenQty')) item['qty'] = item['currenQty'];\r\n          return item;\r\n        });\r\n        previousGmrData = previousGmr.items;\r\n        const uniqueCombination = previousGmr.items\r\n          .map(gmr => gmr.qtyUnitId)\r\n          .filter((value, index, self) => self.indexOf(value) === index);\r\n        let results;\r\n        var start = new Date();\r\n        console.log('uniqueCombinations', uniqueCombination.length);\r\n        try {\r\n          results = await Promise.all(\r\n            uniqueCombination.map(async gmrQtyUnit => {\r\n              const dependsOn = [itemDetails.productId, gmrQtyUnit, itemDetails.itemQtyUnitId];\r\n              return mdmCall(dependsOn, 'quantityConversionFactor');\r\n            })\r\n          );\r\n        } catch (err) {\r\n          res.status(500).send('Mdm failed');\r\n        }\r\n        var end = new Date() - start;\r\n        console.log('mdm', end);\r\n\r\n        results.forEach(item => {\r\n          if (item.quantityConversionFactor)\r\n            mapOfUniqueConversion = {\r\n              ...mapOfUniqueConversion,\r\n              [item.quantityConversionFactor[0].key]: item.quantityConversionFactor[0].value\r\n            };\r\n        });\r\n\r\n        previousGmr.items.forEach(\r\n          elem => (previousgmrqty = previousgmrqty + Number(elem.qty) * mapOfUniqueConversion[elem.qtyUnitId])\r\n        );\r\n      }\r\n\r\n      const dependsOn = [itemDetails['productId'], itemDetails['payInCurId']];\r\n      var start1 = new Date();\r\n      const [[err, priceUnitMDM], [err1, result]] = await Promise.all([\r\n        promiseHandler(mdmCall(dependsOn, 'productPriceUnit')),\r\n        promiseHandler(getFormula(urlParam))\r\n      ]);\r\n      if (err) return res.status(500).send('Failed to get PriceUnit');\r\n      if (err1) return res.status(500).send('Unable to get Formula Details');\r\n      var end1 = new Date() - start1;\r\n      console.log('Second parallel Call', end1);\r\n      let contractCurrencyPriceId = result.data[0].contractCurrencyPrice;\r\n      let contractCurrencyPriceValue = priceUnitMDM.productPriceUnit.find(item => item.key === contractCurrencyPriceId);\r\n      if (!contractCurrencyPriceValue) return res.status(500).send('Contract currency price not found');\r\n      let contractCurrencyPrice = contractCurrencyPriceValue.value;\r\n\r\n      let [currencyUnit, qtyUnit] = contractCurrencyPrice.split('/');\r\n\r\n      return {\r\n        productPriceUnit: priceUnitMDM.productPriceUnit,\r\n        formula: result.data[0],\r\n        contractCurrencyPrice,\r\n        currencyUnit,\r\n        qtyUnit,\r\n        previousgmrqty\r\n      };\r\n    }\r\n\r\n    function getItemDetails(contractData, tieredData) {\r\n      let urlParam;\r\n      let itemDetails;\r\n      for (let i = 0; i < contractData.length; i++) {\r\n        let {\r\n          internalItemRefNo,\r\n          pricing: { pricingStrategy, pricingFormulaId }\r\n        } = contractData[i];\r\n\r\n        if (internalItemRefNo === internalContractItemRefNo) {\r\n          urlParam = pricingFormulaId;\r\n          if (pricingStrategy === 'pricingStrategy-001') urlParam = pricingFormulaId;\r\n          else if (tieredData.data && tieredData.data.length > 0) {\r\n            const particularTieredData = tieredData.data.find(item => item.splitId === 1);\r\n            urlParam = particularTieredData.formulaId;\r\n          }\r\n          itemDetails = contractData[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      return {\r\n        formulaURLParam: urlParam,\r\n        itemDetails\r\n      };\r\n    }\r\n\r\n    function getLatestDate(priviousFixation) {\r\n      previousFixation = priviousFixation;\r\n      let latestDate = 'NA';\r\n      if (priviousFixation.data.length > 0) {\r\n        const sorted_ms = priviousFixation.data\r\n          .map(function(item) {\r\n            return new Date(item.triggerDate).getTime();\r\n          })\r\n          .sort();\r\n        const maxDate = sorted_ms[sorted_ms.length - 1];\r\n        latestDate = moment(maxDate).format('DD-MMM-YYYY');\r\n      }\r\n      return latestDate;\r\n    }\r\n    function cancelFixation(priviousFixation, unit, contract) {\r\n      let cancelObject = {\r\n        cancelledFixationQty: 'Priced Fixed Qty Available @ Pre Execution stage is 0',\r\n        fixationRefNo: 'Cancellations are only allowed for Pre Execution Fixations !!',\r\n        contract: contract,\r\n        internalContractItemRefNo: internalContractItemRefNo\r\n      };\r\n      let checkAnyPre = false;\r\n      if (\r\n        priviousFixation.data.filter(item => {\r\n          return item.execution == 'Pre-execution';\r\n        }).length > 0\r\n      )\r\n        checkAnyPre = true;\r\n      let filterFixation = priviousFixation.data.filter(item => {\r\n        return (\r\n          item.execution == 'Pre-execution' && (item.fixationStatus == 'Active' || item.fixationStatus == 'ACTIVE')\r\n        );\r\n      });\r\n      filterFixation.sort(function(a, b) {\r\n        return new Date(b.sys__createdOn) - new Date(a.sys__createdOn);\r\n      });\r\n      if (checkAnyPre) {\r\n        cancelObject.cancelledFixationQty =\r\n          'All the priced fixed qty is consumed in execution . Price Fixed Qty Available @Pre Execution Stage is 0';\r\n      }\r\n      if (filterFixation.length > 0) {\r\n        cancelObject.cancelledFixationQty =\r\n          'Quantity to be Cancelled : ' + Number(filterFixation[0].itemFixedQtyAvailable) + ' ' + unit;\r\n        cancelObject.fixationRefNo = 'Cancel fixation : ' + filterFixation[0].fixationRefNo;\r\n      }\r\n      return cancelObject;\r\n    }\r\n\r\n    function handleTotal({ toleranceType, itemQty, toleranceMax }, priviousFixation, previousgmrqty) {\r\n      let total = itemQty;\r\n\r\n      if (toleranceMax) {\r\n        toleranceType === 'Percentage'\r\n          ? (total = (total + (Number(toleranceMax) * itemQty) / 100).toFixed(2))\r\n          : (total = (Number(toleranceMax)).toFixed(2));\r\n      }\r\n\r\n      let sum = priviousFixation.data.reduce((accu, value) => accu + Number(value.quantity), 0);\r\n\r\n      return {\r\n        total,\r\n        sum,\r\n        priviousFixation\r\n      };\r\n    }\r\n    function allDisplayValue(contract, itemDetail, key) {\r\n      let all_displayValue = JSON.parse(contract.generalDetailsDisplayValue);\r\n      all_displayValue = {\r\n        ...all_displayValue,\r\n        ...JSON.parse(itemDetail.itemDisplayValue)\r\n      };\r\n      if (key == 'product') return all_displayValue.productIdDisplayName;\r\n      if (key == 'cpName') return all_displayValue.cpProfileIdDisplayName;\r\n      if (key == 'quality') return all_displayValue.qualityDisplayName;\r\n      return '';\r\n    }\r\n    function prepareLifecycle({ data }, itemQtyUnitIdValue, currencyUnit) {\r\n      let PreData = [];\r\n      data = data.filter(item => {\r\n        if (item.fixationStatus != 'Cancelled') return item;\r\n      });\r\n      data = data.map(function (item) {\r\n        item.quantity = Number(item.quantity).toFixed(3);\r\n        return item\r\n      })\r\n      let group = data.reduce((acc, item) => {\r\n        if (!acc[item.activityDate]) acc[item.activityDate] = [];\r\n        acc[item.activityDate].push(item);\r\n        return acc;\r\n      }, {});\r\n\r\n      let arrDate = Object.keys(group);\r\n\r\n      arrDate.forEach((item, i) => {\r\n        PreData[i] = {};\r\n        let qty = 0;\r\n        var calculated = 0;\r\n        PreData[i]['date'] = moment(group[item][0].activityDate).format('YYYY-MM-DD');\r\n        group[item].forEach((elem, j) => {\r\n          if (req.body.selectedData && req.body.selectedData._id === elem._id)\r\n            group[item][j]['style'] = 'background-color: #dedede99';\r\n\r\n          qty = Number(qty) + Number(elem.quantity);\r\n          group[item][j].triggerDate = moment(group[item][j].triggerDate).format('YYYY-MM-DD');\r\n          calculated = calculated + group[item][j].calculatedPrice;\r\n          group[item][j].calculatedPrice = group[item][j].calculatedPrice.toFixed(3);\r\n        });\r\n        group[item].unshift({\r\n          fixationRefNo: 'Price Fixation No',\r\n          quantity: 'Quantity',\r\n          triggerDate: 'Fixation Date',\r\n          fixationMethod: 'Fixation Method',\r\n          indexName: 'Index Name',\r\n          gmrRefNo: 'GMR Ref No',\r\n          basePrice: 'Base Price',\r\n          gmrQty: 'GMR Qty',\r\n          avgPrice: 'Avg Price',\r\n          price: 'Price',\r\n          gmrRefNoDisplayName: 'GMR Ref No',\r\n          indexMultiplier: 'Index Multiplier',\r\n          fxindex: 'Fx Instrument',\r\n          fxrate: 'Fx Value',\r\n          differential: 'Differential',\r\n          calculatedPrice: 'Total Value'\r\n        });\r\n        qty = Number(qty).toFixed(3);\r\n\r\n        group[item].push({\r\n          fixationRefNo: 'Total',\r\n          quantity: `${qty} ${itemQtyUnitIdValue}`,\r\n          calculatedPrice: `${calculated.toFixed(3)} ${currencyUnit}`\r\n        });\r\n        PreData[i]['data'] = group[item];\r\n      });\r\n      return PreData;\r\n    }\r\n\r\n    async function getFinalData() {\r\n      try {\r\n        var start = new Date();\r\n\r\n        const [[err, previousgmr], [err1, priviousFixation], [err2, tieredData], [err3, contract]] = await Promise.all([\r\n          promiseHandler(getGMRDetails()),\r\n          promiseHandler(getPreviousFixation()),\r\n          promiseHandler(getTieredPrice()),\r\n          await promiseHandler(getContractDetails())\r\n        ]);\r\n        var end = new Date() - start;\r\n        console.log('First Parallel Call', end);\r\n        if (err) return res.status(500).send('Failed to get previous GMR Details');\r\n        if (err1) return res.status(500).send('Failed to get previous Fixation');\r\n        if (err2) return res.status(500).send('Failed to get Tiered Price');\r\n        if (err3) return res.status(500).send('Failed to get Tiered Price');\r\n\r\n        const latestDate = getLatestDate(priviousFixation);\r\n        const { itemDetails, formulaURLParam } = getItemDetails(contract.data[0].itemDetails, tieredData);\r\n\r\n        const productId = itemDetails.productId;\r\n\r\n        var start4 = new Date();\r\n        const [err6, itemQtymdm] = await promiseHandler(mdmCall([productId], 'physicalproductquantitylist'));\r\n        if (err6) return res.status(500).send('Failed to get Item Quantity mdm');\r\n        var end4 = new Date() - start4;\r\n        console.log('itemQtymdm', end4);\r\n\r\n        const mdm = itemQtymdm.physicalproductquantitylist;\r\n\r\n        const itemQtyUnitId = itemDetails.itemQtyUnitId;\r\n        const itemQtyUnitIdValue = mdm.find(item => item.key === itemQtyUnitId).value;\r\n\r\n        const {\r\n          contractCurrencyPrice,\r\n          productPriceUnit,\r\n          formula,\r\n          currencyUnit,\r\n          qtyUnit,\r\n          previousgmrqty\r\n        } = await addQuantityFromPreviousGMR(previousgmr, itemDetails, formulaURLParam);\r\n\r\n        const { total, sum } = handleTotal(itemDetails, priviousFixation, previousgmrqty);\r\n\r\n        const PreData = prepareLifecycle(priviousFixation, itemQtyUnitIdValue, currencyUnit);\r\n\r\n        data = {\r\n          ...data,\r\n          priceUnit: contractCurrencyPrice,\r\n          priceU: contractCurrencyPrice,\r\n          productPriceUnit,\r\n          formulaId: formula._id,\r\n          currencyUnit,\r\n          itemQtyUnit: itemQtyUnitIdValue,\r\n          qtyUnit,\r\n          productId,\r\n          lifecycletriggerPrice: PreData,\r\n          cancellableFixation: cancelFixation(priviousFixation, itemQtyUnitIdValue, contract.data[0]),\r\n          contractIssueDate: moment(contract.data[0].issueDate).format('DD-MMM-YYYY'),\r\n          activityDate: moment(new Date()).format('YYYY-MM-DD'),\r\n          latestDate: latestDate === 'NA' ? moment(contract.data[0].issueDate).format('YYYY-MM-DD') : latestDate,\r\n          listingformula: {\r\n            ...formula,\r\n            contractCurrencyPrice,\r\n            qtyUnit,\r\n            product: allDisplayValue(contract.data[0], itemDetails, 'product'),\r\n            quality: allDisplayValue(contract.data[0], itemDetails, 'quality'),\r\n            cpName: allDisplayValue(contract.data[0], itemDetails, 'cpName'),\r\n            densityDetailsContract: {\r\n              densityFactor: itemDetails.densityFactor ? itemDetails.densityFactor : '',\r\n              densityMassQtyUnitId: itemDetails.densityMassQtyUnitId ? itemDetails.densityMassQtyUnitId : '',\r\n              densityVolumeQtyUnitId: itemDetails.densityVolumeQtyUnitId ? itemDetails.densityVolumeQtyUnitId : ''\r\n            },\r\n            densityDetailsGmr: {\r\n              densityFactor: itemDetails.densityFactor,\r\n              densityMassQtyUnitId: itemDetails.densityMassQtyUnitId,\r\n              densityVolumeQtyUnitId: itemDetails.densityVolumeQtyUnitId\r\n            },\r\n            itemQtyUnit: itemQtyUnitIdValue,\r\n            contractRefNo: `${contract.data[0].contractRefNo}.${itemDetails.itemNo}`,\r\n            date: moment(new Date()).format('DD-MMM-YYYY'),\r\n            contractIssueDate: moment(contract.data[0].issueDate).format('DD-MMM-YYYY'),\r\n            latestDate,\r\n            gmrPlatformData: previousGmrData,\r\n            fixationConnectData: priviousFixation,\r\n            executedQty: previousgmrqty.toFixed(3),\r\n            fixedQuantity: sum.toFixed(3),\r\n            unfixedQuantity: (total - sum).toFixed(3)\r\n          }\r\n        };\r\n      } catch (e) {\r\n        console.log(e);\r\n        res.status(500).send(e);\r\n      }\r\n      res.send(data);\r\n    }\r\n    getFinalData();\r\n  ",
  "sys__UUID": "a0307818-8870-4288-8578-21668b5541be",
  "sys__createdBy": "avinash.singh@ekaplus.com",
  "type": "processor"
}
