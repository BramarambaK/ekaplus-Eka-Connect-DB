{
    "_id" : "formula_details_processor",
    "name" : "formula_details_processor",
    "refType" : "app",
    "refTypeId" : "84d7b167-1d9f-406d-b974-bea406a25f9a",
    "snippet" : "\r\n    var moment = require('moment')\r\n    function getdeliveryPeriod(curve){\r\n      let deliveryDetail = 'N\/A'\r\n      if (curve.priceQuoteRule == 'Custom Period Average') {\r\n        deliveryDetail =  moment(curve.startDate).format(req.body.propertyList.date_format) + ' to '+moment(curve.endDate).format(req.body.propertyList.date_format)\r\n      }\r\n      else if (curve.priceQuoteRule == 'Event Offset Based' || curve.priceQuoteRule == 'Lookback Pricing'){\r\n        deliveryDetail = 'Delivery Period'\r\n      }\r\n      else if(curve.priceQuoteRule == 'Delivery Period Average'){ \r\n        if(curve.pricePoint == 'Forward') {\r\n          deliveryDetail = curve.pricingPeriod\r\n        }\r\n        else {\r\n          deliveryDetail = 'Delivery Period'\r\n        }\r\n      }\r\n      else if(curve.priceQuoteRule == 'Prompt Period Avg'){\r\n        deliveryDetail = curve.pricingPeriod\r\n      }\r\n      else if(curve.priceQuoteRule == 'Settlement Date'){\r\n        deliveryDetail = curve.pricingPeriod \r\n      }\r\n       \r\n      return deliveryDetail\r\n    }\r\n    function getOffset(offset,priceQuoteRule,type){\r\n      let offsetRule = 'N\/A'\r\n      if(priceQuoteRule == 'Event Offset Based' ||priceQuoteRule == 'Lookback Pricing'){\r\n        if(type == 'Day') offsetRule = 'Daily (' + offset + ' )'\r\n        else if (type == 'Month') offsetRule = 'Monthly (' + offset + ' )'\r\n        else if (type == 'Week') offsetRule = 'Weekly (' + offset + ' )'\r\n      }\r\n      return offsetRule\r\n    }\r\n    function getquotedPeriod(qp,priceQuoteRule,pricePoint){\r\n     let quoteddate = 'N\/A';\r\n     if(priceQuoteRule=='Prompt Period Avg' || priceQuoteRule=='Settlement Date') quoteddate = qp\r\n     if(priceQuoteRule=='Delivery Period Average' && pricePoint == 'Forward') quoteddate = qp\r\n     return quoteddate\r\n    }\r\n    function convertcurr(curve){\r\n      let conversion = ''\r\n      if(curve.hasOwnProperty('curveUnit')){\r\n        conversion = '( ' + curve.curveUnit.split('\/')[0]+ '->'+req.body.selectedData.listingformula.contractCurrencyPrice.split('\/')[0]  +' ) '\r\n     }\r\n      \/\/ conversion = conversion + req.body.selectedData\r\n      return conversion\r\n    }\r\n    function convertqty(curve){\r\n      let conversion = ''\r\n      if(curve.hasOwnProperty('curveUnit')){\r\n         conversion = '( ' + curve.curveUnit.split('\/')[1]+ '->'+req.body.selectedData.listingformula.contractCurrencyPrice.split('\/')[1]  +' ) '\r\n      }\r\n      \/\/ conversion = conversion + req.body.selectedData\r\n      return conversion\r\n    }\r\n    let formulaDetailsData = {\r\n      'header':{},\r\n      'items':[]\r\n    }\r\n    if(req.body.selectedData){\r\n      formulaDetailsData.header = {\"label\":req.body.selectedData.listingformula.newFormulaExp,\r\n      \"style\": {\r\n        \"font-size\": \"18px\"}} \r\n       req.body.selectedData.listingformula.curves.forEach((curve,i)=>{\r\n         formulaDetailsData.items.push({\r\n          title: {\r\n            \"label\": curve.curveName,\r\n            \"style\": {\r\n              \"color\": \"red\"\r\n            }\r\n          },\r\n           'fxInput' : curve.fxInput==''?'N\/A':curve.fxInput,\r\n           'qtyUnitConversionFactor' : curve.qtyUnitConversionFactor,\r\n           'pricePeriod' : getdeliveryPeriod(curve),\r\n           'differential' : curve.differential == '' ? 'N\/A': curve.differential,\r\n           'priceQuoteRule' : curve.priceQuoteRule,\r\n           'offset' : getOffset(curve.offset,curve.priceQuoteRule,curve.offsetType),\r\n           'quotedPeriodDate' : getquotedPeriod(curve.quotedPeriodDate,curve.priceQuoteRule,curve.pricePoint),\r\n           'qtyConversion': convertqty(curve),\r\n           'fxRateConversion' : convertcurr(curve)\r\n         })\r\n      })\r\n      res.status(200).send(formulaDetailsData)\r\n    }\r\n    else{\r\n      res.status(500).send('failed to get data')\r\n    }\r\n  ",
    "sys__UUID" : "e6451b42-b665-4dae-b818-35d7f87f5787",
    "sys__createdBy" : "avinash.singh@ekaplus.com",
    "type" : "processor"
}