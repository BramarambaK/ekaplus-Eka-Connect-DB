{
    "_id" : "fetch_document_trigger_Multiple_data_jglobals",
    "name" : "fetch_document_trigger_Multiple_data_jglobals",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "84d7b167-1d9f-406d-b974-bea406a25f9a",
    "snippet" : "var moment = require(\"moment\");\r\nconst { platform_url, eka_connect_host, eka_mdm_host } = req.body.propertyList;\r\nvar result;\r\nfunction getData(method, url, body) {\r\n  const requestObject = {\r\n    method,\r\n    url,\r\n    body,\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    },\r\n    json: true,\r\n  };\r\n  return new Promise(function (resolve, reject) {\r\n    request(requestObject, function (err, response, body) {\r\n      if (response.statusCode === 200) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\nfunction mdmCall(dependsOn, serviceKey) {\r\n  const url = `${eka_mdm_host}\/mdm\/84d7b167-1d9f-406d-b974-bea406a25f9a\/data`;\r\n  const body = [\r\n    {\r\n      dependsOn,\r\n      serviceKey,\r\n    },\r\n  ];\r\n  return getData(\"POST\", url, body);\r\n}\r\nfunction currencyCheck(currency) {\r\n  const url = `${eka_mdm_host}\/mdm\/5d907cd2-7785-4d34-bcda-aa84b2158415\/currency-details`;\r\n  const body = { currencyCode: currency };\r\n  return getData(\"POST\", url, body);\r\n}\r\nvar defaultdata1 = {\r\n  method: \"POST\",\r\n  url: req.body.propertyList.eka_connect_host + \"\/workflow\/data\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n  },\r\n  json: true,\r\n  body: {\r\n    appId: \"5d907cd2-7785-4d34-bcda-aa84b2158415\",\r\n    workFlowTask: \"contract_list\",\r\n    filterData: {\r\n      filter: [\r\n        {\r\n          fieldName: \"internalContractRefNo\",\r\n          value: [req.body.queryParams.internalContractRefNo],\r\n          operator: \"in\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n};\r\nfunction get_defaultData1() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(defaultdata1, function (err, response, body) {\r\n      if (response.statusCode === 200) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\nvar defaultdata2 = {\r\n  method: \"POST\",\r\n  url: req.body.propertyList.eka_connect_host + \"\/workflow\/data\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n  },\r\n  json: true,\r\n  body: {\r\n    appId: \"84d7b167-1d9f-406d-b974-bea406a25f9a\",\r\n    workFlowTask: \"getting_table_Trigger_manual\",\r\n    filterData: {\r\n      filter: [\r\n        {\r\n          fieldName: \"fixationRefNo\",\r\n          value: getAllFixationRef(),\r\n          operator: \"in\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n};\r\nfunction get_defaultData2() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(defaultdata2, function (err, response, body) {\r\n      if (response.statusCode === 200) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\nvar getapp = {\r\n  method: \"POST\",\r\n  url: req.body.propertyList.eka_connect_host + \"\/meta\/app\/physicals\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    json: true,\r\n  },\r\n};\r\nfunction get_appid() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(getapp, function (err, response, body) {\r\n      if (response.statusCode === 200) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\nvar cpaddress = {\r\n  method: \"POST\",\r\n  url:\r\n    req.body.propertyList.eka_mdm_host +\r\n    \"\/mdm\/masterdatas\/5d907cd2-7785-4d34-bcda-aa84b2158415\/cpAddress\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    Connection: \"keep-alive\",\r\n  },\r\n  body: {\r\n    cpId: \"BP-2038\",\r\n  },\r\n  json: true,\r\n};\r\nfunction get_address() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(cpaddress, function (err, response, body) {\r\n      if (response.statusCode === 200) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\nfunction getAllFixationRef() {\r\n  let allFixationRef = [];\r\n  allFixationRef = req.body.selectedData.data.reduce((acc, item) => {\r\n    acc.push(item.fixationRefNo);\r\n    return acc;\r\n  }, []);\r\n  return allFixationRef;\r\n}\r\nfunction getTotalValue() {\r\n  return req.body.selectedData.data.reduce((a, b) => {\r\n    a = a + Number(b.calculatedPrice.split(\" \")[0]);\r\n    return a;\r\n  }, 0);\r\n}\r\nfunction getpricision() {\r\n  console.log(\r\n    \"Data is\",\r\n    req.body.selectedData.data.reduce((a, b) => {\r\n      if (\r\n        b.hasOwnProperty(\"decimalPrecision\") &&\r\n        Number(b.decimalPrecision) > a\r\n      )\r\n        a = Number(b.decimalPrecision);\r\n      return a;\r\n    }, 0)\r\n  );\r\n  return req.body.selectedData.data.reduce((a, b) => {\r\n    if (b.hasOwnProperty(\"decimalPrecision\") && Number(b.decimalPrecision) > a)\r\n      a = Number(b.decimalPrecision);\r\n    return a;\r\n  }, 0);\r\n}\r\n\r\nfunction getRangeOfAllFixation() {\r\n  let fromto = \"\";\r\n  let to = req.body.selectedData.data.reduce(\r\n    (a, b) => {\r\n      return a.fixationRefNo.split(\"-\")[1] > b.fixationRefNo.split(\"-\")[1]\r\n        ? { fixationRefNo: a.fixationRefNo }\r\n        : { fixationRefNo: b.fixationRefNo };\r\n    },\r\n    { fixationRefNo: \"\" }\r\n  );\r\n  let from = req.body.selectedData.data.reduce(\r\n    (a, b) => {\r\n      return a.fixationRefNo.split(\"-\")[1] < b.fixationRefNo.split(\"-\")[1]\r\n        ? { fixationRefNo: a.fixationRefNo }\r\n        : { fixationRefNo: b.fixationRefNo };\r\n    },\r\n    { fixationRefNo: \"\" }\r\n  );\r\n  fromto =\r\n    fromto +\r\n    from.fixationRefNo.split(\"-\")[0] +\r\n    \" ( \" +\r\n    from.fixationRefNo.split(\"-\")[1] +\r\n    \" - \" +\r\n    to.fixationRefNo.split(\"-\")[1] +\r\n    \" ) \";\r\n  return fromto;\r\n}\r\nvar internalGmrRefNo = [\r\n  ...new Set(req.body.selectedData.data.map((item) => item.gmrRefNo)),\r\n];\r\nvar stocks = {\r\n  method: \"POST\",\r\n  url: req.body.propertyList.eka_connect_host + \"\/workflow\/data\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    Connection: \"keep-alive\",\r\n  },\r\n  body: {\r\n    appId: \"5d907cd2-7785-4d34-bcda-aa84b2158415\",\r\n    workFlowTask: \"gmr_density_list\",\r\n    filterData: {\r\n      filter: [\r\n        {\r\n          fieldName: \"gmrRefNo\",\r\n          value: internalGmrRefNo,\r\n          operator: \"in\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  json: true,\r\n};\r\nfunction get_stocks() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(stocks, function (err, response, body) {\r\n      if (response.statusCode === 200) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\nfunction getUniqueDataBasedOnGMR() {\r\n  let uniqueGmr = req.body.selectedData.data.reduce((acc, item) => {\r\n    acc[item.gmrRefNo] = item;\r\n    return acc;\r\n  }, {});\r\n  return +Object.values(uniqueGmr).reduce((a, b) => {\r\n    return +(\r\n      Number(a) +\r\n      Number(b.gmrQty) * Number(b.quantityunitconversion)\r\n    ).toFixed(12);\r\n  }, 0);\r\n}\r\nfunction getlatesteventdate(stocks) {\r\n  let date = \"\";\r\n  let appendalldata = stocks.data.reduce((a, b) => {\r\n    if (b.hasOwnProperty(\"stock\")) a = [...a, ...b.stock];\r\n    return a;\r\n  }, []);\r\n  if (appendalldata.length > 0) {\r\n    let dates = appendalldata\r\n      .filter((item) => {\r\n        if (item.eventDate) return item.eventDate;\r\n      })\r\n      .map((i) => new Date(i.eventDate));\r\n    date = new Date(Math.max.apply(null, dates));\r\n  }\r\n  if (date !== \"\") {\r\n    date = date.toISOString();\r\n    date = date.split(\"T\")[0];\r\n    return moment(date).format(\"DD MMM YYYY\");\r\n  } else {\r\n    return date;\r\n  }\r\n}\r\nfunction getVessel(stocks) {\r\n  let appendalldata = stocks.data.reduce((a, b) => {\r\n    if (b.hasOwnProperty(\"vesselName\") && a != \"\") a = b[\"vesselName\"];\r\n    return a;\r\n  }, \"\");\r\n  return appendalldata ? appendalldata : \"\";\r\n}\r\n\r\nget_defaultData1().then((contract) => {\r\n  get_defaultData2().then((tableData) => {\r\n    var arra = [];\r\n    for (let n = 0; n < tableData.data.length; n++) {\r\n      tableData.data[n][\"priceDate\"] = moment\r\n        .utc(tableData.data[n][\"fixationDate\"])\r\n        .local()\r\n        .format(\"DD MMM YYYY\");\r\n      if (n != 0) arra.push(tableData.data[n]);\r\n    }\r\n    var allDisplayValue = JSON.parse(\r\n      contract.data[0].generalDetailsDisplayValue\r\n    );\r\n    var itemDetails = contract.data[0].itemDetails.find(\r\n      (o) =>\r\n        o.internalItemRefNo === req.body.queryParams.internalContractItemRefNo\r\n    );\r\n    let productId = itemDetails.productId;\r\n    let itemQuantityId = itemDetails.itemQtyUnitId;\r\n    allDisplayValue = {\r\n      ...allDisplayValue,\r\n      ...JSON.parse(itemDetails.itemDisplayValue),\r\n    };\r\n    cpaddress.body.cpId = contract.data[0].cpProfileId;\r\n    get_address()\r\n      .then((address) => {\r\n        get_stocks()\r\n          .then((stocks) => {\r\n            get_appid().then((data2) => {\r\n              mdmCall([productId], \"physicalproductquantitylist\")\r\n                .then((quantitylist) => {\r\n                  let priceUnitIdArray = quantitylist.hasOwnProperty(\r\n                    \"physicalproductquantitylist\"\r\n                  )\r\n                    ? quantitylist.physicalproductquantitylist.filter(\r\n                        (quantity) =>\r\n                          quantity[\"value\"] ===\r\n                          req.body.selectedData.data[0].basePrice.split(\"\/\")[1]\r\n                      )\r\n                    : null;\r\n                  priceUnitIdArray = priceUnitIdArray[0].hasOwnProperty(\"key\")\r\n                    ? priceUnitIdArray[0].key\r\n                    : itemQuantityId;\r\n                  mdmCall(\r\n                    [productId, itemQuantityId, priceUnitIdArray],\r\n                    \"quantityConversionFactor\"\r\n                  )\r\n                    .then((con) => {\r\n                      currencyCheck(\r\n                        req.body.selectedData.data[0].basePrice\r\n                          .split(\" \")[1]\r\n                          .split(\"\/\")[0]\r\n                      ).then((currency) => {\r\n                        let subcurrencyFactor = 1;\r\n                        let currencyCode =\r\n                          req.body.selectedData.data[0].calculatedPrice.split(\r\n                            \" \"\r\n                          )[1];\r\n                        if (\r\n                          currency.hasOwnProperty(\"isSubCurrency\") &&\r\n                          currency.isSubCurrency === \"Y\"\r\n                        ) {\r\n                          subcurrencyFactor =\r\n                            subcurrencyFactor * currency.conversionFactor;\r\n                          currencyCode = currency.currencyCode;\r\n                        }\r\n                        let conversionfactor = con.hasOwnProperty(\r\n                          \"quantityConversionFactor\"\r\n                        )\r\n                          ? con.quantityConversionFactor[0].value\r\n                          : 1;\r\n                        var app = JSON.parse(data2);\r\n                        let applogo = \"assets\/uploads\/Jglobal.png\";\r\n                        if (app.config.header.hasOwnProperty(\"clientLogo\")) {\r\n                          applogo =\r\n                            \"assets\/uploads\/\" +\r\n                            app.config.header.clientLogo.src;\r\n                        }\r\n                        result = {\r\n                          app: applogo,\r\n                          issue_date: moment(new Date()).format(\"DD MMM YYYY\"),\r\n                          productDisplayValue:\r\n                            allDisplayValue.productIdDisplayName,\r\n                          landPort:\r\n                            allDisplayValue.originationCityIdDisplayName,\r\n                          quality: allDisplayValue.qualityDisplayName,\r\n                          cpName: allDisplayValue.cpProfileIdDisplayName,\r\n                          calculatedPrice:\r\n                            getTotalValue() +\r\n                            \" \" +\r\n                            req.body.selectedData.data[0].calculatedPrice.split(\r\n                              \" \"\r\n                            )[1],\r\n                          contractIssueDate: moment(\r\n                            contract.data[0].issueDate\r\n                          ).format(\"DD MMM YYYY\"),\r\n                          contractIssueDate1format: moment(\r\n                            contract.data[0].issueDate\r\n                          ).format(\"Do MMM YYYY\"),\r\n                          contractRefNo: contract.data[0].contractRefNo,\r\n                          itemQty:\r\n                            allDisplayValue.itemQtyDisplayName +\r\n                            \" \" +\r\n                            allDisplayValue.itemQtyUnitIdDisplayName,\r\n                          incoterm: allDisplayValue.incotermIdDisplayName,\r\n                          priceUnit:\r\n                            req.body.selectedData.data[0].price.split(\" \")[1],\r\n                          paymentTerm: allDisplayValue.paymentTermIdDisplayName,\r\n                          tableData1: arra,\r\n                          gmrqty:\r\n                            req.body.selectedData.data[0].execution ==\r\n                            \"Pre-execution\"\r\n                              ? Number(\r\n                                  req.body.selectedData.data[0].itemQty.split(\r\n                                    \" \"\r\n                                  )[0]\r\n                                ).toFixed(2) +\r\n                                \" \" +\r\n                                req.body.selectedData.data[0].itemQty.split(\r\n                                  \" \"\r\n                                )[1]\r\n                              : +getUniqueDataBasedOnGMR().toFixed(2) +\r\n                                \" \" +\r\n                                req.body.selectedData.data[0].itemQty.split(\r\n                                  \" \"\r\n                                )[1],\r\n                          gmrfixed:\r\n                            Number(\r\n                              req.body.selectedData.data.reduce((a, b) => {\r\n                                a = +(Number(a) + Number(b.quantity)).toFixed(\r\n                                  12\r\n                                );\r\n                                return a;\r\n                              }, 0)\r\n                            ).toFixed(2) +\r\n                            \" \" +\r\n                            req.body.selectedData.data[0].itemQty.split(\" \")[1],\r\n                          gmrunfixed:\r\n                            Number(\r\n                              req.body.selectedData.data.reduce((a, b) => {\r\n                                a = +(\r\n                                  Number(a) +\r\n                                  Number(b.itemUnfixedQty.split(\" \")[0])\r\n                                ).toFixed(12);\r\n                                return a;\r\n                              }, 0)\r\n                            ).toFixed(2) +\r\n                            \" \" +\r\n                            req.body.selectedData.data[0].itemQty.split(\" \")[1],\r\n                          priceU: req.body.selectedData.data[0].priceU,\r\n                          fixationRefNo:\r\n                            req.body.selectedData.data[0].fixationRefNo,\r\n                          avgPrice: req.body.selectedData.data[0].avgPrice,\r\n                          price: tableData.data[0][\"price\"],\r\n                          main_add: req.body.propertyList\r\n                            .eka_tenant_main_address\r\n                            ? req.body.propertyList.eka_tenant_main_address\r\n                            : \"\",\r\n                          left_side_add: req.body.propertyList\r\n                            .eka_tenant_side_address\r\n                            ? req.body.propertyList.eka_tenant_side_address\r\n                            : \"\",\r\n                          greet: req.body.propertyList\r\n                            .eka_tenant_sign_expression\r\n                            ? req.body.propertyList.eka_tenant_sign_expression\r\n                            : \"\",\r\n                          clientname: req.body.propertyList\r\n                            .eka_tenant_client_name\r\n                            ? req.body.propertyList.eka_tenant_client_name\r\n                            : \"\",\r\n                          invoiceno:\r\n                            req.body.selectedData.data[0].contractRefNo +\r\n                            \"-\" +\r\n                            moment(\r\n                              tableData.data.reduce(function (a, b) {\r\n                                return a.fixationDate > b.fixationDate\r\n                                  ? a.fixationDate\r\n                                  : b.fixationDate;\r\n                              })\r\n                            ).format(\"YYYYMM\"),\r\n                          \/\/ invoiceno: 'PSI \/ ' +getRangeOfAllFixation(),\r\n                          invoicedate: moment(new Date()).format(\"DD MMM YYYY\"),\r\n                          vessel: getVessel(stocks),\r\n                          bldate: getlatesteventdate(stocks),\r\n                          add1: !address.cpAddress\r\n                            ? \"\"\r\n                            : address.cpAddress.split(\"~\")[0],\r\n                          add2: !address.cpAddress\r\n                            ? \"\"\r\n                            : address.cpAddress.split(\"~\")[1],\r\n                          add3: !address.cpAddress\r\n                            ? \"\"\r\n                            : address.cpAddress.split(\"~\")[2],\r\n                          pricingmonth: moment(\r\n                            tableData.data.reduce(function (a, b) {\r\n                              return a.fixationDate > b.fixationDate\r\n                                ? a.fixationDate\r\n                                : b.fixationDate;\r\n                            })\r\n                          ).format(\"MMM YYYY\"),\r\n                        };\r\n                        console.log(\"reached\");\r\n                        result.avgPrice = Number(\r\n                          Number(result.calculatedPrice.split(\" \")[0]) \/\r\n                            Number(\r\n                              Number(result.gmrfixed.split(\" \")[0]) *\r\n                                Number(conversionfactor)\r\n                            )\r\n                        ).toFixed(getpricision());\r\n                        result.gmrunfixed =\r\n                          Number(\r\n                            Number(result.gmrqty.split(\" \")[0]) -\r\n                              Number(result.gmrfixed.split(\" \")[0])\r\n                          ).toFixed(2) +\r\n                          \" \" +\r\n                          result.gmrqty.split(\" \")[1];\r\n                        result.percentageTotal =\r\n                          (\r\n                            (Number(result.gmrfixed.split(\" \")[0]) \/\r\n                              Number(result.gmrqty.split(\" \")[0])) *\r\n                            100\r\n                          ).toFixed(0) + \" %\";\r\n                        result.unPriceVolumePercent = (\r\n                          (Number(result.gmrunfixed.split(\" \")[0]) \/\r\n                            Number(result.gmrqty.split(\" \")[0])) *\r\n                          100\r\n                        ).toFixed(0);\r\n                        result.priceVolumePercent =\r\n                          100 - result.unPriceVolumePercent + \" %\";\r\n                        result.unPriceVolumePercent =\r\n                          result.unPriceVolumePercent + \" %\";\r\n                        result.bldate =\r\n                          result.bldate == \"Invalid date\" ? \"\" : result.bldate;\r\n                        result.invoiceamount =\r\n                          Number(\r\n                            Number(result.avgPrice) *\r\n                              Number(result.gmrfixed.split(\" \")[0]) *\r\n                              Number(conversionfactor) *\r\n                              Number(subcurrencyFactor)\r\n                          ).toFixed(2) +\r\n                          \" \" +\r\n                          currencyCode;\r\n                        result.priceVolume =\r\n                          Number(\r\n                            Number(result.gmrqty.split(\" \")[0]) -\r\n                              Number(result.gmrunfixed.split(\" \")[0])\r\n                          ).toFixed(2) +\r\n                          \" \" +\r\n                          result.gmrunfixed.split(\" \")[1];\r\n                        res.status(200).send(result);\r\n                      });\r\n                    })\r\n                    .catch((err) => {\r\n                      console.log(err);\r\n                      res.status(500).send(\"Currency Failed\");\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                  console.log(err);\r\n                  res.status(500).send(\"Stocks Connect Failed\");\r\n                });\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            res.status(500).send(\"Mdm api failed\");\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        res.status(500).send(\"address api failed\");\r\n      });\r\n  });\r\n});\r\n",
    "sys__UUID" : "c18260b8-0c65-445b-9065-7c448a5589de",
    "sys__createdBy" : "avinash@ekaplus.com"
}