{
  "_id": "submitamendtickets_processor",
  "name": "submitamendtickets_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const send = (status, message) => res.status(status).send(message);\r\n    let userData = {};\r\n\r\n    const url = req.body.propertyList.eka_connect_host + '/api/getbpuserinfo';\r\n    let getInfo = () => {\r\n      const user = {\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true\r\n      };\r\n      getData(user).then(userinfo => {\r\n        userData.userName = userinfo.data.firstName + ' ' + userinfo.data.lastName;\r\n        submitAmendTicket();\r\n        console.log(userData);\r\n      });\r\n    };\r\n    let dataTosend = {\r\n      output: {\r\n        elastic_updateTicket_addRequestId_internal: []\r\n      },\r\n      task: 'elastic_updateTicket_addRequestId_internal',\r\n      appId: '12325a98-a959-4939-9005-4158d136afcd',\r\n      workflowTaskName: 'elastic_updateTicket_addRequestId_internal'\r\n    };\r\n    getInfo();\r\n    function submitAmendTicket() {\r\n      if (Array.isArray(req.body.submitamendticketcomposite.submitamendtickettableview)) {\r\n        let data = {\r\n          requestType: 'Amendment',\r\n          requestBy:userData.userName,\r\n          userType: 'Grower',\r\n          bpRefNo: req.body.submitamendticketcomposite.submitamendtickettableview[0].bpRefNo,\r\n          bpName: req.body.submitamendticketcomposite.submitamendtickettableview[0].bpName,\r\n          requestStatus: 'Awaiting review',\r\n          ticketRefNo: req.body.submitamendticketcomposite.submitamendtickettableview.map(id => id.ticketRefNo).join(' '),\r\n          product: req.body.submitamendticketcomposite.submitamendtickettableview.map(id => id.product).join(' '),\r\n          \r\n          quality: req.body.submitamendticketcomposite.submitamendtickettableview.map(id => id.quality).join(' '),\r\n          cropYear: '2021/2022',\r\n          quantityUnit: 'MT',\r\n          location:  req.body.submitamendticketcomposite.submitamendtickettableview.map(id=>id.location).join(' '),\r\n          bulkHandler: req.body.submitamendticketcomposite.submitamendtickettableview.map(id=>id.bulkHandler).join(' '),\r\n          ticketStatus: 'Request',\r\n          // ticketHandlerName: req.body.submitamendticketcomposite.submitamendtickettableview.map(id => id.ticketHandlerName).join(' '),\r\n          ticketHandlerName:'-',\r\n          isRequestedByEkaCCSystem: true,\r\n          previousTicketList: [],\r\n          currentTicketList: []\r\n        };\r\n\r\n        req.body.submitamendticketcomposite.submitamendtickettableview.forEach(item => {\r\n          data.previousTicketList.push({\r\n            userType: 'Grower',\r\n            isparentTicket: 'N',\r\n            parentticketRefNo: '',\r\n            ticketRefNo: item.ticketRefNo,\r\n            bpName: item.bpName,\r\n            bpRefNo: item.bpRefNo,\r\n            product: item.product,\r\n            quality: item.quality,\r\n            origin: item.origin,\r\n            quantityUnit: item.quantityUnit,\r\n            cropYear: item.cropYear,\r\n            location: item.location,\r\n            quantity: item.quantity,\r\n            bulkHandler: item.bulkHandler,\r\n\r\n            varietyName: item.varietyName,\r\n            truckRegistration: item.origTruckRegistration,\r\n            paddockLocation: item.origPaddockLocation,\r\n          \r\n            // ticketHandlerName: item.ticketHandlerName,\r\n            ticketHandlerName:'-',\r\n            upgradeStatus: 'Upgraded',\r\n            ticketStatus: item.ticketStatus,\r\n            objectID: 0,\r\n            isOnFarmPickup: 'Y',\r\n            ticketHandlerBpRefNo: item.ticketHandlerBpRefNo,\r\n            // ticketHandlerBpRefNo:'-',\r\n            // receivalDate: '05-02-2022',\r\n            allocationDate: '04-02-2022',\r\n            // pickUpFee: '100',\r\n\r\n            pricingOption:item.pricingOption,\r\n            // receivalFee: '200',\r\n            contractId: '123',\r\n            // testResultsLong: 'Moisture Content (%) = 6.00, Protein (%) = 13.00, Test Weight (kg/HL) = 80.00, Screenings (%) = 0.50',\r\n            // allocatedBy: 'abc',\r\n            // payGrade: 'a',\r\n            // basePrice: '300',\r\n            // isInternalContract: 'y',\r\n            // testResultsShort: 'MOGR = 6.00, PRGR = 13.00, TWT = 80.00, UNMB = 0.50',\r\n            ticketHandlerCode: item.ticketHandlerCode\r\n          }),\r\n            data.currentTicketList.push({\r\n              userType: 'Grower',\r\n              isparentTicket: 'N',\r\n              parentticketRefNo: '',\r\n              ticketRefNo: item.ticketRefNo,\r\n              bpName: item.bpName,\r\n              bpRefNo: item.bpRefNo,\r\n              product: item.product,\r\n              quality: item.quality,\r\n              origin: item.origin,\r\n              quantityUnit: item.quantityUnit,\r\n              cropYear: item.cropYear,\r\n              location: item.location,\r\n              quantity: item.quantity,\r\n              bulkHandler: item.bulkHandler,\r\n              varietyName: item.varietyNameList,\r\n              truckRegistration: item.amendedTruckRegistration,\r\n              paddockLocation: item.amendedPaddockLocation,\r\n              originalPaddockLocation: item.origPaddockLocation,\r\n            originalTruckRegistration: item.origTruckRegistration,\r\n            originalVarietyName:item.varietyNameList,\r\n            \r\n            // ticketHandlerName: item.ticketHandlerName,\r\n            ticketHandlerName:'-',\r\n            upgradeStatus: 'Upgraded',\r\n            ticketStatus: item.ticketStatus,\r\n            objectID: 0,\r\n            isOnFarmPickup: 'Y',\r\n            ticketHandlerBpRefNo: item.ticketHandlerBpRefNo,\r\n            \r\n            // receivalDate: '05 - 02 - 2022',\r\n            allocationDate: '04 - 02 - 2022',\r\n            // pickUpFee: '200',\r\n            pricingOption: item.pricingOption,\r\n            // receivalFee: '',\r\n            contractId: '',\r\n            // testResultsLong:\r\n            //   'Moisture Content (%) = 6.00, Protein (%) = 13.00, Test Weight (kg/HL) = 80.00, Screenings (%) = 0.50',\r\n            // allocatedBy: '',\r\n            // payGrade: '',\r\n            // basePrice: '',\r\n            // isInternalContract: '',\r\n            // testResultsShort: 'MOGR = 6.00, PRGR = 13.00, TWT = 80.00, UNMB = 0.50',\r\n            ticketHandlerCode: item.ticketHandlerCode\r\n            });\r\n        });\r\n\r\n       \r\n\r\n        dataTosend.output.elastic_updateTicket_addRequestId_internal = [data];\r\n        console.log(JSON.stringify(dataTosend));\r\n        let apiBody = getRequestBodyPostMethod(req.body.propertyList.eka_connect_host + '/workflow', dataTosend);\r\n        getData(apiBody)\r\n          .then((data) => {\r\n            console.log('Request Successflly Sent');\r\n            send(200, {\r\n              successCode: 200,\r\n              tabIndex: 2,\r\n              requestId : data.data.map(item=>item.requestId).join(\",\"),\r\n              successMessage: 'Request has been successfully sent.',\r\n              successContext: 'This is null',\r\n              successLocalizedMessage: 'Request has been successfully sent.'\r\n            });\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n            send(400, {\r\n              errorCode: err.Status,\r\n              errorMessage: 'The request cannot be created at this moment.',\r\n              errorContext: 'This is null',\r\n              errorLocalizedMessage: 'The request cannot be created at this moment.'\r\n            });\r\n          });\r\n      }\r\n    }\r\n\r\n    const getRequestBodyPostMethod = (url, obj) => ({\r\n      method: 'POST',\r\n      url,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true,\r\n      body: obj\r\n    });\r\n\r\n    // const getRequestBody = url => ({\r\n    //     method: 'GET',\r\n    //     url,\r\n    //     headers: {\r\n    //         Authorization: req.headers.authorization,\r\n    //         'X-TenantID': req.headers['x-tenantid']\r\n    //     },\r\n    //     json: true\r\n    // });\r\n\r\n    function getData(requestBody) {\r\n      return new Promise(function(resolve, reject) {\r\n        request(requestBody, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n ",
  "sys__UUID": "26a4dee9-371c-44c1-b3a8-57837364b291"
}
