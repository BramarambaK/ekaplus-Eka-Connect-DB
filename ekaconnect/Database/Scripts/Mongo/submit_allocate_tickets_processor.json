{
    "_id" : "submit_allocate_tickets_processor",
    "name" : "submit_allocate_tickets_processor",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "12325a98-a959-4939-9005-4158d136afcd",
    "snippet" : "const send = (status, message) => res.status(status).send(message);\r\n    var userName;\r\n    if (\r\n      !req.body.hasOwnProperty('submitallocatedtickets') &&\r\n      !req.body.hasOwnProperty('submitallocatedcontracttickets') &&\r\n      !req.body.hasOwnProperty('submitallocatedticketsmarket')\r\n    ) {\r\n      send(400, {\r\n        errorCode: 400,\r\n        errorMessage: 'No data to submit',\r\n        errorContext: null,\r\n        errorLocalizedMessage: 'No data to submit'\r\n      });\r\n    }\r\n    if (\r\n      req.body.hasOwnProperty('submitallocatedtickets') ||\r\n      req.body.hasOwnProperty('submitallocatedcontracttickets') ||\r\n      req.body.hasOwnProperty('submitallocatedticketsmarket')\r\n    ) {\r\n      let data;\r\n      if (req.body.hasOwnProperty('submitallocatedtickets')) {\r\n        data = req.body.submitallocatedtickets;\r\n      } else if (req.body.hasOwnProperty('submitallocatedticketsmarket')) {\r\n        data = req.body.submitallocatedticketsmarket;\r\n      } else {\r\n        data = req.body.submitallocatedcontracttickets;\r\n      }\r\n      const timeLable = 'Time taken by getData function';\r\n      const getRequestBody = url => ({\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true\r\n      });\r\n      const getRequestBodyPost = (url, obj) => ({\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true,\r\n        body: obj\r\n      });\r\n      function getData(requestBody) {\r\n        console.dir(requestBody);\r\n        return new Promise(function(resolve, reject) {\r\n          request(requestBody, function(err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 499) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          });\r\n        });\r\n      }\r\n      const getRequestBodyPostMethod = (url, obj) => ({\r\n        method: 'POST',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true,\r\n        body: obj,\r\n        timeout: 600000\r\n      });\r\n      const allocationDetails = data.submitallocatedcardview;\r\n      let tickets = data.data.filter(i => i.tonnesSold > 0);\r\n      let ngrTicketsFilter = data.data[0].bpRefNo;\r\n      console.log('Tickets:', tickets);\r\n      let allocationType = 'Contract';\r\n      allocationDetails.forEach(card => {\r\n        card.sellingOption && (allocationType = card.sellingOption);\r\n      });\r\n      const grades = [];\r\n      for (let i = 0; i < tickets.length; i++) {\r\n        grades.push(tickets[i].quality);\r\n      }\r\n      let gpsReq = {\r\n        filterData: {\r\n          filter: [\r\n            {\r\n              fieldName: 'product',\r\n              operator: 'eqCaseInsensitive',\r\n              value: `${tickets[0].product}`\r\n            },\r\n            {\r\n              fieldName: 'quality',\r\n              operator: 'in',\r\n              value: grades\r\n            },\r\n            {\r\n              fieldName: 'season',\r\n              operator: 'eq',\r\n              value: `${tickets[0].cropYear}`\r\n            },\r\n            {\r\n              fieldName: 'site',\r\n              operator: 'eqCaseInsensitive',\r\n              value: `${tickets[0].location}`\r\n            },\r\n            {\r\n              fieldName: 'pricingOption',\r\n              operator: 'eqCaseInsensitive',\r\n              value: tickets[0].sellingOption == 'Cash' ? 'Cash' : tickets[0].poolpricingoption\r\n            },\r\n            {\r\n              fieldName: 'marketType',\r\n              operator: 'eqCaseInsensitive',\r\n              value: tickets[0].sellingOption == 'Cash' ? 'Cash' : 'Pool'\r\n            },\r\n            {\r\n              fieldName: 'bpRefNo',\r\n              operator: 'eqCaseInsensitive',\r\n              value: `${tickets[0].ticketHandlerBpRefNo}`\r\n            },\r\n            {\r\n              fieldName: 'bpName',\r\n              operator: 'eqCaseInsensitive',\r\n              value: `${tickets[0].acquirer.split('#')[0].trim()}`\r\n            },\r\n            {\r\n              fieldName: 'bpExternalCode',\r\n              operator: 'eqCaseInsensitive',\r\n              value: `${tickets[0].ticketHandlerCode}`\r\n            },\r\n            {\r\n              fieldName: 'status',\r\n              operator: 'ne',\r\n              value: 'Expired'\r\n            }\r\n          ]\r\n        }\r\n      };\r\n      const gcsObj = {\r\n        workflowTaskName: 'EXTERNAL_GCS_ALLOCATE_TICKETS',\r\n        task: 'EXTERNAL_GCS_ALLOCATE_TICKETS',\r\n        appId: '12325a98-a959-4939-9005-4158d136afcd',\r\n        output: {\r\n          EXTERNAL_GCS_ALLOCATE_TICKETS: {}\r\n        }\r\n      };\r\n\r\n      const externalNotification = {\r\n        workflowTaskName: 'EXT_NOTIFICATION_SUBMIT_ALLOCATED_TICKET',\r\n        task: 'EXT_NOTIFICATION_SUBMIT_ALLOCATED_TICKET',\r\n        appId: '12325a98-a959-4939-9005-4158d136afcd',\r\n        output: {\r\n          EXT_NOTIFICATION_SUBMIT_ALLOCATED_TICKET: {}\r\n        }\r\n      };\r\n    //   let getUSerInfo = () => {\r\n    //     const email = getRequestBody(req.body.propertyList.platform_url + '/cac-security/api/userinfo');\r\n    //     const customer = getRequestBody(\r\n    //       req.body.propertyList.platform_url + '/spring/registration/getTenantCustomerByName?username='\r\n    //     );\r\n    //     getData(email)\r\n    //       .then(user => {\r\n    //         customer.url = customer.url + user.email;\r\n    //         return getData(customer);\r\n    //       })\r\n    //       .then(userinfo => {\r\n    //         userName = userinfo.username;\r\n    //         allocationProcess();\r\n    //       });\r\n    //   };\r\n      \r\n      let getUSerInfo = () => {\r\n        const email = getRequestBody(req.body.propertyList.platform_url + '/cac-security/api/userinfo');\r\n        getData(email)\r\n          .then(user => {\r\n            userName = user.firstName+' '+user.lastName;\r\n            allocationProcess();\r\n          });\r\n      };\r\n        \r\n      getUSerInfo();\r\n      function allocationProcess() {\r\n        if (allocationType === 'Cash' || allocationType === 'Pool') {\r\n          console.log('Price filter:', JSON.stringify(gpsReq));\r\n          const gpsBody = getRequestBodyPost(\r\n            req.body.propertyList.eka_connect_host +\r\n              '/data/12325a98-a959-4939-9005-4158d136afcd/ab3fc628-ecbc-43e0-81cb-aa2d5b6e5c40',\r\n            gpsReq\r\n          );\r\n          let gpsPromise = getData(gpsBody);\r\n          gpsPromise\r\n            .then(data => {\r\n              console.log(data.length);\r\n              if (data.length === 0) {\r\n                console.log('Price not available');\r\n                return send(200, {\r\n                  priceInvalid: true\r\n                });\r\n              }\r\n              let prices = [];\r\n              data.map(item => {\r\n                prices.push(parseFloat(item.price));\r\n              });\r\n\r\n              if (prices.some(p => parseFloat(tickets[0].price) == p)) {\r\n                submitTickets();\r\n                console.log('Price matched');\r\n              } else {\r\n                console.log(\"Price didn't match unfortunately\");\r\n                return send(200, {\r\n                  priceInvalid: true,\r\n                  errorCode: '004',\r\n                  errorMessage:\r\n                    'You may no longer allocate tickets to the selected acquirer as the price has been updated and is no longer available. Please select warehouse tickets to allocate to an available acquirer price.',\r\n                  errorContext: 'Price no longer available',\r\n                  errorLocalizedMessage:\r\n                    'You may no longer allocate tickets to the selected acquirer as the price has been updated and is no longer available. Please select warehouse tickets to allocate to an available acquirer price.'\r\n                });\r\n              }\r\n            })\r\n            .catch(err => {\r\n              console.log(err);\r\n            });\r\n        } else {\r\n          submitTickets();\r\n        }\r\n      }\r\n      function submitTickets() {\r\n        console.log('submit here');\r\n        console.time(timeLable);\r\n        const promiseArr = tickets.map(ticket => {\r\n          const ticketObj = {\r\n            cropYear: ticket.cropYear,\r\n            ticketRefNo: ticket.ticketRefNo,\r\n            ticketHandlerBpRefNo: ticket.ticketHandlerBpRefNo,\r\n            ticketHandlerName: ticket.ticketHandlerName.split('#')[0].trim(),\r\n            ticketHandlerCode: ticket.ticketHandlerCode,\r\n            allocationDate: ticket.allocationDate || '12-05-2021',\r\n            allocatedBy: userName,\r\n            allocatedQuantity: ticket.tonnesSold\r\n          };\r\n          if (allocationType === 'Contract') {\r\n            ticketObj['contractId'] = ticket.contractNumber;\r\n            ticketObj['pricingOption'] = 'Purchase Contract';\r\n            ticketObj['basePrice'] = 0;\r\n          } else if (allocationType === 'Pool') {\r\n            ticketObj['pricingOption'] = ticket.poolpricingoption;\r\n            ticketObj['basePrice'] = ticket.price;\r\n            ticketObj['contractId'] = '';\r\n          } else {\r\n            ticketObj['basePrice'] = ticket.price;\r\n            ticketObj['contractId'] = '';\r\n            ticketObj['pricingOption'] =\r\n              ticket.isSustainable === 'Yes' || ticket.isSustainable == true ? 'Cash sustainable' : 'Cash';\r\n          }\r\n          console.log('GCS payload', ticketObj);\r\n          return ticketObj;\r\n        });\r\n        gcsObj.output.EXTERNAL_GCS_ALLOCATE_TICKETS = promiseArr;\r\n        let gcsBody = getRequestBodyPostMethod(req.body.propertyList.eka_connect_host + '/workflow', gcsObj);\r\n        let response = [];\r\n        let allcatedRes = {\r\n          successCode: 200,\r\n          successMessage: '',\r\n          priceInvalid: false,\r\n          ngrTicketsFilter: ngrTicketsFilter\r\n        };\r\n        let multiFailedRes = {\r\n          errorCode: 406,\r\n          errorMessage: '',\r\n          errorContext: 'Its null',\r\n          errorLocalizedMessage: ''\r\n        };\r\n        let singleFailedRes = {\r\n          errorCode: 406,\r\n          errorMessage: '',\r\n          errorContext: 'Its null',\r\n          errorLocalizedMessage: ''\r\n        };\r\n        getData(gcsBody)\r\n          .then(results => {\r\n            console.timeEnd(timeLable);\r\n            console.log('Data from GCS', results);\r\n            let successCount = 0;\r\n            let failCount = 0;\r\n            let data = JSON.parse(results.data.StatusMessage);\r\n            data.forEach(res => {\r\n              if (res.Status >= 400) {\r\n                failCount++;\r\n              } else if (res.Status == 200) {\r\n                successCount++;\r\n              }\r\n            });\r\n            allcatedRes.successMessage = `${successCount} ticket have been successfully allocated to ${tickets[0].acquirer\r\n              .split('#')[0]\r\n              .trim()}.\r\n         The unallocated portion of any split tickets are available in warehoused inventory.`;\r\n            if (successCount > 0) {\r\n              response.push(allcatedRes);\r\n            \r\n                  console.log('sending notification for ticketHandlerCode :' +`${tickets[0].ticketHandlerCode}`);\r\n                  externalNotification.output.EXT_NOTIFICATION_SUBMIT_ALLOCATED_TICKET = [\r\n                    { bpRefNo: `${tickets[0].ticketHandlerCode}` }\r\n                  ];\r\n                  let notificationBody = getRequestBodyPostMethod(\r\n                    req.body.propertyList.eka_connect_host + '/workflow',\r\n                    externalNotification\r\n                  );\r\n                  getData(notificationBody).then(res =>{console.log('successfully sent notification')}) \r\n\t\t\t\t  .catch(err => console.log('Found Error while sending notification to acquirer ', err));\r\n            }\r\n            if (failCount > 1)\r\n              multiFailedRes.errorMessage = `${failCount} tickets could not be allocated to ${tickets[0].acquirer\r\n                .split('#')[0]\r\n                .trim()}. Please review and select warehouse tickets to try again.`;\r\n            if (failCount == 1)\r\n              singleFailedRes.errorMessage = `${\r\n                tickets[0].ticketRefNo\r\n              } could not be allocated to ${tickets[0].acquirer\r\n                .split('#')[0]\r\n                .trim()}. Please review and select warehouse tickets to try again.`;\r\n            if (failCount > 0) {\r\n              failCount == 1 ? response.push(singleFailedRes) : response.push(multiFailedRes);\r\n            }\r\n            send(200, response);\r\n          })\r\n          .catch(err => {\r\n            send(400, {\r\n              errorCode: err.Status,\r\n              errorMessage:\r\n                'Your allocation is taking longer than normal to process. Please review your tickets in a few minutes.',\r\n              errorContext: 'This is null',\r\n              errorLocalizedMessage:\r\n                'Your allocation is taking longer than normal to process. Please review your tickets in a few minutes.'\r\n            });\r\n            console.error(err);\r\n          });\r\n      }\r\n    }",
    "sys__UUID" : "fc2a444c-4a05-4893-a9c0-7bccf8198d15"
}
