{
  "_id": "transfer_warehoused_ticket_processor",
  "name": "transfer_warehoused_ticket_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "sys__UUID": "8cf38fec-4e20-42a7-8d57-b9abd01ccbab",
  "snippet": "\r\n    const send = (status, message) => res.status(status).send(message);\r\n    const tenant = req.headers['X-TenantID'];\r\n    const payloadData = req.body.bulkPayLoadData;\r\n    let error = false;\r\n    let pro = payloadData[0].product;\r\n    let seas = payloadData[0].cropYear;\r\n    let ticketsArr = [];\r\n\r\n    const getValidatedTickets = body =>\r\n      new Promise(function(resolve, reject) {\r\n        request(\r\n          {\r\n            method: 'GET',\r\n            url:\r\n              req.body.propertyList.eka_connect_host +\r\n              '/data/12325a98-a959-4939-9005-4158d136afcd/a26737b3-a5a9-4fe9-b6f7-29218a3bc45a',\r\n            headers: {\r\n              Authorization: req.headers.authorization,\r\n              'X-TenantID': tenant\r\n            },\r\n            body,\r\n            json: true\r\n          },\r\n          function(err, response, body) {\r\n            if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          }\r\n        );\r\n      });\r\n\r\n    let filterBody = {\r\n      filterData: {\r\n        filter: [\r\n          {\r\n            fieldName: 'ticketRefNo',\r\n            operator: 'in',\r\n            value: ticketsArr\r\n          },\r\n          {\r\n            fieldName: 'isRequestedByEkaCCSystem',\r\n            operator: 'eq',\r\n            value: true\r\n          }\r\n        ]\r\n      }\r\n    };\r\n\r\n    if (payloadData.length === 1) {\r\n      ticketsArr.push(payloadData[0].ticketRefNo);\r\n      getValidatedTickets(filterBody)\r\n        .then(data => {\r\n          console.log('data', data);\r\n          if (data.length == 0) {\r\n            send(200, payloadData);\r\n          } else {\r\n            send(400, 'Request already available for the ticket, please check the request tab.');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          send(500, 'Something went wrong')\r\n        });\r\n    } else {\r\n      for (let i = 0; i < payloadData.length; i++) {\r\n        if (payloadData[i].product != pro || payloadData[i].cropYear != seas) {\r\n          error = true;\r\n        } else {\r\n          ticketsArr.push(payloadData[i].ticketRefNo);\r\n        }\r\n      }\r\n\r\n      if (error) {\r\n        send(400, 'Product, season should be same');\r\n      } else {\r\n        getValidatedTickets(filterBody)\r\n          .then(data => {\r\n            if (data.length == 0) {\r\n              send(200, payloadData);\r\n            } else {\r\n              send(400, 'Request already available for the ticket(s), please check the request tab.');\r\n            }\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n            send(500, 'Something went wrong')\r\n          });\r\n      }\r\n    }\r\n  "
}
