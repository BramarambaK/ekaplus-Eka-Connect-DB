{
  "_id": "volumelisting_processor",
  "name": "volumelisting_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const appId = '12325a98-a959-4939-9005-4158d136afcd';\r\nconst objId = '1f3e680b-f3dd-418a-8fd4-888e38714cc3';\r\nvar taskId = req.body.taskId;\r\nconst tenant = req.headers['x-tenantid'];\r\nconst connectMaster = {\r\n  method: 'GET',\r\n  url: req.body.propertyList.eka_connect_host + `/data/${appId}/${objId}`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n  },\r\n  json: true,\r\n};\r\nfunction get_masterData() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(connectMaster, function (error, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nvar connect = {\r\n  method: 'GET',\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    '/data/12325a98-a959-4939-9005-4158d136afcd/c98119db-1f7c-4802-b72a-6678f1ecc0f3',\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n  },\r\n  body: '',\r\n  json: true,\r\n};\r\nfunction get_connectData() {\r\n  console.log('connect', JSON.stringify(connect));\r\n  return new Promise(function (resolve, reject) {\r\n    request(connect, function (error, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\nconst userInfo =\r\n  req.body.propertyList.eka_connect_host + '/api/getbpuserinfo';\r\nconst getCollectionMapper = (config) =>\r\n  new Promise((resolve, reject) => {\r\n    const r = {\r\n      method: 'POST',\r\n      url: `${req.body.propertyList.eka_connect_host}/collectionmapper/${config.appId}/${config.objectId}/fetchCollectionRecords`,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        ttl: 600,\r\n        'X-TenantID': config.tenant,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: {\r\n        collectionName: config.collectionName,\r\n      },\r\n      json: true,\r\n    };\r\n    request(r, (err, response, body) => {\r\n      if (\r\n        response &&\r\n        response.statusCode >= 200 &&\r\n        response.statusCode <= 299\r\n      ) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\nconst subGroupMaster = {\r\n  appId: appId,\r\n  objectId:\r\n    'd59b8c10-8c94-4b87-a430-f6fd69888a37' /* not at all relevant object id */,\r\n  collectionName: 'BP Sub Group Setup',\r\n  tenant: tenant,\r\n};\r\nconst subGroupCode = (userDetails) =>\r\n  new Promise((resolve, reject) =>\r\n    getCollectionMapper(subGroupMaster)\r\n      .then((result) => {\r\n        if (result && Array.isArray(result)) {\r\n          const config = result.find(\r\n            (i) =>\r\n              i.Workflow == taskId && i.UserType == userDetails.customerType\r\n          );\r\n\r\n          if (config) {\r\n            resolve(config.SubGroupCode);\r\n          } else {\r\n            console.log(\r\n              `Sub group configuration not found for ${taskId} and ${userDetails.customerType}. Defaulting to not applicable.`\r\n            );\r\n            resolve(null);\r\n          }\r\n        } else {\r\n          reject('Sub group configuration is missing');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      })\r\n  );\r\nconst getData = (url, getDataBody) =>\r\n  new Promise(function (resolve, reject) {\r\n    console.log('url', url);\r\n    console.log('body', JSON.stringify(getDataBody));\r\n    request(\r\n      {\r\n        method: 'GET',\r\n        url,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'X-TenantID': tenant,\r\n        },\r\n        body: getDataBody,\r\n        json: true,\r\n      },\r\n      function (err, response, body) {\r\n        if (\r\n          response &&\r\n          response.statusCode >= 200 &&\r\n          response.statusCode <= 299\r\n        ) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      }\r\n    );\r\n  });\r\nconst bpList = new Promise((resolve, reject) => {\r\n  getData(userInfo, null)\r\n    .then((t) => {\r\n      const userDetails = t.data;\r\n      if (userDetails.BusinessPartyDetails) {\r\n        subGroupCode(userDetails)\r\n          .then((code) => {\r\n            let bpResolver;\r\n            if (code) {\r\n              // bpResolver = (masterdata) =>\r\n               bpResolver = userDetails.BusinessPartyDetails\r\n                // .filter((bp) =>masterdata.map(i=>i.bpRefNo).includes(bp.refNo))\r\n                .reduce((acc, bp) => {\r\n                  if (bp.subGroup && bp.subGroup.length > 0) {\r\n                    const subGroup = bp.subGroup.filter(\r\n                      (i) =>\r\n                        i.code && i.code.toLowerCase() == code.toLowerCase()\r\n                    );\r\n                    if (subGroup && subGroup.length > 0) {\r\n                      for(let n in subGroup){\r\n                        acc.push({\r\n                          bpRefNo: `${bp.refNo}`, // @#@ ${bp.name} @#@ ${subGroup.name} @#@ ${subGroup.refNo}`,\r\n                          bpExternalCode: `${subGroup[n].refNo}`, //``${bp.name} - ${bp.refNo} - ${subGroup.name}`,\r\n                        });\r\n                      }\r\n                    }\r\n                  }\r\n                  return acc;\r\n                }, []);\r\n            } else {\r\n              // bpResolver = (masterdata) =>\r\n                bpResolver = userDetails.BusinessPartyDetails\r\n                // .filter((bp) =>\r\n                //   masterdata.includes(bp.refNo)\r\n                // )\r\n                .map((bp) => ({\r\n                  bpRefNo: `${bp.refNo}`, // @#@ ${bp.name}`,\r\n                }));\r\n            }\r\n            // console.log(bpResolver(''));\r\n            resolve(bpResolver);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      } else {\r\n        reject('BusinessPartyDetails missing in user details.');\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      reject(err);\r\n    });\r\n});\r\n\r\nbpList\r\n  .then((bpListResponse) => {\r\n    get_masterData()\r\n      .then((data) => {\r\n        // bpListResponse = bpListResponse(data);\r\n        connect.body = {\r\n          filterData: {\r\n            filter: [\r\n              {\r\n                fieldName: 'bpRefNo',\r\n                operator: 'in',\r\n                value: bpListResponse.map((e) => e.bpRefNo),\r\n              },\r\n            ],\r\n          },\r\n        };\r\n        if (bpListResponse[0].bpExternalCode) {\r\n          connect.body.filterData.filter.push({\r\n            fieldName: 'bpExternalCode',\r\n            operator: 'inCaseInsensitive',\r\n            value: bpListResponse.map((e) => e.bpExternalCode),\r\n          });\r\n        }\r\n        get_connectData()\r\n          .then((connectData) => {\r\n            connectData\r\n              .map((i) => {\r\n                const masterData = data.find(\r\n                  (d) =>\r\n                    d.bpRefNo == i.bpRefNo &&\r\n                    d.bpExternalCode == i.bpExternalCode\r\n                );\r\n                if (masterData) {\r\n                  i.active =\r\n                    masterData.currentSeason == i.season\r\n                      ? 'Y'\r\n                      : masterData.previousSeason == i.season\r\n                      ? 'N'\r\n                      : null;\r\n                }\r\n                return i;\r\n              });\r\n            res.status(200).send(connectData.filter((i) => i.active != null));\r\n          })\r\n          .catch((err) => {\r\n            var connectData = {};\r\n            res.status(200).send(connectData.filter((i) => i.active != null));\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        var data = {};\r\n        res.status(200).send(data);\r\n      });\r\n  })\r\n  .catch(function (err) {\r\n    console.log(err);\r\n    return res.status(500).send(err);\r\n  });",
  "sys__UUID": "be4b175d-dd04-4347-b039-f26bcc724642"
}
