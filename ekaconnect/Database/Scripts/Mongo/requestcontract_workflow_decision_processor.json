{
  "_id": "requestcontract_workflow_decision_processor",
  "name": "requestcontract_workflow_decision_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const userInfo = req.body.propertyList.eka_connect_host + '\/api\/getbpuserinfo';\r\n    const appId = req.body.appId;\r\n    const tenant = req.headers['X-TenantID'];\r\n    const taskId = req.body.taskId;\r\n    var requestedBy;\r\n    \/\/ const _ = require('lodash');\r\n\r\n    const subGroupMaster = {\r\n      appId: appId,\r\n      objectId: 'd59b8c10-8c94-4b87-a430-f6fd69888a37' \/* not at all relevant object id *\/,\r\n      body: { collectionName: 'BP Sub Group Setup' },\r\n      tenant: tenant\r\n    };\r\n\r\n    const objSorter = prop => {\r\n      return function(obj1, obj2) {\r\n        if (obj1[prop] < obj2[prop]) {\r\n          return -1;\r\n        }\r\n        if (obj1[prop] > obj2[prop]) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      };\r\n    };\r\n\r\n    const getData = url =>\r\n      new Promise(function(resolve, reject) {\r\n        request(\r\n          {\r\n            method: 'GET',\r\n            url,\r\n            headers: {\r\n              Authorization: req.headers.authorization\r\n            },\r\n            json: true\r\n          },\r\n          function(err, response, body) {\r\n            if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          }\r\n        );\r\n      });\r\n\r\n    const getCollectionMapper = config =>\r\n      new Promise((resolve, reject) => {\r\n        const r = {\r\n          method: 'POST',\r\n          url: `${req.body.propertyList.eka_connect_host}\/collectionmapper\/${config.appId}\/${\r\n            config.objectId\r\n          }\/fetchCollectionRecords`,\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            ttl: 600,\r\n            'X-TenantID': config.tenant,\r\n            'Content-Type': 'application\/json'\r\n          },\r\n          body: config.body,\r\n          json: true\r\n        };\r\n        request(r, (err, response, body) => {\r\n          if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n\r\n    const getSubGroup = (list, format, code) =>\r\n      list\r\n        .reduce((acc, bp) => {\r\n          let groups;\r\n\r\n          if (code) {\r\n            groups = (bp.subGroup || [])\r\n              .filter(i => i.code && i.code.toLowerCase() == code.toLowerCase())\r\n              .map(item => ({\r\n                key: item.refNo,\r\n                value: bp.name\r\n              }));\r\n          } else {\r\n            groups = [\r\n              {\r\n                key: bp.refNo,\r\n                value: bp.name\r\n              }\r\n            ];\r\n          }\r\n\r\n          acc.push(...groups);\r\n          return acc;\r\n        }, [])\r\n        .sort(objSorter('value'));\r\n\r\n    const subGroupCode = userDetails =>\r\n      new Promise((resolve, reject) =>\r\n        getCollectionMapper(subGroupMaster)\r\n          .then(result => {\r\n            if (result && Array.isArray(result)) {\r\n              const config = result.find(\r\n                i =>\r\n                  i.Workflow == taskId &&\r\n                  i.UserType == userDetails.customerType &&\r\n                  i.SubGroupApplicable.toLowerCase() == 'y'\r\n              );\r\n\r\n              if (config) {\r\n                resolve(config.SubGroupCode);\r\n              } else {\r\n                console.log(\r\n                  `Sub group configuration not found for ${taskId} and ${\r\n                    userDetails.customerType\r\n                  }. Defaulting to not applicable.`\r\n                );\r\n                resolve(null);\r\n              }\r\n            } else {\r\n              reject('Sub group configuration is missing');\r\n            }\r\n          })\r\n          .catch(err => {\r\n            reject(err);\r\n          })\r\n      );\r\n\r\n    const bpList = new Promise((resolve, reject) => {\r\n      getData(userInfo)\r\n        .then(t => {\r\n          const userDetails = t.data;\r\n          requestedBy = t.data.firstName + ' ' + t.data.lastName;\r\n          if (userDetails.BusinessPartyDetails) {\r\n            subGroupCode(userDetails)\r\n              .then(code => {\r\n                resolve(\r\n                  getSubGroup(userDetails.BusinessPartyDetails, userDetails.customerType === 'Demand Customer', code)\r\n                );\r\n              })\r\n              .catch(err => {\r\n                reject(err);\r\n              });\r\n          } else {\r\n            reject('BusinessPartyDetails missing in user details.');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          reject(err);\r\n        });\r\n    });\r\n\r\n    const sendError = (message, context) =>\r\n      res.status(400).send({\r\n        errorCode: '004',\r\n        errorMessage: message,\r\n        errorContext: null,\r\n        errorLocalizedMessage: message,\r\n        errors: [\r\n          {\r\n            errorCode: '004',\r\n            errorMessage: message,\r\n            errorContext: context,\r\n            errorLocalizedMessage: message,\r\n            errors: null\r\n          }\r\n        ]\r\n      });\r\n\r\n    var data = { ...req.body };\r\n\r\n    delete data.processorDetails;\r\n    delete data.propertyList;\r\n\r\n    var output = {};\r\n    var curr_date = new Date();\r\n    var date = curr_date.getFullYear() + '-' + ('0' + (curr_date.getMonth() + 1)).slice(-2) + '-' + curr_date.getDate();\r\n    var time =\r\n      (curr_date.getHours() < 0 ? '00' : ('0' + curr_date.getHours()).slice(-2)) +\r\n      ':' +\r\n      (curr_date.getMinutes() < 0 ? '00' : ('0' + curr_date.getMinutes()).slice(-2)) +\r\n      ':' +\r\n      (curr_date.getSeconds() < 0 ? '00' : ('0' + curr_date.getSeconds()).slice(-2));\r\n    var dateTime = date + ' ' + time;\r\n\r\n    function getValue(str, pos) {\r\n      var get = str.match(\/\\S+\\S\/g);\r\n      return get[pos - 1];\r\n    }\r\n\r\n    data.shipmentPeriodFrom = data.shipmentPeriodFrom;\r\n    data.shipmentPeriodTo = data.shipmentPeriodTo;\r\n    var multiGrade;\r\n    var freightDetails;\r\n    data.INCOTerm = data.INCOTerm != undefined && data.INCOTerm.toLowerCase() == 'ex-farm' ? 'Ex-Farm' : data.INCOTerm;\r\n    if (data.isMultiGrade == true || (typeof data.isMultiGrade == 'string' && data.isMultiGrade.toLowerCase() == 'y')) {\r\n      if (data.multiGradeDifferentialDetails) {\r\n        multiGrade = JSON.parse(data.multiGradeDifferentialDetails.replace(\/'\/g, '\"'));\r\n        let baseData = {\r\n          qualityName: data.quality,\r\n          multiGradeDifferential: 'BASE'\r\n        };\r\n\r\n        let length = multiGrade.multiGradeDifferentialDetail.length;\r\n        let position = +(length \/ 2).toFixed(0);\r\n\r\n        multiGrade.multiGradeDifferentialDetail.splice(position, 0, baseData);\r\n        data.multiGradeDifferentialDetails = JSON.stringify(multiGrade);\r\n      }\r\n      multiGrade = true;\r\n    } else {\r\n      multiGrade = false;\r\n    }\r\n    if (\r\n      data.INCOTerm != undefined &&\r\n      (data.INCOTerm.toLowerCase() == 'ex-farm' || data.INCOTerm.toLowerCase() == 'db')\r\n    ) {\r\n      freightDetails = true;\r\n    } else {\r\n      freightDetails = false;\r\n    }\r\n\r\n    output = {\r\n      ...data,\r\n      userType: '',\r\n      submitrequestcontractcardview: '',\r\n      currentDate: dateTime,\r\n      isMultiGrade: multiGrade,\r\n      isFreightDetails: freightDetails,\r\n      brokerReferenceNo: data.brokerReferenceNo,\r\n      counterPartyName: data.counterPartyName\r\n    };\r\n\r\n    var mandatoryFields = [\r\n      data.counterPartyName,\r\n      data.product,\r\n      data.quality,\r\n      data.cropYear,\r\n      data.contractPrice,\r\n      data.paymentTerms,\r\n      data.INCOTerm,\r\n      data.locationGroupType,\r\n      data.shipmentPeriodFrom,\r\n      data.shipmentPeriodTo,\r\n      data.issustainable,\r\n      data.markettype,\r\n      data.corporate\r\n    ];\r\n\r\n    var fieldName = [\r\n      'NGR',\r\n      'Product',\r\n      'Quality',\r\n      'Cropyear',\r\n      'Price',\r\n      'Payment Term',\r\n      'INCO term',\r\n      'Location Group Type',\r\n      'Shipment From',\r\n      'Shipment To',\r\n      'Is Sustainable',\r\n      'Market Type',\r\n      'Corporate'\r\n    ];\r\n    var fieldsPresent = true;\r\n    \/\/ var generalErrorMessage = 'Provide all the mandatory field values';\r\n    var mulrigradeErrorMessage = 'Provide multigrade values';\r\n    var itemQuantity = req.body.propertyList.contractItemQuantity;\r\n    const send = (status, message) => res.status(status).send(message);\r\n\r\n    if (data.locationGroupType.toLowerCase().includes('specific')) {\r\n      if (\r\n        data.dischargeLocationCity == '' ||\r\n        data.dischargeLocationCity == undefined ||\r\n        data.dischargeLocationCity == null\r\n      ) {\r\n        res.status(400).send('Please provide value of Delivery Location City');\r\n      }\r\n    }\r\n    mandatoryFields.map((fields, index) => {\r\n      if ((fields == '' || fields == undefined || fields == null) && fieldsPresent) {\r\n        res.status(400).send('Please provide value of ' + fieldName[index]);\r\n        fieldsPresent = false;\r\n      }\r\n    });\r\n\r\n    const ngrNameFromUrl = data.counterPartyName;\r\n    bpList\r\n      .then(bp => {\r\n        const findNgr = bp.find(i => ngrNameFromUrl == i.value);\r\n        if (findNgr) {\r\n          output.BPRefNo = findNgr.key;\r\n          if (fieldsPresent == true) {\r\n            if (\r\n              (data.isMultiGrade == true ||\r\n                (typeof data.isMultiGrade == 'string' && data.isMultiGrade.toLowerCase() == 'y')) &&\r\n              (data.multiGradeDifferentialDetails == '' || data.multiGradeDifferentialDetails == undefined)\r\n            ) {\r\n              res.status(400).send(mulrigradeErrorMessage);\r\n            } else {\r\n              if(data.contractItemQuantity){\r\n              if (\r\n                parseFloat(data.contractItemQuantity) >= parseFloat(itemQuantity.min) &&\r\n                parseFloat(data.contractItemQuantity) <= parseFloat(itemQuantity.max)\r\n              ) {\r\n                \/\/ getProgramName(output)\r\n                \/\/   .then(name => {\r\n                res.status(200).send({\r\n                  ...output,\r\n                  requestedBy: requestedBy\r\n                });\r\n                \/\/ })\r\n                \/\/ .catch(err => {\r\n                \/\/   console.error(err);\r\n                \/\/   res.status(400).send('Contract cannot be created, please contact system admin');\r\n                \/\/ });\r\n              } else {\r\n                return sendError(\r\n                  ' Entered item quantity is not in range ' + itemQuantity.min + ' and ' + itemQuantity.max,\r\n                  '{requestcontractdetailsform:contractItemQuantity}'\r\n                );\r\n                \/\/ res\r\n                \/\/   .status(400)\r\n                \/\/   .send(' Entered item quantity is not in range ' + itemQuantity.min + ' and ' + itemQuantity.max);\r\n              }\r\n            } else{\r\n              return sendError(\r\n                ' Provide a value of Quantity between ' + itemQuantity.min + ' and ' + itemQuantity.max,\r\n                '{requestcontractdetailsform:contractItemQuantity}'\r\n              );\r\n            }\r\n          }\r\n          }\r\n        } else {\r\n          res.status(400).send('Please select from NGR dropdown field');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        var data = {};\r\n        console.error(err);\r\n        res.status(400).send('Failed to fetch NGR name');\r\n        handleErrorResponse(req, '', err, '')\r\n      });",
  "sys__UUID": "b98e7297-62e6-4c0f-b237-05e9cc2a71f1"
}
