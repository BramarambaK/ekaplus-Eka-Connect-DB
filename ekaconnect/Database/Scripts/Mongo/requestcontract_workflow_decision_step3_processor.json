{
  "_id": "requestcontract_workflow_decision_step3_processor",
  "name": "requestcontract_workflow_decision_step3_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": " var data = req.body.requestcontractfreightdetails;\r\n    let previousData = req.body.data;\r\n    var output = {};\r\n    output = {\r\n      ...req.body.data,\r\n      freightOrganise: data.freightOrganise,\r\n      fullname: data.fullname ? data.fullname : '',\r\n      phonenumber: data.phonenumber ? data.phonenumber : NaN,\r\n      email: data.email ? data.email : '',\r\n      pickuplocation: data.pickuplocation ? data.pickuplocation : [],\r\n      INCOTerm: data.freightOrganise.toLowerCase().includes('cargill') ? 'Ex-Farm' : 'DB'\r\n    };\r\n\r\n    var freightErrorData = req.body;\r\n    var isFreightError = true;\r\n    var emailRegExp = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n    const send = (status, message) => {\r\n      console.log('Response ', message);\r\n      return res.status(status).send(message);\r\n    };\r\n\r\n    const sendError = (message, context) =>\r\n      res.status(400).send({\r\n        errorCode: '004',\r\n        errorMessage: message,\r\n        errorContext: null,\r\n        errorLocalizedMessage: message,\r\n        errors: [\r\n          {\r\n            errorCode: '004',\r\n            errorMessage: message,\r\n            errorContext: context,\r\n            errorLocalizedMessage: message,\r\n            errors: null\r\n          }\r\n        ]\r\n      });\r\n\r\n    const equal = (i, j) =>\r\n      i.longandlat == j.longandlat && i.storagetype == j.storagetype && i.deliveryinstruction == j.deliveryinstruction;\r\n\r\n    const invalidMessages = [\r\n      {\r\n        key: 'longandlat',\r\n        message: () => `Please enter latitude and longitude`\r\n      },\r\n      {\r\n        key: 'storagetype',\r\n        message: e => `Please select storage type`\r\n      },\r\n      {\r\n        key: 'deliveryinstruction',\r\n        message: () => `Please enter delivery instructions`\r\n      }\r\n    ];\r\n\r\n    const duplicateMessage = 'Duplication of data are identified. Please review your entry inputs';\r\n\r\n    const sendDuplicate = d =>\r\n      send(400, {\r\n        errorCode: '004',\r\n        errorMessage: duplicateMessage,\r\n        errorContext: null,\r\n        errorLocalizedMessage: duplicateMessage,\r\n        errors: [\r\n          {\r\n            errorCode: '004',\r\n            errorMessage: duplicateMessage,\r\n            errorContext: '{formarray:pickuplocation}',\r\n            errorLocalizedMessage: duplicateMessage,\r\n            errors: d.map(i => ({\r\n              errorCode: '004',\r\n              errorMessage: duplicateMessage,\r\n              errorContext: `{formarray:${i}}`,\r\n              errorLocalizedMessage: duplicateMessage,\r\n              errors: null\r\n            }))\r\n          }\r\n        ]\r\n      });\r\n\r\n    const formElementName = 'pickuplocation';\r\n\r\n    const findEmptyField = data => (field, callback) => {\r\n      const e = data\r\n        .map((i, index) => ({ ...i, _groupNo: index }))\r\n        .filter(i => i[field] === null || i[field] === '' || i[field] === undefined);\r\n      if (e && e.length > 0) {\r\n        const msg = callback(e);\r\n        return {\r\n          errorCode: '004',\r\n          errorMessage: msg,\r\n          errorContext: null,\r\n          errorLocalizedMessage: msg,\r\n          errors: [\r\n            {\r\n              errorCode: '004',\r\n              errorMessage: msg,\r\n              errorContext: `{formarray:${formElementName}}`,\r\n              errorLocalizedMessage: msg,\r\n              errors: [\r\n                ...e.reduce((acc, curr) => {\r\n                  acc.add(curr._groupNo);\r\n                  return acc;\r\n                }, new Set())\r\n              ].map(i => ({\r\n                errorCode: '004',\r\n                errorMessage: msg,\r\n                errorContext: `{formarray:${i}}`,\r\n                errorLocalizedMessage: msg,\r\n                errors: [\r\n                  {\r\n                    errorCode: '004',\r\n                    errorMessage: msg,\r\n                    errorContext: `{field:${field}}`,\r\n                    errorLocalizedMessage: msg,\r\n                    errors: null\r\n                  }\r\n                ]\r\n              }))\r\n            }\r\n          ]\r\n        };\r\n      }\r\n      return null;\r\n    };\r\n\r\n    function validateForm() {\r\n      var field = data;\r\n      // var mandatoryFields = [field.fullname, field.phonenumber, field.email];\r\n      // for (var i = 0; i < mandatoryFields.length ; i++) {\r\n      if (field.fullname === '' || field.fullname === undefined || field.fullname === null) {\r\n        return sendError(' Please enter your full name', '{requestcontractfreightdetails:fullname}');\r\n      }\r\n      if (field.phonenumber === '' || field.phonenumber === undefined || field.phonenumber === null) {\r\n        return sendError('Please enter phone number', '{requestcontractfreightdetails:phonenumber}');\r\n      }\r\n      // isFreightError = false;\r\n      // }\r\n      if (data.freightOrganise.toLowerCase().includes('cargill')) {\r\n        if (data.pickuplocation.length <= 10) {\r\n          const _findEmptyField = findEmptyField(data.pickuplocation);\r\n          for (let i of invalidMessages) {\r\n            const error = _findEmptyField(i.key, i.message);\r\n            if (error) {\r\n              return send(400, error);\r\n            }\r\n          }\r\n\r\n          const duplicate = [\r\n            ...data.pickuplocation\r\n              .filter((i, index, arr) => arr.findIndex(j => equal(i, j)) != index)\r\n              .reduce((acc, curr) => {\r\n                acc.add(curr._groupNo);\r\n                return acc;\r\n              }, new Set())\r\n          ];\r\n\r\n          if (duplicate && duplicate.length > 0) {\r\n            sendDuplicate(duplicate);\r\n          }\r\n        } else {\r\n          send(400, 'Maximum of 10 records are allowed');\r\n        }\r\n      }\r\n      // }\r\n      // data = output;\r\n      res.status(200).send({ ...previousData, ...output });\r\n    }\r\n\r\n    if (data.freightOrganise == null || data.freightOrganise == undefined || data.freightOrganise == '') {\r\n      res.status(400).send('Please select Who would you like to organise freight and logistics?');\r\n    } else if (data.freightOrganise.toLowerCase().includes('i will organise my own freight')) {\r\n      res.status(200).send({ ...previousData, ...output });\r\n    } else if (emailRegExp.test(data.email)) {\r\n      validateForm();\r\n    } else {\r\n      return sendError('Please enter valid email address.', '{requestcontractfreightdetails:email}');\r\n    } ",
  "sys__UUID": "d2013998-5c38-476d-919c-f6ab20877268"
}
