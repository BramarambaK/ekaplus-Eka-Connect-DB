{
  "_id": "exchangedeliverylist_processor_Warrant",
  "name": "exchangedeliverylist_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "ada131db-5171-4b9c-b6d6-caae0c6cd2f5",
  "snippet": "\r\n    var connectUrl = req.body.propertyList.eka_connect_host + '/workflow/data';\r\n    var connectBody = {\r\n      appId: req.body.appId,\r\n      workFlowTask: 'dummystocklist'\r\n    };\r\n    var edmarkbody = {\r\n      appId: req.body.appId,\r\n      workFlowTask: 'dummyexchangedeliverylist'\r\n    };\r\n    var connect = {\r\n      method: 'POST',\r\n      body: connectBody,\r\n      url: connectUrl,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    var edmark = {\r\n      method: 'POST',\r\n      body: edmarkbody,\r\n      url: connectUrl,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function get_connect() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(connect, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          }\r\n          else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_edmark() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(edmark, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          }\r\n          else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var contractUrl = req.body.propertyList.eka_connect_host + '/workflow/data';\r\n    var contractBody = {\r\n      appId: req.body.appId,\r\n      workFlowTask: 'dummycontractlist'\r\n    };\r\n    var contract = {\r\n      method: 'POST',\r\n      body: contractBody,\r\n      url: contractUrl,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function get_contract() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(contract, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          }\r\n          else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var invoice = {\r\n      method: 'POST',\r\n      url: req.body.propertyList.eka_connect_host +\r\n        '/collectionmapper/' +\r\n        req.body.appId +\r\n        '/00b0627c-e0dd-4530-a765-116ab9748487/fetchCollectionRecords',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        'X-Remote-User': 'ekaApp'\r\n      },\r\n      json: true\r\n    };\r\n    function get_invoice(invoiceBody) {\r\n      invoice.body = {};\r\n      invoice.body = invoiceBody;\r\n      return new Promise(function (resolve, reject) {\r\n        request(invoice, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          }\r\n          else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    get_connect().then(function (result) {\r\n      let connect = result.data;\r\n      var connectCopy = {};\r\n      for (var i = 0; i < connect.length; i++) {\r\n        if (connect[i]['edmarkrefno']) {\r\n          if (connectCopy[connect[i]['edmarkrefno']]) {\r\n            connectCopy[connect[i]['edmarkrefno']] =\r\n              parseFloat(connectCopy[connect[i]['edmarkrefno']]) + parseFloat(connect[i]['actual_quantity']);\r\n          } else {\r\n            connectCopy[connect[i]['edmarkrefno']] = parseFloat(connect[i]['actual_quantity']);\r\n          }\r\n        }\r\n      }\r\n      connect.forEach((element, i) => {\r\n        connect[i]['quantity'] = '';\r\n        connect[i]['quantity'] = connectCopy[element['edmarkrefno']];\r\n        connect[i]['storage_location'] = connect[i]['shed'];\r\n        connect[i]['qty_unit'] = connect[i]['Quantity_UOM'];\r\n      });\r\n      connect = connect.reduce((unique, o) => {\r\n        if (o.edmarkrefno && !unique.some(obj => obj.edmarkrefno === o.edmarkrefno)) {\r\n          unique.push(o);\r\n        }\r\n        return unique;\r\n      }, []);\r\n      get_edmark().then(function (result2) {\r\n        get_contract().then(function (result3) {\r\n          var contractsData = result3.data;\r\n          let edmarkrec = result2.data;\r\n          var outputData = connect;\r\n          var gmrlistArr = [];\r\n          for (var i = 0; i < connect.length; i++) {\r\n            if (connect[i]['sys__state']) {\r\n              delete connect[i]['sys__state'];\r\n            }\r\n            if (connect[i] && connect[i]['Contract_Ref_No'] && !connect[i]['Contract_Ref_No'].includes('SC')) {\r\n              delete connect[i]['Contract_Ref_No'];\r\n              delete outputData[i]['Contract_Ref_No'];\r\n            }\r\n            for (var j = 0; j < edmarkrec.length; j++) {\r\n              if (edmarkrec[j]['sys__state']) {\r\n                delete edmarkrec[j]['sys__state'];\r\n              }\r\n              delete edmarkrec[j]['quantity'];\r\n              if (\r\n                edmarkrec[j]['edmarkrefno'] &&\r\n                connect[i]['edmarkrefno'] &&\r\n                edmarkrec[j]['edmarkrefno'] == connect[i]['edmarkrefno']\r\n              ) {\r\n                outputData[i] = { ...connect[i], ...edmarkrec[j] };\r\n              }\r\n            }\r\n          }\r\n          for (var i = 0; i < outputData.length; i++) {\r\n            for (var k = 0; k < contractsData.length; k++) {\r\n              if (\r\n                outputData[i]['edmarkrefno'] &&\r\n                contractsData[k]['edmarkrefno'] &&\r\n                contractsData[k]['contract_ref_no'] &&\r\n                outputData[i]['edmarkrefno'] == contractsData[k]['edmarkrefno'] &&\r\n                contractsData[k]['contract_ref_no'].includes('SC')\r\n              ) {\r\n                var contract = {\r\n                  Contract_Ref_No: contractsData[k]['contract_ref_no'],\r\n                  GMR_Ref_No: contractsData[k]['GMR_Ref_No'],\r\n                  contract_creation_status: contractsData[k]['contract_status'],\r\n                  contract_creation_date: contractsData[k]['contract_creation_date'],\r\n                  Profit_Center: contractsData[k]['Profit_Center'],\r\n                  Strategy: contractsData[k]['Strategy'],\r\n                  CP_Name: contractsData[k]['CP_Name'],\r\n                  GMR_creation_date: contractsData[k]['GMR_creation_date'],\r\n                  title_transfer_status: contractsData[k]['title_transfer_status']\r\n                };\r\n                outputData[i] = { ...outputData[i], ...contract };\r\n              }\r\n            }\r\n          }\r\n          for (var i = 0; i < outputData.length; i++) {\r\n            if (outputData[i]['GMR_Ref_No']) {\r\n              gmrlistArr.push(outputData[i]['GMR_Ref_No']);\r\n            }\r\n          }\r\n          var invoiceBody = {\r\n            criteria: {\r\n              filter: [\r\n                {\r\n                  fieldName: 'GMR Ref No',\r\n                  value: gmrlistArr.toString(),\r\n                  operator: 'in'\r\n                }\r\n              ]\r\n            },\r\n            collectionName: 'Invoiceable Item Domain'\r\n          };\r\n          get_invoice(invoiceBody).then(function (result4) {\r\n            var invoiceList = result4;\r\n            for (var i = 0; i < outputData.length; i++) {\r\n              for (var j = 0; j < invoiceList.length; j++) {\r\n                if (\r\n                  outputData[i]['GMR_Ref_No'] &&\r\n                  invoiceList[j]['GMR Ref No'] &&\r\n                  outputData[i]['GMR_Ref_No'] == invoiceList[j]['GMR Ref No']\r\n                ) {\r\n                  outputData[i]['invoice_Ref_No'] = '';\r\n                  outputData[i]['invoice_Ref_No'] = invoiceList[j]['Invoice Ref No'];\r\n                }\r\n              }\r\n            }\r\n            res.status(200).send(outputData);\r\n          });\r\n        });\r\n      });\r\n    });\r\n ",
  "sys__UUID": "0ff7731f-158b-4a60-9cf6-0d3e25808f28",
  "sys__createdBy": "ekauser@ekaplus.com"
}
