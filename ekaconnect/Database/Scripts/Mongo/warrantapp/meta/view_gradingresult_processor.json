{
  "_id": "view_gradingresult_processor",
  "name": "view_gradingresult",
  "type": "processor",
  "refType": "app",
  "refTypeId": "ada131db-5171-4b9c-b6d6-caae0c6cd2f5",
  "snippet": "\r\n    var moment = require('moment');\r\n    console.log('Selected Data:' + req.body.selectedData);\r\n    var filterarr = [];\r\n    var extstockrefno = req.body.selectedData.ext_stock_ref_no;\r\n    filterarr.push({\r\n      fieldName: 'ExternalStockRefNo',\r\n      value: extstockrefno,\r\n      operator: 'eq'\r\n    });\r\n    var collectionbody = {};\r\n    collectionbody = { filter: filterarr };\r\n    var platformRobusta = {\r\n      method: 'GET',\r\n      url:\r\n        req.body.propertyList.platform_url +\r\n        '/collection/v1?collectionName=' +\r\n        req.body.propertyList.property_collection_name_warrant[0],\r\n      body: collectionbody,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      json: true\r\n    };\r\n    function get_collection_Robusta() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(platformRobusta, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var platformArabica = {\r\n      method: 'GET',\r\n      url:\r\n        req.body.propertyList.platform_url +\r\n        '/collection/v1?collectionName=' +\r\n        req.body.propertyList.property_collection_name_warrant[1],\r\n      body: collectionbody,\r\n\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      json: true\r\n    };\r\n    function get_collection_Arabica() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(platformArabica, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function findUnique(attributes) {\r\n      return attributes.reduce((unique, o) => {\r\n        if (!unique.some(obj => obj.key === o.key)) {\r\n          unique.push(o);\r\n        }\r\n        return unique;\r\n      }, []);\r\n    }\r\n    function get_collection(b = {}, collectionName = '', filter = '') {\r\n      let platform = {\r\n        method: 'GET',\r\n        url: req.body.propertyList.platform_url + '/collection/v1?collectionName=',\r\n        body: {},\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        json: true\r\n      };\r\n      platform.url = platform.url + collectionName;\r\n      platform.body = b;\r\n      b.filter[0].fieldName = filter;\r\n      return new Promise(function(resolve, reject) {\r\n        request(platform, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function replaceString(value) {\r\n      return value\r\n        .replace(/(_|-)/g, ' ')\r\n        .trim()\r\n        .replace(/\\w\\S*/g, function(str) {\r\n          return str.charAt(0).toUpperCase() + str.substr(1);\r\n        })\r\n        .replace(/([a-z])([A-Z])/g, '$1 $2')\r\n        .replace(/([A-Z])([A-Z][a-z])/g, '$1 $2');\r\n    }\r\n    if (req.body.selectedData.exchangeDeliveryStatus === 'Received from Exchange') {\r\n      Promise.all([\r\n        get_collection(collectionbody, 'Robusta Tender Invoice', 'EXTERNAL_STOCK_REFNO'),\r\n        get_collection(collectionbody, 'Arabica Tender Notification', 'EXTERNAL_STOCK_REFNO')\r\n      ]).then(function(result) {\r\n        var RobustaData = result[0].data;\r\n        var ArabicaData = result[1].data;\r\n        var collectionData = RobustaData.concat(ArabicaData);\r\n        if (collectionData.length == 0) {\r\n          var selected = req.body.selectedData;\r\n          var maindetails = [];\r\n          var Grading_Date = moment\r\n            .utc(selected.Grading_Date)\r\n            .utcOffset('+0530')\r\n            .format('DD-MMM-YYYY');\r\n          maindetails = [\r\n            {\r\n              key: 'Product',\r\n              value: selected.product\r\n            },\r\n            { key: 'Packing Size', value: selected.Packing_Size },\r\n            { key: 'Qty', value: selected.actual_quantity },\r\n            { key: 'Grading Date', value: Grading_Date },\r\n            { key: 'Certification Status', value: selected.certification_status },\r\n            { key: 'Exchange ID No', value: selected.Exchange_ID_No },\r\n            { key: 'Quality', value: selected.quality },\r\n            { key: 'No. of units', value: selected.no_of_units },\r\n            { key: 'Warehouse', value: selected.warehouse },\r\n            { key: 'Grading Status', value: selected.grading_status },\r\n            { key: 'ICO Marks', value: selected.ico_mark },\r\n            { key: 'LOB No', value: selected.LOB_No }\r\n          ];\r\n          var data = {};\r\n          res.status(200).send({ maindetails });\r\n          // var message = 'Grading Results Information not available';\r\n          // res.status(500).send(message);\r\n        } else {\r\n          var selected = req.body.selectedData;\r\n          var maindetails = [];\r\n          var Grading_Date = moment\r\n            .utc(selected.Grading_Date)\r\n            .utcOffset('+0530')\r\n            .format('DD-MMM-YYYY');\r\n          maindetails = [\r\n            {\r\n              key: 'Product',\r\n              value: selected.product\r\n            },\r\n            { key: 'Packing Size', value: selected.Packing_Size },\r\n            { key: 'Qty', value: selected.actual_quantity },\r\n            { key: 'Grading Date', value: Grading_Date },\r\n            { key: 'Certification Status', value: selected.certification_status },\r\n            { key: 'Exchange ID No', value: selected.Exchange_ID_No },\r\n            { key: 'Quality', value: selected.quality },\r\n            { key: 'No. of units', value: selected.no_of_units },\r\n            { key: 'Warehouse', value: selected.warehouse },\r\n            { key: 'Grading Status', value: selected.grading_status },\r\n            { key: 'ICO Marks', value: selected.ico_mark },\r\n            { key: 'LOB No', value: selected.LOB_No }\r\n          ];\r\n          var collection = collectionData[0];\r\n          var QualityImpactedAttributes = collection['QUALITY_IMPACTED_ATTRIBUTES'];\r\n          QualityImpactedAttributes = QualityImpactedAttributes.split(', ');\r\n          if (QualityImpactedAttributes[QualityImpactedAttributes.length - 1] == '') {\r\n            delete QualityImpactedAttributes[QualityImpactedAttributes.length - 1];\r\n          }\r\n          var CostImpactedAttributes = collection['COST_IMPACTED_ATTRIBUTES'];\r\n          CostImpactedAttributes = CostImpactedAttributes.split(', ');\r\n          if (CostImpactedAttributes[CostImpactedAttributes.length - 1] == '') {\r\n            delete CostImpactedAttributes[CostImpactedAttributes.length - 1];\r\n          }\r\n          var qualityimpactedattributes = [];\r\n          var costimpactedattributes = [];\r\n          let qualitytest = {};\r\n          for (var i = 0; i < QualityImpactedAttributes.length; i++) {\r\n            if (QualityImpactedAttributes[i]) {\r\n              QualityImpactedAttributes[i] = QualityImpactedAttributes[i].replace(/_/g, ' ');\r\n              qualitytest = { key: QualityImpactedAttributes[i], value: '' };\r\n\r\n              for (var item in collection) {\r\n                if (QualityImpactedAttributes[i] == item) {\r\n                  qualitytest.value = collection[item];\r\n                }\r\n              }\r\n              qualitytest.key = replaceString(qualitytest.key);\r\n              qualityimpactedattributes[i] = qualitytest;\r\n            }\r\n          }\r\n          qualityimpactedattributes = findUnique(qualityimpactedattributes);\r\n          let costtest = {};\r\n          for (var i = 0; i < CostImpactedAttributes.length; i++) {\r\n            if (CostImpactedAttributes[i]) {\r\n              CostImpactedAttributes[i] = CostImpactedAttributes[i].replace(/_/g, ' ');\r\n              costtest = { key: CostImpactedAttributes[i], value: '' };\r\n\r\n              for (var item in collection) {\r\n                if (CostImpactedAttributes[i] == 'FINAL WEIGHT DATE') {\r\n                  costtest.key = 'Final Weight Date';\r\n                  costtest.value = moment\r\n                    .utc(collection['FINAL_WEIGHT_DATE'])\r\n                    .utcOffset('+0530')\r\n                    .format('DD-MMM-YYYY');\r\n                }\r\n                if (CostImpactedAttributes[i] == item) {\r\n                  costtest.value = collection[item];\r\n                }\r\n              }\r\n              costtest.key = replaceString(costtest.key);\r\n              costimpactedattributes[i] = costtest;\r\n            }\r\n          }\r\n          costimpactedattributes = findUnique(costimpactedattributes);\r\n          var totalrecords = [];\r\n          var otherattributes = [];\r\n          totalrecords = qualityimpactedattributes.concat(costimpactedattributes);\r\n          var flag = 0;\r\n          for (var item in collection) {\r\n            for (var i = 0; i < totalrecords.length; i++) {\r\n              item = item.replace(/_/g, ' ');\r\n\r\n              if (totalrecords[i]['key'] == item) {\r\n                flag = 1;\r\n              }\r\n            }\r\n            if (flag == 0) {\r\n              otherattributes.push({ key: item, value: collection[item] });\r\n            }\r\n          }\r\n          otherattributes = findUnique(otherattributes);\r\n          var data = {};\r\n          data = { maindetails, qualityimpactedattributes, costimpactedattributes, otherattributes };\r\n\r\n          res.status(200).send(data);\r\n        }\r\n      });\r\n    } else {\r\n      Promise.all([get_collection_Robusta(), get_collection_Arabica()]).then(function(result) {\r\n        var RobustaData = result[0].data;\r\n        var ArabicaData = result[1].data;\r\n        var collectionData = RobustaData.concat(ArabicaData);\r\n        if (collectionData.length == 0) {\r\n          var selected = req.body.selectedData;\r\n          var maindetails = [];\r\n          var Grading_Date = moment\r\n            .utc(selected.Grading_Date)\r\n            .utcOffset('+0530')\r\n            .format('DD-MMM-YYYY');\r\n          maindetails = [\r\n            {\r\n              key: 'Product',\r\n              value: selected.product\r\n            },\r\n            { key: 'Packing Size', value: selected.Packing_Size },\r\n            { key: 'Qty', value: selected.actual_quantity },\r\n            { key: 'Grading Date', value: Grading_Date },\r\n            { key: 'Certification Status', value: selected.certification_status },\r\n            { key: 'Exchange ID No', value: selected.Exchange_ID_No },\r\n            { key: 'Quality', value: selected.quality },\r\n            { key: 'No. of units', value: selected.no_of_units },\r\n            { key: 'Warehouse', value: selected.warehouse },\r\n            { key: 'Grading Status', value: selected.grading_status },\r\n            { key: 'ICO Marks', value: selected.ico_mark },\r\n            { key: 'LOB No', value: selected.LOB_No }\r\n          ];\r\n          var data = {};\r\n          var message = 'Grading Results Information not available';\r\n          res.status(500).send(message);\r\n        } else {\r\n          var selected = req.body.selectedData;\r\n          var maindetails = [];\r\n          var Grading_Date = moment\r\n            .utc(selected.Grading_Date)\r\n            .utcOffset('+0530')\r\n            .format('DD-MMM-YYYY');\r\n          maindetails = [\r\n            {\r\n              key: 'Product',\r\n              value: selected.product\r\n            },\r\n            { key: 'Packing Size', value: selected.Packing_Size },\r\n            { key: 'Qty', value: selected.actual_quantity },\r\n            { key: 'Grading Date', value: Grading_Date },\r\n            { key: 'Certification Status', value: selected.certification_status },\r\n            { key: 'Exchange ID No', value: selected.Exchange_ID_No },\r\n            { key: 'Quality', value: selected.quality },\r\n            { key: 'No. of units', value: selected.no_of_units },\r\n            { key: 'Warehouse', value: selected.warehouse },\r\n            { key: 'Grading Status', value: selected.grading_status },\r\n            { key: 'ICO Marks', value: selected.ico_mark },\r\n            { key: 'LOB No', value: selected.LOB_No }\r\n          ];\r\n          var collection = collectionData[0];\r\n          var QualityImpactedAttributes = collection['QualityImpactedAttributes'];\r\n          QualityImpactedAttributes = QualityImpactedAttributes.split(', ');\r\n          if (QualityImpactedAttributes[QualityImpactedAttributes.length - 1] == '') {\r\n            delete QualityImpactedAttributes[QualityImpactedAttributes.length - 1];\r\n          }\r\n          var CostImpactedAttributes = collection['CostImpactedAttributes'];\r\n          CostImpactedAttributes = CostImpactedAttributes.split(', ');\r\n          if (CostImpactedAttributes[CostImpactedAttributes.length - 1] == '') {\r\n            delete CostImpactedAttributes[CostImpactedAttributes.length - 1];\r\n          }\r\n          var qualityimpactedattributes = [];\r\n          var costimpactedattributes = [];\r\n          let qualitytest = {};\r\n          for (var i = 0; i < QualityImpactedAttributes.length; i++) {\r\n            if (QualityImpactedAttributes[i]) {\r\n              QualityImpactedAttributes[i] = QualityImpactedAttributes[i].replace(/_/g, ' ');\r\n              qualitytest = { key: QualityImpactedAttributes[i], value: '' };\r\n            }\r\n            for (var item in collection) {\r\n              if (QualityImpactedAttributes[i] == item) {\r\n                qualitytest.value = collection[item];\r\n              }\r\n            }\r\n            qualitytest.key = replaceString(qualitytest.key);\r\n            qualityimpactedattributes[i] = qualitytest;\r\n          }\r\n          qualityimpactedattributes = findUnique(qualityimpactedattributes);\r\n          let costtest = {};\r\n          for (var i = 0; i < CostImpactedAttributes.length; i++) {\r\n            if (CostImpactedAttributes[i]) {\r\n              CostImpactedAttributes[i] = CostImpactedAttributes[i].replace(/_/g, ' ');\r\n              costtest = { key: CostImpactedAttributes[i], value: '' };\r\n            }\r\n            for (var item in collection) {\r\n              if (CostImpactedAttributes[i] == item) {\r\n                costtest.value = collection[item];\r\n              }\r\n            }\r\n            costtest.key = replaceString(costtest.key);\r\n            costimpactedattributes[i] = costtest;\r\n          }\r\n          costimpactedattributes = findUnique(costimpactedattributes);\r\n          var totalrecords = [];\r\n          var otherattributes = [];\r\n          totalrecords = qualityimpactedattributes.concat(costimpactedattributes);\r\n          var flag = 0;\r\n          for (var item in collection) {\r\n            for (var i = 0; i < totalrecords.length; i++) {\r\n              item = item.replace(/_/g, ' ');\r\n\r\n              if (totalrecords[i]['key'] == item) {\r\n                flag = 1;\r\n              }\r\n            }\r\n            if (flag == 0) {\r\n              otherattributes.push({ key: item, value: collection[item] });\r\n            }\r\n          }\r\n          otherattributes = findUnique(otherattributes);\r\n          var data = {};\r\n          data = { maindetails, qualityimpactedattributes, costimpactedattributes, otherattributes };\r\n\r\n          res.status(200).send(data);\r\n        }\r\n      });\r\n    }\r\n ",
  "sys__UUID": "a5854c93-5e5d-43ed-a50d-3d7f1e79e9f2",
  "sys__createdBy": "ekauser@ekaplus.com"
}
