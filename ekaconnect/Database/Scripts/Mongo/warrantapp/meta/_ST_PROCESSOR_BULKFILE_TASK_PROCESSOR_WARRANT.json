{
  "_id": "_ST_PROCESSOR_BULKFILE_TASK_PROCESSOR_WARRANT",
  "name": "_ST_PROCESSOR_BULKFILE_TASK_PROCESSOR",
  "refType": "app",
  "refTypeId": "ada131db-5171-4b9c-b6d6-caae0c6cd2f5",
  "snippet": "\r\n    const moment = require('moment');\r\n    var contractUrl = req.body.propertyList.eka_connect_host + '/workflow/data';\r\n    var contractBody = {\r\n      appId: req.body.appId,\r\n      workFlowTask: 'dummycontractlist'\r\n    };\r\n    var contract = {\r\n      method: 'POST',\r\n      body: contractBody,\r\n      url: contractUrl,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function get_contract() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(contract, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          }\r\n          else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var fileID = req.body.id;\r\n    var fileDetailsURL =\r\n      req.body.propertyList.eka_connect_host +\r\n      '/data/ada131db-5171-4b9c-b6d6-caae0c6cd2f5/9b3ebdfd-d990-478c-9862-47873bb40792?documentId=' +\r\n      fileID;\r\n    var fileDetails = {\r\n      method: 'GET',\r\n      url: fileDetailsURL,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    var stocksURL = {\r\n      method: 'POST',\r\n      body: {\r\n        collectionName: 'Sampling Logistics details'\r\n      },\r\n      url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '/collectionmapper/' +\r\n        req.body.appId +\r\n        '/00b0627c-e0dd-4530-a765-116ab9748487/fetchCollectionRecords',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        'X-Remote-User': 'ekaApp'\r\n      },\r\n\r\n      json: true\r\n    };\r\n    function get_stocks() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(stocksURL, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          }\r\n          else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_fileDetails() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(fileDetails, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          }\r\n          else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var connectUrl = req.body.propertyList.eka_connect_host + '/workflow/data';\r\n    var connectBody = {\r\n      appId: req.body.appId,\r\n      workFlowTask: 'dummystocklist'\r\n    };\r\n    var connect = {\r\n      method: 'POST',\r\n      body: connectBody,\r\n      url: connectUrl,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function get_connect() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(connect, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          }\r\n          else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    get_fileDetails().then(function (result1) {\r\n      var fileDetails = result1;\r\n      var bulkpayloadData = [];\r\n      bulkpayloadData = [];\r\n      var flag = 0;\r\n      for (var i = 0; i < fileDetails.length; i++) {\r\n        var key = Object.keys(fileDetails[i]['fileContent']);\r\n        // if ((key.length < 3 && key[0] == 'External Stock Ref No') || key[1] == 'ED Mark Ref No') {\r\n        if (key.length < 3 && key.includes('External Stock Ref No', 'ED Mark Ref No')) {\r\n          flag = 0;\r\n          bulkpayloadData.push(fileDetails[i]['fileContent']);\r\n        } else {\r\n          flag = 1;\r\n          break;\r\n        }\r\n      }\r\n      if (flag == 1) {\r\n        res\r\n          .status(500)\r\n          .send('CSV should have only one field : External Stock Ref No, generate sample file for more details');\r\n      }\r\n      //Allow the operation only if user has entered at least one valid record\r\n      if (bulkpayloadData.length <= 0) {\r\n        res.status(500).send('User should enter at least one valid record');\r\n      }\r\n      get_stocks().then(function (result3) {\r\n        get_contract().then(function (result4) {\r\n          var contracts = result4.data;\r\n\r\n          get_connect().then(function (result) {\r\n            var stocksData = result3;\r\n\r\n            var stocks = [];\r\n            stocks = result.data;\r\n            const uniqueEdmarkrefNo = [...new Set(stocks.map(item => item.edmarkrefno))];\r\n            let selectedOperation = req.body.operations;\r\n            let warrant_remarks = req.body.warrant_remarks;\r\n            let activityDate = moment(req.body.activityDate).format('YYYY-MM-DD');\r\n            var response = [];\r\n            for (var i = 0; i < bulkpayloadData.length; i++) {\r\n              for (var j = 0; j < stocks.length; j++) {\r\n                if (stocks[j]['ext_stock_ref_no'] == bulkpayloadData[i]['External Stock Ref No']) {\r\n                  response = response.concat({ ...bulkpayloadData[i], ...stocks[j] });\r\n                }\r\n              }\r\n            }\r\n            if (response.length < 1) {\r\n              res.status(500).send('External Stock Ref No are not matching with existing stocks');\r\n            }\r\n\r\n            var warehouse = response[0]['warehouse'];\r\n            var instrumentName = response[0]['instrument_name'];\r\n            var profit_center = response[0]['Profit_Center'];\r\n            var product_specs =\r\n              response[0]['product'] + response[0]['origin'] + response[0]['quality'] + response[0]['cropyear'];\r\n            var quality = response[0]['quality'];\r\n            var Strategy = response[0]['Strategy'];\r\n            var status = true;\r\n            var remarks = '';\r\n\r\n            for (var i = 0; i < response.length; i++) {\r\n              response[i]['warrant_remarks'] = warrant_remarks;\r\n              response[i]['operations'] = '';\r\n              response[i]['operations'] = req.body.operations;\r\n\r\n              //Allow the operation only if the selected \"Request Type\" is configured against the exchange instrument in the MDM setup ( Grading Request Type)\r\n              if (selectedOperation.includes('Appeal') || selectedOperation.includes('appeal')) {\r\n                status = true;\r\n                remarks = '';\r\n                //Allow the operation only if selected records are having Grading Status as \"Failed\", else throw a validation message : Appeal Operation is allowed only to those stocks having Grading Status as \"Failed\"\r\n                if (status && !remarks && response[i]['grading_status'] != 'Failed') {\r\n                  status = false;\r\n                  remarks = 'Appeal Operation is allowed only to those stocks having Grading Status as \"Failed';\r\n                }\r\n                // Allow the operation only if entered records belongs to same Exchange Instrument, else throw a validation message : The selected stocks should belong to the same Exchange Instrument\r\n                if (status && !remarks && response[i]['instrument_name'] != instrumentName) {\r\n                  status = false;\r\n                  remarks = 'The selected stocks should belong to the same Exchange Instrument';\r\n                }\r\n\r\n                //Allow the operation only if selected records belongs to same Product specification (Product, Origin, Quality & Crop Year)\r\n                var singleprdspec =\r\n                  response[i]['product'] + response[i]['origin'] + response[i]['quality'] + response[i]['cropyear'];\r\n                if (status && !remarks && singleprdspec != product_specs) {\r\n                  status = false;\r\n                  remarks =\r\n                    'Records should belong to same Product specification (Product, Origin, Quality & Crop Year)';\r\n                }\r\n                //Allow the operation only if selected records are having same \"Profit Center\", else throw a validation message : The selected stocks should  belong to same Product Specification\r\n                if (status && !remarks && profit_center != response[i]['Profit_Center']) {\r\n                  status = false;\r\n                  remarks = 'The selected stocks should  belong to same Profit Center';\r\n                }\r\n                //Allow the operation only if selected records belongs to same Warehouse, else throw a validation message : The selected stocks should  belong to the same Warehouse\r\n                if (status && !remarks && warehouse != response[i]['warehouse']) {\r\n                  status = false;\r\n                  remarks = 'The selected stocks should  belong to the same Warehouse';\r\n                }\r\n                //Allow the operation only if selected records are having \"Stock Status\" as \"In Warehouse\", else throw a validation message : The status of the selected stocks should be in Warehouse\"\r\n                if (status && !remarks && response[i]['stock_status'] != 'In Warehouse') {\r\n                  status = false;\r\n                  remarks = 'The status of the selected stocks should be in Warehouse';\r\n                }\r\n                // Allow the operation only if selected records are having Inventory Status as \"IN\", else throw a validation message : Select records with Inventory Status as \"IN\"\r\n                if (\r\n                  status &&\r\n                  !remarks &&\r\n                  response[i]['inventory_status'] != 'IN' &&\r\n                  response[i]['inventory_status'] != 'in' &&\r\n                  response[i]['inventory_status'] != 'In'\r\n                ) {\r\n                  status = false;\r\n                  remarks = 'Select records with Inventory Status as \"IN\"';\r\n                }\r\n                //Allow the operation only if selected records are appealing for the first time, else throw a validation message : Select records which are appealing for the first time\r\n                if (status && !remarks && response[i]['ispreviousappealed'] == true) {\r\n                  status = false;\r\n                  remarks = 'Select records which are appealing for the first time';\r\n                }\r\n                // Allow the operation only if selected records are having Allocated Quantity equals to '0', else throw a validation message : Selected records which are not allocated\r\n                var stock_ref_no = response[i]['stock_ref_no'];\r\n                for (var k = 0; k < stocksData.length; k++) {\r\n                  if (stocksData[k]['Stock Ref No'] == stock_ref_no) {\r\n                    if (status && !remarks && stocksData[k]['Allocated Quantity'] != 0) {\r\n                      status = false;\r\n                      remarks = 'The selected records should have Allocated Qty equals to 0';\r\n                    }\r\n                  }\r\n                }\r\n\r\n                //On clicking confirmation, System should consider the operation only if selected records are having \"Activity Date\" less than or equal to the\"Activity Date\" given for Appeal, else throw a validation : \"Select records which are having Activity Date less than or equal to the given date\"\r\n                let singleactivityDate = moment(response[i]['activityDate']).format('YYYY-MM-DD');\r\n                if (status && !remarks && singleactivityDate > activityDate) {\r\n                  status = false;\r\n                  remarks = 'Select records which are having Activity Date less than or equal to the given date';\r\n                }\r\n              }\r\n              // This story is about providing the ability to upload cancellation of Grading activities for stocks with Grading Status is \"Pending\", Appeal, \"Re-grading Pending\". Cancellation will be recorded in Eka system which in turn will change the status of stocks.\r\n              else if (selectedOperation.includes('Cancel') || selectedOperation.includes('cancel')) {\r\n                status = true;\r\n                remarks = '';\r\n                //The Quality of the stocks should be corresponding to the quality's mapped for delivery against the instrument\r\n                if (status && !remarks && response[i]['quality'] != quality) {\r\n                  status = false;\r\n                  remarks =\r\n                    \"The Quality of the stocks should be corresponding to the quality's mapped for delivery against the instrument\";\r\n                }\r\n                //The selected records should have the Grading Status as \"Pending or Appeal or Re-grading Pending\"\r\n                if (\r\n                  status &&\r\n                  !remarks &&\r\n                  response[i]['grading_status'] != 'Pending' &&\r\n                  response[i]['grading_status'] != 'Appeal' &&\r\n                  response[i]['grading_status'] != 'Re-grading'\r\n                ) {\r\n                  status = false;\r\n                  remarks =\r\n                    'The selected records should have the Grading Status as Pending or Appeal or Re-grading Pending';\r\n                }\r\n                //The selected records should have the Activity Date less than or equal to the Activity Date selected in stock for cancellation\r\n                let singleactivityDate = moment(response[i]['activityDate']).format('YYYY-MM-DD');\r\n                if (status && !remarks && singleactivityDate > activityDate) {\r\n                  status = false;\r\n                  remarks =\r\n                    'The selected records should have the Activity Date less than or equal to the Activity Date selected in stock for cancellation';\r\n                }\r\n                //Once user complete the cancellation workflow, System should revert the Grading Status\r\n              }\r\n              //This story is about providing the ability to request for Re-grading the stocks with Grading Status is \"Passed\" through Bulk Operation.\r\n              else if (selectedOperation.includes('Grading') || selectedOperation.includes('grading')) {\r\n                status = true;\r\n                remarks = '';\r\n                //The Quality of the stocks should be corresponding to the quality's mapped for delivery against the instrument\r\n                if (status && !remarks && response[i]['quality'] != quality) {\r\n                  status = false;\r\n                  remarks =\r\n                    \"The Quality of the stocks should be corresponding to the quality's mapped for delivery against the instrument\";\r\n                }\r\n                //The selected records should have the Grading Status as \"Passed\",\r\n                if (status && !remarks && response[i]['grading_status'] != 'Passed') {\r\n                  status = false;\r\n                  remarks = 'The selected records should have the Grading Status as Passed';\r\n                }\r\n                //The selected records should be Re-grading for the first time\r\n                if (status && !remarks && response[i]['ispreviousregrade'] == true) {\r\n                  status = false;\r\n                  remarks = 'The selected records should be Re-grading for the first time';\r\n                }\r\n                //The selected records should have the Activity Date less than or equal to the Activity Date selected in the Re-grading process\r\n                let singleactivityDate = moment(response[i]['activityDate']).format('YYYY-MM-DD');\r\n                if (status && !remarks && singleactivityDate > activityDate) {\r\n                  status = false;\r\n                  remarks =\r\n                    'The selected records should have the Activity Date less than or equal to the Activity Date selected in the Re-grading process';\r\n                }\r\n              }\r\n              // Ability for the user to perform De-certify of stock using Bulk Operations\r\n              else if (selectedOperation == 'De-certify') {\r\n                status = true;\r\n                remarks = '';\r\n                //The selected records should have the Grading Status as \"Passed\",\r\n                if (status && !remarks && response[i]['grading_status'] != 'Passed') {\r\n                  status = false;\r\n                  remarks = 'The selected records should have the Grading Status as \"Passed\"';\r\n                }\r\n                // The \"Certification Status\" should be \"Certified\"\r\n                if (status && !remarks && response[i]['certification_status'] != 'Certified') {\r\n                  status = false;\r\n                  remarks = 'The \"Certification Status\" should be \"Certified\"';\r\n                }\r\n                // The selected stocks should not have any ED Mark Ref No associated to it\r\n                if (status && !remarks && response[i].edmarkrefno) {\r\n                  status = false;\r\n                  remarks = 'The selected stocks should not have any ED Mark Ref No associated to it';\r\n                }\r\n                // The selected Stocks are having Inventory Status as \"IN\" (This validation required till stock is marked for delivery)\r\n                if (\r\n                  status &&\r\n                  !remarks &&\r\n                  response[i]['inventory_status'] != 'IN' &&\r\n                  response[i]['inventory_status'] != 'in' &&\r\n                  response[i]['inventory_status'] != 'In'\r\n                ) {\r\n                  status = false;\r\n                  remarks = 'The selected Stocks should have Inventory Status as \"IN\"';\r\n                }\r\n                // The selected Stocks are having Stock Status as \"In Warehouse\" (This validation required till stock is marked for delivery)\r\n                if (status && !remarks && response[i]['stock_status'] != 'In Warehouse') {\r\n                  status = false;\r\n                  remarks = 'The selected Stocks should have Stock Status as \"In Warehouse\"';\r\n                }\r\n                // The selected Stocks should have the External Ref No and internal Stock Ref No (There are stocks which are bought from exchange but not created in TRM i.e. they will not have internal stock ref no. yet)\r\n                if ((status && !remarks && !response[i]['stock_ref_no']) || !response[i]['ext_stock_ref_no']) {\r\n                  status = false;\r\n                  remarks = 'The selected Stocks should have the External Ref No and internal Stock Ref No';\r\n                }\r\n                //  The selected records should have the \"Activity Date\" less than or equal to the Grading Activity Date selected in the \"De-Certify\" process\r\n                let singleactivityDate = moment(response[i]['activityDate']).format('YYYY-MM-DD');\r\n                if (status && !remarks && singleactivityDate > activityDate) {\r\n                  status = false;\r\n                  remarks =\r\n                    ' The selected records should have the \"Activity Date\" less than or equal to the Grading Activity Date selected in the \"De-Certify\" process';\r\n                }\r\n              }\r\n              // Ability for the user to perform undo De-certify of stock using Bulk Operations\r\n              else if (selectedOperation == 'Undo-Decertify') {\r\n                status = true;\r\n                remarks = '';\r\n                //The selected records should have the Grading Status as \"Passed\",\r\n                if (status && !remarks && response[i]['grading_status'] != 'Passed') {\r\n                  status = false;\r\n                  remarks = 'The selected records should have the Grading Status as \"Passed\"';\r\n                }\r\n                // The \"Certification Status\" should be \"Certified\"\r\n                if (status && !remarks && response[i]['certification_status'] != 'Not-Certified') {\r\n                  status = false;\r\n                  remarks = 'The \"Certification Status\" should be \"Not-Certified\"';\r\n                }\r\n\r\n                // The selected stocks should not have any ED Mark Ref No associated to it\r\n                if (status && !remarks && response[i].edmarkrefno) {\r\n                  status = false;\r\n                  remarks = 'The selected stocks should not have any ED Mark Ref No associated to it';\r\n                }\r\n                // The selected Stocks are having Inventory Status as \"IN\" (This validation required till stock is marked for delivery)\r\n                if (\r\n                  status &&\r\n                  !remarks &&\r\n                  response[i]['inventory_status'] != 'IN' &&\r\n                  response[i]['inventory_status'] != 'in' &&\r\n                  response[i]['inventory_status'] != 'In'\r\n                ) {\r\n                  status = false;\r\n                  remarks = 'The selected Stocks should have Inventory Status as \"IN\"';\r\n                }\r\n                // The selected Stocks are having Stock Status as \"In Warehouse\" (This validation required till stock is marked for delivery)\r\n                if (status && !remarks && response[i]['stock_status'] != 'In Warehouse') {\r\n                  status = false;\r\n                  remarks = 'The selected Stocks should have Stock Status as \"In Warehouse\"';\r\n                }\r\n                // The selected Stocks should have the External Ref No and internal Stock Ref No (There are stocks which are bought from exchange but not created in TRM i.e. they will not have internal stock ref no. yet)\r\n                if ((status && !remarks && !response[i]['stock_ref_no']) || !response[i]['ext_stock_ref_no']) {\r\n                  status = false;\r\n                  remarks = 'The selected Stocks should have the External Ref No and internal Stock Ref No';\r\n                }\r\n                //  The selected records should have the \"Activity Date\" less than or equal to the Grading Activity Date selected in the \"De-Certify\" process\r\n                let singleactivityDate = moment(response[i]['activityDate']).format('YYYY-MM-DD');\r\n                if (status && !remarks && singleactivityDate > activityDate) {\r\n                  status = false;\r\n                  remarks =\r\n                    ' The selected records should have the \"Activity Date\" less than or equal to the Grading Activity Date selected in the \"De-Certify\" process';\r\n                }\r\n              } else if (selectedOperation == 'Marking for Delivery') {\r\n                status = true;\r\n                remarks = '';\r\n                //The selected records should have the Grading Status as \"Passed\",\r\n                if (status && !remarks && response[i]['grading_status'] != 'Passed') {\r\n                  status = false;\r\n                  remarks = 'The selected records should have the Grading Status as \"Passed\"';\r\n                }\r\n                // The \"Certification Status\" should be \"Certified\"\r\n                if (status && !remarks && response[i]['certification_status'] != 'Certified') {\r\n                  status = false;\r\n                  remarks = 'The \"Certification Status\" should be \"Certified\"';\r\n                }\r\n                //Allow the operation only if selected records belongs to same Product specification (Product, Origin, Quality & Crop Year)\r\n                var singleprdspec =\r\n                  response[i]['product'] + response[i]['origin'] + response[i]['quality'] + response[i]['cropyear'];\r\n                if (status && !remarks && singleprdspec != product_specs) {\r\n                  status = false;\r\n                  remarks =\r\n                    'Records should belong to same Product specification (Product, Origin, Quality & Crop Year)';\r\n                }\r\n                //Allow the operation only if selected records are having same \"Profit Center\", else throw a validation message : The selected stocks should  belong to same Product Specification\r\n                if (status && !remarks && profit_center != response[i]['Profit_Center']) {\r\n                  status = false;\r\n                  remarks = 'The selected stocks should  belong to same Profit Center';\r\n                }\r\n                //Allow the operation only if selected records are having same \"Strategy\", else throw a validation message : The selected stocks should  belong to same Product Specification\r\n                var Strategy = response[0]['Strategy'];\r\n                if (status && !remarks && Strategy != response[i]['Strategy']) {\r\n                  status = false;\r\n                  remarks = 'The selected stocks should  belong to same Strategy';\r\n                }\r\n                let singleactivityDate = moment(response[i]['activityDate']).format('YYYY-MM-DD');\r\n                if (status && !remarks && singleactivityDate > activityDate) {\r\n                  status = false;\r\n                  remarks =\r\n                    ' The selected records should have the \"Activity Date\" less than or equal to the Grading Activity Date selected in the \"De-Certify\" process';\r\n                }\r\n                if (status && !remarks && response[i].edmarkrefno) {\r\n                  status = false;\r\n                  remarks = 'Marking has already been performed on the selected stock';\r\n                }\r\n                if (response[i]['ED Mark Ref No']) {\r\n                  for (var j = 0; j < contracts.length; j++) {\r\n                    if (status && !remarks && response[i]['ED Mark Ref No'] == contracts[j]['edmarkrefno']) {\r\n                      status = false;\r\n                      remarks = 'The ED Mark ref no has which the sales contract is created';\r\n                      break;\r\n                    }\r\n                  }\r\n                  if (status && !remarks) {\r\n                    for (var k = 0; k < stocks.length; k++) {\r\n                      if (stocks[k]['edmarkrefno'] == response[i]['ED Mark Ref No']) {\r\n                        if (\r\n                          stocks[k]['product'] != response[i]['product'] ||\r\n                          stocks[k]['quality'] != response[i]['quality'] ||\r\n                          stocks[k]['cropyear'] != response[i]['cropyear'] ||\r\n                          stocks[k]['origin'] != response[i]['origin'] ||\r\n                          stocks[k]['Profit_Center'] != response[i]['Profit_Center'] ||\r\n                          stocks[k]['Strategy'] != response[i]['Strategy'] ||\r\n                          stocks[k]['corporate'] != response[i]['corporate']\r\n                        ) {\r\n                          status = false;\r\n                          remarks =\r\n                            'The selected stocks should  belong to same Product,Quality,Cropyear,Origin,Profit Center,Strategy,Corporate';\r\n                        }\r\n                        break;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                if (status && !remarks && !uniqueEdmarkrefNo.includes(response[i]['ED Mark Ref No'])) {\r\n                  response[i]['edmarkrefno'] = response[i]['ED Mark Ref No'];\r\n                }\r\n                if (status && !remarks && !response[i].edmarkrefno) {\r\n                  if (response[i]['ED Mark Ref No'] && uniqueEdmarkrefNo.includes(response[i]['ED Mark Ref No'])) {\r\n                    response[i]['edmarkrefno'] = response[i]['ED Mark Ref No'];\r\n                  } else {\r\n                    let count = 1;\r\n                    var lastcount = [];\r\n                    const unique = [...new Set(stocks.map(item => item.edmarkrefno))];\r\n                    for (var j = 0; j < unique.length; j++) {\r\n                      if (unique[j]) {\r\n                        lastcount = unique[j].split('-');\r\n                        if (count < lastcount[1]) count = parseInt(lastcount[1]);\r\n                      }\r\n                    }\r\n                    count = parseInt(count);\r\n                    count = count + 1;\r\n                    if (count < 10) {\r\n                      response[i]['edmarkrefno'] = '';\r\n                      response[i]['edmarkrefno'] = 'MK-0' + count;\r\n                    } else {\r\n                      response[i]['edmarkrefno'] = '';\r\n                      response[i]['edmarkrefno'] = 'MK-' + count;\r\n                    }\r\n                  }\r\n                }\r\n                var corporate = response[0]['corporate'];\r\n                if (status && !remarks && corporate != response[i]['corporate']) {\r\n                  status = false;\r\n                  remarks = 'The selected stocks should  belong to same Corporate';\r\n                }\r\n              } else if (selectedOperation == 'Un-Marking for Delivery') {\r\n                status = true;\r\n                remarks = '';\r\n                //The selected records should have the Grading Status as \"Passed\",\r\n                if (status && !remarks && response[i]['grading_status'] != 'Passed') {\r\n                  status = false;\r\n                  remarks = 'The selected records should have the Grading Status as \"Passed\"';\r\n                }\r\n                // The \"Certification Status\" should be \"Certified\"\r\n                if (status && !remarks && response[i]['certification_status'] != 'Certified') {\r\n                  status = false;\r\n                  remarks = 'The \"Certification Status\" should be \"Certified\"';\r\n                }\r\n                //Allow the operation only if selected records belongs to same Product specification (Product, Origin, Quality & Crop Year)\r\n                var singleprdspec =\r\n                  response[i]['product'] + response[i]['origin'] + response[i]['quality'] + response[i]['cropyear'];\r\n                if (status && !remarks && singleprdspec != product_specs) {\r\n                  status = false;\r\n                  remarks =\r\n                    'Records should belong to same Product specification (Product, Origin, Quality & Crop Year)';\r\n                }\r\n                //Allow the operation only if selected records are having same \"Profit Center\", else throw a validation message : The selected stocks should  belong to same Product Specification\r\n                if (status && !remarks && profit_center != response[i]['Profit_Center']) {\r\n                  status = false;\r\n                  remarks = 'The selected stocks should  belong to same Profit Center';\r\n                }\r\n                //Allow the operation only if selected records are having same \"Strategy\", else throw a validation message : The selected stocks should  belong to same Product Specification\r\n                var Strategy = response[0]['Strategy'];\r\n                if (status && !remarks && Strategy != response[i]['Strategy']) {\r\n                  status = false;\r\n                  remarks = 'The selected stocks should  belong to same Strategy';\r\n                }\r\n                let singleactivityDate = moment(response[i]['activityDate']).format('YYYY-MM-DD');\r\n                if (status && !remarks && singleactivityDate > activityDate) {\r\n                  status = false;\r\n                  remarks =\r\n                    'The selected records should have the \"Activity Date\" less than or equal to the Grading Activity Date selected in the \"De-Certify\" process';\r\n                }\r\n                if (status && !remarks && !response[i].edmarkrefno) {\r\n                  status = false;\r\n                  remarks = 'Selected stocks should have ED Mark Ref No';\r\n                }\r\n                if (status && !remarks && response[i].edmarkrefno) {\r\n                  response[i].edmarkrefno = '';\r\n                }\r\n              } else {\r\n                res\r\n                  .status(500)\r\n                  .send(\r\n                    'Allow the operation only if the selected Request Type is configured against the exchange instrument in the MDM setup'\r\n                  );\r\n              }\r\n              response[i]['status'] = status;\r\n              response[i]['remarks'] = remarks;\r\n            }\r\n            var responseCopy = {};\r\n            for (var i = 0; i < response.length; i++) {\r\n              if (response[i]['sys__state']) {\r\n                delete response[i]['sys__state'];\r\n              }\r\n              if (responseCopy[response[i]['ext_stock_ref_no']]) {\r\n                response[i]['status'] = false;\r\n                response[i]['remarks'] = 'Duplicate Stock ref no';\r\n              } else {\r\n                responseCopy[response[i]['ext_stock_ref_no']] = true;\r\n              }\r\n            }\r\n            res.status(200).send(response);\r\n          });\r\n        });\r\n      });\r\n    });\r\n ",
  "sys__UUID": "140c66a8-aac8-4781-96c3-985b0446f6ca",
  "sys__createdBy": "srini@ekaplus.com",
  "type": "processor"
}
