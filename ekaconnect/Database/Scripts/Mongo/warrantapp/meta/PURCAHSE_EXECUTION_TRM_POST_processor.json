{
  "_id": "PURCAHSE_EXECUTION_TRM_POST_processor",
  "name": "PURCAHSE_EXECUTION_TRM_POST_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "ada131db-5171-4b9c-b6d6-caae0c6cd2f5",
  "snippet": "var save_stopping_market = {\r\n    method: 'POST',\r\n    url: req.body.propertyList.eka_connect_host + '/workflow',\r\n    body: {},\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n};\r\nfunction data_save_stopping_market(workflowName, outputData) {\r\n    save_stopping_market.body = {\r\n        appId: req.body.appId,\r\n        workflowTaskName: workflowName,\r\n        task: workflowName,\r\n        output: {\r\n            [workflowName]: outputData\r\n        }\r\n    };\r\n    return new Promise(function (resolve, reject) {\r\n        request(save_stopping_market, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar connectUrl = req.body.propertyList.eka_connect_host + '/workflow/data';\r\nvar connectBody = {\r\n    appId: req.body.appId,\r\n    workFlowTask: 'dummystoppinglist'\r\n};\r\nvar connect = {\r\n    method: 'POST',\r\n    body: connectBody,\r\n    url: connectUrl,\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n};\r\nfunction get_stoppingList() {\r\n    connect.body = {\r\n        appId: req.body.appId,\r\n        workFlowTask: 'dummystoppinglist'\r\n    };\r\n    return new Promise(function (resolve, reject) {\r\n        request(connect, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar connectCall = {\r\n    method: 'POST',\r\n    body: {\r\n        appId: req.body.appId,\r\n        workFlowTask: 'dummycontractlist'\r\n    },\r\n    url: req.body.propertyList.eka_connect_host + '/workflow/data',\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n};\r\nfunction get_connect() {\r\n    return new Promise(function (resolve, reject) {\r\n        request(connectCall, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar platformurl = req.body.propertyList.platform_url + '/api/logisticinternal/purchaseloadingexceution/Create';\r\nvar platformapi = {\r\n    method: 'POST',\r\n    url: platformurl,\r\n    headers: {\r\n        Authorization: req.headers.authorization\r\n    },\r\n    json: true\r\n};\r\nfunction get_platform(outputData) {\r\n    platformapi.body = {};\r\n    platformapi.body = outputData;\r\n    return new Promise(function (resolve, reject) {\r\n        request(platformapi, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar url = req.body.propertyList.platform_url + '/api/logistic/stockDetailsUpdate';\r\nvar apiDetails = {\r\n    method: 'PUT',\r\n    url: url,\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json'\r\n    },\r\n    json: true\r\n};\r\nfunction post_data(body) {\r\n    apiDetails.body = [];\r\n    apiDetails.body = body;\r\n    return new Promise(function (resolve, reject) {\r\n        request(apiDetails, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar postData_stopping = {\r\n    method: 'PUT',\r\n    url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '/data/updateBulk/ada131db-5171-4b9c-b6d6-caae0c6cd2f5/6abda3f2-5e71-46c2-9912-a87bc0451410',\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n};\r\nfunction postData_stopping_api(body) {\r\n    postData_stopping.body = {};\r\n    postData_stopping.body = { data: body };\r\n    return new Promise(function (resolve, reject) {\r\n        request(postData_stopping, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar moment = require('moment');\r\nvar selectedData = req.body;\r\nif (selectedData.length <= 0) {\r\n    res.status(500).send('Error in selected Data');\r\n}\r\nPromise.all([get_connect(), get_stoppingList()]).then(function (result1) {\r\n    let contractlist = result1[0].data;\r\n    let selectedData1 = req.body;\r\n    var stoppingData = result1[1].data;\r\n    var outputArr = [];\r\n    var outputData = [];\r\n    if (selectedData1.purchase_contract_ref_no) {\r\n        selectedData1['contract_ref_no'] = selectedData1.purchase_contract_ref_no;\r\n    }\r\n    for (let j = 0; j < contractlist.length; j++) {\r\n        if (selectedData1['contract_ref_no'] == contractlist[j]['contract_ref_no']) {\r\n            outputArr.push(contractlist[j]);\r\n        }\r\n    }\r\n    for (let i = 0; i < stoppingData.length; i++) {\r\n        if (stoppingData[i]['contract_status'] != 'Rejected') {\r\n            for (let j = 0; j < outputArr.length; j++) {\r\n                if (\r\n                    outputArr[j]['ext_stock_ref_no'] == stoppingData[i]['ext_stock_ref_no'] ||\r\n                    (outputArr[j]['ext_stock_ref_no_array'] &&\r\n                        outputArr[j]['ext_stock_ref_no_array'].includes(stoppingData[i]['ext_stock_ref_no']))\r\n                ) {\r\n                    outputData.push({\r\n                        ...outputArr[j],\r\n                        ...stoppingData[i],\r\n                        contract_ref_no: outputArr[j]['contract_ref_no'],\r\n                        internalContractItemRefNo: outputArr[j]['internalContractItemRefNo'],\r\n                        contract_creation_date: outputArr[j]['contract_creation_date']\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    outputData = outputData.reduce((unique, o) => {\r\n        if (!unique.some(obj => obj.ext_stock_ref_no === o.ext_stock_ref_no)) {\r\n            unique.push(o);\r\n        }\r\n        return unique;\r\n    }, []);\r\n    for (let i = 0; i < outputData.length; i++) {\r\n        outputData[i]['id'] = outputData[i]['_id'];\r\n        delete outputData[i]['_id'];\r\n        delete outputData[i]['object'];\r\n        delete outputData[i]['refTypeId'];\r\n        if (outputData[i]['sys__createdBy']) delete outputData[i]['sys__createdBy'];\r\n        if (outputData[i]['sys__createdOn']) delete outputData[i]['sys__createdOn'];\r\n        if (outputData[i]['sys__data__state']) delete outputData[i]['sys__data__state'];\r\n        if (outputData[i]['sys__updatedBy']) delete outputData[i]['sys__updatedBy'];\r\n        if (outputData[i]['sys__updatedOn']) delete outputData[i]['sys__updatedOn'];\r\n        if (outputData[i]['sys__UUID']) delete outputData[i]['sys__UUID'];\r\n        if (outputData[i]['sys__version']) delete outputData[i]['sys__version'];\r\n        if (outputData[i]['userId']) delete outputData[i]['userId'];\r\n        outputData[i]['no_Of_Units'] = '';\r\n        outputData[i]['no_Of_Units'] = selectedData1.no_Of_Units;\r\n        outputData[i]['gmr_creation_date'] = '';\r\n        outputData[i]['gmr_creation_date'] = selectedData1.activityDate;\r\n    }\r\n    postData_stopping_api(outputData).then(function (result4) {\r\n        var selected = result4;\r\n        var purchaseExecutionLoadStkDTOList = [];\r\n        var ext_stock_ref_no_array = selected[0]['ext_stock_ref_no_array'];\r\n        ext_stock_ref_no_array = ext_stock_ref_no_array.split(',');\r\n        for (var i = 0; i < stoppingData.length; i++) {\r\n            for (var j = 0; j < ext_stock_ref_no_array.length; j++) {\r\n                if (stoppingData[i]['ext_stock_ref_no'] == ext_stock_ref_no_array[j]) {\r\n                    var grading_date;\r\n                    var final_weight_date;\r\n                    var prodclass = '';\r\n                    var exchange_type = '';\r\n                    var reasons_for_cancellation = '';\r\n                    var no_Of_Units = '';\r\n                    if (stoppingData[i].grading_date) {\r\n                        grading_date = moment\r\n                            .utc(stoppingData[i].grading_date)\r\n                            .utcOffset('+0530')\r\n                            .format('YYYY-MM-DD');\r\n                    }\r\n                    if (stoppingData[i].final_weight_date) {\r\n                        final_weight_date = moment\r\n                            .utc(stoppingData[i].final_weight_date)\r\n                            .utcOffset('+0530')\r\n                            .format('YYYY-MM-DD');\r\n                    }\r\n                    if (stoppingData[i].class) {\r\n                        prodclass = stoppingData[i].class;\r\n                    }\r\n                    if (stoppingData[i].exchange_type) {\r\n                        exchange_type = stoppingData[i].exchange_type;\r\n                    }\r\n                    if (stoppingData[i].reasons_for_cancellation) {\r\n                        reasons_for_cancellation = stoppingData[i].reasons_for_cancellation;\r\n                    }\r\n                    if (stoppingData[i].no_Of_Units) {\r\n                        no_Of_Units = stoppingData[i].no_Of_Units;\r\n                    }\r\n                    purchaseExecutionLoadStkDTOList.push({\r\n                        counterParty: selected[0].CP_Name,\r\n                        externalStkRefNo: stoppingData[i].ext_stock_ref_no,\r\n                        product: stoppingData[i].product,\r\n                        origin: stoppingData[i].origin,\r\n                        cropYear: stoppingData[i].crop_year,\r\n                        quality: stoppingData[i].quality,\r\n                        qtyUnit: stoppingData[i].quantity_unit,\r\n                        packingType: 'In Bags',\r\n                        packingSize: stoppingData[i].Packing_Size,\r\n                        noOfUnits: parseInt(no_Of_Units),\r\n                        shippedNetQty: parseFloat(stoppingData[i].quantity),\r\n                        shippedGrossQty: parseFloat(stoppingData[i].quantity),\r\n                        qty: parseFloat(stoppingData[i].quantity),\r\n                        tareWeight: '0',\r\n                        blDate: '',\r\n                        blNumber: '',\r\n                        remarks: reasons_for_cancellation,\r\n                        containerTypeId: '',\r\n                        containerSize: '',\r\n                        sealNo: '',\r\n                        containerNo: '',\r\n                        isDeleted: 'N',\r\n                        deliveryPortName: stoppingData[i].port_name,\r\n                        gradingDate: grading_date,\r\n                        finalWeightDate: final_weight_date,\r\n                        exchangeType: exchange_type,\r\n                        productClass: prodclass,\r\n                        internalContractItemRefNo: selected[0]['internalContractItemRefNo']\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        var outputData = {\r\n            isExternalGMR: 'Yes',\r\n            effDate: selected[0].gmr_creation_date,\r\n            modeOfTransportName: 'Title Transfer',\r\n            bookingRefNo: '',\r\n            extRefNo: '',\r\n            originCityName: selected[0].storage_location,\r\n            destinationCityName: selected[0].storage_location,\r\n            internalRemarks: reasons_for_cancellation,\r\n            qtyUnitName: selected[0].quantity_unit,\r\n            instrumentName: selected[0].instrument_name,\r\n            carrierDetailsDTO: {\r\n                carrierTypeName: '',\r\n                carrierTypeId: '',\r\n                transportAgentName: '',\r\n                transportCompanyName: '',\r\n                forwardingAgentName: '',\r\n                carrierGrossWeight: '',\r\n                carrierTareWeight: ''\r\n            },\r\n            internalContractItemRefNo: selected[0]['internalContractItemRefNo'],\r\n            purchaseExecutionLoadStkDTOList: purchaseExecutionLoadStkDTOList\r\n        };\r\n\r\n        get_platform(outputData)\r\n            .then(function (result) {\r\n                if (result.status == 'success') {\r\n                    console.log(result);\r\n                    var body = result.description;\r\n                    body = JSON.parse(body);\r\n                    var internalstock = [];\r\n                    for (var i = 0; i < body.purchaseExecutionLoadStkDTOList.length; i++) {\r\n                        internalstock.push({\r\n                            internalStockRefNo: body.purchaseExecutionLoadStkDTOList[i].internalStockRefNo,\r\n                            externalStkRefNo: body.purchaseExecutionLoadStkDTOList[i].externalStkRefNo,\r\n                            internalGrdRefNo: body.purchaseExecutionLoadStkDTOList[i].goodsRecordDetailPkDO.internalGrdRefNo,\r\n                            final_weight_date: body.purchaseExecutionLoadStkDTOList[i].finalWeightDate,\r\n                            grading_date: body.purchaseExecutionLoadStkDTOList[i].gradingDate,\r\n                            exchangeType: body.purchaseExecutionLoadStkDTOList[i].exchangeType,\r\n                            productClass: body.purchaseExecutionLoadStkDTOList[i].productClass,\r\n                            legalEntityName: body.purchaseExecutionLoadStkDTOList[i].legalEntityName\r\n                        });\r\n                    }\r\n                    var output = {};\r\n                    output = {\r\n                        GMR_Ref_No: result.ekaRefNo,\r\n                        ext_stock_ref_no_array: selected[0]['ext_stock_ref_no_array'],\r\n                        contract_ref_no: selected[0].contract_ref_no,\r\n                        corporate: selected[0].corporate,\r\n                        ext_stock_ref_no: selected[0].ext_stock_ref_no,\r\n                        int_stock_ref_no: JSON.stringify(internalstock),\r\n                        internalstock: JSON.stringify(internalstock),\r\n                        instrument_name: selected[0].instrument_name,\r\n                        activityDate: selected[0].activityDate,\r\n                        selectedData: selected\r\n                    };\r\n                    data_save_stopping_market('save_contracts', output)\r\n                        .then(function (saveData) {\r\n                            var selected = saveData.data;\r\n                            var collectionData = output.selectedData[0];\r\n                            var int_stock_ref_no = JSON.parse(selected.internalstock);\r\n                            var selectedData = output.selectedData;\r\n                            var outputArray = [];\r\n                            var bodyArray = [];\r\n                            var grading_Date;\r\n                            var final_weight_Date;\r\n                            var exchange_Type = '';\r\n                            var productclass = '';\r\n                            for (var i = 0; i < int_stock_ref_no.length; i++) {\r\n                                if (int_stock_ref_no[i].grading_date) {\r\n                                    grading_Date = '';\r\n                                    grading_Date = int_stock_ref_no[i].grading_date;\r\n                                    grading_Date = grading_Date.substring(0, 10);\r\n                                }\r\n                                if (int_stock_ref_no[i].final_weight_date) {\r\n                                    final_weight_Date = '';\r\n                                    final_weight_Date = int_stock_ref_no[i].final_weight_date;\r\n                                    final_weight_Date = final_weight_Date.substring(0, 10);\r\n                                }\r\n                                exchange_Type = '';\r\n                                if (int_stock_ref_no[i].exchangeType) {\r\n                                    exchange_Type = int_stock_ref_no[i]['exchangeType'];\r\n                                }\r\n                                productclass = '';\r\n                                if (int_stock_ref_no[i].productClass) {\r\n                                    productclass = int_stock_ref_no[i]['productClass'];\r\n                                }\r\n                                bodyArray.push({\r\n                                    certificationStatus: 'Certified',\r\n                                    gradingStatus: 'Passed',\r\n                                    externalStkRefNo: int_stock_ref_no[i]['externalStkRefNo'],\r\n                                    gradingDate: grading_Date,\r\n                                    finalWeightDate: final_weight_Date,\r\n                                    exchangeType: exchange_Type,\r\n                                    productClass: productclass,\r\n                                    isDeleted: 'N',\r\n                                    goodsRecordDetailPkDO: {\r\n                                        internalGrdRefNo: int_stock_ref_no[i]['internalGrdRefNo']\r\n                                    }\r\n                                });\r\n                                outputArray.push({\r\n                                    legal_entity: int_stock_ref_no[i]['legalEntityName'],\r\n                                    activityDate: collectionData['activityDate'],\r\n                                    corporate: selected.corporate,\r\n                                    instrument_name: collectionData['instrument_name'],\r\n                                    instrument_name_value: collectionData['instrument_name'],\r\n                                    request_type: 'Grading',\r\n                                    warrant_remarks: 'warrant_remarks',\r\n                                    stock_ref_no: int_stock_ref_no[i]['internalStockRefNo'],\r\n                                    ext_stock_ref_no: int_stock_ref_no[i]['externalStkRefNo'],\r\n                                    quality: collectionData['quality'],\r\n                                    warehouse: collectionData['warehouse'],\r\n                                    grading_status: 'Passed',\r\n                                    certification_status: 'Certified',\r\n                                    exchangeDeliveryStatus: 'Received from Exchange',\r\n                                    shed: collectionData['storage_location'],\r\n                                    Profit_Center: collectionData['Profit_Center'],\r\n                                    Strategy: collectionData['Strategy'],\r\n                                    cropyear: collectionData['crop_year'],\r\n                                    origin: collectionData['origin'],\r\n                                    product: collectionData['product'],\r\n                                    port_name: collectionData['port_name'],\r\n                                    Weight_Update_Available: 'N',\r\n                                    title_transfer_status: 'In',\r\n                                    actual_quantity: selectedData[i]['quantity'],\r\n                                    Packing_Size: selectedData[i]['Packing_Size'],\r\n                                    no_of_units: collectionData['no_Of_Units'],\r\n                                    Quantity_UOM: collectionData['quantity_unit'],\r\n                                    exchange_lot: selectedData[i]['exchange_lots'],\r\n                                    Stock_Update_Status: 'Pending',\r\n                                    final_weight_date: final_weight_Date,\r\n                                    Grading_Date: grading_Date\r\n                                });\r\n                            }\r\n                            post_data(bodyArray)\r\n                                .then(function (result2) {\r\n                                    data_save_stopping_market('save_warrant_stocks', outputArray)\r\n                                        .then(function (saveData1) {\r\n                                            console.log('Saved Data in contracts');\r\n                                            res.status(200).send(output);\r\n                                        })\r\n                                        .catch(err => {\r\n                                            res.status(500).send('Error in posting records for stocks');\r\n                                        });\r\n                                })\r\n                                .catch(err => {\r\n                                    res.status(500).send('Post to TRM Api not working');\r\n                                });\r\n                        })\r\n\r\n                        .catch(err => {\r\n                            res.status(500).send('Error in posting records for contracts');\r\n                        });\r\n                } else {\r\n                    if (result.description) {\r\n                        res.status(500).send('Error in Purchase execution creation:(' + result.description + ')');\r\n                    } else {\r\n                        res.status(500).send('Purchase execution creation is failed, please try once again');\r\n                    }\r\n                }\r\n            })\r\n            .catch(err => {\r\n                res.status(500).send('Purchase execution creation is failed, please try once again');\r\n            });\r\n    });\r\n});\r\n",
  "sys__UUID": "e45f0f73-684e-4fc3-acc0-122aae739a18",
  "sys__createdBy": "ekauser@ekaplus.com"
}
