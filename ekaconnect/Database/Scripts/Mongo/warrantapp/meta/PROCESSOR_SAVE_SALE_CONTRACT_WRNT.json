{
  "_id": "PROCESSOR_SAVE_SALE_CONTRACT_WRNT",
  "name": "PROCESSOR_SAVE_SALE_CONTRACT_WRNT",
  "type": "processor",
  "refType": "app",
  "refTypeId": "ada131db-5171-4b9c-b6d6-caae0c6cd2f5",
  "snippet": "\r\nvar connectDeleteUrl =\r\n    req.body.propertyList.eka_connect_host +\r\n    '/data/ada131db-5171-4b9c-b6d6-caae0c6cd2f5/5c2d334d-50aa-4194-a7e6-c9055b744c2e/bulkDelete';\r\nvar connectDelete = {\r\n    method: 'DELETE',\r\n    url: connectDeleteUrl,\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n};\r\nfunction get_connect_delete(body) {\r\n    connectDelete.body = {};\r\n    connectDelete.body = body;\r\n    return new Promise(function (resolve, reject) {\r\n        request(connectDelete, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar connectUrl = req.body.propertyList.eka_connect_host + '/workflow/data';\r\nvar connect = {\r\n    method: 'POST',\r\n    url: connectUrl,\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n};\r\nfunction get_connect(body) {\r\n    connect.body = {};\r\n    connect.body = body;\r\n    return new Promise(function (resolve, reject) {\r\n        request(connect, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar platformurl = req.body.propertyList.platform_url + '/api/contract/warrantContract/create';\r\nvar platformapi = {\r\n    method: 'POST',\r\n    url: platformurl,\r\n    headers: {\r\n        Authorization: req.headers.authorization\r\n    },\r\n    json: true\r\n};\r\nfunction get_platform(outputData) {\r\n    platformapi.body = outputData;\r\n    return new Promise(function (resolve, reject) {\r\n        request(platformapi, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar connectBody = {\r\n    appId: req.body.appId,\r\n    workFlowTask: 'dummystocklist'\r\n};\r\nget_connect(connectBody).then(function (result1) {\r\n    var stocklistData = result1.data;\r\n    var records = {};\r\n    for (var i = 0; i < stocklistData.length; i++) {\r\n        if (stocklistData[i]['edmarkrefno'] == req.body.edmarkrefno) {\r\n            records = stocklistData[i];\r\n            break;\r\n        }\r\n    }\r\n    let selectedData = req.body;\r\n    var outputData = {\r\n        contractType: 'Sales',\r\n        issueDate: selectedData.activityDate,\r\n        product: records.product,\r\n        origination: records.origin,\r\n        cropYear: records.cropyear,\r\n        quality: records.quality,\r\n        contractQtyUnit: selectedData.quantityUnit,\r\n        itemQty: selectedData.quantity,\r\n        itemQtyUnit: selectedData.quantityUnit,\r\n        packingType: 'In Bags',\r\n        packingSize: records.Packing_Size,\r\n        priceType: 'Flat',\r\n        contractPrice: selectedData.futurePrice,\r\n        contractPriceUnit: selectedData.futurePriceUnit,\r\n        periodType: 'Spot',\r\n        fromDate: selectedData.activityDate,\r\n        toDate: selectedData.activityDate,\r\n        loadingLocation: records.shed,\r\n        loadingLocationType: 'Storage Location',\r\n        instrumentName: records.instrument_name_value,\r\n        corporate: records.corporate,\r\n        strategy: records.Strategy,\r\n        profitCenter: records.Profit_Center\r\n    };\r\n    console.log(outputData);\r\n    get_platform(outputData)\r\n        .then(function (result) {\r\n            var contractbody = {\r\n                appId: req.body.appId,\r\n                workFlowTask: 'dummycontractlist'\r\n            };\r\n            get_connect(contractbody).then(function (result2) {\r\n                var contractlist = result2.data;\r\n                var output = {};\r\n                console.log(result);\r\n                if (result.status == 'success' || result.status == 'Pending') {\r\n                    var data = JSON.parse(result.data);\r\n                    output = {\r\n                        contract_ref_no: result.externalRefNo,\r\n                        contract_status: data.approvalStatus,\r\n                        contract_creation_date: data.contractCreationDate,\r\n                        CP_Name: data.cpName,\r\n                        Profit_Center: data.profitCenter,\r\n                        Strategy: data.strategy,\r\n                        title_transfer_status: 'In',\r\n                        edmarkrefno: selectedData.edmarkrefno\r\n                    };\r\n                    if (selectedData.Contract_Ref_No) {\r\n                        var filterBody = {\r\n                            filterData: {\r\n                                filter: [\r\n                                    {\r\n                                        fieldName: 'contract_ref_no',\r\n                                        value: selectedData.Contract_Ref_No,\r\n                                        operator: 'eq'\r\n                                    }\r\n                                ]\r\n                            }\r\n                        };\r\n                        get_connect_delete(filterBody).then(function (result) {\r\n                            res.status(200).send(output);\r\n                        });\r\n                    } else {\r\n                        res.status(200).send(output);\r\n                    }\r\n                } else {\r\n                    if (result.description) {\r\n                        res.status(500).send('Error in sales contract creation:(' + result.description + ')');\r\n                    } else {\r\n                        res.status(500).send('Sales contract creation is failed, please try once again');\r\n                    }\r\n                    return;\r\n                }\r\n            });\r\n        })\r\n        .catch(err => {\r\n            res.status(500).send('Sales contract creation is failed, please try once again');\r\n        });\r\n});\r\n",
  "sys__UUID": "a026bf50-1a9e-43ef-af0d-9d4b80047a2d",
  "sys__createdBy": "ekauser@ekaplus.com"
}
