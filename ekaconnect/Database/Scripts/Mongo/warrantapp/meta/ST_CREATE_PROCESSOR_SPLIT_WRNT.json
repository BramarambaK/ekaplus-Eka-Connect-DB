{
  "_id": "ST_CREATE_PROCESSOR_SPLIT_WRNT",
  "name": "ST_CREATE_PROCESSOR_SPLIT_WRNT",
  "type": "processor",
  "refType": "app",
  "refTypeId": "ada131db-5171-4b9c-b6d6-caae0c6cd2f5",
  "snippet": "\r\nvar connectUrl = req.body.propertyList.eka_connect_host + '/workflow/data';\r\nvar end = 1000;\r\nvar connectBody = {\r\n    appId: req.body.appId,\r\n    workFlowTask: 'dummystocklist'\r\n};\r\nvar connect = {\r\n    method: 'POST',\r\n    body: connectBody,\r\n    url: connectUrl,\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n};\r\nfunction get_connect() {\r\n    return new Promise(function (resolve, reject) {\r\n        request(connect, function (err, response, body) {\r\n            if (err || body.error) reject(body);\r\n            else {\r\n                resolve(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar platformRobusta = {\r\n    method: 'POST',\r\n    body: { collectionName: 'Robusta Tender Update' },\r\n    url: req.body.propertyList.eka_connect_host +\r\n        '/collectionmapper/' +\r\n        req.body.appId +\r\n        '/00b0627c-e0dd-4530-a765-116ab9748487/fetchCollectionRecords',\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        'X-Remote-User': 'ekaApp'\r\n    },\r\n    json: true\r\n};\r\nfunction get_collection_Robusta() {\r\n    return new Promise(function (resolve, reject) {\r\n        request(platformRobusta, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar platformArabica = {\r\n    method: 'POST',\r\n    url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '/collectionmapper/' +\r\n        req.body.appId +\r\n        '/00b0627c-e0dd-4530-a765-116ab9748487/fetchCollectionRecords',\r\n    body: { collectionName: 'Arabica Tender Update' },\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        'X-Remote-User': 'ekaApp'\r\n    },\r\n    json: true\r\n};\r\nfunction get_collection_Arabica() {\r\n    return new Promise(function (resolve, reject) {\r\n        request(platformArabica, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nvar postLoadingAPI = {\r\n    method: 'POST',\r\n    url: req.body.propertyList.platform_url + '/api/logisticinternal/internalExceutionLoading/Create',\r\n    headers: {\r\n        Authorization: req.headers.authorization\r\n    },\r\n    json: true\r\n};\r\nfunction post_loadingapi(body) {\r\n    postLoadingAPI.body = body;\r\n    console.log('LOADING', postLoadingAPI);\r\n    console.log(postLoadingAPI.body);\r\n    return new Promise(function (resolve, reject) {\r\n        request(postLoadingAPI, function (err, response, body) {\r\n            console.log('LOADING', body);\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nvar postLandingAPI = {\r\n    method: 'POST',\r\n    url: req.body.propertyList.platform_url + '/api/logisticinternal/internalExceutionLanding/Create',\r\n    headers: {\r\n        Authorization: req.headers.authorization\r\n    },\r\n    json: true\r\n};\r\nfunction post_landingapi(body) {\r\n    postLandingAPI.body = body;\r\n    console.log('LANDING', postLandingAPI);\r\n    console.log('BODY', postLandingAPI.body);\r\n    return new Promise(function (resolve, reject) {\r\n        request(postLandingAPI, function (err, response, body) {\r\n            console.log('LANDING', body);\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction groupBy(list, keyGetter) {\r\n    const map = new Map();\r\n    list.forEach(item => {\r\n        const key = keyGetter(item);\r\n        const collection = map.get(key);\r\n        if (!collection) {\r\n            map.set(key, [item]);\r\n        } else {\r\n            collection.push(item);\r\n        }\r\n    });\r\n    return map;\r\n}\r\nasync function manipulateData(collectionData, connectData) {\r\n    var loadingBody = [];\r\n    for (var i = 0; i < collectionData.length; i++) {\r\n        for (var j = 0; j < connectData.length; j++) {\r\n            if (\r\n                collectionData[i] &&\r\n                collectionData[i]['EWR_Split_No'] &&\r\n                collectionData[i]['EWR_Split_No'] == connectData[j]['ext_stock_ref_no'] &&\r\n                connectData[j]['ext_stock_ref_no'] &&\r\n                connectData[j]['Stock_Update_Status'] != 'Completed'\r\n            ) {\r\n                loadingBody.push({ ...collectionData[i], ...connectData[j] }); //make payload for the loading api\r\n            }\r\n        }\r\n    }\r\n    if (loadingBody.length > 0) {\r\n        var purchaseExecutionLoadStkDTOList = [];\r\n        for (var i = 0; i < loadingBody.length; i++) {\r\n            purchaseExecutionLoadStkDTOList.push({\r\n                sourceType: 'Discrete Stock',\r\n                sourceStockRefNo: loadingBody[i]['stock_ref_no'],\r\n                externalStkRefNo: loadingBody[i]['ExternalStockRefNo'],\r\n                qtyUnit: loadingBody[i]['Quantity_UOM'],\r\n                shippedNetQty: parseFloat(loadingBody[i]['NET_WEIGHT']),\r\n                shippedGrossQty: parseFloat(loadingBody[i]['NET_WEIGHT']),\r\n                qty: parseFloat(loadingBody[i]['NET_WEIGHT']),\r\n                tareWeight: '0',\r\n                remarks: '',\r\n                isDeleted: 'N'\r\n            });\r\n        }\r\n        var splitBody = {\r\n            isExternalGMR: 'Yes',\r\n            effDate: loadingBody[0]['activityDate'],\r\n            modeOfTransportName: 'Title Transfer',\r\n            bookingRefNo: '',\r\n            extRefNo: '',\r\n            originCityName: loadingBody[0]['shed'],\r\n            destinationCityName: loadingBody[0]['shed'],\r\n            internalRemarks: '',\r\n            qtyUnitName: loadingBody[0]['Quantity_UOM'],\r\n            sourceType: 'Discrete Stock',\r\n            carrierDetailsDTO: {\r\n                carrierTypeId: '',\r\n                carrierId: '',\r\n                forwardingAgentId: '',\r\n                transportAgentId: '',\r\n                transportCompanyId: '',\r\n                carrierGrossWeight: '',\r\n                carrierTareWeight: ''\r\n            },\r\n            purchaseExecutionLoadStkDTOList: purchaseExecutionLoadStkDTOList\r\n        };\r\n\r\n        return await splitStock(splitBody, loadingBody);\r\n    }\r\n}\r\nasync function splitStock(splitBody, loadingBody) {\r\n    var stocksBody = [];\r\n    let responseLoading = await post_loadingapi(splitBody);\r\n    if (responseLoading.status == 'success') {\r\n\r\n        var description = JSON.parse(responseLoading.description);\r\n        var no_of_splits = description.purchaseExecutionLoadStkDTOList;\r\n        var purchaseExecutionLandStkDTOList = [];\r\n        for (var i = 0; i < no_of_splits.length; i++) {\r\n            purchaseExecutionLandStkDTOList.push({\r\n                landedStockType: 'Discrete Stock',\r\n                internalStockRefNo: no_of_splits[i]['internalStockRefNo'],\r\n                isDeleted: 'N',\r\n                status: 'Active',\r\n                remarks: 'testStockRemarks',\r\n                packingConditionName: 'Sound & Full',\r\n                landedNoOfUnits: parseInt(loadingBody[i]['NO_OF_UNITS']),\r\n                landedNetQty: parseInt(loadingBody[i]['NET_WEIGHT']),\r\n                landedGrossQty: parseInt(loadingBody[i]['NET_WEIGHT']),\r\n                qty: parseInt(loadingBody[i]['NET_WEIGHT']),\r\n                isAddedToPool: 'N',\r\n                isRearrange: 'N'\r\n            });\r\n        }\r\n        var landingbody = {\r\n            isExternalGMR: 'Yes',\r\n            effDate: loadingBody[0]['activityDate'],\r\n            internalRemarks: 'test',\r\n            destinationCityName: loadingBody[0]['shed'],\r\n            warehouseReceiptNo: '',\r\n            qtyUnitName: loadingBody[0]['Quantity_UOM'],\r\n            landedStockType: 'Discrete Stock',\r\n            gmrRefNo: description.gmrRefNo,\r\n            purchaseExecutionLandStkDTOList: purchaseExecutionLandStkDTOList,\r\n            internalGmrRefNo: ''\r\n        };\r\n        let responselandingbody = await post_landingapi(landingbody);\r\n        if (responselandingbody.status == 'success') {\r\n            var des = JSON.parse(responselandingbody.description);\r\n            var purchaseExecutionLandStkDTOList = des.purchaseExecutionLandStkDTOList;\r\n            var stocksBody = [\r\n                {\r\n                    ext_stock_ref_no: loadingBody[0]['ext_stock_ref_no'],\r\n                    stock_ref_no: loadingBody[0]['stock_ref_no'],\r\n                    splitIndicator: 'N'\r\n                }\r\n            ];\r\n            for (var i = 0; i < purchaseExecutionLandStkDTOList.length; i++) {\r\n                stocksBody.push({\r\n                    activityDate: loadingBody[0]['activityDate'],\r\n                    instrument_name: loadingBody[0]['instrument_name'],\r\n                    instrument_name_value: loadingBody[0]['instrument_name_value'],\r\n                    ext_stock_ref_no: purchaseExecutionLandStkDTOList[i]['externalStkRefNo'],\r\n                    quality: loadingBody[0]['quality'],\r\n                    warehouse: loadingBody[0]['warehouse'],\r\n                    exchangeDeliveryStatus: loadingBody[0]['exchangeDeliveryStatus'],\r\n                    shed: loadingBody[0]['shed'],\r\n                    Profit_Center: loadingBody[0]['Profit_Center'],\r\n                    Strategy: loadingBody[0]['Strategy'],\r\n                    cropyear: loadingBody[0]['cropyear'],\r\n                    origin: loadingBody[0]['origin'],\r\n                    product: loadingBody[0]['product'],\r\n                    EWR_Split_No: loadingBody[0]['ext_stock_ref_no'],\r\n                    request_type: 'Grading',\r\n                    warrant_remarks: 'warrant_remarks',\r\n                    stock_ref_no: purchaseExecutionLandStkDTOList[i]['internalStockRefNo'],\r\n                    grading_status: 'Passed',\r\n                    certification_status: 'Certified',\r\n                    splitIndicator: 'S',\r\n                    Stock_Update_Status: 'Completed',\r\n                    actual_quantity: parseFloat(purchaseExecutionLandStkDTOList[i]['grossWeight']),\r\n                    Quantity_UOM: loadingBody[i]['Quantity_UOM'],\r\n                    no_of_units: purchaseExecutionLandStkDTOList[i]['noOfUnits'],\r\n                    exchange_lot: loadingBody[0]['exchange_lot'],\r\n                    Packing_Size: loadingBody[0]['Packing_Size'],\r\n                    legal_entity: loadingBody[0]['legal_entity'],\r\n                    inventory_status: 'In',\r\n                    port_name: loadingBody[0]['port_name'],\r\n                    corporate: loadingBody[0]['corporate'],\r\n                    Grading_Date: purchaseExecutionLandStkDTOList[i]['gradingDate'],\r\n                    certified_date: loadingBody[0]['certified_date'],\r\n                    final_weight_date: purchaseExecutionLandStkDTOList[i]['finalWeightDate'],\r\n                    title_transfer_status: 'In',\r\n                    Weight_Update_Available: 'N',\r\n                    Weight_Final: 'N'\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return stocksBody;\r\n}\r\nPromise.all([get_connect(), get_collection_Robusta(), get_collection_Arabica()]).then(function (result) {\r\n    var response = [];\r\n    var connectData = result[0].data;\r\n    var RobustaData = result[1];\r\n    var ArabicaData = result[2];\r\n    var collectionData = RobustaData.concat(ArabicaData);\r\n    const grouped = groupBy(collectionData, data => data.EWR_Split_No);\r\n    var groupedArray = [];\r\n    var set = new Set();\r\n    for (let i = 0; i < collectionData.length; i++) {\r\n        if (collectionData[i]['EWR_Split_No']) {\r\n            set.add(collectionData[i]['EWR_Split_No']);\r\n        }\r\n    }\r\n\r\n    var arrayEWRnos = Array.from(set);\r\n    arrayEWRnos.forEach(element => {\r\n        groupedArray.push(grouped.get(element));\r\n    });\r\n\r\n    var responseArray = [];\r\n    async function getMainFunction() {\r\n        for (let k = 0; k < groupedArray.length; k++) {\r\n            var response = await manipulateData(groupedArray[k], connectData);\r\n            if (response) {\r\n                responseArray.push(...response);\r\n            }\r\n        }\r\n        return responseArray;\r\n    }\r\n    getMainFunction().then(data => {\r\n        console.log(data);\r\n        res.status(200).send(data);\r\n    });\r\n});\r\n",
  "sys__UUID": "8ce76a86-606e-425a-9489-ed8ebe999d69",
  "sys__createdBy": "ekauser@ekaplus.com"
}
