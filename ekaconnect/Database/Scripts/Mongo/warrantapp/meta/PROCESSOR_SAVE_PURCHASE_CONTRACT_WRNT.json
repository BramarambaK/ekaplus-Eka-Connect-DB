{
  "_id": "PROCESSOR_SAVE_PURCHASE_CONTRACT_WRNT",
  "name": "PROCESSOR_SAVE_PURCHASE_CONTRACT_WRNT",
  "type": "processor",
  "refType": "app",
  "refTypeId": "ada131db-5171-4b9c-b6d6-caae0c6cd2f5",
  "snippet": "\r\nvar connectUrl = req.body.propertyList.eka_connect_host + '/workflow/data';\r\nvar connect = {\r\n    method: 'POST',\r\n    url: connectUrl,\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n};\r\nfunction get_connect(body) {\r\n    connect.body = {};\r\n    connect.body = body;\r\n    return new Promise(function (resolve, reject) {\r\n        request(connect, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nlet selectedData = JSON.parse(req.body.selectedData);\r\nlet body = req.body;\r\nvar outputData = {\r\n    contractType: 'Purchase',\r\n    issueDate: body.activityDate,\r\n    product: selectedData[0].product,\r\n    origination: selectedData[0].origin,\r\n    cropYear: selectedData[0].crop_year,\r\n    quality: selectedData[0].quality,\r\n    contractQtyUnit: selectedData[0].quantity_unit,\r\n    itemQty: req.body.quantity,\r\n    itemQtyUnit: selectedData[0].quantity_unit,\r\n    packingType: 'In Bags',\r\n    packingSize: selectedData[0].Packing_Size,\r\n    priceType: 'Flat',\r\n    contractPrice: body.futurePrice,\r\n    contractPriceUnit: body.futurePriceUnit,\r\n    periodType: 'Spot',\r\n    fromDate: body.activityDate,\r\n    toDate: body.activityDate,\r\n    loadingLocation: selectedData[0].storage_location,\r\n    loadingLocationType: 'Storage Location',\r\n    instrumentName: selectedData[0].instrument_name\r\n};\r\nconsole.log(outputData);\r\nvar platformurl = req.body.propertyList.platform_url + '/api/contract/warrantContract/create';\r\nvar platformapi = {\r\n    method: 'POST',\r\n    body: outputData,\r\n    url: platformurl,\r\n    headers: {\r\n        Authorization: req.headers.authorization\r\n    },\r\n    json: true\r\n};\r\nfunction get_platform() {\r\n    return new Promise(function (resolve, reject) {\r\n        request(platformapi, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nget_platform()\r\n    .then(function (result) {\r\n        var contractbody = {\r\n            appId: req.body.appId,\r\n            workFlowTask: 'dummycontractlist'\r\n        };\r\n        get_connect(contractbody).then(function (result2) {\r\n            var contractlist = result2.data;\r\n            var output = {};\r\n            console.log(result);\r\n            if (result.status == 'success' || result.status == 'Pending') {\r\n                var data = JSON.parse(result.data);\r\n                var ext_stock_ref_no_array = [];\r\n                for (var i = 0; i < selectedData.length; i++) {\r\n                    ext_stock_ref_no_array.push(selectedData[i].ext_stock_ref_no);\r\n                }\r\n                output = {\r\n                    contract_ref_no: result.externalRefNo,\r\n                    contract_status: data.approvalStatus,\r\n                    contract_creation_date: data.contractCreationDate,\r\n                    CP_Name: data.cpName,\r\n                    ext_stock_ref_no: selectedData[0]['ext_stock_ref_no'],\r\n                    ext_stock_ref_no_array: ext_stock_ref_no_array.toString(),\r\n                    Profit_Center: data.profitCenter,\r\n                    corporate: data.corporate,\r\n                    internalContractItemRefNo: data.internalContractItemRefNo,\r\n                    Strategy: data.strategy\r\n                };\r\n\r\n                res.status(200).send(output);\r\n            } else {\r\n                if (result.description) {\r\n                    res.status(500).send('Error in Purchase contract creation:(' + result.description + ')');\r\n                } else {\r\n                    res.status(500).send('Purchase contract creation is failed, please try once again');\r\n                }\r\n            }\r\n        });\r\n    })\r\n    .catch(err => {\r\n        res.status(500).send('Purchase contract creation is failed, please try once again');\r\n    });\r\n",
  "sys__UUID": "bb936a20-8eba-4022-acda-6026d581decd",
  "sys__createdBy": "ekauser@ekaplus.com"
}
