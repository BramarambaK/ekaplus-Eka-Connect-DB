{
  "_id": "domain_listing_WRNT",
  "name": "domain_listing_WRNT",
  "type": "processor",
  "refType": "app",
  "refTypeId": "ada131db-5171-4b9c-b6d6-caae0c6cd2f5",
  "snippet": "\r\nvar moment = require('moment');\r\nvar end = 1000;\r\nvar connectUrl = req.body.propertyList.eka_connect_host + '/workflow/data';\r\nvar connect = {\r\n    method: 'POST',\r\n    url: connectUrl,\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n};\r\nfunction get_connect(body) {\r\n    var connectBody = {\r\n        appId: req.body.appId,\r\n        workFlowTask: body\r\n    };\r\n    connect.body = {};\r\n    connect.body = connectBody;\r\n    return new Promise(function (resolve, reject) {\r\n        request(connect, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar contractUrl = req.body.propertyList.eka_connect_host + '/workflow/data';\r\nvar contractBody = {\r\n    appId: req.body.appId,\r\n    workFlowTask: 'dummycontractlist'\r\n};\r\nvar contract = {\r\n    method: 'POST',\r\n    body: contractBody,\r\n    url: contractUrl,\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n};\r\nvar invoice = {\r\n    method: 'POST',\r\n    url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '/collectionmapper/ada131db-5171-4b9c-b6d6-caae0c6cd2f5/6abda3f2-5e71-46c2-9912-a87bc0451410/fetchCollectionRecords',\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-Remote-User': 'ekaApp',\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n};\r\nfunction get_invoice(invoiceBody) {\r\n    invoice.body = {};\r\n    invoice.body = invoiceBody;\r\n    return new Promise(function (resolve, reject) {\r\n        request(invoice, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction get_contract() {\r\n    return new Promise(function (resolve, reject) {\r\n        request(contract, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar platformRobusta = {\r\n    method: 'POST',\r\n    url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '/collectionmapper/ada131db-5171-4b9c-b6d6-caae0c6cd2f5/6abda3f2-5e71-46c2-9912-a87bc0451410/fetchCollectionRecords',\r\n    body: {\r\n        collectionName: 'Robusta Grading Results Upload',\r\n        getAllRecords: true\r\n    },\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-Remote-User': 'ekaApp',\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n};\r\nfunction get_collection_Robusta() {\r\n    return new Promise(function (resolve, reject) {\r\n        request(platformRobusta, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar platformArabica = {\r\n    method: 'POST',\r\n    url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '/collectionmapper/ada131db-5171-4b9c-b6d6-caae0c6cd2f5/6abda3f2-5e71-46c2-9912-a87bc0451410/fetchCollectionRecords',\r\n    body: {\r\n        collectionName: 'Arabica Grading Results_New',\r\n        getAllRecords: true\r\n    },\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-Remote-User': 'ekaApp',\r\n        'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    json: true\r\n};\r\nfunction get_collection_Arabica() {\r\n    return new Promise(function (resolve, reject) {\r\n        request(platformArabica, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n            }\r\n            else {\r\n                reject(body);\r\n            }\r\n        });\r\n    });\r\n}\r\nPromise.all([\r\n    get_contract(),\r\n    get_connect('dummystocklist'),\r\n    get_connect('dummyexchangedeliverylist'),\r\n    get_connect('dummystoppinglist'),\r\n    get_collection_Robusta(),\r\n    get_collection_Arabica()\r\n]).then(function (result) {\r\n    var stocks = result[1].data;\r\n    var contracts = result[0].data;\r\n    var exchangelist = result[2].data;\r\n    var stoppinglist = result[3].data;\r\n    var RobustaData = result[4];\r\n    var ArabicaData = result[5];\r\n    var collectionData = RobustaData.concat(ArabicaData); // data from collection\r\n    collectionData = collectionData.reduce((unique, o) => {\r\n        if (!unique.some(obj => obj.ExternalStockRefNo === o.ExternalStockRefNo)) {\r\n            unique.push(o);\r\n        }\r\n        return unique;\r\n    }, []);\r\n    var output = [];\r\n    var gmrlistArr = [];\r\n\r\n    for (var i = 0; i < stocks.length; i++) {\r\n        if (stocks[i] && stocks[i]['splitIndicator'] != 'N') {\r\n            delete stocks[i]['Sales_Contract_Ref_No'];\r\n            delete stocks[i]['Contract_Ref_No'];\r\n            delete stocks[i]['Contract_Status'];\r\n            delete stocks[i]['Sales_GMR_Ref_No'];\r\n            delete stocks[i]['INTERNAL_GMR_REF_NO'];\r\n            delete stocks[i]['userId'];\r\n            delete stocks[i]['sys__UUID'];\r\n            delete stocks[i]['sys__updatedOn'];\r\n            delete stocks[i]['sys__updatedBy'];\r\n            delete stocks[i]['sys__data__state'];\r\n            delete stocks[i]['sys__createdOn'];\r\n            delete stocks[i]['sys__createdBy'];\r\n            delete stocks[i]['refTypeId'];\r\n            delete stocks[i]['refType'];\r\n            delete stocks[i]['_id'];\r\n            delete stocks[i]['sys__state'];\r\n            delete stocks[i]['External Stock Ref No'];\r\n            delete stocks[i]['edmarkrefnodropdown'];\r\n            delete stocks[i]['instrument_name'];\r\n            stocks[i]['instrument_name'] = stocks[i]['instrument_name_value'];\r\n            delete stocks[i]['instrument_name_value'];\r\n            delete stocks[i]['object'];\r\n            delete stocks[i]['grading_date'];\r\n            delete stocks[i]['ED Mark Ref No'];\r\n            stocks[i]['storage_location'] = '';\r\n            stocks[i]['storage_location'] = stocks[i]['shed'];\r\n            stocks[i]['Appeal_Date'] = '';\r\n            stocks[i]['Regrading_Date'] = '';\r\n            if (\r\n                stocks[i] &&\r\n                stocks[i]['grading_status'] &&\r\n                (stocks[i]['grading_status'].includes('Re-grading') || stocks[i]['grading_status'].includes('grading'))\r\n            ) {\r\n                stocks[i]['Regrading_Date'] = stocks[i]['activityDate'];\r\n            }\r\n            if (\r\n                stocks[i] &&\r\n                stocks[i]['grading_status'] &&\r\n                (stocks[i]['grading_status'].includes('Appeal') || stocks[i]['grading_status'].includes('appeal'))\r\n            ) {\r\n                stocks[i]['Appeal_Date'] = stocks[i]['activityDate'];\r\n            }\r\n            stocks[i]['QualityImpactedAttributes'] = '';\r\n            output.push({ ...stocks[i] });\r\n        }\r\n    }\r\n    for (var i = 0; i < output.length; i++) {\r\n        var datasetCon = {\r\n            Sales_Contract_Ref_No: '',\r\n            Contract_Status: '',\r\n            Sales_GMR_Ref_No: '',\r\n            contract_creation_date: '',\r\n            GMR_creation_date: ''\r\n        };\r\n        for (var j = 0; j < contracts.length; j++) {\r\n            if (\r\n                contracts[j] &&\r\n                output[i] &&\r\n                contracts[j]['edmarkrefno'] &&\r\n                output[i]['edmarkrefno'] &&\r\n                contracts[j]['edmarkrefno'] == output[i]['edmarkrefno'] &&\r\n                contracts[j]['contract_ref_no'].includes('SC')\r\n            ) {\r\n                datasetCon['Sales_Contract_Ref_No'] = contracts[j]['contract_ref_no'];\r\n                datasetCon['Contract_Status'] = contracts[j]['contract_status'];\r\n                datasetCon['Sales_GMR_Ref_No'] = contracts[j]['GMR_Ref_No'];\r\n                datasetCon['title_transfer_status'] = contracts[j]['title_transfer_status'];\r\n                if (contracts[j]['contract_creation_date'])\r\n                    datasetCon['contract_creation_date'] = moment\r\n                        .utc(contracts[j]['contract_creation_date'])\r\n                        .utcOffset('+0530')\r\n                        .format('DD-MMM-YYYY');\r\n                if (contracts[j]['GMR_creation_date'])\r\n                    datasetCon['GMR_creation_date'] = moment\r\n                        .utc(contracts[j]['GMR_creation_date'])\r\n                        .utcOffset('+0530')\r\n                        .format('DD-MMM-YYYY');\r\n                output[i] = { ...output[i], ...datasetCon };\r\n                if (output[i]['Sales_GMR_Ref_No']) gmrlistArr.push(output[i]['Sales_GMR_Ref_No']);\r\n            }\r\n        }\r\n    }\r\n    for (var i = 0; i < output.length; i++) {\r\n        var datasetCon = {\r\n            Contract_Status: '',\r\n            Purchase_Contract_Ref_No: '',\r\n            Purchase_GMR_Ref_No: '',\r\n            contract_creation_date: '',\r\n            GMR_creation_date: ''\r\n        };\r\n        for (var j = 0; j < contracts.length; j++) {\r\n            if (\r\n                contracts[j] &&\r\n                output[i] &&\r\n                contracts[j]['ext_stock_ref_no'] &&\r\n                output[i]['ext_stock_ref_no'] &&\r\n                contracts[j]['ext_stock_ref_no'] == output[i]['ext_stock_ref_no'] &&\r\n                contracts[j]['contract_ref_no'].includes('PC')\r\n            ) {\r\n                datasetCon['Purchase_Contract_Ref_No'] = contracts[j]['contract_ref_no'];\r\n                datasetCon['Contract_Status'] = contracts[j]['contract_status'];\r\n                datasetCon['Purchase_GMR_Ref_No'] = contracts[j]['GMR_Ref_No'];\r\n                if (contracts[j]['GMR_creation_date'])\r\n                    datasetCon['GMR_creation_date'] = moment\r\n                        .utc(contracts[j]['GMR_creation_date'])\r\n                        .utcOffset('+0530')\r\n                        .format('DD-MMM-YYYY');\r\n                if (contracts[j]['contract_creation_date'])\r\n                    datasetCon['contract_creation_date'] = moment\r\n                        .utc(contracts[j]['contract_creation_date'])\r\n                        .utcOffset('+0530')\r\n                        .format('DD-MMM-YYYY');\r\n                output[i] = { ...output[i], ...datasetCon };\r\n                if (output[i]['Purchase_GMR_Ref_No']) gmrlistArr.push(output[i]['Purchase_GMR_Ref_No']);\r\n            }\r\n        }\r\n    }\r\n    for (var i = 0; i < output.length; i++) {\r\n        for (var k = 0; k < exchangelist.length; k++) {\r\n            var exchangedata = { contract_Price: '', fxpricetopayin: '', Price_Unit: '' };\r\n            if (output[i]['edmarkrefno'] == exchangelist[k]['edmarkrefno']) {\r\n                exchangedata['contract_Price'] = exchangelist[k]['futurePrice'];\r\n                exchangedata['fxpricetopayin'] = exchangelist[k]['fxpricetopayin'];\r\n                exchangedata['Price_Unit'] = exchangelist[k]['futurePriceUnit'];\r\n                output[i] = { ...output[i], ...exchangedata };\r\n            }\r\n        }\r\n        for (var a = 0; a < stoppinglist.length; a++) {\r\n            var stoppingdata = { contract_Price: '', fxpricetopayin: '', Price_Unit: '' };\r\n            if (output[i]['edmarkrefno'] == stoppinglist[a]['edmarkrefno']) {\r\n                stoppingdata['contract_Price'] = stoppinglist[a]['futurePrice'];\r\n                stoppingdata['fxpricetopayin'] = stoppinglist[a]['fxpricetopayin'];\r\n                stoppingdata['Price_Unit'] = stoppinglist[a]['futurePriceUnit'];\r\n                output[i] = { ...output[i], ...stoppingdata };\r\n            }\r\n        }\r\n    }\r\n    gmrlistArr = gmrlistArr.filter((item, i, ar) => ar.indexOf(item) === i);\r\n    var invoiceBody = {\r\n        collectionName: 'Invoiceable Item Domain',\r\n        getAllRecords: true,\r\n        filter: [\r\n            {\r\n                fieldName: 'GMR Ref No',\r\n                value: gmrlistArr.toString(),\r\n                operator: 'in'\r\n            }\r\n        ]\r\n    };\r\n    get_invoice(invoiceBody).then(function (result4) {\r\n        var invoiceList = result4;\r\n        for (var i = 0; i < output.length; i++) {\r\n            for (var j = 0; j < invoiceList.length; j++) {\r\n                if (\r\n                    output[i]['Sales_GMR_Ref_No'] &&\r\n                    invoiceList[j]['GMR Ref No'] &&\r\n                    output[i]['Sales_GMR_Ref_No'] == invoiceList[j]['GMR Ref No']\r\n                ) {\r\n                    output[i]['invoice_Ref_No'] = invoiceList[j]['Invoice Ref No'];\r\n                }\r\n            }\r\n            for (var k = 0; k < collectionData.length; k++) {\r\n                if (output[i]['ext_stock_ref_no'] == collectionData[k]['ExternalStockRefNo']) {\r\n                    var QualityImpactedAttributes = collectionData[k]['QualityImpactedAttributes'];\r\n                    QualityImpactedAttributes = QualityImpactedAttributes.split(', ');\r\n                    if (QualityImpactedAttributes[QualityImpactedAttributes.length - 1] == '') {\r\n                        delete QualityImpactedAttributes[QualityImpactedAttributes.length - 1];\r\n                    }\r\n                    var qualityimpactedattributes = [];\r\n                    let qualitytest = [];\r\n                    for (var j = 0; j < QualityImpactedAttributes.length; j++) {\r\n                        if (QualityImpactedAttributes[j]) {\r\n                            QualityImpactedAttributes[j] = QualityImpactedAttributes[j].replace(/_/g, ' ');\r\n                        }\r\n                        for (var item in collectionData[k]) {\r\n                            if (QualityImpactedAttributes[j] == item) {\r\n                                var quality = {};\r\n                                quality[QualityImpactedAttributes[j]] = collectionData[k][item];\r\n                                quality = JSON.stringify(quality);\r\n                                quality = quality.replace(/[{}]/g, '');\r\n                                quality = quality.replace(/[\"']/g, '');\r\n                                qualitytest.push(JSON.stringify(quality));\r\n                            }\r\n                        }\r\n                    }\r\n                    qualitytest = qualitytest.toString();\r\n                    qualitytest = qualitytest.replace(/[\"']/g, '');\r\n                    output[i]['QualityImpactedAttributes'] = qualitytest;\r\n                }\r\n            }\r\n        }\r\n        res.status(200).send(output);\r\n    });\r\n});\r\n",
  "sys__UUID": "0fa7454d-c789-4025-94a1-ecf4a19c4a10",
  "sys__createdBy": "ekauser@ekaplus.com"
}
