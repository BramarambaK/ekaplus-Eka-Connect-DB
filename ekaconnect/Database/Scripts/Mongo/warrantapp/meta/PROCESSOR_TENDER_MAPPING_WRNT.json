{
  "_id": "PROCESSOR_TENDER_MAPPING_WRNT",
  "name": "PROCESSOR_TENDER_MAPPING_WRNT",
  "type": "processor",
  "refType": "app",
  "refTypeId": "ada131db-5171-4b9c-b6d6-caae0c6cd2f5",
  "snippet": "\r\n    var moment = require('moment');\r\n    var start = 0;\r\n    var end = 1000;\r\n    var connectUrl = req.body.propertyList.eka_connect_host + '/workflow/data';\r\n    var connectBody = {\r\n      appId: req.body.appId,\r\n      workFlowTask: 'dummystocklist'\r\n    };\r\n    var connect = {\r\n      method: 'POST',\r\n      body: connectBody,\r\n      url: connectUrl,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function get_connect() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(connect, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          }\r\n          else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var tender_update_URL = req.body.propertyList.eka_connect_host + '/workflow';\r\n    var tender_update = {\r\n      method: 'POST',\r\n      url: tender_update_URL,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function tender_update_post(connectupdatetender) {\r\n      var tender_update_Body = {\r\n        workflowTaskName: 'connectupdatetender',\r\n        task: 'connectupdatetender',\r\n        appName: 'warrant',\r\n        appId: 'ada131db-5171-4b9c-b6d6-caae0c6cd2f5',\r\n        output: { connectupdatetender },\r\n        id: '',\r\n        params: {},\r\n        sD: []\r\n      };\r\n      tender_update.body = {};\r\n      tender_update.body = tender_update_Body;\r\n      return new Promise(function (resolve, reject) {\r\n        request(tender_update, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          }\r\n          else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var platformRobusta = {\r\n      method: 'POST',\r\n      body: {\r\n        collectionName: 'Robusta Tender Update'\r\n      },\r\n      url: req.body.propertyList.eka_connect_host +\r\n        '/collectionmapper/' +\r\n        req.body.appId +\r\n        '/00b0627c-e0dd-4530-a765-116ab9748487/fetchCollectionRecords',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        'X-Remote-User': 'ekaApp'\r\n      },\r\n      json: true\r\n    };\r\n    function get_collection_Robusta() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(platformRobusta, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          }\r\n          else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var platformArabica = {\r\n      method: 'POST',\r\n      body: {\r\n        collectionName: 'Arabica Tender Update'\r\n      },\r\n      url: req.body.propertyList.eka_connect_host +\r\n        '/collectionmapper/' +\r\n        req.body.appId +\r\n        '/00b0627c-e0dd-4530-a765-116ab9748487/fetchCollectionRecords',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        'X-Remote-User': 'ekaApp'\r\n      },\r\n      json: true\r\n    };\r\n    function get_collection_Arabica() {\r\n      return new Promise(function (resolve, reject) {\r\n        request(platformArabica, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          }\r\n          else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var logistics = {\r\n      method: 'POST',\r\n      url: req.body.propertyList.eka_connect_host +\r\n        '/collectionmapper/' +\r\n        req.body.appId +\r\n        '/00b0627c-e0dd-4530-a765-116ab9748487/fetchCollectionRecords',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        'X-Remote-User': 'ekaApp'\r\n      },\r\n      json: true\r\n    };\r\n    function get_logistics(logisticsbody) {\r\n      logistics.body = {};\r\n      logistics.body = logisticsbody;\r\n      return new Promise(function (resolve, reject) {\r\n        request(logistics, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          }\r\n          else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var platformurlSRINK = req.body.propertyList.platform_url + '/api/logisticinternal/captureShrink/Create';\r\n    var platformapiSRINK = {\r\n      method: 'POST',\r\n      url: platformurlSRINK,\r\n      headers: {\r\n        Authorization: req.headers.authorization\r\n      },\r\n      json: true\r\n    };\r\n    function get_platformShrink(body) {\r\n      platformapiSRINK.body = {};\r\n      platformapiSRINK.body = body;\r\n      console.log(platformapiSRINK.body);\r\n      return new Promise(function (resolve, reject) {\r\n        request(platformapiSRINK, function (err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          }\r\n          else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    Promise.all([get_connect(), get_collection_Robusta(), get_collection_Arabica()]).then(function (result) {\r\n      var connectData = result[0].data; //connect object which we are querying\r\n      var RobustaData = result[1];\r\n      var ArabicaData = result[2];\r\n      var exchange_type;\r\n      var classStr;\r\n      var outputData = [];\r\n      var Grading_Date;\r\n      var dataset = [];\r\n      var collectionData = RobustaData.concat(ArabicaData); // data from collection\r\n      collectionData = collectionData.reduce((unique, o) => {\r\n        if (!unique.some(obj => obj.ExternalStockRefNo === o.ExternalStockRefNo)) {\r\n          unique.push(o);\r\n        }\r\n        return unique;\r\n      }, []);\r\n      for (var j = 0; j < collectionData.length; j++) {\r\n        for (var i = 0; i < connectData.length; i++) {\r\n          delete connectData[i]['_id'];\r\n          delete connectData[i]['sys__updatedOn'];\r\n          delete connectData[i]['sys__updatedBy'];\r\n          delete connectData[i]['sys__createdBy'];\r\n          delete connectData[i]['sys__createdOn'];\r\n          delete connectData[i]['sys__UUID'];\r\n          delete connectData[i]['object'];\r\n          delete connectData[i]['refTypeId'];\r\n          if (\r\n            connectData[i]['grading_status'] == 'Passed' &&\r\n            connectData[i]['certification_status'] == 'Certified' &&\r\n            !connectData[i]['edmarkrefno'] &&\r\n            connectData[i]['Stock_Update_Status'] == 'Pending'\r\n          ) {\r\n            if (connectData[i]['ext_stock_ref_no'] == collectionData[j]['ExternalStockRefNo']) {\r\n              var Weight_Update_Available = 'N';\r\n              exchange_type = '';\r\n              classStr = '';\r\n              Grading_Date = '';\r\n              if (collectionData[j]['Exchange Typing']) exchange_type = collectionData[j]['Exchange Typing'];\r\n              if (collectionData[j]['Class']) classStr = collectionData[j]['Class'];\r\n              if (collectionData[j]['Grading Date']) Grading_Date = collectionData[j]['Grading Date'];\r\n              if (connectData[i]['actual_quantity'] != collectionData[j]['NET_WEIGHT']) {\r\n                Weight_Update_Available = 'Y';\r\n                dataset.push({ ...connectData[i], ...collectionData[j] });\r\n              }\r\n              outputData.push({\r\n                ...connectData[i],\r\n                final_weight_date: collectionData[j]['FINAL_WEIGHT_DATE'],\r\n                LOB_No: collectionData[j]['LOB_NO'],\r\n                Weight_Final: 'Y',\r\n                Weight_Update_Available: Weight_Update_Available,\r\n                no_of_units: collectionData[j]['NO_OF_UNITS'],\r\n                actual_quantity: collectionData[j]['NET_WEIGHT'],\r\n                Stock_Update_Date: new Date(),\r\n                Stock_Update_Status: 'Completed',\r\n                splitIndicator: 'S',\r\n                grading_date: Grading_Date,\r\n                class: classStr,\r\n                exchange_type: exchange_type,\r\n                allData: JSON.stringify(collectionData[j]),\r\n                edmarkrefnotextbox: 'abc'\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (dataset.length > 0) {\r\n        var ext_stock_ref_no = [];\r\n        var stock_ref_no = [];\r\n        for (var i = 0; i < dataset.length; i++) {\r\n          ext_stock_ref_no.push(dataset[i]['ext_stock_ref_no']);\r\n          stock_ref_no.push(dataset[i]['stock_ref_no']);\r\n        }\r\n\r\n        var logisticsbody = {\r\n          criteria: {\r\n            filter: [\r\n              {\r\n                fieldName: 'Stock Ref No',\r\n                value: stock_ref_no.toString(),\r\n                operator: 'in'\r\n              }\r\n            ]\r\n          },\r\n          collectionName: 'Sampling Logistics details'\r\n\r\n        };\r\n        get_logistics(logisticsbody).then(function (result1) {\r\n          var logisticsData = result1;\r\n          var purchaseExecutionLandStkDTOList = [];\r\n          var updateTenderstocks = [];\r\n          for (var i = 0; i < logisticsData.length; i++) {\r\n            for (var j = 0; j < dataset.length; j++) {\r\n              if (dataset[j]['stock_ref_no'] == logisticsData[i]['Stock Ref No']) {\r\n                var shrinkQty = parseFloat(dataset[j]['NET_WEIGHT']) - parseFloat(dataset[j]['actual_quantity']);\r\n                shrinkQty = Math.abs(shrinkQty);\r\n                var prevShrinkQty = logisticsData[i]['Total Shrink Quantity'];\r\n                var unallocated_qty = logisticsData[i]['Unallocated Quantity'];\r\n                if (unallocated_qty > 0) {\r\n                  purchaseExecutionLandStkDTOList.push({\r\n                    shrinkQty: shrinkQty,\r\n                    prevShrinkQty: prevShrinkQty,\r\n                    qtyUnitId: logisticsData[i]['QUANTITY UNIT ID'],\r\n                    entityId: logisticsData[i]['INTERNAL GRD DGRD REF NO'],\r\n                    actionId: 'DISCRETE_SHRINK',\r\n                    unallocatedQty: unallocated_qty,\r\n                    internalContractItemRefNo: ''\r\n                  });\r\n                  updateTenderstocks.push({\r\n                    shrinkQty: shrinkQty,\r\n                    prevShrinkQty: prevShrinkQty,\r\n                    qtyUnitId: logisticsData[i]['QUANTITY UNIT ID'],\r\n                    entityId: logisticsData[i]['INTERNAL GRD DGRD REF NO'],\r\n                    actionId: 'DISCRETE_SHRINK',\r\n                    unallocatedQty: unallocated_qty,\r\n                    internalContractItemRefNo: '',\r\n                    stock_ref_no: dataset[j]['stock_ref_no'],\r\n                    ext_stock_ref_no: dataset[j]['ext_stock_ref_no']\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n          var effDate = moment\r\n            .utc(new Date())\r\n            .utcOffset('+0530')\r\n            .format('YYYY-MM-DD');\r\n          var trmbody = {\r\n            internalRemarks: 'Capture Discrete Shrink',\r\n            effDate: effDate,\r\n            purchaseExecutionLandStkDTOList: purchaseExecutionLandStkDTOList\r\n          };\r\n          get_platformShrink(trmbody).then(function (result) {\r\n            if (result.status == 'success') {\r\n              var description = JSON.parse(result.description);\r\n              var postData = [];\r\n              var purchaseExecution = description.purchaseExecutionLandStkDTOList;\r\n              for (var i = 0; i < updateTenderstocks.length; i++) {\r\n                for (var j = 0; j < purchaseExecution.length; j++) {\r\n                  if (purchaseExecution[j]['entityId'] == updateTenderstocks[i]['entityId']) {\r\n                    postData.push({\r\n                      stock_ref_no: updateTenderstocks[i].stock_ref_no,\r\n                      ext_stock_ref_no: updateTenderstocks[i].ext_stock_ref_no,\r\n                      status: 'Updated in TRM'\r\n                    });\r\n                  }\r\n                }\r\n              }\r\n              tender_update_post(postData).then(function (output) {\r\n                console.log(result);\r\n                res.status(200).send(outputData);\r\n              });\r\n            } else {\r\n              for (var i = 0; i < updateTenderstocks.length; i++) {\r\n                postData.push({\r\n                  stock_ref_no: updateTenderstocks[i].stock_ref_no,\r\n                  ext_stock_ref_no: updateTenderstocks[i].ext_stock_ref_no,\r\n                  status: 'Not updated in TRM',\r\n                  remarks: 'API not working'\r\n                });\r\n              }\r\n              tender_update_post(postData).then(function (output) {\r\n                console.log(result);\r\n                // res.status(200).send(outputData);\r\n              });\r\n            }\r\n          });\r\n        });\r\n      } else res.status(200).send(outputData);\r\n    });\r\n ",
  "sys__UUID": "a2fbc322-30ca-454c-b942-c065f1cec663",
  "sys__createdBy": "Bravo"
}
