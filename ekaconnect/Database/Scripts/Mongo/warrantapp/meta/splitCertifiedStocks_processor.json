{
  "_id": "splitCertifiedStocks_processor",
  "name": "splitCertifiedStocks_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "ada131db-5171-4b9c-b6d6-caae0c6cd2f5",
  "snippet": "\r\n    var actual_quantity = 0;\r\n    var purchaseExecutionLoadStkDTOList = [];\r\n    var ext_stock_ref_no;\r\n    var quantity_unit;\r\n    var shed;\r\n    var activityDate;\r\n    var stock_ref_no;\r\n    var bulkPayLoadData = [];\r\n    if (req.body.bulkPayLoadData.length > 0) {\r\n      for (var i = 0; i < req.body.bulkPayLoadData.length; i++) {\r\n        if (req.body.bulkPayLoadData[i]['ext_stock_ref_no']) {\r\n          bulkPayLoadData.push(req.body.bulkPayLoadData[i])\r\n        }\r\n      }\r\n      actual_quantity = bulkPayLoadData[0]['actual_quantity'];\r\n      actual_quantity = parseFloat(actual_quantity);\r\n      ext_stock_ref_no = bulkPayLoadData[0]['extstockrefno'];\r\n      quantity_unit = bulkPayLoadData[0]['quantity_unit'];\r\n      shed = bulkPayLoadData[0]['shed'];\r\n      activityDate = bulkPayLoadData[0]['activityDate'];\r\n      stock_ref_no = bulkPayLoadData[0]['stock_ref_no'];\r\n    } else if (bulkPayLoadData.length == 0 || bulkPayLoadData[0]['activityDate']) {\r\n      res.status(500).send('Please fill the mandatory fields');\r\n    }\r\n    var quantity = 0;\r\n    for (var i = 0; i < bulkPayLoadData.length; i++) {\r\n      if (\r\n        !bulkPayLoadData[i]['quantity'] ||\r\n        !bulkPayLoadData[i]['ext_stock_ref_no'] ||\r\n        !bulkPayLoadData[i]['no_of_units']\r\n      ) {\r\n        res.status(500).send('Please fill the mandatory fields');\r\n        break;\r\n      }\r\n      bulkPayLoadData[i]['quantity'] = parseFloat(bulkPayLoadData[i]['quantity']);\r\n      quantity = quantity + bulkPayLoadData[i]['quantity'];\r\n      purchaseExecutionLoadStkDTOList.push({\r\n        sourceType: 'Discrete Stock',\r\n        sourceStockRefNo: stock_ref_no,\r\n        externalStkRefNo: bulkPayLoadData[i]['ext_stock_ref_no'],\r\n        qtyUnit: quantity_unit,\r\n        shippedNetQty: bulkPayLoadData[i]['quantity'],\r\n        shippedGrossQty: actual_quantity,\r\n        qty: bulkPayLoadData[i]['quantity'],\r\n        tareWeight: '0',\r\n        remarks: '',\r\n        isDeleted: 'N'\r\n      });\r\n    }\r\n    quantity = quantity.toFixed(5);\r\n    actual_quantity = actual_quantity.toFixed(5);\r\n\r\n    if (quantity != actual_quantity) {\r\n      res.status(500).send('Total quantity for the new stocks should be equal to the Actual Quantity');\r\n    } else {\r\n      var splitsURL = req.body.propertyList.platform_url + '/api/logisticinternal/internalExceutionLoading/Create';\r\n      var splitBody = {\r\n        isExternalGMR: 'Yes',\r\n        effDate: activityDate,\r\n        modeOfTransportName: 'Title Transfer',\r\n        bookingRefNo: '',\r\n        extRefNo: '',\r\n        originCityName: shed,\r\n        destinationCityName: shed,\r\n        internalRemarks: '',\r\n        qtyUnitName: quantity_unit,\r\n        sourceType: 'Discrete Stock',\r\n        carrierDetailsDTO: {\r\n          carrierTypeId: '',\r\n          carrierId: '',\r\n          forwardingAgentId: '',\r\n          transportAgentId: '',\r\n          transportCompanyId: '',\r\n          carrierGrossWeight: '',\r\n          carrierTareWeight: ''\r\n        },\r\n        purchaseExecutionLoadStkDTOList: purchaseExecutionLoadStkDTOList\r\n      };\r\n      var splitsAPI = {\r\n        method: 'POST',\r\n        url: splitsURL,\r\n        body: splitBody,\r\n        headers: {\r\n          Authorization: req.headers.authorization\r\n        },\r\n        json: true\r\n      };\r\n      console.log(splitsAPI.url);\r\n      console.log(splitsAPI.body);\r\n      function get_splitsAPI() {\r\n        return new Promise(function (resolve, reject) {\r\n          request(splitsAPI, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            }\r\n            else {\r\n              reject(body);\r\n            }\r\n          });\r\n        });\r\n      }\r\n      function get_landingAPI(api) {\r\n        console.log(api);\r\n        return new Promise(function (resolve, reject) {\r\n          request(api, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            }\r\n            else {\r\n              reject(body);\r\n            }\r\n          });\r\n        });\r\n      }\r\n      get_splitsAPI().then(result => {\r\n        console.log(result);\r\n        if (result.status != 'success') {\r\n          if (result.description) {\r\n            res.status(500).send('Error in loading operations:(' + result.description + ')');\r\n          } else {\r\n            res.status(500).send('Loading API is failing, please check');\r\n          }\r\n        }\r\n\r\n        var description = JSON.parse(result.description);\r\n        var no_of_splits = description.purchaseExecutionLoadStkDTOList;\r\n        var purchaseExecutionLandStkDTOList = [];\r\n        for (var i = 0; i < no_of_splits.length; i++) {\r\n          purchaseExecutionLandStkDTOList.push({\r\n            landedStockType: 'Discrete Stock',\r\n            internalStockRefNo: no_of_splits[i]['internalStockRefNo'],\r\n            isDeleted: 'N',\r\n            status: 'Active',\r\n            remarks: 'testStockRemarks',\r\n            packingConditionName: 'Sound & Full',\r\n            landedNoOfUnits: parseInt(bulkPayLoadData[i]['no_of_units']),\r\n            landedNetQty: bulkPayLoadData[i]['quantity'],\r\n            landedGrossQty: bulkPayLoadData[i]['quantity'],\r\n            qty: bulkPayLoadData[i]['quantity'],\r\n            isAddedToPool: 'N',\r\n            isRearrange: 'N'\r\n          });\r\n        }\r\n        var landingbody = {\r\n          isExternalGMR: 'Yes',\r\n          effDate: bulkPayLoadData[0]['activityDate'],\r\n          internalRemarks: 'test',\r\n          destinationCityName: bulkPayLoadData[0]['shed'],\r\n          warehouseReceiptNo: '',\r\n          qtyUnitName: quantity_unit,\r\n          landedStockType: 'Discrete Stock',\r\n          gmrRefNo: description.gmrRefNo,\r\n          purchaseExecutionLandStkDTOList: purchaseExecutionLandStkDTOList,\r\n          internalGmrRefNo: ''\r\n        };\r\n        var landingURL = req.body.propertyList.platform_url + '/api/logisticinternal/internalExceutionLanding/Create';\r\n        var landingAPI = {\r\n          method: 'POST',\r\n          url: landingURL,\r\n          body: landingbody,\r\n          headers: {\r\n            Authorization: req.headers.authorization\r\n          },\r\n          json: true\r\n        };\r\n        get_landingAPI(landingAPI).then(result2 => {\r\n          console.log(result2);\r\n          if (result2.status != 'success') {\r\n            if (result2.description) {\r\n              res.status(500).send('Error in landing operations:(' + result2.description + ')');\r\n            } else {\r\n              res.status(500).send('Landing API is failing, please check');\r\n            }\r\n          }\r\n          var des = JSON.parse(result2.description);\r\n          var purchaseExecutionLandStkDTOList = des.purchaseExecutionLandStkDTOList;\r\n          var stocksBody = [\r\n            {\r\n              ext_stock_ref_no: bulkPayLoadData[0]['extstockrefno'],\r\n              stock_ref_no: bulkPayLoadData[0]['stock_ref_no'],\r\n              splitIndicator: 'N',\r\n              markingType: ''\r\n            }\r\n          ];\r\n\r\n          for (var i = 0; i < purchaseExecutionLandStkDTOList.length; i++) {\r\n            stocksBody.push({\r\n              activityDate: bulkPayLoadData[0]['activityDate'],\r\n              instrument_name: bulkPayLoadData[0]['instrument_name'],\r\n              instrument_name_value: bulkPayLoadData[0]['instrument_name_value'],\r\n              ext_stock_ref_no: bulkPayLoadData[i]['ext_stock_ref_no'],\r\n              quality: bulkPayLoadData[0]['quality'],\r\n              warehouse: bulkPayLoadData[0]['warehouse'],\r\n              exchangeDeliveryStatus: bulkPayLoadData[0]['exchangeDeliveryStatus'],\r\n              shed: bulkPayLoadData[0]['shed'],\r\n              Profit_Center: bulkPayLoadData[0]['Profit_Center'],\r\n              Strategy: bulkPayLoadData[0]['Strategy'],\r\n              cropyear: bulkPayLoadData[0]['cropyear'],\r\n              origin: bulkPayLoadData[0]['origin'],\r\n              product: bulkPayLoadData[0]['product'],\r\n              EWR_Split_No: bulkPayLoadData[0]['extstockrefno'],\r\n              request_type: 'Grading',\r\n              warrant_remarks: 'warrant_remarks',\r\n              stock_ref_no: purchaseExecutionLandStkDTOList[i]['internalStockRefNo'],\r\n              grading_status: 'Passed',\r\n              certification_status: 'Certified',\r\n              splitIndicator: 'S',\r\n              Stock_Update_Status: 'Completed',\r\n              actual_quantity: bulkPayLoadData[i]['quantity'],\r\n              Quantity_UOM: bulkPayLoadData[i]['quantity_unit'],\r\n              no_of_units: bulkPayLoadData[i]['no_of_units'],\r\n              Weight_Update_Available: 'N',\r\n              Packing_Size: bulkPayLoadData[i]['Packing_Size'],\r\n              corporate: bulkPayLoadData[i]['corporate'],\r\n              exchange_lot: bulkPayLoadData[i]['exchange_lot'],\r\n              legal_entity: bulkPayLoadData[i]['legal_entity'],\r\n              port_name: bulkPayLoadData[i]['port_name'],\r\n              title_transfer_status: 'In',\r\n              Grading_Date: purchaseExecutionLandStkDTOList[i]['gradingDate'],\r\n              final_weight_date: purchaseExecutionLandStkDTOList[i]['finalWeightDate'],\r\n              certified_date: bulkPayLoadData[0]['certified_date'],\r\n              markingType: '',\r\n              edmarkrefnotextbox: 'abc'\r\n            });\r\n          }\r\n          res.status(200).send(stocksBody);\r\n        }).catch(err => {\r\n          res.status(500).send(err.description)\r\n        });\r\n      }).catch(err => {\r\n        res.status(500).send(err.description)\r\n      });\r\n    }\r\n\r\n ",
  "sys__UUID": "b08e8ce1-9c25-4785-9d0f-c2e90dc0f32e",
  "sys__createdBy": "ekauser@ekaplus.com"
}
