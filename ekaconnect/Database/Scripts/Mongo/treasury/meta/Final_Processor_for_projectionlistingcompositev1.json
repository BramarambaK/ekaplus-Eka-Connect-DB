{
    "_id" : "Final_Processor_for_projectionlistingcompositev1",
    "name" : "Final_Processor_for_projectionlistingcompositev1",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "e4ba81fc-1304-4f01-b641-7425da52a666",
    "snippet" : "\r\n    function valiadateMandatoryCheck(type, transaction, projection) {\r\n        var transactionDirection = transaction.reduce((dr, item) => {\r\n          dr[item.transactionId] = item.Direction;\r\n          return dr;\r\n        }, {});\r\n        var projectionDirection = projection.reduce((dr, item) => {\r\n          if (Array.isArray(item.transactionId)) {\r\n            for (let i = 0; i < item.transactionId.length; i++) {\r\n              dr[item.transactionId[i]['key']] = item.Direction;\r\n            }\r\n          } else {\r\n            dr[item.transactionId] = item.Direction;\r\n          }\r\n          return dr;\r\n        }, {});\r\n        if (type === 'manytoone') {\r\n          let netDirection = transaction.reduce((sum, item) => {\r\n            sum = sum + (item.Direction=='Credit' ? Number(item.amount) : -1 *Number(item.amount))\r\n            return sum\r\n          },0)\r\n          if(netDirection > 0 && projection[0]['Direction'] == 'Debit'){\r\n           return false;\r\n          }\r\n          else if(netDirection< 0 && projection[0]['Direction'] == 'Credit'){\r\n            return false;\r\n          }\r\n          else if(netDirection == 0){\r\n            return false\r\n          }\r\n          return true;\r\n        } else if (type === 'onetomany') {\r\n          let netDirection = projection.reduce((sum, item) => {\r\n            sum = sum + (item.Direction=='Credit' ? Number(item.amount) : -1 *Number(item.amount))\r\n            return sum\r\n          },0)\r\n          if(netDirection > 0 && transaction[0]['Direction'] == 'Debit'){\r\n           return false;\r\n          }\r\n          else if(netDirection< 0 && transaction[0]['Direction'] == 'Credit'){\r\n            return false;\r\n          }\r\n          else if(netDirection == 0){\r\n            return false\r\n          }\r\n          return true;\r\n        } else if (type === 'onetoone') {\r\n          for (let key in projectionDirection) {\r\n            if (transactionDirection[key] !== projectionDirection[key]) return false;\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n      function bodyfor(type, body, transaction, projection) {\r\n        var updatedbody = body;\r\n        if (type === 'manytoone') {\r\n          updatedbody.transactionMatches[0]['transactionIds'] = transaction.map(item => item.transactionId);\r\n          if (projection[0].projectionId === ' ') {\r\n            let item = projection[0];\r\n            updatedbody.transactionMatches[0]['projectionIds'] = [];\r\n            updatedbody.transactionMatches[0]['projections'] = [\r\n              {\r\n                projectionDate: req.body.hasOwnProperty('datefilters')\r\n                  ? req.body.datefilters.filterDate\r\n                  : moment(new Date()).format('YYYY-MM-DD'),\r\n                bankId: item.bankId,\r\n                currencyCode: item.currency,\r\n                accountNumber: item.bankAccount,\r\n                amount: item.amount,\r\n                direction: item.Direction,\r\n                classification: item.classification\r\n              }\r\n            ];\r\n          } else {\r\n            updatedbody.transactionMatches[0]['projectionIds'] = projection.map(item1 => item1.projectionId);\r\n          }\r\n        } else if (type === 'onetomany') {\r\n          updatedbody.transactionMatches = [updatedbody.transactionMatches[0]]\r\n          updatedbody.transactionMatches[0]['transactionIds'] = transaction.map(item => item.transactionId);\r\n          updatedbody.transactionMatches[0]['projectionIds'] = projection.map(item => item.projectionId).filter(val => val != ' ');\r\n          updatedbody.transactionMatches[0]['projections'] = projection.reduce((acc,item) =>{\r\n            if(item.projectionId === ' '){\r\n            acc.push({\r\n              projectionDate: req.body.hasOwnProperty('datefilters')\r\n                ? req.body.datefilters.filterDate\r\n                : moment(new Date()).format('YYYY-MM-DD'),\r\n              bankId: item.bankId,\r\n              currencyCode: item.currency,\r\n              accountNumber: item.bankAccount,\r\n              amount: item.amount,\r\n              direction: item.Direction,\r\n              classification: item.classification\r\n            })\r\n          }\r\n            return acc\r\n          },[]);\r\n          if( updatedbody.transactionMatches[0]['projections'].length === 0) delete updatedbody.transactionMatches[0]['projections']\r\n        }\r\n        else if(type === 'onetoone'){\r\n          updatedbody.transactionMatches = updatedbody.transactionMatches.map((item)=>{\r\n           item['transactionIds'] = projection.filter((pr)=>{\r\n             if(item.projectionIds.length > 0 && item.projectionIds[0] === pr.projectionId ) return item\r\n             if(item.projectionIds.length == 0 && pr.transactionId===item.projections[0].transactionId) return item\r\n           })[0]['transactionId']\r\n           if(item['transactionIds'][0].hasOwnProperty('label')) item['transactionIds'][0] = item['transactionIds'][0]['key']\r\n           else  item['transactionIds'] = [item['transactionIds']]\r\n            return item\r\n          })\r\n        }\r\n        return updatedbody;\r\n      }\r\n      var moment = require('moment');\r\n      var projectionList = [];\r\n      var transactionList = [];\r\n      if (req.body.hasOwnProperty('projectionlistingcompositev1')) {\r\n        projectionList = req.body['projectionlistingcompositev1']['projectionlist'];\r\n      }\r\n      if (req.body.hasOwnProperty('transactionlistingcompositev1')) {\r\n        transactionList = req.body['transactionlistingcompositev1']['transactionlistdynamic'];\r\n      }\r\n      if (projectionList.length == 1 && transactionList.length > 0) {\r\n        projectionList[0]['transactionId'] = transactionList.map(item => {\r\n          return item.transactionId;\r\n        });\r\n      }\r\n      var ekamatched = req.body.propertyList.platform_url + '/spring/cashManagement/match';\r\n      var matchedbody = {\r\n        asOfDate: req.body.hasOwnProperty('datefilters')\r\n          ? req.body.datefilters.filterDate\r\n          : moment(new Date()).format('YYYY-MM-DD'),\r\n        entityIds: req.body.hasOwnProperty('datefilters') ? req.body.datefilters.formcheckbox : [],\r\n        transactionMatches: projectionList.map(item => {\r\n          let data = {\r\n            transactionIds:\r\n              transactionList.length > 1 && projectionList.length > 1\r\n                ? transactionList.map(i => {\r\n                    return i.transactionId;\r\n                  })\r\n                : [transactionList[0].transactionId],\r\n            projectionIds: item.hasOwnProperty('projectionId') ? [item.projectionId] : []\r\n          };\r\n          if (!item.hasOwnProperty('projectionId') || item.projectionId == ' ') {\r\n            data['projectionIds'] = [];\r\n            data['projections'] = [\r\n              {\r\n                projectionDate: req.body.hasOwnProperty('datefilters')\r\n                  ? req.body.datefilters.filterDate\r\n                  : moment(new Date()).format('YYYY-MM-DD'),\r\n                bankId: item.bankId,\r\n                currencyCode: item.currency,\r\n                accountNumber: item.bankAccount,\r\n                amount: item.amount,\r\n                direction: item.Direction,\r\n                classification: item.classification,\r\n                transactionId : item.transactionId\r\n              }\r\n            ];\r\n          }\r\n          return data;\r\n        })\r\n      };\r\n  \r\n      var platformMatchedURL = {\r\n        method: 'POST',\r\n        url: ekamatched,\r\n        body: matchedbody,\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'Content-Type': 'application/json',\r\n          'X-TenantID': req.headers['x-tenantid']\r\n        },\r\n        json: true\r\n      };\r\n      var platformMatched = function get_platformEntitySummaryData() {\r\n        return new Promise(function(resolve, reject) {\r\n          console.log(JSON.stringify(platformMatchedURL.body));\r\n          request(platformMatchedURL, function(err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          });\r\n        });\r\n      };\r\n  \r\n      var consumedTransaction = transactionList.reduce((acc, item) => {\r\n        acc[item.transactionId] = 'Not - consumed';\r\n        return acc;\r\n      }, {});\r\n      try {\r\n        if (projectionList.length == 1 && transactionList.length > 0) {\r\n          if (valiadateMandatoryCheck('manytoone', transactionList, projectionList)) {\r\n            matchedbody = bodyfor('manytoone', matchedbody, transactionList, projectionList);\r\n            platformMatched()\r\n              .then(function(ent) {\r\n                res.status(200).send({ msg: 'Transaction(s) matched successfully !' });\r\n                return;\r\n              })\r\n              .catch(err => {\r\n                res.status(500).send('Invalid Matching!');\r\n                return;\r\n              });\r\n          } else {\r\n            res.status(500).send('Invalid Matching!  Transaction and Projections are of different Direction');\r\n            return;\r\n          }\r\n        } else if (transactionList.length == 1 && projectionList.length > 1) {\r\n          if (valiadateMandatoryCheck('onetomany', transactionList, projectionList)) {\r\n            matchedbody = bodyfor('onetomany', matchedbody, transactionList, projectionList);\r\n            platformMatched().then(function (ent) {\r\n              res.status(200).send({ msg: 'Transaction(s) matched successfully !' });\r\n              return;\r\n            }).catch(function (err) {\r\n              res.status(500).send('Invalid Matching!');\r\n              return;\r\n            });\r\n          } else {\r\n            res.status(500).send('Invalid Matching!  Transaction and Projections are of different Direction');\r\n            return;\r\n          }\r\n        } else if (\r\n          transactionList.length > 0 &&\r\n          projectionList.length > 0 &&\r\n          transactionList.length === projectionList.length\r\n        ) {\r\n          for (var i = 0; i < projectionList.length; i++) {\r\n            if (projectionList[i].hasOwnProperty('transactionId')) {\r\n              if (\r\n                !Array.isArray(projectionList[i].transactionId) &&\r\n                projectionList[i].transactionId in consumedTransaction\r\n              )\r\n                consumedTransaction[projectionList[i].transactionId] = 'consumed';\r\n              else {\r\n                for (var j = 0; j < projectionList[i].transactionId.length; j++) {\r\n                  if (consumedTransaction[projectionList[i].transactionId[j]['key']] != 'consumed')\r\n                    consumedTransaction[projectionList[i].transactionId[j]['key']] = 'consumed';\r\n                  else {\r\n                    res.status(500).send('Invalid Matching!');\r\n                    return;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          for (let key in consumedTransaction) {\r\n            if (consumedTransaction[key] === 'Not - consumed') {\r\n              res.status(500).send('Transaction ID cannot be blank!');\r\n              return;\r\n            }\r\n          }\r\n          if (valiadateMandatoryCheck('onetoone', transactionList, projectionList)) {\r\n            matchedbody = bodyfor('onetoone', matchedbody, transactionList, projectionList);\r\n            platformMatched()\r\n              .then(function(ent) {\r\n                res.status(200).send({ msg: 'Transaction(s) matched successfully !' });\r\n              })\r\n              .catch(err => {\r\n                res.status(500).send('Invalid Matching!');\r\n              });\r\n          } else {\r\n            res.status(500).send('Invalid Matching! Transaction and Projection are of different Direction');\r\n            return;\r\n          }\r\n        } else {\r\n          res.status(500).send('Invalid Matching!');\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n        res.status(500).send(err);\r\n      }\r\n    ",
    "sys__UUID" : "49f9a3eb-8e94-4077-8431-c3058b5eaf35",
    "sys__createdBy" : "avinash"
}