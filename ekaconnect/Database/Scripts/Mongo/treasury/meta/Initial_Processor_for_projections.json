{
    "_id" : "Initial_Processor_for_projections",
    "name" : "Initial_Processor_for_projections",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "e4ba81fc-1304-4f01-b641-7425da52a666",
    "snippet" : "var moment = require(\"moment\");\r\nlet selected = req.body.hasOwnProperty(\"selectedData\")\r\n  ? req.body.selectedData\r\n  : {};\r\nvar ekaEntity =\r\n  req.body.propertyList.platform_url + \"/spring/cashManagement/projection\";\r\nvar platformBody = { asOfDate: \"\", clientID: \"8\", entityIds: [] };\r\n\r\nvar platformEntityTransactionData = {\r\n  method: \"GET\",\r\n  url: ekaEntity,\r\n  body: platformBody,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application/json\",\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformEntityTransactionData =\r\n  function get_platformEntityTransactionData(date, entity, toDate) {\r\n    if (date && toDate) {\r\n      date = moment(date).format(\"YYYY-MM-DD\");\r\n\t  toDate = moment(toDate).format(\"YYYY-MM-DD\");\r\n      platformBody.asOfDate = date;\r\n\t  platformBody.toDate = toDate;\r\n    } else {\r\n      platformBody.asOfDate = moment(new Date()).format(\"YYYY-MM-DD\");\r\n\t  platformBody.toDate = moment(new Date()).format(\"YYYY-MM-DD\");\r\n    }\r\n    if (entity && entity.length > 0) {\r\n      platformBody.entityIds = entity;\r\n    }\r\n    platformEntityTransactionData.body = platformBody;\r\n    return new Promise(function (resolve, reject) {\r\n      request(platformEntityTransactionData, function (err, response, body) {\r\n        if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      });\r\n    });\r\n  };\r\nvar ekaEntity =\r\n  req.body.propertyList.platform_url + \"/spring/cashManagement/entity\";\r\n\r\nvar platformEntity = {\r\n  method: \"GET\",\r\n  url: ekaEntity,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application/json\",\r\n    ttl: 300,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    \"X-Remote-User\": \"ekaApp\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformEntity = function get_platformEntity() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(platformEntity, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n};\r\nget_platformEntity()\r\n  .then(function (ent) {\r\n    var entity = ent.map(function (res) {\r\n      return res[\"c1\"];\r\n    });\r\n    if (selected.hasOwnProperty(\"filterDate\")&& selected.hasOwnProperty('toDate')) {\r\n      var date = req.body.selectedData.filterDate;\r\n\t  var toDate = req.body.selectedData.toDate;\r\n      entity = req.body.selectedData.formcheckbox;\r\n    }\r\n    Promise.all([get_platformEntityTransactionData(date, entity, toDate)])\r\n      .then((results) => {\r\n        let projection = [];\r\n        for (let i = 0; i < results[0].length; i++) {\r\n          projection[i] = results[0][i];\r\n          projection[i][\"currency\"] = projection[i][\"c9\"];\r\n\t\t  projection[i][\"rolloverAmount\"] = projection[i][\"c11\"];\r\n          projection[i][\"rolloverDate\"] = moment().add(1,'days')\r\n          projection[i][\"status\"] = projection[i][\"c20\"];\r\n          projection[i][\"LinkedProjectionId\"] = projection[i][\"c15\"];\r\n          projection[i][\"externalProjectionId\"] = projection[i][\"c3\"];\r\n          projection[i][\"projectionDate\"] = moment(projection[i][\"c7\"]).format(\"DD-MMM-YYYY\");\r\n          projection[i][\"amount\"] = projection[i][\"c11\"];\r\n          projection[i][\"bankAccount\"] = projection[i][\"c10\"];\r\n          projection[i][\"bankId\"] = projection[i][\"c8\"];\r\n          projection[i][\"bankName\"] = projection[i][\"BN\"];\r\n          projection[i][\"projectionId\"] = projection[i][\"c14\"];\r\n          projection[i][\"Direction\"] = projection[i][\"c13\"];\r\n          projection[i][\"entity\"] = projection[i][\"c22\"];\r\n          projection[i][\"classification\"] = projection[i][\"c17\"];\r\n          projection[i][\"tags\"] = projection[i][\"c16\"]== \"\" ? '-' : projection[i][\"c16\"];\r\n\t\t  projection[i][\"profileCenter\"] = projection[i][\"c23\"];\r\n\t\t  projection[i][\"strategy\"] = projection[i][\"c24\"];\r\n projection[i][\"updatedDate\"] = projection[i]['c39'] ? moment(projection[i]['c39']).format('DD-MMM-YYYY HH:MM:SS') : '';\r\n projection[i][\"updatedBy\"] = projection[i][\"c21\"];\r\n  projection[i][\"source\"] = projection[i][\"c1\"];\r\n  projection[i][\"sourceId\"] = projection[i][\"c2\"];\r\n       }\r\n        res.status(200).send([...projection]);\r\n      })\r\n      .catch((err) => {\r\n        res.status(500).send(err);\r\n      });\r\n  })\r\n  .catch((err) => {\r\n    res.status(500).send(err);\r\n  });\r\n",
    "sys__UUID" : "ca5e8ea8-b3b1-4b7a-8f62-48c990657918",
    "sys__createdBy" : "avinash"
}