{
    "_id" : "Initial_Processor_for_transactionlistingcompositev1",
    "name" : "Initial_Processor_for_transactionlistingcompositev1",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "e4ba81fc-1304-4f01-b641-7425da52a666",
    "snippet" : "\r\n        var moment = require('moment');\r\n        var ekaEntity = req.body.propertyList.platform_url + '/spring/cashManagement/unmatchedTransactions';\r\n        var platformBody = { asOfDate: '', clientID: '8', entityIds: [] };\r\n      \r\n        var platformEntityTransactionData = {\r\n          method: 'GET',\r\n          url: ekaEntity,\r\n          body: platformBody,\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            'Content-Type': 'application/json',\r\n            'X-TenantID': req.headers['x-tenantid']\r\n          },\r\n          json: true\r\n        };\r\n        var get_platformEntityTransactionData = function get_platformEntityTransactionData(date, entity) {\r\n          if (date) {\r\n            date = moment(date).format('YYYY-MM-DD');\r\n            platformBody.asOfDate = date;\r\n          } else {\r\n            platformBody.asOfDate = moment(new Date()).format('YYYY-MM-DD');\r\n          }\r\n          if (entity && entity.length > 0) {\r\n            platformBody.entityIds = entity;\r\n          }\r\n          platformEntityTransactionData.body = platformBody;\r\n          return new Promise(function(resolve, reject) {\r\n            request(platformEntityTransactionData, function(err, response, body) {\r\n              if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n              } else {\r\n                reject(body);\r\n              }\r\n            });\r\n          });\r\n        };\r\n        var ekaEntity = req.body.propertyList.platform_url + '/spring/cashManagement/entity';\r\n      \r\n        var platformEntity = {\r\n          method: 'GET',\r\n          url: ekaEntity,\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            'Content-Type': 'application/json',\r\n            ttl: 300,\r\n            'X-TenantID': req.headers['x-tenantid'],\r\n            'X-Remote-User': 'ekaApp'\r\n          },\r\n          json: true\r\n        };\r\n        var get_platformEntity = function get_platformEntity() {\r\n          return new Promise(function(resolve, reject) {\r\n            request(platformEntity, function(err, response, body) {\r\n              if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n              }\r\n              else {\r\n                reject(body);\r\n              }\r\n            });\r\n          });\r\n        };\r\n        var ekasummary = req.body.propertyList.platform_url + '/spring/cashManagement/summary';\r\n        var summarbody = { asOfDate: '', clientID: '8', entityIds: [] };\r\n      \r\n        var platformSummaryData = {\r\n          method: 'GET',\r\n          url: ekasummary,\r\n          body: summarbody,\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            'Content-Type': 'application/json',\r\n            'X-TenantID': req.headers['x-tenantid']\r\n          },\r\n          json: true\r\n        };\r\n        var get_platformEntitySummaryData = function get_platformEntitySummaryData(date, entity) {\r\n          if (date) {\r\n            date = moment(date).format('YYYY-MM-DD');\r\n            summarbody.asOfDate = date;\r\n          } else {\r\n            summarbody.asOfDate = moment(new Date()).format('YYYY-MM-DD');\r\n          }\r\n          if (entity && entity.length > 0) {\r\n            summarbody.entityIds = entity;\r\n          }\r\n          platformSummaryData.body = summarbody;\r\n          return new Promise(function(resolve, reject) {\r\n            request(platformSummaryData, function(err, response, body) {\r\n              if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n                resolve(body);\r\n              } else {\r\n                reject(body);\r\n              }\r\n            });\r\n          });\r\n        };\r\n      \r\n      \r\n        get_platformEntity()\r\n          .then(function(ent) {\r\n            var entity =  ent.map(function(res) {\r\n              return res['c1']\r\n            });\r\n            if (req.body.hasOwnProperty('selectedData')) {\r\n              var date = req.body.selectedData.filterDate;\r\n              entity = req.body.selectedData.formcheckbox;\r\n            }\r\n      \r\n            Promise.all([get_platformEntityTransactionData(date, entity),get_platformEntitySummaryData(date, entity)])\r\n              .then(results => {\r\n                let transaction = results[0];\r\n                for (let i = 0; i < transaction.length; i++) {\r\n                  transaction[i]['currency'] = transaction[i]['d5'];\r\n                  transaction[i]['amount'] = transaction[i]['m967'];\r\n                  transaction[i]['Direction'] = transaction[i]['d11'];\r\n                  transaction[i]['bankAccount'] = transaction[i]['d6'];\r\n                  transaction[i]['bankId'] = transaction[i]['d4'];\r\n                  transaction[i]['bankName'] = transaction[i]['BN'];\r\n                  transaction[i]['transactionId'] = transaction[i]['d8'];\r\n                  transaction[i]['classification'] = transaction[i]['d7'];\r\n                  transaction[i]['Status'] = transaction[i]['d12'];\r\n                }\r\n                var summary =  [\r\n                ]\r\n                if(results[1]){\r\n                    summary.push({\r\n                      totalTransaction: results[1]['totalTransactionValue'] ,\r\n                      totalProjection: results[1]['totalProjectionValue'] ,\r\n                      matched: results[1]['matchedValue'] ,\r\n                      rollOverTRN: results[1]['rolloverTransactionValue'],\r\n                      unmatched: results[1]['totalUnmatchedTransactionValue'],\r\n\t\t\t\t\t  unmatchedprojectionsvalue : results[1]['totalUnmatchedProjectionValue'], \r\n                      currencyCode : results[1]['currencyCode']\r\n                    })\r\n                  }\r\n                res.status(200).send({\r\n                  data: [...transaction],\r\n                  summaryofcash: summary\r\n                });\r\n              })\r\n              .catch(err => {\r\n                console.log(err);\r\n                res.status(500).send(err);\r\n              });\r\n          })\r\n          .catch(err => res.status(500).send( err));\r\n      ",
    "sys__UUID" : "eb5e324c-fcc8-4d8f-b76e-1512793b980f",
    "sys__createdBy" : "avinash"
}