{
    "_id" : "Initial_Processor_for_banktransaction",
    "name" : "Initial_Processor_for_banktransaction",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "e4ba81fc-1304-4f01-b641-7425da52a666",
    "snippet" : "    var moment = require('moment');\r\n    let selected = req.body.hasOwnProperty('selectedData') ? req.body.selectedData : {};\r\n    var ekaEntity = req.body.propertyList.platform_url + '\/spring\/cashManagement\/transaction';\r\n    var platformBody = { asOfDate: '', clientID: '8', entityIds: [] };\r\n\r\n    var platformEntityBankTransactionData = {\r\n      method: 'GET',\r\n      url: ekaEntity,\r\n      body: platformBody,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application\/json',\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    var get_platformEntityBankTransactionData = function get_platformEntityBankTransactionData(date, entity, toDate) {\r\n      if (date && toDate) {\r\n        platformBody.asOfDate = moment(date).format('YYYY-MM-DD');\r\n        platformBody.toDate = moment(toDate).format('YYYY-MM-DD');\r\n      } else {\r\n        platformBody.asOfDate = moment(new Date()).format('YYYY-MM-DD');\r\n        platformBody.toDate = moment(new Date()).format('YYYY-MM-DD');\r\n      }\r\n      if (entity && entity.length > 0) {\r\n        platformBody.entityIds = entity;\r\n      }\r\n      platformEntityBankTransactionData.body = platformBody;\r\n      return new Promise(function(resolve, reject) {\r\n        request(platformEntityBankTransactionData, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    };\r\n    var ekaEntity = req.body.propertyList.platform_url + '\/spring\/cashManagement\/entity';\r\n\r\n    var platformEntity = {\r\n      method: 'GET',\r\n      url: ekaEntity,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application\/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        'X-Remote-User': 'ekaApp'\r\n      },\r\n      json: true\r\n    };\r\n    var get_platformEntity = function get_platformEntity() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(platformEntity, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    };\r\n    get_platformEntity()\r\n      .then(function(ent) {\r\n        var entity = ent.map(function(res) {\r\n          return res['c1'];\r\n        });\r\n        if (selected.hasOwnProperty('filterDate') && selected.hasOwnProperty('toDate')) {\r\n          var date = req.body.selectedData.filterDate;\r\n          var toDate = req.body.selectedData.toDate;\r\n          entity = req.body.selectedData.formcheckbox;\r\n        }\r\n        Promise.all([get_platformEntityBankTransactionData(date, entity, toDate)])\r\n          .then(results => {\r\n            let bankTransaction = [];\r\n            for (let i = 0; i < results[0].length; i++) {\r\n              bankTransaction[i] = results[0][i];\r\n\t\t\t  bankTransaction[i]['source'] = bankTransaction[i]['d1'];\r\n  bankTransaction[i]['sourceID'] = bankTransaction[i]['d2'];\r\n              bankTransaction[i]['bankID'] = bankTransaction[i]['d4'];\r\n              bankTransaction[i]['currencyCode'] = bankTransaction[i]['d5'];\r\n              bankTransaction[i]['accountNumber'] = bankTransaction[i]['d6'];\r\n              bankTransaction[i]['classification'] = bankTransaction[i]['d7'];\r\n              bankTransaction[i]['transactionRefNo'] = bankTransaction[i]['d8'];\r\n              bankTransaction[i]['customerRefNo'] = bankTransaction[i]['d9'];\r\n              bankTransaction[i]['comments'] = bankTransaction[i]['d10'];\r\n              bankTransaction[i]['direction'] = bankTransaction[i]['d11'];\r\n              bankTransaction[i]['status'] = bankTransaction[i]['d12'];\r\n\t\t\t  bankTransaction[i]['valueDate'] = moment(bankTransaction[i]['d14']).format('DD-MMM-YYYY');\r\n              bankTransaction[i]['transactionAmount'] = bankTransaction[i]['m967'];\r\n              bankTransaction[i]['createdAt'] = bankTransaction[i]['d15'];\r\n              bankTransaction[i]['updatedDate'] = bankTransaction[i]['d16'] ? moment(bankTransaction[i]['d16']).format('DD-MMM-YYYY HH:MM:SS') : '';;\r\n              bankTransaction[i]['createdBy'] = bankTransaction[i]['d17'];\r\n\t\t\t  bankTransaction[i]['updatedBy'] = bankTransaction[i]['d18'];\r\n\t\t\t  bankTransaction[i]['bankName'] = bankTransaction[i]['d19'];\r\n              bankTransaction[i]['entity'] = bankTransaction[i]['d20'];\r\n            }\r\n            res.status(200).send([...bankTransaction]);\r\n          })\r\n          .catch(err => {\r\n            res.status(500).send(err);\r\n          });\r\n      })\r\n      .catch(err => {\r\n        res.status(500).send(err);\r\n      });\r\n  ",
    "sys__UUID" : "b56d0fda-b828-4a51-ab3d-7d799050d336",
    "sys__createdBy" : "jay"
}