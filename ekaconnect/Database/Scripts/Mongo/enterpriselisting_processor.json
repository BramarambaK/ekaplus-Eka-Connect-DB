{
  "_id": "enterpriselisting_processor",
  "name": "enterpriselisting_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "sys__UUID": "0510ed18-70f4-45f7-b837-394b5d7138d1",
  "snippet": "const connect = {\r\n    method: 'POST',\r\n    url: req.body.propertyList.eka_connect_host + '\/workflow\/data\/',\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    body: {\r\n      appId: '12325a98-a959-4939-9005-4158d136afcd',\r\n      workFlowTask: 'contractqueryElastic',\r\n      qP: {\r\n        from: 0,\r\n        size: 10000,\r\n        query: {\r\n          bool: {\r\n            must: [\r\n              {\r\n                bool: {\r\n                  should: [\r\n                    {\r\n                      bool: {\r\n                        must: [{ terms: { 'isRequestedByEkaCCSystem.raw': [true] } }]\r\n                      }\r\n                    }\r\n                  ]\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    },\r\n    json: true\r\n  };\r\n  const ticketConnect = {\r\n    method: 'POST',\r\n    url: req.body.propertyList.eka_connect_host + `\/workflow\/data\/`,\r\n    headers: {\r\n      Authorization: req.headers.authorization,\r\n      'X-TenantID': req.headers['x-tenantid']\r\n    },\r\n    body: {\r\n      appId: '12325a98-a959-4939-9005-4158d136afcd',\r\n      workFlowTask: 'ticketsqueryElastic',\r\n      qP: {\r\n        from: 0,\r\n        size: 10000,\r\n        query: {\r\n          bool: {\r\n            must: [\r\n              {\r\n                bool: {\r\n                  should: [\r\n                    {\r\n                      bool: {\r\n                        must: [{ terms: { 'isRequestedByEkaCCSystem.raw': [true] } }]\r\n                      }\r\n                    }\r\n                  ]\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        sort: [\r\n            {\r\n              'sys__updatedOn.raw': {\r\n                order: 'desc'\r\n              }\r\n            },\r\n            {\r\n              'requestId.raw': {\r\n                order: 'desc'\r\n              }\r\n            }\r\n        ]\r\n      }\r\n    },\r\n    json: true\r\n  };\r\n\r\n  const resResult = {\r\n    enterprisegrowercontractsquery: [],\r\n    enterprisegrowerticketsquery: []\r\n  };\r\n\r\n  function get_elasticData() {\r\n    return new Promise(function(resolve, reject) {\r\n      request(connect, function(error, response, body) {\r\n        if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function get_elasticTicketData() {\r\n    return new Promise(function(resolve, reject) {\r\n      request(ticketConnect, function(error, response, body) {\r\n        if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n          resolve(body);\r\n        } else {\r\n          reject(body);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  Promise.all([get_elasticData(), get_elasticTicketData()])\r\n    .then(function(records) {\r\n      resResult.enterprisegrowercontractsquery = records[0].data;\r\n      resResult.enterprisegrowerticketsquery = records[1].data;\r\n      res.status(200).send(resResult);\r\n    })\r\n    .catch(err => {\r\n      res.status(500).send(err);\r\n    });"
}
