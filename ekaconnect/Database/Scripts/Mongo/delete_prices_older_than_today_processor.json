{
  "_id": "delete_prices_older_than_today_processor",
  "name": "delete_prices_older_than_today_processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const appId = '12325a98-a959-4939-9005-4158d136afcd';\r\nconst priceObjId = 'ab3fc628-ecbc-43e0-81cb-aa2d5b6e5c40';\r\n\/\/ var moment = require('moment');\r\n\r\n\/\/ var currentDateTime = moment.utc().format('YYYY-MM-DDTHH:mm:ss[Z]');\r\n\/\/ console.log('expiryDate:' + expiryDate);\r\nvar connectMetaPrice = {\r\n  method: 'GET',\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    `\/meta\/app\/${appId}\/object\/${priceObjId}`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n    requestid: req.headers['requestid'] + '-processor',\r\n  },\r\n};\r\nvar connectDataprice = {\r\n  method: 'GET',\r\n  url: req.body.propertyList.eka_connect_host + `\/data\/${appId}\/${priceObjId}`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n    requestid: req.headers['requestid'] + '-processor',\r\n  },\r\n  body: {\r\n    pagination: {\r\n      start: 0,\r\n      limit: 1000,\r\n    },\r\n    filterData: {\r\n      filter: [\r\n        {\r\n          fieldName: 'status',\r\n          operator: 'eq',\r\n          value: 'Expired',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  json: true,\r\n};\r\n\r\n\/\/ var elastic_updatePriceData_internal = {\r\n\/\/   method: 'POST',\r\n\/\/   url: req.body.propertyList.eka_connect_host + '\/workflow',\r\n\/\/   headers: {\r\n\/\/     Authorization: req.headers.authorization,\r\n\/\/     'X-TenantID': req.headers['x-tenantid'],\r\n\/\/     requestid: req.headers['requestid'] + '-processor',\r\n\/\/   },\r\n\/\/   body: {\r\n\/\/     output: {\r\n\/\/       elastic_updatePriceData_internal: [],\r\n\/\/     },\r\n\/\/     task: 'elastic_updatePriceData_internal',\r\n\/\/     appId: '12325a98-a959-4939-9005-4158d136afcd',\r\n\/\/     workflowTaskName: 'elastic_updatePriceData_internal',\r\n\/\/   },\r\n\/\/   json: true,\r\n\/\/ };\r\n\r\nvar elastic_deletePriceData = {\r\n  method: 'POST',\r\n  url: req.body.propertyList.eka_connect_host + '\/workflow',\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid'],\r\n    requestid: req.headers['requestid'] + '-processor',\r\n  },\r\n  body: {\r\n    output: {\r\n      elastic_deletePriceData: [],\r\n    },\r\n    task: 'elastic_deletePriceData',\r\n    appId: '12325a98-a959-4939-9005-4158d136afcd',\r\n    workflowTaskName: 'elastic_deletePriceData',\r\n  },\r\n  json: true,\r\n};\r\n\r\nfunction get_connectData(connectData) {\r\n  return new Promise(function (resolve, reject) {\r\n    \/\/   console.log(\"get_connectData Request-\" +JSON.stringify(connectData));\r\n    request(connectData, function (err, response, body) {\r\n      \/\/ console.log(\"get_connectData Response-\" + JSON.stringify(body));\r\n      if (response.statusCode === 200) resolve(body);\r\n      else {\r\n        reject(err || body);\r\n      }\r\n    });\r\n  });\r\n}\r\nfunction call_connectWorkflow(connectWorkflow) {\r\n  return new Promise(function (resolve, reject) {\r\n    \/\/   console.log(\"call_connectWorkflow Request-\" +JSON.stringify(connectWorkflow));\r\n    request(connectWorkflow, function (err, response, body) {\r\n      \/\/ console.log(\"call_connectWorkflow Response-\" + JSON.stringify(body));\r\n      if (response.statusCode === 200) resolve(body);\r\n      else {\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n(async () => {\r\n  var priceUniqueFields = JSON.parse(\r\n    await get_connectData(connectMetaPrice)\r\n  ).uniqueFields;\r\n  \/\/ isDataEmpty = false;\r\n  \/\/ do {\r\n  \/\/   await get_connectData(connectDataprice)\r\n  \/\/     .then(async function (result) {\r\n  \/\/       var priceData = result;\r\n  \/\/       if (priceData.length !== 0) {\r\n  \/\/         for (let j = 0; j < priceData.length; j++) {\r\n  \/\/           elastic_updatePriceData_internal.body.output.elastic_updatePriceData_internal.push(\r\n  \/\/             priceUniqueFields.reduce(\r\n  \/\/               (result, item) => ({ ...result, [item]: priceData[j][item] }),\r\n  \/\/               {}\r\n  \/\/             )\r\n  \/\/           );\r\n  \/\/           elastic_updatePriceData_internal.body.output.elastic_updatePriceData_internal[\r\n  \/\/             j\r\n  \/\/           ].status = 'Expired';\r\n  \/\/         }\r\n  \/\/         if (\r\n  \/\/           elastic_updatePriceData_internal.body.output\r\n  \/\/             .elastic_updatePriceData_internal.length > 0\r\n  \/\/         )\r\n  \/\/           await call_connectWorkflow(elastic_updatePriceData_internal).catch(\r\n  \/\/             (err) => {\r\n  \/\/               console.log(err);\r\n  \/\/             }\r\n  \/\/           );\r\n  \/\/         connectDataprice['body']['pagination']['start'] =\r\n  \/\/           connectDataprice['body']['pagination']['start'] +\r\n  \/\/           connectDataprice['body']['pagination']['limit'];\r\n  \/\/       } else {\r\n  \/\/         isDataEmpty = true;\r\n  \/\/       }\r\n  \/\/     })\r\n  \/\/     .catch(function (err) {\r\n  \/\/       console.log(err);\r\n  \/\/       res.status(500).send(err);\r\n  \/\/     });\r\n  \/\/ } while (!isDataEmpty);\r\n\r\n  isDataEmpty = false;\r\n  \/\/ connectDataprice.body.filterData.filter[0].operator = 'eq';\r\n  \/\/ connectDataprice['body']['pagination']['start'] = 0;\r\n  do {\r\n    await get_connectData(connectDataprice)\r\n      .then(async function (result) {\r\n        var priceToDelete = result;\r\n        elastic_deletePriceData.body.output.elastic_deletePriceData = [];\r\n        if (priceToDelete.length !== 0) {\r\n          for (let j = 0; j < priceToDelete.length; j++) {\r\n            elastic_deletePriceData.body.output.elastic_deletePriceData.push(\r\n              priceUniqueFields.reduce(\r\n                (result, item) => ({\r\n                  ...result,\r\n                  [item]: priceToDelete[j][item],\r\n                }),\r\n                {}\r\n              )\r\n            );\r\n          }\r\n          if (\r\n            elastic_deletePriceData.body.output.elastic_deletePriceData.length >\r\n            0\r\n          )\r\n            await call_connectWorkflow(elastic_deletePriceData).catch((err) => {\r\n              console.log(err);\r\n              res.status(500).send(err);\r\n            });\r\n          \/\/ connectDataprice['body']['pagination']['start'] =\r\n          \/\/   connectDataprice['body']['pagination']['start'] +\r\n          \/\/   connectDataprice['body']['pagination']['limit'];\r\n        } else {\r\n          isDataEmpty = true;\r\n        }\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err);\r\n        res.status(500).send(err);\r\n      });\r\n  } while (!isDataEmpty);\r\n  res.status(200).send();\r\n})().catch(function (err) {\r\n  console.log(err);\r\n  res.status(500).send(err);\r\n});",
  "sys__UUID": "9ad3c7e2-8ea6-46fb-824b-d4d1ecc5884f",
  "type": "processor"
}

