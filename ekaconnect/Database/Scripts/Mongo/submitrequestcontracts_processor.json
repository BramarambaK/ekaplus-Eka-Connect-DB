{
  "_id": "submitrequestcontracts_processor",
  "name": "submitrequestcontracts_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const data = req.body.submitrequestcontractcomposite.data;\r\n    const tenant = req.headers['X-TenantID'];\r\n    const auth = req.headers.authorization;\r\n    const appId = req.body.appId;\r\n    const traderName = req.body.propertyList.REQ_CONTRACTS_TRADER_NAME;\r\n    const contractType =\r\n      req.body.propertyList[\r\n        data.userType.toLowerCase() === 'demand customer'\r\n          ? 'REQ_CONTRACTS_DEMAND_CONTRACT_TYPE'\r\n          : 'REQ_CONTRACTS_GROWER_CONTRACT_TYPE'\r\n      ];\r\n    const priceUnit = req.body.propertyList.REQ_CONTRACTS_PRICE_UNIT;\r\n    const weightUnit = req.body.propertyList.REQ_CONTRACTS_WEIGHT_UNIT;\r\n    const corporate = req.body.propertyList.REQ_CONTRACTS_CORPORATE;\r\n    const createdBy = req.body.propertyList._REQ_CONTRACTS_CREATED_BY;\r\n    const operator = req.body.propertyList._REQ_CONTRACTS_OPERATOR;\r\n\r\n    const send = (status, message) => res.status(status).send(message);\r\n\r\n    const formatCTRMData = reqContract => {\r\n      const contractHeader = {\r\n        CreatedBy: createdBy,\r\n        Operator: operator,\r\n        ContractType: contractType,\r\n        Corporate: corporate || reqContract.corporate,\r\n        IsOriginationContract:\r\n          reqContract.userType.toLowerCase() === 'grower'\r\n            ? 'Y'\r\n            : reqContract.userType.toLowerCase() === 'demand customer'\r\n            ? 'N'\r\n            : reqContract.userType.toLowerCase() === 'farmer'\r\n            ? ' Y'\r\n            : null,\r\n        TemplateName: reqContract.programName || '',\r\n        CPName: reqContract.counterPartyName || '',\r\n        CPRefNo: reqContract.BPRefNo || '',\r\n        PaymentTerm: reqContract.paymentTerms || '',\r\n        ContractIssueDate: moment(reqContract.currentDate).format('YYYY-MM-DDTHH:mm:ss'),\r\n        TraderName: traderName,\r\n        INCOTerm: reqContract.INCOTerm || '',\r\n        BrokerRefNo: (reqContract.brokerReferenceNo || '') + '',\r\n        BrokerBPRefNo : reqContract.refNo || ''\r\n      };\r\n\r\n      contractHeader.IsDraftContract = contractHeader.IsOriginationContract === 'N' ? 'Y' : 'N';\r\n\r\n      if (contractHeader.IsDraftContract === 'Y') {\r\n        contractHeader.DraftCreatedOn = moment(reqContract.currentDate).format('YYYY-MM-DDTHH:mm:ss');\r\n      }\r\n\r\n      const deliveryDetails = {\r\n        DeliveryDetailCountry: reqContract.dischargeLocationCountry.split('_')[0] || '',\r\n        DeliveryLocationGroupName: reqContract.dischargeLocationCountry.split('_')[1] || '',\r\n        DeliveryDetailCity: reqContract.dischargeLocationCity || ''\r\n      };\r\n\r\n      const itemQuantity = {\r\n        ItemQuantityValue: reqContract.contractItemQuantity || '',\r\n        ItemQuantityUnitId: weightUnit\r\n      };\r\n\r\n      const shipmentPeriod = {\r\n        ShipmentFromDate: moment(reqContract.shipmentPeriodFrom).format('YYYY-MM-DDT00:00:00'),\r\n        ShipmentToDate: moment(reqContract.shipmentPeriodTo).format('YYYY-MM-DDT23:59:59')\r\n      };\r\n\r\n      const priceDetails = {\r\n        PayInCurrency: priceUnit,\r\n        PriceType: 'Fixed',\r\n        ContractPrice: {\r\n          ContractPriceValue: +reqContract.contractPrice,\r\n          ContractPriceUnitId: priceUnit + '\/' + weightUnit\r\n        }\r\n      };\r\n\r\n      const itemDetails = {\r\n        ContractItemNo: '1',\r\n        Product: reqContract.product || '',\r\n        Cropyear: reqContract.cropYear || '',\r\n        Quality: reqContract.quality.replace(' MG', '') || '',\r\n        IsMultiGrade: reqContract.isMultiGrade ? 'Y' : 'N',\r\n        SpreadType: !reqContract.spread ? '' : reqContract.spread.toLowerCase().includes('fix')\r\n          ? 'Fixed'\r\n          : reqContract.spread.toLowerCase().includes('floating')\r\n          ? 'Floating'\r\n          : '',\r\n        \/\/ DeliveryTerm: reqContract.INCOTerm,\r\n        DeliveryDetails: deliveryDetails,\r\n        PriceDetails: priceDetails,\r\n        ItemQuantity: itemQuantity,\r\n        ShipmentPeriod: shipmentPeriod\r\n      };\r\n\r\n      if (reqContract.isMultiGrade == true) {\r\n        itemDetails.MultiGradeDetails = JSON.parse(reqContract.multiGradeDifferentialDetails.replace(\/'\/g, '\"'))\r\n          .multiGradeDifferentialDetail.filter(i => (i.multiGradeDifferential + '').toLowerCase() != 'base')\r\n          .map(i => ({\r\n            QualityName: i.qualityName || '',\r\n            MultiGradeDiffDetails: {\r\n              MultiGradeDiffValue: +i.multiGradeDifferential || 0,\r\n              MultiGradeDiffPriceUnitId: i.multiGradeDifferentialUnit || ''\r\n            }\r\n          }));\r\n      }\r\n\r\n      return {\r\n        ContractHeader: contractHeader,\r\n        ItemDetails: [itemDetails]\r\n      };\r\n    };\r\n\r\n    const formatCCData = (reqContract, reqId, contractRefNo) => ({\r\n      approvalStatus: 'Approved',\r\n      isRequestActive: true,\r\n      contractItemRefNo: 1,\r\n      contractRefNo: contractRefNo,\r\n      contractType: contractType,\r\n      BPRefNo: reqContract.BPRefNo || '',\r\n      contractItemQuantity: reqContract.contractItemQuantity || '',\r\n      contractItemQuantityUnit: weightUnit,\r\n      contractPrice: +reqContract.contractPrice,\r\n      contractPriceUnit: priceUnit + '\/' + weightUnit,\r\n      counterPartyName: reqContract.counterPartyName || '',\r\n      cropYear: reqContract.cropYear || '',\r\n      dischargeLocationCity: reqContract.dischargeLocationCity || '',\r\n      dischargeLocationCountry: reqContract.dischargeLocationCountry || '',\r\n      dischargeLocationType: reqContract.dischargeLocationType || '',\r\n      isMultiGrade: reqContract.isMultiGrade ? 'Y' : 'N',\r\n      INCOTerm: reqContract.INCOTerm || '',\r\n      locationGroupType: reqContract.locationGroupType,\r\n      priceType: 'Fixed',\r\n      product: reqContract.product || '',\r\n      quality: reqContract.quality.replace(' MG', '') || '',\r\n      shipmentPeriodFrom: moment(reqContract.shipmentPeriodFrom).format('YYYY-MM-DDT00:00:00'),\r\n      shipmentPeriodTo: moment(reqContract.shipmentPeriodTo).format('YYYY-MM-DDT00:00:00'),\r\n      corporate: corporate || reqContract.corporate,\r\n      paymentTerms: reqContract.paymentTerms || '',\r\n      requestId: reqId,\r\n      requestIdUnique: reqId,\r\n      requestedDate: moment(reqContract.currentDate).format('DD-MM-YYYY'),\r\n      requestType: 'New contract',\r\n      traderName: traderName,\r\n      requestedBy: reqContract.requestedBy || '',\r\n      brokerRefNo: reqContract.brokerReferenceNo || '',\r\n      isRequestedByEkaCCSystem: true,\r\n      spread: reqContract.spread || '',\r\n      freightOrganise: reqContract.freightOrganise || '',\r\n      fullname: reqContract.fullname || '',\r\n      phonenumber: reqContract.phonenumber || '',\r\n      email: reqContract.email || '',\r\n      pickuplocation: reqContract.pickuplocation || [],\r\n      programName: reqContract.programName || '',\r\n      markettype: reqContract.markettype || '',\r\n      issustainable: reqContract.issustainable.toUpperCase() || '',\r\n      portzone: reqContract.dischargeLocationCountry.split('_')[1] || '',\r\n      deliveryLocationGroupName: reqContract.dischargeLocationCountry.split('_')[1] || '',\r\n      bulkHandler: reqContract.bulkHandler || '',\r\n      profitCentre: reqContract.profitCentre || '',\r\n      multiGradeDifferentialDetails: reqContract.multiGradeDifferentialDetails\r\n        ? JSON.parse(reqContract.multiGradeDifferentialDetails.replace(\/'\/g, '\"'))\r\n        : [],\r\n      createdBy: createdBy,\r\n      operator: operator,\r\n      bidid: reqContract.bidid || '',\r\n      growerCreatedBy: createdBy || '',\r\n      growerOperator: operator || '',\r\n      contractIssueDate: moment(reqContract.currentDate).format('YYYY-MM-DDTHH:mm:ss'),\r\n      ekaCCSpreadFixed: !reqContract.spread ? null : reqContract.spread.toLowerCase().includes('fix') ? moment().format(\"DD-MM-YYYY\") : null,\r\n      brokerBPRefNo: reqContract.refNo || ''\r\n    });\r\n\r\n    const headers = {\r\n      Authorization: auth,\r\n      'X-TenantID': tenant,\r\n      'Content-Type': 'application\/json'\r\n    };\r\n\r\n    const getData = req =>\r\n      new Promise((resolve, reject) => {\r\n        request(\r\n          {\r\n            ...req,\r\n            headers: headers,\r\n            json: true\r\n          },\r\n          (err, response, body) => {\r\n            if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(err || body.error || body.errorMessage);\r\n            }\r\n          }\r\n        );\r\n      });\r\n\r\n    const workflow = body =>\r\n      getData({\r\n        method: 'POST',\r\n        url: `${req.body.propertyList.eka_connect_host}\/workflow`,\r\n        body: body\r\n      });\r\n\r\n    const checkPrice = (and, or, any, ne) => {\r\n      if (req.body.propertyList.CONTRACT_PRICE_CHECK_INTEGRATION_REQ) {\r\n        let filters = Object.keys(and)\r\n          .map(i =>\r\n            typeof and[i] == 'string' && i != 'BidPeriodFrom' && i != 'BidPeriodTo' && i != 'IsSiteBid'\r\n              ? `${i} eq '${and[i]}'`\r\n              :  (i == 'IsSiteBid' || i.toLowerCase() == 'issustainable') && !and[i] ? `${i} ne true` : `${i} eq ${and[i]}`\r\n          )\r\n          \/\/   .map(i =>\r\n          \/\/     typeof and[i] == 'string' && i != 'BidPeriodFrom' && i != 'BidPeriodTo'\r\n          \/\/       ? `${i} eq '${and[i]}'`\r\n          \/\/       : i == 'DailyTonnageLimit'\r\n          \/\/       ? `${i} ge ${and[i]}`\r\n          \/\/       : `${i} eq ${and[i]}`\r\n          \/\/   )\r\n          .join(' and ');\r\n\r\n        if (or) {\r\n          filters =\r\n            filters +\r\n            ' and (' +\r\n            Object.keys(or)\r\n              .map(i => (typeof or[i] == 'string'  && typeof or[i] != 'boolean' ? `${i} eq '${or[i]}'` : or[i] ?  `${i} eq ${or[i]}` : `${i} ne true`))\r\n              .join(' or ') +\r\n            ')';\r\n        }\r\n\r\n        if (ne) {\r\n          filters =\r\n            filters +\r\n            ' and ' +\r\n            Object.keys(ne)\r\n              .map(i => (typeof ne[i] == 'string' && typeof ne[i] != 'boolean' ? `${i} ne '${ne[i]}'` : ne[i] ? `${i} ne ${ne[i]}` : `${i} ne true`))\r\n              .join(' and ');\r\n        }\r\n\r\n        if (any) {\r\n          filters =\r\n            filters +\r\n            ' and (' +\r\n            Object.keys(any)\r\n              .map(i =>\r\n                any[i]\r\n                  .map(\r\n                    j =>\r\n                    `${i}\/any(p: ${Object.keys(j)\r\n                      .map(k =>\r\n                        typeof j[k] == 'string' && typeof j[k] != 'boolean'\r\n                          ? `p\/${k} eq '${j[k]}'`\r\n                          : j[k]\r\n                          ? `p\/${k} eq ${j[k]}`\r\n                          : `p\/${k} ne true`\r\n                      )\r\n                        .join(' and ')})`\r\n                  )\r\n                  .join(' and ')\r\n              )\r\n              .join(' and ') +\r\n            ')';\r\n        }\r\n\r\n        \/\/ const t = {\r\n        \/\/   workflowTaskName: 'EXTERNAL_GPS_PUBLISHED_BIDS',\r\n        \/\/   task: 'EXTERNAL_GPS_PUBLISHED_BIDS',\r\n        \/\/   appId: appId,\r\n        \/\/   filterData: {\r\n        \/\/     filter: [\r\n        \/\/       {\r\n        \/\/         fieldName: '$select',\r\n        \/\/         operator: '=',\r\n        \/\/         value:\r\n        \/\/           'PublishedBidId,CommodityName,CommodityGradeName,SeasonName,Price,DailyTonnageLimit,PaymentTermName,DeliveryTermName,CompanyName,BidPeriodFrom,BidPeriodTo,IsMultigrade,PortZoneName,DeliveryZoneName,ProfitcenterName,BidType,IsPublished,IsArchived,isSustainable&$expand=Parent_PublishedBids($select=IsSubgrade,IsSubGradeBase,MgSpread,CommodityGradeName,CommodityName,Price),Site($select=Name,EkaLocationCityName,DeliveryLocation),PublishedBidExtra($select=DailyTonnageActual)'\r\n        \/\/       },\r\n        \/\/       {\r\n        \/\/         fieldName: '$apply',\r\n        \/\/         operator: '=',\r\n        \/\/         value: `filter(IsPublished eq true and IsArchived ne true and IsExternal ne true and BidPeriodFrom le now() and BidPeriodTo ge now() and ((DailyTonnageLimit sub PublishedBidExtra\/DailyTonnageActual ge ${\r\n        \/\/           data.contractItemQuantity\r\n        \/\/         }) or (PublishedBidExtra\/DailyTonnageActual eq null and DailyTonnageLimit ge ${\r\n        \/\/           data.contractItemQuantity\r\n        \/\/         })) and ${filters})`\r\n        \/\/       }\r\n        \/\/     ]\r\n        \/\/   },\r\n        \/\/   output: {\r\n        \/\/     EXTERNAL_GPS_PUBLISHED_BIDS: {}\r\n        \/\/   }\r\n        \/\/ };\r\n        const t = {\r\n            workflowTaskName: 'EXTERNAL_GPS_PUBLISHED_BIDS',\r\n            task: 'EXTERNAL_GPS_PUBLISHED_BIDS',\r\n            appId: appId,\r\n            filterData: {\r\n              filter: [\r\n                {\r\n                  fieldName: '$select',\r\n                  operator: '=',\r\n                  value:\r\n                    'PublishedBidId,CommodityName,CommodityGradeName,SeasonName,Price,DailyTonnageLimit,PaymentTermName,DeliveryTermName,CompanyName,BidPeriodFrom,BidPeriodTo,IsMultigrade,PortZoneName,DeliveryZoneName,ProfitcenterName,BidType,IsPublished,IsArchived,isSustainable&$expand=Parent_PublishedBids($select=IsSubgrade,IsSubGradeBase,MgSpread,CommodityGradeName,CommodityName,Price),Site($select=Name,EkaLocationCityName,DeliveryLocation),PublishedBidExtra($select=DailyTonnageActual)'\r\n                },\r\n                {\r\n                  fieldName: '$apply',\r\n                  operator: '=',\r\n                  value: `filter(IsPublished eq true and IsArchived ne true and IsExternal ne true and BidPeriodFrom le now() and BidPeriodTo ge now() and ${filters})`\r\n                }\r\n              ]\r\n            },\r\n            output: {\r\n              EXTERNAL_GPS_PUBLISHED_BIDS: {}\r\n            }\r\n          };\r\n        console.log('Checking for price', JSON.stringify(t));\r\n        return workflow(t);\r\n      } else {\r\n        console.log('Not checking for price');\r\n        return new Promise((resolve, reject) => {\r\n          resolve({\r\n            data: [\r\n              {\r\n                Price: data.contractPrice\r\n              }\r\n            ]\r\n          });\r\n        });\r\n      }\r\n    };\r\n\r\n    const reqId = (reqContract, payload) =>\r\n      new Promise((resolve, reject) => {\r\n        workflow({\r\n          output: {\r\n            push_contractRequestData: [\r\n              {\r\n                requestType: 'New contract',\r\n                requestedDate: moment(reqContract.currentDate).format('DD-MM-YYYY'),\r\n                requestedBy: reqContract.requestedBy || ''\r\n              }\r\n            ]\r\n            \/\/ requestPayload: payload\r\n          },\r\n          task: 'push_contractRequestData',\r\n          workflowTaskName: 'push_contractRequestData',\r\n          appId: appId\r\n        })\r\n          .then(resId => {\r\n            if (resId && resId.data && resId.data.length > 0) {\r\n              resolve(resId.data.map(i => i.requestId));\r\n            } else {\r\n              reject('Request id not found in response');\r\n            }\r\n          })\r\n          .catch(err => {\r\n            reject(err);\r\n          });\r\n      });\r\n\r\n    const saveContract = t =>\r\n      Promise.all([\r\n        workflow({\r\n          output: {\r\n            update_contractRequestData: [t]\r\n          },\r\n          task: 'update_contractRequestData',\r\n          workflowTaskName: 'update_contractRequestData',\r\n          appId: '12325a98-a959-4939-9005-4158d136afcd'\r\n        }),\r\n        workflow({\r\n          output: {\r\n            create_contractDomainData: [t]\r\n          },\r\n          task: 'create_contractDomainData',\r\n          workflowTaskName: 'create_contractDomainData',\r\n          appId: '12325a98-a959-4939-9005-4158d136afcd'\r\n        })\r\n      ]);\r\n\r\n    const pushContractData = (reqId, contract) =>\r\n      workflow({\r\n        workflowTaskName: 'EXTERNAL_CTRM_CONTRACT_INBOUND_API',\r\n        task: 'EXTERNAL_CTRM_CONTRACT_INBOUND_API',\r\n        appId: appId,\r\n        output: {\r\n          EXTERNAL_CTRM_CONTRACT_INBOUND_API: {\r\n            App: 'CTRM',\r\n            Object: 'contractInbound_object',\r\n            RequestNumber: reqId,\r\n            ObjectAction: 'CREATE',\r\n            ContractDetail: contract\r\n          }\r\n        }\r\n      });\r\n\r\n    const saveNonAutoContract = t =>\r\n      Promise.all([\r\n        workflow({\r\n          output: {\r\n            create_contractDomainData: [t]\r\n          },\r\n          task: 'create_contractDomainData',\r\n          workflowTaskName: 'create_contractDomainData',\r\n          appId: '12325a98-a959-4939-9005-4158d136afcd'\r\n        }),\r\n        workflow({\r\n          output: {\r\n            update_contractRequestData: [t]\r\n          },\r\n          task: 'update_contractRequestData',\r\n          workflowTaskName: 'update_contractRequestData',\r\n          appId: '12325a98-a959-4939-9005-4158d136afcd'\r\n        })\r\n      ]);\r\n\r\n    const priceReq = {\r\n      BidType: data.markettype,\r\n      CommodityName: data.product || '',\r\n      SeasonName: data.cropYear || '',\r\n      PaymentTermName: data.paymentTerms || '',\r\n      DeliveryTermName: data.INCOTerm || '',\r\n      \/* BidPeriodFrom: data.shipmentPeriodFrom + (data.shipmentPeriodFrom.endsWith('Z') ? '' : 'Z'), *\/\r\n      \/* BidPeriodTo: data.shipmentPeriodTo + (data.shipmentPeriodTo.endsWith('Z') ? '' : 'Z'), *\/\r\n      Price: +data.contractPrice\r\n    };\r\n\r\n    if (data.isMultiGrade) {\r\n      priceReq.isMultiGrade = true;\r\n    } else {\r\n      priceReq.CommodityGradeName = data.quality.replace(' MG', '') || '';\r\n    }\r\n\r\n    \/\/ if (data.dischargeLocationCountry) {\r\n    \/\/   priceReq['Site\/CountryName'] = data.dischargeLocationCountry.split('_')[0];\r\n    \/\/ }\r\n\r\n    if (data.dischargeLocationCity && data.locationGroupType && data.locationGroupType.toLowerCase().includes('specific')) {\r\n      priceReq['Site\/EkaLocationCityName'] = data.dischargeLocationCity;\r\n    }\r\n\r\n    if (data.bulkHandler) {\r\n      priceReq.CompanyName = data.bulkHandler;\r\n    }\r\n\r\n    if (data.profitCentre) {\r\n      priceReq.ProfitcenterName = data.profitCentre;\r\n    }\r\n\r\n    \/\/ if (data.contractItemQuantity) {\r\n    \/\/   priceReq.DailyTonnageLimit = data.contractItemQuantity;\r\n    \/\/ }\r\n\r\n    if (data.locationGroupType) {\r\n      if (data.locationGroupType.toLowerCase().includes('specific')) {\r\n        priceReq.IsSiteBid = true;\r\n      } else {\r\n        priceReq.IsSiteBid = false;\r\n      }\r\n    }\r\n\r\n    const programNameMaster = filters => ({\r\n      appId: appId,\r\n      objectId: '46e84f42-6288-4027-b6d0-fd1c11019259' \/* not at all relevant object id *\/,\r\n      body: {\r\n        collectionName: 'Grower Programs',\r\n        getAllRecords: true,\r\n        criteria: {\r\n          filter: Object.keys(filters).map(i => ({\r\n            fieldName: i,\r\n            operator: 'eq',\r\n            value: filters[i]\r\n          }))\r\n        },\r\n        start: '',\r\n        limit: ''\r\n      },\r\n      tenant: tenant\r\n    });\r\n\r\n    const getCollectionMapper = config =>\r\n      new Promise((resolve, reject) => {\r\n        const r = {\r\n          method: 'POST',\r\n          url: `${req.body.propertyList.eka_connect_host}\/collectionmapper\/${config.appId}\/${\r\n            config.objectId\r\n          }\/fetchCollectionRecords`,\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            ttl: 600,\r\n            'X-TenantID': config.tenant,\r\n            'Content-Type': 'application\/json'\r\n          },\r\n          body: config.body,\r\n          json: true\r\n        };\r\n        request(r, (err, response, body) => {\r\n          if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n\r\n    const getProgramName = requestContract =>\r\n      new Promise((resolve, reject) => {\r\n        if (requestContract.product && requestContract.cropYear && requestContract.paymentTerms) {\r\n          getCollectionMapper(\r\n            programNameMaster({\r\n              'IS ACTIVE': 'Y',\r\n              'PRICE TYPE': 'FIXED',\r\n              PRODUCT: requestContract.product,\r\n              'CROP YEAR': requestContract.cropYear,\r\n              'IS MULTI GRADE':\r\n                (requestContract.isMultiGrade + '').toLowerCase() == 'y' || requestContract.isMultiGrade == true\r\n                  ? 'Y'\r\n                  : 'N',\r\n              INCOTERM: requestContract.INCOTerm,\r\n              'PAYMENT TERM': requestContract.paymentTerms,\r\n              'IS SUSTAINABLE': requestContract.issustainable ? requestContract.issustainable.toUpperCase() : ''\r\n            })\r\n          )\r\n            .then(firstPref => {\r\n              if (firstPref && firstPref.length > 0) {\r\n                if (firstPref.length == 1) {\r\n                  resolve(firstPref[0]['GROWER PROGRAM NAME']);\r\n                } else if (requestContract.profitCentre) {\r\n                  const secondPref = firstPref.filter(\r\n                    i => i['PROFIT CENTER NAME'].toLowerCase() == requestContract.profitCentre.toLowerCase()\r\n                  );\r\n                  if (secondPref && secondPref.length > 0) {\r\n                    if (secondPref.length == 1) {\r\n                      resolve(secondPref[0]['GROWER PROGRAM NAME']);\r\n                    } else {\r\n                      if (requestContract.dischargeLocationCountry) {\r\n                        const thirdPref = secondPref.filter(i =>\r\n                          i['APPLICABLE LOCATION GROUP']\r\n                            .toLowerCase()\r\n                            .includes(requestContract.dischargeLocationCountry.split('_')[1].toLowerCase())\r\n                        );\r\n                        if (thirdPref && thirdPref.length > 0) {\r\n                          if (thirdPref.length == 1) {\r\n                            resolve(thirdPref[0]['GROWER PROGRAM NAME']);\r\n                          } else {\r\n                            if (requestContract.locationGroupType) {\r\n                              const fourthPref = thirdPref.filter(\r\n                                i =>\r\n                                  i['DELIVERY LOCATION'].toLowerCase() ==\r\n                                  requestContract.locationGroupType.toLowerCase()\r\n                              );\r\n                              if (fourthPref && fourthPref.length > 0) {\r\n                                if (fourthPref.length == 1) {\r\n                                  resolve(fourthPref[0]['GROWER PROGRAM NAME']);\r\n                                } else {\r\n                                  let fifthPref = fourthPref;\r\n                                  if (\r\n                                    (requestContract.isMultiGrade + '').toLowerCase() == 'y' ||\r\n                                    requestContract.isMultiGrade == true\r\n                                  ) {\r\n                                    if (requestContract.quality) {\r\n                                      fifthPref = fourthPref.filter(\r\n                                        i =>\r\n                                          i['BASE QUALITY'].toLowerCase() ==\r\n                                          requestContract.quality.replace(' MG', '').toLowerCase()\r\n                                      );\r\n                                    } else {\r\n                                      reject('Quality is requipred for further processing');\r\n                                    }\r\n                                  }\r\n                                  if (fifthPref && fifthPref.length > 0) {\r\n                                    if (fifthPref.length == 1) {\r\n                                      resolve(fifthPref[0]['GROWER PROGRAM NAME']);\r\n                                    } else {\r\n                                      if (requestContract.bulkHandler) {\r\n                                        let sixthPref = fifthPref.filter(i =>\r\n                                          i['APPLICABLE BULK HEADER']\r\n                                            .toLowerCase()\r\n                                            .includes(requestContract.bulkHandler.toLowerCase())\r\n                                        );\r\n                                        if (sixthPref && sixthPref.length > 0) {\r\n                                          if (sixthPref.length == 1) {\r\n                                            resolve(sixthPref[0]['GROWER PROGRAM NAME']);\r\n                                          } else {\r\n                                            sixthPref.sort((a, b) =>\r\n                                              a['GROWER PROGRAM NAME']\r\n                                                .toLowerCase()\r\n                                                .localeCompare(b['GROWER PROGRAM NAME'].toLowerCase())\r\n                                            );\r\n                                            resolve(sixthPref[0]['GROWER PROGRAM NAME']);\r\n                                          }\r\n                                        } else {\r\n                                          reject('No program found for sixth preference');\r\n                                        }\r\n                                      } else {\r\n                                        reject('Bulk handler is required for further processing');\r\n                                      }\r\n                                    }\r\n                                  } else {\r\n                                    reject('No program found for fifth preference');\r\n                                  }\r\n                                }\r\n                              } else {\r\n                                reject('No program found for fourth preference');\r\n                              }\r\n                            } else {\r\n                              reject('Location group is required for further processing');\r\n                            }\r\n                          }\r\n                        } else {\r\n                          reject('No program found for third preference');\r\n                        }\r\n                      } else {\r\n                        reject('Discharge city and country are required for further processing');\r\n                      }\r\n                    }\r\n                  } else {\r\n                    reject('No program found for second preference');\r\n                  }\r\n                } else {\r\n                  reject('Profit center is required for further processing');\r\n                }\r\n              } else {\r\n                reject('No program found for first preference');\r\n              }\r\n            })\r\n            .catch(err => {\r\n              console.error(err);\r\n              reject('Error when fetching program collection');\r\n            });\r\n        } else {\r\n          reject('One or more of product, crop year, multi grade, inco term and payment terms are missing');\r\n        }\r\n      });\r\n\r\n    priceReq.isSustainable = data.issustainable.toLowerCase() == 'y' ? true : false;\r\n    getProgramName(data)\r\n      .then(name => {\r\n        data.programName = name;\r\n        if (data.INCOTerm.toLowerCase() != 'ex-farm') {\r\n          checkPrice(\r\n            priceReq,\r\n            data.dischargeLocationCountry.split('_')[1]\r\n              ? {\r\n                  PortZoneName: data.dischargeLocationCountry.split('_')[1],\r\n                  DeliveryZoneName: data.dischargeLocationCountry.split('_')[1]\r\n                }\r\n              : null,\r\n            data.isMultiGrade\r\n              ? {\r\n                  Parent_PublishedBids: [\r\n                    ...JSON.parse(data.multiGradeDifferentialDetails.replace(\/'\/g, '\"'))\r\n                      .multiGradeDifferentialDetail.filter(i => (i.multiGradeDifferential + '').toLowerCase() != 'base')\r\n                      .map(i => ({\r\n                        CommodityGradeName: i.qualityName,\r\n                        MgSpread: +i.multiGradeDifferential || 0,\r\n                        IsSubgradeBase: false\r\n                      })),\r\n                    {\r\n                      CommodityGradeName: data.quality.replace(' MG', ''),\r\n                      IsSubgradeBase: true\r\n                    }\r\n                  ]\r\n                }\r\n              : null,\r\n            data.isMultiGrade ? null : { isMultiGrade: true }\r\n          )\r\n            .then(prices => {\r\n              if (prices && prices.data && prices.data.length > 0) {\r\n                if (data.contractPrice && !isNaN(data.contractPrice)) {\r\n                  if (prices.data[0].Price == +data.contractPrice) {\r\n                    const formattedCTRMData = formatCTRMData(data);\r\n                    reqId(data, formattedCTRMData)\r\n                      .then(id => {\r\n                        if (id && id.length > 0) {\r\n                          console.log('Formatted data to CTRM', JSON.stringify(formattedCTRMData));\r\n                          pushContractData(id[0], formattedCTRMData)\r\n                            .then(ctrm => {\r\n                              const formattedCCData = formatCCData(\r\n                                data,\r\n                                ctrm.data['Ext.RefNumber'],\r\n                                ctrm.data.EntityRefNo\r\n                              );\r\n                              console.log('Formatted data to CC', JSON.stringify(formattedCCData));\r\n                              saveContract(formattedCCData)\r\n                                .then(() => {\r\n                                  send(200, {\r\n                                    requestId: ctrm.data['Ext.RefNumber'],\r\n                                    msg: 'Published contract',\r\n                                    isDelay: true,\r\n                                    priceInvalid: false,\r\n                                    tabIndex: 2,\r\n                                    ngrCTRMFilter: data.BPRefNo,\r\n                                    appHome: req.body.propertyList.CONTRACT_BROWSE_BIDS_URL\r\n                                  });\r\n                                })\r\n                                .catch(err => {\r\n                                  console.error('Failed to push to EKA CC', err);\r\n\r\n                                  send(500, {\r\n                                    errorCode: '500',\r\n                                    errorMessage: 'Contract cannot be created, please contact system admin',\r\n                                    errorContext: null,\r\n                                    errorLocalizedMessage: 'Failed to push to EKA CC'\r\n                                  });\r\n                                  handleErrorResponse(req, '', err, '')\r\n                                });\r\n                            })\r\n                            .catch(err => {\r\n                              console.error('Failed to push to CTRM', err);\r\n                              send(500, {\r\n                                errorCode: '500',\r\n                                errorMessage: 'Contract cannot be created, please contact system admin',\r\n                                errorContext: null,\r\n                                errorLocalizedMessage: 'Contract cannot be created, please contact system admin'\r\n                              });\r\n                              handleErrorResponse(req, '', err, '')\r\n                            });\r\n                        }\r\n                      })\r\n                      .catch(err => {\r\n                        console.error('Failed to generate request id', err);\r\n                        send(500, {\r\n                          errorCode: '500',\r\n                          errorMessage: 'Contract cannot be created, please contact system admin',\r\n                          errorContext: null,\r\n                          errorLocalizedMessage: 'Failed to generate request id'\r\n                        });\r\n                        handleErrorResponse(req, '', err, '')\r\n                      });\r\n                  } else {\r\n                    send(200, {\r\n                      msg: 'Prices do not match',\r\n                      priceInvalid: true,\r\n                      data: data,\r\n                      appHome: req.body.propertyList.CONTRACT_BROWSE_BIDS_URL\r\n                    });\r\n                  }\r\n                } else {\r\n                  send(200, {\r\n                    msg: 'Price is invalid',\r\n                    priceInvalid: true,\r\n                    data: data,\r\n                    appHome: req.body.propertyList.CONTRACT_BROWSE_BIDS_URL\r\n                  });\r\n                }\r\n              } else {\r\n                send(200, {\r\n                  msg: 'No price available for combination',\r\n                  priceInvalid: true,\r\n                  data: data,\r\n                  appHome: req.body.propertyList.CONTRACT_BROWSE_BIDS_URL\r\n                });\r\n              }\r\n            })\r\n            .catch(err => {\r\n              console.error('Price check failed', err);\r\n              send(500, 'Error in prices API');\r\n              handleErrorResponse(req, '', err, '')\r\n            });\r\n        } else {\r\n          reqId(data, null)\r\n            .then(id => {\r\n              if (id && id.length > 0) {\r\n                data.requestId = id[0];\r\n                data.requestIdUnique = id[0];\r\n                data.approvalStatus = 'Awaiting review';\r\n                data.isRequestedByEkaCCSystem = true;\r\n                data.multiGradeDifferentialDetails = data.isMultiGrade\r\n                  ? JSON.parse(data.multiGradeDifferentialDetails.replace(\/'\/g, '\"'))\r\n                  : null;\r\n                data.isMultiGrade = data.isMultiGrade ? 'Y' : 'N';\r\n                data.traderName = traderName;\r\n                data.requestedBy = data.requestedBy || '';\r\n                data.requestType = 'New contract';\r\n                data.requestedDate = moment(data.currentDate).format('DD-MM-YYYY');\r\n                data.contractRefNo = '-';\r\n                data.contractItemRefNo = 1;\r\n                data.brokerRefNo = data.brokerReferenceNo;\r\n                data.brokerBPRefNo = data.refNo || data.brokerBPRefNo;\r\n                delete data.PRIMARY_ID;\r\n                saveNonAutoContract(data)\r\n                  .then(() => {\r\n                    send(200, {\r\n                      requestId: data.requestId,\r\n                      msg: data.requestId + ' successfully submitted.',\r\n                      priceInvalid: false,\r\n                      tabIndex: 2,\r\n                      ngrCTRMFilter: data.BPRefNo\r\n                    });\r\n                  })\r\n                  .catch(err => {\r\n                    console.error(err);\r\n                    send(500, 'Contract cannot be created, please contact system admin');\r\n                    handleErrorResponse(req, '', err, '')\r\n                  });\r\n              }\r\n            })\r\n            .catch(err => {\r\n              console.error(err);\r\n              send(500, 'Contract cannot be created, please contact system admin');\r\n              handleErrorResponse(req, '', err, '')\r\n            });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        res.status(400).send('Contract cannot be created, please contact system admin');\r\n        handleErrorResponse(req, '', err, '')\r\n      });",
  "sys__UUID": "6f9b54ea-683d-414c-9711-58de016e4795"
}
