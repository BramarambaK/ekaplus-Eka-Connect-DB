{
    "_id": "processor_limitlist",
    "name": "limitlist",
    "type": "processor",
    "refType": "app",
    "refTypeId": "5539617b-5075-4482-8bcc-26f76849eb89",
    "snippet": " var start = req.body.queryParams.start ? parseInt(req.body.queryParams.start) : 0;\r\n    var end = req.body.queryParams.limit ? parseInt(req.body.queryParams.limit) : 100000;\r\n    console.log('limit list Proccess Started ' + new Date());\r\n    var connectUrl = req.body.propertyList.eka_connect_host + '\/workflow\/data';\r\n    \/\/ var platformUrl =\r\n    \/\/   req.body.propertyList.platform_url +\r\n    \/\/   '\/collection\/v1?collectionName=' +\r\n    \/\/   req.body.propertyList.creditrisk_counterparty_collection_name +\r\n    \/\/   '&limit=10000';\r\n    var platformUrl =\r\n      req.body.propertyList.eka_connect_host +\r\n      '\/collectionmapper\/' +\r\n      req.body.appId +\r\n      '\/26e782e8-89e5-40ea-a3be-63b320260b7d\/fetchCollectionRecords';\r\n    var platformBody = null;\r\n    var connectQueryParams = null;\r\n    var columnMapping = req.body.propertyList.creditrisk_counterparty_collection_object_column_mapping;\r\n    var connectBody = {\r\n      appId: req.body.appId,\r\n      workFlowTask: 'limitlistConnect'\r\n    };\r\n    if (req.body.filterData && req.body.filterData.filter) {\r\n      connectBody.filterData = req.body.filterData;\r\n    }\r\n    platformBody = {\r\n      collectionName: req.body.propertyList.creditrisk_counterparty_collection_name,\r\n      start: start,\r\n      limit: end\r\n    };\r\n    var collection = {\r\n      method: 'POST',\r\n      url: platformUrl,\r\n      body: platformBody,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application\/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    var collection1 = {\r\n      method: 'POST',\r\n      url: platformUrl,\r\n      body: platformBody,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application\/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    var connect = {\r\n      method: 'POST',\r\n      body: connectBody,\r\n      url: connectUrl,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function get_collection(connectData) {\r\n      var cpnamearray = [];\r\n      var filterarr = [];\r\n      for (let i = 0; i < connectData.length; i++) {\r\n        cpnamearray.push(connectData[i]['counterpartyGroupName']);\r\n      }\r\n      cpnamearray = cpnamearray.toString();\r\n      var obj = {};\r\n      obj['fieldName'] = columnMapping.hasOwnProperty('cpid') ? columnMapping['cpid'] : 'cpid';\r\n      obj['operator'] = 'in';\r\n      obj['value'] = cpnamearray;\r\n      filterarr.push(obj);\r\n\r\n      platformBody = {\r\n       criteria: { filter: filterarr },\r\n        collectionName: req.body.propertyList.creditrisk_counterparty_collection_name,\r\n        start: start,\r\n        limit: end\r\n      };\r\n      collection.body = platformBody;\r\n      return new Promise(function(resolve, reject) {\r\n        request(collection, function(err, response, body) {\r\n          body = JSON.parse(JSON.stringify(body));\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_collection1(connectData) {\r\n      var cpnamearray = [];\r\n      var filterarr = [];\r\n      for (let i = 0; i < connectData.length; i++) {\r\n        cpnamearray.push(connectData[i]['counterpartyGroupName']);\r\n      }\r\n      cpnamearray = cpnamearray.toString();\r\n      var obj1 = {};\r\n      if (!columnMapping.hasOwnProperty('counterpartyGroupID')) {\r\n        return new Promise(function(resolve, reject) {\r\n          resolve({});\r\n        });\r\n      }\r\n      obj1['fieldName'] = columnMapping.hasOwnProperty('counterpartyGroupID')\r\n        ? columnMapping['counterpartyGroupID']\r\n        : 'counterpartyGroupID';\r\n      obj1['operator'] = 'in';\r\n      obj1['value'] = cpnamearray;\r\n      filterarr.push(obj1);\r\n\r\n      platformBody = {\r\n        criteria: { filter: filterarr },\r\n        collectionName: req.body.propertyList.creditrisk_counterparty_collection_name,\r\n        start: start,\r\n        limit: end\r\n      };\r\n      collection1.body = platformBody;\r\n      console.log('platform api start :' + new Date());\r\n      console.log('platform API Details ::' + JSON.stringify(collection1));\r\n      return new Promise(function(resolve, reject) {\r\n        request(collection1, function(err, response, body) {\r\n          body = JSON.parse(JSON.stringify(body));\r\n          console.log('platform api end :' + new Date());\r\n          if (err || body.error) {\r\n            console.log('error.... ' + err);\r\n            reject(body);\r\n          } else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_connect() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(connect, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    let collection_gr = [];\r\n    let collection_cp = [];\r\n    get_connect().then(function(result) {\r\n      let connect = result.data;\r\n      get_collection1(connect).then(function(result1) {\r\n        if (result != null && result != undefined && result.data != undefined) collection_gr = result1;\r\n        get_collection(connect).then(function(result2) {\r\n          collection_cp = result2;\r\n          Array.prototype.push.apply(collection_cp, collection_gr);\r\n          var keyVals = req.body.propertyList.creditrisk_counterparty_collection_object_column_mapping;\r\n          collection_cp = JSON.stringify(collection_cp);\r\n          var connectKeys = Object.keys(keyVals);\r\n\r\n          for (var i = 0; i < connectKeys.length; i++) {\r\n            collection_cp = collection_cp.split(keyVals[connectKeys[i]]).join(connectKeys[i]);\r\n          }\r\n          collection_cp = JSON.parse(collection_cp);\r\n          for (let i = 0; i < collection_cp.length; i++) {\r\n            for (var j = 0; j < connect.length; j++) {\r\n              if (collection_cp[i].cpid === connect[j].counterpartyGroupName) {\r\n                delete connect[j]['sys__state'];\r\n                connect[j]['counterpartyName'] = collection_cp[i]['counterpartyName'];\r\n                connect[j]['counterpartyGroupNameDisplayName'] = collection_cp[i]['counterpartyName'];\r\n                connect[j]['currency'] = collection_cp[i]['currency'];\r\n              } else if (collection_cp[i].counterpartyGroupID === connect[j].counterpartyGroupName) {\r\n                delete connect[j]['sys__state'];\r\n                connect[j]['counterpartyName'] = collection_cp[i]['counterpartyGroup'];\r\n                connect[j]['counterpartyGroupNameDisplayName'] = collection_cp[i]['counterpartyGroup'];\r\n                connect[j]['currency'] = req.body.propertyList.currency_value;\r\n              }\r\n            }\r\n          }\r\n          console.log('limit list Proccess end ' + new Date());\r\n          res.status(200).send(connect);\r\n        });\r\n      });\r\n    });",
    "sys__UUID": "511464ed-6403-4296-9419-30f5d7248919",
    "sys__createdOn": ISODate("2019-05-22T09:51:04.600Z"),
    "sys__createdBy": "srini@ekaplus.com"
}