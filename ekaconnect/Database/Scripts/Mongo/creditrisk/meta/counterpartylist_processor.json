{
    "_id": "processor_counterpartylist",
    "name": "counterpartylist",
    "type": "processor",
    "refType": "app",
    "refTypeId": "5539617b-5075-4482-8bcc-26f76849eb89",
    "snippet": "   var moment = require('moment');\r\n    var start = req.body.queryParams.start ? parseInt(req.body.queryParams.start) : 0;\r\n    var end = req.body.queryParams.limit ? parseInt(req.body.queryParams.limit) : 10000;\r\n    var connectUrl = req.body.propertyList.eka_connect_host + '\/workflow\/data';\r\n    var platformUrl =\r\n      req.body.propertyList.eka_connect_host +\r\n      '\/collectionmapper\/' +\r\n      req.body.appId +\r\n      '\/01abf4cd-c682-4988-9b8c-c84014a230e7\/fetchCollectionRecords';\r\n    \/\/ var platformUrl =\r\n    \/\/   req.body.propertyList.platform_url +\r\n    \/\/   '\/collection\/v1?collectionName=' +\r\n    \/\/   req.body.propertyList.creditrisk_counterparty_collection_name +\r\n    \/\/   '&limit=' +\r\n    \/\/   end +\r\n    \/\/   '&start=' +\r\n    \/\/   start;\r\n    var platformBody = null;\r\n    var connectQueryParams = null;\r\n    var columnMapping = req.body.propertyList.creditrisk_counterparty_collection_object_column_mapping;\r\n    \/\/ var x = req.body.filterData;\r\n    var connectBody = {\r\n      appId: req.body.appId,\r\n      workFlowTask: 'counterpartylistConnect'\r\n    };\r\n    var filterarr = [];\r\n    if (req.body.filterData && req.body.filterData.filter) {\r\n      connectBody.filterData = req.body.filterData;\r\n      for (let i = 0; i < req.body.filterData.filter.length; i++) {\r\n        let filterObj = req.body.filterData.filter[i];\r\n        var obj = {};\r\n        obj['fieldName'] = columnMapping.hasOwnProperty(filterObj['fieldName'])\r\n          ? columnMapping[filterObj['fieldName']]\r\n          : filterObj['fieldName'];\r\n        obj['operator'] = filterObj['operator'];\r\n        obj['value'] = filterObj['value'];\r\n        if (obj['operator'] == 'in') obj['value'] = filterObj['value'].toString();\r\n        filterarr.push(obj);\r\n      }\r\n      platformBody = {\r\n        criteria: { filter: filterarr },\r\n        collectionName: req.body.propertyList.creditrisk_counterparty_collection_name,\r\n        start: start,\r\n        limit: end\r\n      };\r\n      console.log('platform Filter ::' + JSON.stringify(platformBody));\r\n    } else {\r\n      platformBody = {\r\n        collectionName: req.body.propertyList.creditrisk_counterparty_collection_name,\r\n        start: start,\r\n        limit: end\r\n      };\r\n    }\r\n\r\n    var collection = {\r\n      method: 'POST',\r\n      url: platformUrl,\r\n      body: platformBody,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application\/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n\r\n    var connect = {\r\n      method: 'POST',\r\n      url: connectUrl,\r\n      body: connectBody,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function get_collection() {\r\n      return new Promise(function(resolve, reject) {\r\n        console.log('Request - ' + collection.url);\r\n        request(collection, function(err, response, body) {\r\n          body = JSON.parse(JSON.stringify(body));\r\n          console.log('Response - success');\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            console.log('Success');\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_connect() {\r\n      return new Promise(function(resolve, reject) {\r\n        console.log('Request - ' + connect.url);\r\n        request(connect, function(err, response, body) {\r\n          console.log('Response - success');\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            console.log('Success');\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    get_collection().then(function(result) {\r\n      var collection = result;\r\n      var mergedData = [];\r\n      var keyVals = req.body.propertyList.creditrisk_counterparty_collection_object_column_mapping;\r\n      collection = JSON.stringify(collection);\r\n      var connectKeys = Object.keys(keyVals);\r\n\r\n      for (var i = 0; i < connectKeys.length; i++) {\r\n        collection = collection.split(keyVals[connectKeys[i]]).join(connectKeys[i]);\r\n      }\r\n      collection = JSON.parse(collection);\r\n      get_connect()\r\n        .then(function(result1) {\r\n          let connect = result1.data;\r\n          for (var i = 0; i < collection.length; i++) {\r\n            if (collection[i]['crmStatus'].match(\/Y\/)) {\r\n              collection[i]['crmStatus'] = 'Active';\r\n            } else if (collection[i]['crmStatus'].match(\/N\/)) {\r\n              collection[i]['crmStatus'] = 'Inactive';\r\n            }\r\n            collection[i]['creditLimitLevel'] = '';\r\n            collection[i]['creditRiskStatus'] = 'creditRiskStatus-001';\r\n            collection[i]['creditRiskStatusDisplayName'] = 'Active';\r\n            collection[i]['statusDate'] = '';\r\n            collection[i]['reference'] = '';\r\n            collection[i]['debtorNumber'] = '';\r\n            collection[i]['annexNumber'] = '';\r\n            collection[i]['dateDecision'] = '';\r\n            collection[i]['decisionRemarks'] = '';\r\n            if (\r\n              collection[i]['counterpartyGroup'] == undefined ||\r\n              collection[i]['counterpartyGroup'] == 'NA' ||\r\n              collection[i]['counterpartyGroup'] == ' '\r\n            ) {\r\n              collection[i]['creditLimitLevel'] = 'Counterparty';\r\n            } else {\r\n              collection[i]['creditLimitLevel'] = 'Counterparty Group';\r\n            }\r\n            if (connect.length === 0) {\r\n              mergedData.push({ ...collection[i] });\r\n            } else {\r\n              for (var j = 0; j < connect.length; j++) {\r\n                if (\r\n                  collection[i].cpid === connect[j].cpid &&\r\n                  collection[i].counterpartyName === connect[j].counterpartyName\r\n                ) {\r\n                  if (connect[j].sys__version <= 1) {\r\n                    var date = parseInt(connect[j]['sys__createdOn']);\r\n                    \/\/date = moment(parseInt(date)).format('MM\/DD\/YYYY hh:mm:ss');\r\n                  } else if (connect[j].sys__version > 1) {\r\n                    var date = parseInt(connect[j]['sys__updatedOn']);\r\n                    \/\/date = moment(parseInt(date)).format('MM\/DD\/YYYY hh:mm:ss');\r\n                  }\r\n                  for (var key in connect[j]) {\r\n                    collection[i][key] = connect[j][key];\r\n                  }\r\n                  collection[i]['statusDate'] = date;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          var copycollection = [];\r\n          for (var i = 0; i < collection.length; i++) {\r\n            if (collection[i].buyerSeller.match(\/Seller\/) && collection[i].buyerSeller.match(\/Buyer\/)) {\r\n              collection[i]['buyerSeller'] = 'Both';\r\n              copycollection.push(collection[i]);\r\n            } else if (collection[i].buyerSeller.match(\/Buyer\/)) {\r\n              collection[i]['buyerSeller'] = 'Buyer';\r\n              copycollection.push(collection[i]);\r\n            } else if (collection[i].buyerSeller.match(\/Seller\/)) {\r\n              collection[i]['buyerSeller'] = 'Seller';\r\n              copycollection.push(collection[i]);\r\n            } else {\r\n              \/\/ collection.splice(i, 1);\r\n            }\r\n          }\r\n          res.status(200).send(copycollection);\r\n        })\r\n        .catch(err => {\r\n          res.status(500).send(err);\r\n        });\r\n    });",
    "sys__UUID": "a1b886dd-8162-44d4-b730-4e6373ca0453",
    "sys__createdOn": ISODate("2019-05-22T09:51:04.600Z"),
    "sys__createdBy": "srini@ekaplus.com"
}