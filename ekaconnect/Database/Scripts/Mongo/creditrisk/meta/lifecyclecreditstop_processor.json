{
  "_id": "object_lifecyclecreditstop",
  "name": "lifecyclecreditstop",
  "type": "processor",
  "refType": "app",
  "refTypeId": "5539617b-5075-4482-8bcc-26f76849eb89",
  "snippet": "\r\n    var start = req.body.queryParams.start ? parseInt(req.body.queryParams.start) : 0;\r\n    var end = req.body.queryParams.limit ? parseInt(req.body.queryParams.limit) : 100000;\r\n    var moment = require('moment');\r\n    var platformUrl =\r\n      req.body.propertyList.eka_connect_host +\r\n      '/collectionmapper/' +\r\n      req.body.appId +\r\n      '/26a63eb4-79f9-4585-ab6a-6633fd19b8ea/fetchCollectionRecords';\r\n    var platformBody = null;\r\n    platformBody = {\r\n      collectionName: req.body.propertyList.creditrisk_creditstop_collection_name,\r\n      start: start,\r\n      limit: end\r\n    };\r\n    var collection = {\r\n      method: 'POST',\r\n      url: platformUrl,\r\n      body: platformBody,\r\n\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    var versioning_data = {\r\n      method: 'GET',\r\n      url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '/workflow/' +\r\n        req.body.selectedData.refTypeId +\r\n        '/_UT_VIEW_VERSION_HISTORY/data/' +\r\n        req.body.selectedData.sys__UUID +\r\n        '/versions',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n\r\n    function get_version_data() {\r\n      return new Promise(function(resolve, reject) {\r\n        console.log('Request - ' + versioning_data.url);\r\n        request(versioning_data, function(err, response, body) {\r\n          console.log('Response is success ');\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            console.log('Success');\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_collection() {\r\n      return new Promise(function(resolve, reject) {\r\n        console.log('Request - ' + collection.url);\r\n        request(collection, function(err, response, body) {\r\n          body = JSON.parse(JSON.stringify(body));\r\n          console.log('Response - success');\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            console.log('Success');\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function filter(obj) {\r\n      var x = {};\r\n      for (var i = 0; i < obj.sys__payload.length; i++) {\r\n        if (obj.hasOwnProperty(obj.sys__payload[i])) {\r\n          x[obj.sys__payload[i]] = obj[obj.sys__payload[i]];\r\n          var date = obj['sys__updatedOn'];\r\n          var responseDate = moment(date).format('DD/MM/YYYY hh:mm:ss');\r\n          var date = responseDate.slice(0, 10);\r\n          var time = responseDate.slice(11, 20);\r\n          x['sys__createdOnDate'] = date;\r\n          x['sys__createdOnTime'] = time;\r\n          x['sys__createdBy'] = obj['sys__updatedBy'];\r\n        }\r\n      }\r\n      return x;\r\n    }\r\n    function filterMainObject(obj) {\r\n      let collection;\r\n      let versionData = [];\r\n      var data = {};\r\n      if (req.body.selectedData.sys__UUID) {\r\n        collection = obj.versions;\r\n        delete collection[0]['sys__state'];\r\n        var date = collection[0]['sys__createdOn'];\r\n        var responseDate = moment(date).format('DD/MM/YYYY hh:mm:ss');\r\n        var date = responseDate.slice(0, 10);\r\n        var time = responseDate.slice(11, 20);\r\n        collection[0]['sys__createdOnDate'] = date;\r\n        collection[0]['sys__createdOnTime'] = time;\r\n\r\n        versionData.push(collection[0]);\r\n        for (var i = 1; i < collection.length; i++) {\r\n          versionData.push(filter(collection[i]));\r\n        }\r\n      } else {\r\n        collection = obj;\r\n        versionData.push(collection);\r\n      }\r\n      return versionData;\r\n    }\r\n    function changingNames(obj) {\r\n      var keyVals = req.body.propertyList.creditrisk_creditstop_collection_object_column_mapping;\r\n      obj = JSON.stringify(obj);\r\n      var connectKeys = Object.keys(keyVals);\r\n      for (var i = 0; i < connectKeys.length; i++) {\r\n        obj = obj.split(keyVals[connectKeys[i]]).join(connectKeys[i]);\r\n      }\r\n      obj = JSON.parse(obj);\r\n      return obj;\r\n    }\r\n    let x = req.body.selectedData.sys__UUID;\r\n    let versionData;\r\n    if (req.body.selectedData.sys__UUID) {\r\n      get_version_data().then(result => {\r\n        let collection = result.versions;\r\n        var description = [];\r\n        var dataset = [];\r\n        var data = [];\r\n        var values = [];\r\n        var sys_payload = [];\r\n        var details = [];\r\n        if (collection[0] && collection[0]['dueDate']) {\r\n          var dueDate = moment(collection[0]['dueDate']).format('DD/MM/YYYY hh:mm:ss');\r\n          dueDate = dueDate.slice(0, 10);\r\n        }\r\n        if (collection[0] && collection[0].counterpartyGroup)\r\n          details.push({ name: 'Counterparty Group', value: collection[0].counterpartyGroup });\r\n        if (collection[0] && collection[0].corporateid)\r\n          details.push({ name: 'Corporate ID', value: collection[0].corporateid });\r\n        if (collection[0] && collection[0].trader) details.push({ name: 'Trader', value: collection[0].trader });\r\n        if (collection[0] && collection[0].invoiceRefNo)\r\n          details.push({ name: 'Invoice Ref No', value: collection[0].invoiceRefNo });\r\n        if (collection[0] && collection[0].paymentTerm)\r\n          details.push({ name: 'Payment Term', value: collection[0].paymentTerm });\r\n        if (dueDate != '') details.push({ name: 'Due Date', value: dueDate });\r\n        if (collection[0] && collection[0].payableCurrency)\r\n          details.push({ name: 'Payable Currency', value: collection[0].payableCurrency });\r\n        if (collection[0] && collection[0].totalAmount)\r\n          details.push({ name: 'Total Amount', value: collection[0].totalAmount });\r\n        if (collection[0] && collection[0].pendingAmount)\r\n          details.push({ name: 'Pending Amount', value: collection[0].pendingAmount });\r\n        if (collection.length > 1) {\r\n          for (var t = 0; t < collection.length; t++) {\r\n            data = [];\r\n            if (t < collection.length - 1) {\r\n              data.push(collection[t]);\r\n              data.push(collection[t + 1]);\r\n\r\n              data;\r\n              var date = data[1]['sys__updatedOn'];\r\n              date = moment(date).format('DD/MM/YYYY hh:mm:ss');\r\n              var doneBy = data[1]['sys__updatedBy'];\r\n              sys_payload = [];\r\n              dataset = [];\r\n              sys_payload = data[1]['sys__payload'];\r\n              for (var i = 0; i < data.length; i++) {\r\n                var obj = {};\r\n                for (var j = 0; j < sys_payload.length; j++) {\r\n                  obj[sys_payload[j]] = data[i][sys_payload[j]];\r\n                }\r\n                dataset.push(obj);\r\n              }\r\n\r\n              // 0 -->prevValues\r\n              // 1 --> postValue\r\n              values = Object.keys(dataset[0]);\r\n              var obj = {};\r\n              obj['timestamp'] = date;\r\n              obj['doneBy'] = doneBy;\r\n              obj['details'] = [];\r\n              for (var j = 0; j < values.length; j++) {\r\n                var str = '';\r\n                str = values[j];\r\n                str = str\r\n                  .replace(/(_|-)/g, ' ')\r\n                  .trim()\r\n                  .replace(/\\w\\S*/g, function(str) {\r\n                    return str.charAt(0).toUpperCase() + str.substr(1);\r\n                  })\r\n                  .replace(/([a-z])([A-Z])/g, '$1 $2')\r\n                  .replace(/([A-Z])([A-Z][a-z])/g, '$1 $2');\r\n                obj['details'].push({\r\n                  name: str,\r\n                  preValue: dataset[0][values[j]],\r\n                  postValue: dataset[1][values[j]]\r\n                });\r\n              }\r\n              obj;\r\n              description.push(obj);\r\n            }\r\n          }\r\n          data = { details, description };\r\n          res.status(200).send(data);\r\n        } else {\r\n          description = [];\r\n\t\t\tvar message = 'No versioning history available';\r\n\t\t\tdata = { details, description, message};           \r\n\t\t\tres.status(200).send(data);\r\n        }\r\n      });\r\n    } else {\r\n      get_collection().then(result => {\r\n        var mappedData = changingNames(result);\r\n        var data = [];\r\n        var details = [];\r\n        var description = [];\r\n        for (let i = 0; i < mappedData.length; i++) {\r\n          if (\r\n            req.body.selectedData.counterpartyGroup === mappedData[i]['counterpartyGroup'] &&\r\n            req.body.selectedData.invoiceRefNo === mappedData[i]['invoiceRefNo']\r\n          ) {\r\n            versionData = filterMainObject(mappedData[i]);\r\n            break;\r\n          }\r\n        }\r\n        if (versionData[0] && versionData[0]['dueDate']) {\r\n          var dueDate = moment(versionData[0]['dueDate']).format('DD/MM/YYYY hh:mm:ss');\r\n          dueDate = dueDate.slice(0, 10);\r\n        }\r\n        if (versionData[0] && versionData[0].counterpartyGroup)\r\n          details.push({ name: 'Counterparty Group', value: versionData[0].counterpartyGroup });\r\n        if (versionData[0] && versionData[0].corporateid)\r\n          details.push({ name: 'Corporate ID', value: versionData[0].corporateid });\r\n        if (versionData[0] && versionData[0].trader) details.push({ name: 'Trader', value: versionData[0].trader });\r\n        if (versionData[0] && versionData[0].invoiceRefNo)\r\n          details.push({ name: 'Invoice Ref No', value: versionData[0].invoiceRefNo });\r\n        if (versionData[0] && versionData[0].paymentTerm)\r\n          details.push({ name: 'Payment Term', value: versionData[0].paymentTerm });\r\n        if (dueDate != '') details.push({ name: 'Due Date', value: dueDate });\r\n        if (versionData[0] && versionData[0].payableCurrency)\r\n          details.push({ name: 'Payable Currency', value: versionData[0].payableCurrency });\r\n        if (versionData[0] && versionData[0].totalAmount)\r\n          details.push({ name: 'Total Amount', value: versionData[0].totalAmount });\r\n        if (versionData[0] && versionData[0].pendingAmount)\r\n          details.push({ name: 'Pending Amount', value: versionData[0].pendingAmount });\r\n\t\t\tvar message = 'No versioning history available';\r\n\t\t\tdata = { details, description, message}; \r\n\t\t\tres.status(200).send(data);\r\n      });\r\n    }\r\n ",
  "sys__UUID": "67f94dd5-972e-4e07-9af5-911a1060b40a",
  "sys__createdOn": ISODate("2019-06-12T12:40:53.148Z"),
  "sys__createdBy": "admin@ekaplus.com"
}
