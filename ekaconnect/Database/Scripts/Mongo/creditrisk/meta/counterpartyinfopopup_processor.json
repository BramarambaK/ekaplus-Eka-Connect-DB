{
  "_id": "processor_counterpartyinfopopup",
  "name": "counterpartyinfopopup",
  "type": "processor",
  "refType": "app",
  "refTypeId": "5539617b-5075-4482-8bcc-26f76849eb89",
  "snippet": "\r\n    var moment = require('moment');\r\n    var start = req.body.queryParams.start ? parseInt(req.body.queryParams.start) : 0;\r\n    var end = req.body.queryParams.limit ? parseInt(req.body.queryParams.limit) : 10000;\r\n    var connectUrl =\r\n      req.body.propertyList.eka_connect_host +\r\n      '/data/5539617b-5075-4482-8bcc-26f76849eb89/01abf4cd-c682-4988-9b8c-c84014a230e7?sys__UUID=' +\r\n      req.body.selectedData.sys__UUID;\r\n    var connect = {\r\n      method: 'GET',\r\n      url: connectUrl,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    // var platformUrl = req.body.propertyList.platform_url +\r\n    // '/collection/v1?collectionName=' +\r\n    // req.body.propertyList.creditrisk_counterparty_collection_name +\r\n    // '&limit=10000',\r\n    var platformUrl =\r\n      req.body.propertyList.eka_connect_host +\r\n      '/collectionmapper/' +\r\n      req.body.appId +\r\n      '/01abf4cd-c682-4988-9b8c-c84014a230e7/fetchCollectionRecords';\r\n    var platformBody = {\r\n      collectionName: req.body.propertyList.creditrisk_counterparty_collection_name,\r\n      start: start,\r\n      limit: end\r\n    };\r\n\r\n    var collection = {\r\n      method: 'POST',\r\n      url: platformUrl,\r\n      body: platformBody,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'Content-Type': 'application/json',\r\n        ttl: 300,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    var versioning_data = {\r\n      method: 'GET',\r\n      url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '/workflow/' +\r\n        req.body.selectedData.refTypeId +\r\n        '/_UT_VIEW_VERSION_HISTORY/data/' +\r\n        req.body.selectedData.sys__UUID +\r\n        '/versions',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function get_version_data() {\r\n      return new Promise(function(resolve, reject) {\r\n        console.log('Request - ' + versioning_data.url);\r\n        request(versioning_data, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            console.log('Success');\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_collection() {\r\n      return new Promise(function(resolve, reject) {\r\n        console.log('Request - ' + collection.url);\r\n        request(collection, function(err, response, body) {\r\n          body = JSON.parse(JSON.stringify(body));\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            console.log('Success');\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_connect() {\r\n      return new Promise(function(resolve, reject) {\r\n        console.log('Request - ' + connect.url);\r\n        request(connect, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            console.log('Success');\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function filter(obj) {\r\n      var x = {};\r\n      for (var i = 0; i < obj.sys__payload.length; i++) {\r\n        if (obj.hasOwnProperty(obj.sys__payload[i])) {\r\n          x[obj.sys__payload[i]] = obj[obj.sys__payload[i]];\r\n          var date = obj['sys__updatedOn'];\r\n          x['sys__createdOnDate'] = date;\r\n          x['sys__createdOnTime'] = date;\r\n          x['sys__createdBy'] = obj['sys__updatedBy'];\r\n        }\r\n      }\r\n      return x;\r\n    }\r\n    function filterMainObject(obj) {\r\n      let collection;\r\n      let versionData = [];\r\n      var data = {};\r\n      if (req.body.selectedData.sys__UUID) {\r\n        collection = obj.versions;\r\n        delete collection[0]['sys__state'];\r\n        if (obj.versions.length <= 1) {\r\n          var date = collection[0]['sys__createdOn'];\r\n          date = parseInt(date);\r\n          collection[0]['sys__createdOnDate'] = date;\r\n          collection[0]['sys__createdOnTime'] = date;\r\n          collection[0]['statusDate'] = date;\r\n        } else {\r\n          get_connect().then(result => {\r\n            var date = result[0]['sys__updatedOn'];\r\n            date = parseInt(date);\r\n            collection[0]['sys__createdOnDate'] = date;\r\n            collection[0]['sys__createdOnTime'] = date;\r\n            collection[0]['statusDate'] = date;\r\n            collection[0]['sys__createdBy'] = result[0]['sys__updatedBy'];\r\n          });\r\n        }\r\n        versionData.push(collection[0]);\r\n        for (var i = 1; i < collection.length; i++) {\r\n          versionData.push(filter(collection[i]));\r\n        }\r\n      } else {\r\n        collection = obj;\r\n        if (collection['crmStatus'].match(/Y/)) {\r\n          collection['crmStatus'] = 'Active';\r\n        } else if (collection['crmStatus'].match(/N/)) {\r\n          collection['crmStatus'] = 'Inactive';\r\n        }\r\n        versionData.push(collection);\r\n      }\r\n      return versionData;\r\n    }\r\n    let x = req.body.selectedData.sys__UUID;\r\n    let versionData;\r\n    if (req.body.selectedData.sys__UUID) {\r\n      get_version_data().then(result => {\r\n        let collection = result.versions;\r\n        var description = [];\r\n        var dataset = [];\r\n        var data = [];\r\n        var values = [];\r\n        var sys_payload = [];\r\n        var details = [];\r\n        if (collection[collection.length - 1] && collection[collection.length - 1]['statusDate']) {\r\n          var statusDate = moment(collection[collection.length - 1]['statusDate']).format('DD/MM/YYYY');\r\n        }\r\n        if (collection[0] && collection[0].counterpartyName)\r\n          details.push({ name: 'Counterparty Name', value: collection[0].counterpartyName });\r\n        if (collection[0] && collection[0].counterpartyGroup)\r\n          details.push({ name: 'Counterparty Group', value: collection[0].counterpartyGroup });\r\n        if (collection[0] && collection[0].crmStatus)\r\n          details.push({ name: 'CRM Status', value: collection[0].crmStatus });\r\n        if (collection[0] && collection[0].contactName)\r\n          details.push({ name: 'Contact Name', value: collection[0].contactName });\r\n        if (collection[0] && collection[0].contactemail)\r\n          details.push({ name: 'Contact Email', value: collection[0].contactemail });\r\n        if (collection[0] && collection[0].contactphone)\r\n          details.push({ name: 'Contact Phone', value: collection[0].contactphone });\r\n        if (statusDate != '') details.push({ name: 'Status Date', value: statusDate });\r\n        if (collection.length > 1) {\r\n          for (var t = 0; t < collection.length; t++) {\r\n            data = [];\r\n            if (t < collection.length - 1) {\r\n              data.push(collection[t]);\r\n              data.push(collection[t + 1]);\r\n\r\n              data;\r\n              var date = data[1]['sys__updatedOn'];\r\n              date = moment(date).format('DD/MM/YYYY hh:mm:ss');\r\n              var doneBy = data[1]['sys__updatedBy'];\r\n              sys_payload = [];\r\n              dataset = [];\r\n              sys_payload = data[1]['sys__payload'];\r\n              for (var i = 0; i < data.length; i++) {\r\n                var obj = {};\r\n                for (var j = 0; j < sys_payload.length; j++) {\r\n                  obj[sys_payload[j]] = data[i][sys_payload[j]];\r\n                }\r\n                dataset.push(obj);\r\n              }\r\n\r\n              // 0 -->prevValues\r\n              // 1 --> postValue\r\n              if (dataset[0]['creditRiskStatus']) {\r\n                delete dataset[0]['creditRiskStatus'];\r\n              }\r\n              if (dataset[1]['creditRiskStatus']) {\r\n                delete dataset[1]['creditRiskStatus'];\r\n              }\r\n              if (dataset[0]['creditCollectionStatus']) {\r\n                delete dataset[0]['creditCollectionStatus'];\r\n              }\r\n              if (dataset[1]['creditCollectionStatus']) {\r\n                delete dataset[1]['creditCollectionStatus'];\r\n              }\r\n              if (dataset[0]['statusDate']) {\r\n                delete dataset[0]['statusDate'];\r\n              }\r\n              if (dataset[1]['statusDate']) {\r\n                delete dataset[1]['statusDate'];\r\n              }\r\n              values = Object.keys(dataset[0]);\r\n              var obj = {};\r\n              obj['timestamp'] = date;\r\n              obj['doneBy'] = doneBy;\r\n              obj['details'] = [];\r\n              for (var j = 0; j < values.length; j++) {\r\n                var str = '';\r\n                str = values[j];\r\n                if (str == 'creditRiskStatusDisplayName') {\r\n                  str = 'Credit Risk Status';\r\n                }\r\n                if (str == 'creditCollectionStatusDisplayName') {\r\n                  str = 'Credit Collection Status';\r\n                }\r\n                str = str\r\n                  .replace(/(_|-)/g, ' ')\r\n                  .trim()\r\n                  .replace(/\\w\\S*/g, function(str) {\r\n                    return str.charAt(0).toUpperCase() + str.substr(1);\r\n                  })\r\n                  .replace(/([a-z])([A-Z])/g, '$1 $2')\r\n                  .replace(/([A-Z])([A-Z][a-z])/g, '$1 $2');\r\n                obj['details'].push({\r\n                  name: str,\r\n                  preValue: dataset[0][values[j]],\r\n                  postValue: dataset[1][values[j]]\r\n                });\r\n              }\r\n              obj;\r\n              description.push(obj);\r\n            }\r\n          }\r\n          data = { details, description };\r\n          res.status(200).send(data);\r\n        } else {\r\n          description = [];\r\n          var message = 'No versioning history available';\r\n          data = { details, description, message };\r\n          res.status(200).send(data);\r\n        }\r\n      });\r\n    } else {\r\n      get_collection().then(result => {\r\n        let collectionData = result;\r\n        var data = [];\r\n        var details = [];\r\n        var description = [];\r\n\r\n        var keyVals = req.body.propertyList.creditrisk_counterparty_collection_object_column_mapping;\r\n        collectionData = JSON.stringify(collectionData);\r\n        var connectKeys = Object.keys(keyVals);\r\n        for (var i = 0; i < connectKeys.length; i++) {\r\n          collectionData = collectionData.split(keyVals[connectKeys[i]]).join(connectKeys[i]);\r\n        }\r\n        collectionData = JSON.parse(collectionData);\r\n\r\n        for (let i = 0; i < collectionData.length; i++) {\r\n          if (req.body.selectedData.cpid === collectionData[i].cpid) {\r\n            versionData = filterMainObject(collectionData[i]);\r\n            break;\r\n          }\r\n        }\r\n        if (versionData[0] && versionData[0]['statusDate']) {\r\n          var statusDate = moment(versionData[0]['statusDate']).format('DD/MM/YYYY');\r\n        }\r\n        if (versionData[0] && versionData[0].counterpartyName)\r\n          details.push({ name: 'Counterparty Name', value: versionData[0].counterpartyName });\r\n        if (versionData[0] && versionData[0].counterpartyGroup)\r\n          details.push({ name: 'Counterparty Group', value: versionData[0].counterpartyGroup });\r\n        if (versionData[0] && versionData[0].crmStatus)\r\n          details.push({ name: 'CRM Status', value: versionData[0].crmStatus });\r\n        if (versionData[0] && versionData[0].contactName)\r\n          details.push({ name: 'Contact Name', value: versionData[0].contactName });\r\n        if (versionData[0] && versionData[0].contactemail)\r\n          details.push({ name: 'Contact Email', value: versionData[0].contactemail });\r\n        if (versionData[0] && versionData[0].contactphone)\r\n          details.push({ name: 'Contact Phone', value: versionData[0].contactphone });\r\n        if (statusDate != '') details.push({ name: 'Status Date', value: statusDate });\r\n        var message = 'No versioning history available';\r\n        data = { details, description, message };\r\n        res.status(200).send(data);\r\n      });\r\n    }\r\n  ",
  "sys__UUID": "e6ede9fb-a7a4-4ec5-818c-378d941294df",
  "sys__createdOn": ISODate("2019-06-12T12:26:22.720Z"),
  "sys__createdBy": "admin@ekaplus.com"
}
