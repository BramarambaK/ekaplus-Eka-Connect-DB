{
  "_id": "limit_save_processor",
  "name": "_ST_PROCESS_LIMIT_SAVE",
  "type": "processor",
  "refType": "app",
  "refTypeId": "5539617b-5075-4482-8bcc-26f76849eb89",
  "snippet": " \r\n    var moment = require('moment');\r\n    var connectUrl =\r\n      req.body.propertyList.eka_connect_host +\r\n      '/data/5539617b-5075-4482-8bcc-26f76849eb89/26e782e8-89e5-40ea-a3be-63b320260b7d';\r\n    var connect = {\r\n      method: 'GET',\r\n      url: connectUrl,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid']\r\n      },\r\n      json: true\r\n    };\r\n    function get_connect() {\r\n      return new Promise(function(resolve, reject) {\r\n        request(connect, function(err, response, body) {\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    var connectData = {};\r\n    let flag = 0;\r\n    get_connect().then(result => {\r\n      connectData = result;\r\n      var fromPeriod;\r\n      var toPeriod;\r\n      var date1;\r\n      var date2;\r\n      if (req && req.body && req.body['fromPeriod']) {\r\n        fromPeriod = req.body['fromPeriod'];\r\n        fromPeriod = new Date(fromPeriod);\r\n\r\n        //fromPeriod = moment(fromPeriod).format('MM/DD/YYYY');\r\n      }\r\n      if (req && req.body && req.body['toPeriod']) {\r\n        toPeriod = req.body['toPeriod'];\r\n        toPeriod = new Date(toPeriod);\r\n        //toPeriod = moment(toPeriod).format('MM/DD/YYYY');\r\n      }\r\n      if (connectData.length > 0) {\r\n        for (let i = 0; i < connectData.length; i++) {\r\n          if (connectData && connectData[i] && connectData[i]['toPeriod']) {\r\n            date1 = connectData[i]['toPeriod'];\r\n            date1 = new Date(date1);\r\n            //date1 = moment(date1).format('MM/DD/YYYY');\r\n          }\r\n          if (connectData && connectData[i] && connectData[i]['fromPeriod']) {\r\n            date2 = connectData[i]['fromPeriod'];\r\n            date2 = new Date(date2);\r\n            //date2 = moment(date2).format('MM/DD/YYYY');\r\n          }\r\n          if (fromPeriod && toPeriod && date1 && date2) {\r\n            if (\r\n              connectData[i]['counterpartyGroupName'] === req.body['counterpartyGroupName'] &&\r\n              connectData[i]['creditLimitSource'] === req.body['creditLimitSource'] &&\r\n              connectData[i]['creditLimitType'] === req.body['creditLimitType'] &&\r\n              date1.getTime() === toPeriod.getTime() &&\r\n              date2.getTime() === fromPeriod.getTime()\r\n            ) {\r\n              flag = 1;\r\n              break;\r\n            } else flag = 0;\r\n          } else if (\r\n            connectData[i]['counterpartyGroupName'] === req.body['counterpartyGroupName'] &&\r\n            connectData[i]['creditLimitSource'] === req.body['creditLimitSource'] &&\r\n            connectData[i]['creditLimitType'] === req.body['creditLimitType'] &&\r\n            date1 === undefined &&\r\n            toPeriod === undefined &&\r\n            date2 === undefined &&\r\n            fromPeriod === undefined\r\n          ) {\r\n            flag = 1;\r\n            break;\r\n          } else {\r\n            flag = 0;\r\n          }\r\n        }\r\n      }\r\n      var body = {};\r\n      var savedData = {};\r\n      if (\r\n        req.body['counterpartyGroupName'] === '' ||\r\n        req.body['creditLimitSource'] === '' ||\r\n        req.body['creditLimitType'] === '' ||\r\n        req.body['amount'] === '' ||\r\n        req.body['limitStatus'] === ''\r\n      ) {\r\n        res.status(500).send('Please fill all the required fields appropriately.');\r\n      } else {\r\n        if (req && req.body) {\r\n          if (req.body['amount'] > 0) {\r\n            if (req.body['remarks'] === undefined || req.body['remarks'].length <= 1000) {\r\n              if (req.body['referenceNo'] === undefined || req.body['referenceNo'].length <= 1000) {\r\n                if (req.body['coverPercentage'] === undefined || req.body['coverPercentage'] <= 100) {\r\n                  if (req.body['maxPaymentTerm'] === undefined || req.body['maxPaymentTerm'].length <= 1000) {\r\n                    if (flag === 0) {\r\n                      var body = req.body;\r\n                      if (body.creditLimitTypeDisplayName === 'Temporary') {\r\n                        if (body.fromPeriod && body.toPeriod) {\r\n                          delete body.propertyList;\r\n                          delete body.processorDetails;\r\n                          delete body.processorId;\r\n                          delete body.appId;\r\n                          savedData = body;\r\n                        } else {\r\n                          res.status(500).send('From Period and To Period are Mandatory fields');\r\n                        }\r\n                      } else if (fromPeriod > toPeriod) {\r\n                        res.status(500).send('From Period must be equal or less than To Period');\r\n                      } else {\r\n                        delete body.propertyList;\r\n                        delete body.processorDetails;\r\n                        delete body.processorId;\r\n                        delete body.appId;\r\n                        savedData = body;\r\n                      }\r\n                    } else {\r\n                      res.status(500).send('Duplicate fields.Try again');\r\n                    }\r\n                  } else {\r\n                    res.status(500).send('Max Payment Term must be less than 100');\r\n                  }\r\n                } else {\r\n                  res.status(500).send('Cover Percentage must be less than 100');\r\n                }\r\n              } else {\r\n                res.status(500).send('Decision Ref No must be less than 1000');\r\n              }\r\n            } else {\r\n              res.status(500).send('Remarks length must be less than 1000');\r\n            }\r\n          } else if (req.body['amount'] <= 0) {\r\n            res.status(500).send('Amount must be positive');\r\n          } else if (isNaN(req.body['amount'])) {\r\n            res.status(500).send('Amount must be a number');\r\n          }\r\n        }\r\n      }\r\n      savedData.amount = Number(savedData.amount);\r\n      if (savedData.coverPercentage) {\r\n        savedData.coverPercentage = Number(savedData.coverPercentage);\r\n      }\r\n      res.status(200).send(savedData);\r\n    });\r\n",
  "sys__UUID": "e65876b0-e7e8-4d45-9ed3-5bf63fdfc067",
  "sys__createdOn": ISODate("2020-01-07T09:57:30.305Z"),
  "sys__createdBy": "Bravo"
}
