{
  "_id": "filter_Processor_for_CollateralList",
  "name": "filter_Processor_for_CollateralList",
  "type": "processor",
  "refType": "app",
  "refTypeId": "00ca04e8-5ca5-4c2f-8636-23b1d79fab5b",
  "snippet": "function isEmpty(value) {\r\n  return (\r\n    value === null || \/\/ check for null\r\n    value === undefined || \/\/ check for undefined\r\n    value === '' || \/\/ check for empty string\r\n    (Array.isArray(value) && value.length === 0) || \/\/ check for empty array\r\n    (typeof value === 'object' && Object.keys(value).length === 0) \/\/ check for empty object\r\n  );\r\n}\r\nfunction checkOtherParams(params) {\r\n  if (!params) return false;\r\n  if (\r\n    !isEmpty(params.contractRefNo) ||\r\n    !isEmpty(params.gmrId) ||\r\n    !isEmpty(params.invoiceId)\r\n  )\r\n    return true;\r\n  return false;\r\n}\r\n\r\nfunction checkCombination(item, selected) {\r\n  let arr = item.typeofallocation === 'Physicals' ? item.physicals : item.deivatives;\r\n  if (!Array.isArray(arr)) return false;\r\n  let flag = true;\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (!isEmpty(selected.contractRefNo) && !(selected.contractRefNo in arr[i]) && selected.contractRefNo != arr[i]['contractRefNo']) flag = flag && false;\r\n    if (!isEmpty(selected.gmrId) && !(selected.gmrId in arr[i]) && selected.gmrId != arr[i]['gmrId']) flag = flag && false;\r\n    if (!isEmpty(selected.invoiceId) && !(selected.invoiceId in arr[i]) && selected.invoiceId != arr[i]['invoiceId']) flag = flag && false;\r\n    if (flag) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\nvar collateraldata = {\r\n  method: 'GET',\r\n  url: `${req.body.propertyList.eka_connect_host}\/data\/${req.body.appId}\/39106262-1aab-4eb4-a3c1-73422bc7b4a8`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid']\r\n  },\r\n  json: true\r\n};\r\n\r\nfunction get_collateralAlloca() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(collateralalloc, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\nvar collateralalloc = {\r\n  method: 'GET',\r\n  url: `${req.body.propertyList.eka_connect_host}\/data\/${req.body.appId}\/5e6a81d6-1a86-4cc9-bdf7-a59190278be3`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    'X-TenantID': req.headers['x-tenantid']\r\n  },\r\n  json: true\r\n};\r\n\r\nvar moment = require(\"moment\");\r\n\r\nfunction get_collateralDetails() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(collateraldata, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        body.map((item) => {\r\n          if (item.sys__updatedOn) item.sys__updatedOn = moment(item.sys__updatedOn).format('DD-MMM-YYYY HH:mm:ss');\r\n          if (item.issueDate) item.issueDate = moment(item.issueDate).format('DD-MMM-YYYY');\r\n          if (item.effectiveDate) item.effectiveDate = moment(item.effectiveDate).format('DD-MMM-YYYY');\r\n          if (item.expiryDate) item.expiryDate = moment(item.expiryDate).format('DD-MMM-YYYY');\r\n          if (item.sys__createdBy) item.sys__createdBy = item.userName;\r\n          item.availableAmount = (!!item.utilization && !!item.utilization.length) ? currencyFormatter(item.amount - getAvailableAmount(item.utilization)) : currencyFormatter(item.amount);\r\n          if (item.amount) item.amount = currencyFormatter(item.amount);\r\n          item.status = (item.status == 'Inactive') ? 'Deactive' : item.status;\r\n        })\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction getAvailableAmount(utilization) {\r\n  let amount = 0\r\n  utilization.forEach((item) => {\r\n    amount += item.utilizedAmount;\r\n  })\r\n  return amount\r\n}\r\n\r\nfunction currencyFormatter(value) {\r\n  let afterDecimal = 2;\r\n  if (!!value || value === 0) {\r\n    value = parseFloat(value).toFixed(afterDecimal);\r\n    if (value.toString().indexOf('.') === -1) {\r\n      return value.toString().replace(\/\\B(?=(\\d{3})+(?!\\d))\/g, ',');\r\n    } else {\r\n      return value.toString().split('.')[0].replace(\/\\B(?=(\\d{3})+(?!\\d))\/g, ',') + '.' + value.toString().split('.')[1];\r\n    }\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\nconst selected = req.body.selectedData;\r\nif ((selected &&\r\n  selected.hasOwnProperty('collateralType') &&\r\n  (selected.collateralType != '' && selected.collateralType !== null)) &&\r\n  selected.hasOwnProperty('counterparty') &&\r\n  (selected.counterparty != '' && selected.counterparty !== null)\r\n) {\r\n  collateraldata.url = collateraldata.url + '?collateralType=' + selected.collateralType + '&counterparty=' + selected.counterparty;\r\n} else if (\r\n  selected &&\r\n  selected.hasOwnProperty('collateralType') &&\r\n  (selected.collateralType != '' && selected.collateralType !== null)\r\n) {\r\n  collateraldata.url = collateraldata.url + '?collateralType=' + selected.collateralType;\r\n} else if (selected &&\r\n  selected.hasOwnProperty('counterparty') &&\r\n  (selected.counterparty != '' && selected.counterparty !== null)) {\r\n  collateraldata.url = collateraldata.url + '?counterparty=' + selected.counterparty;\r\n}\r\n\r\nget_collateralDetails().then(data => {\r\n  data = data.map((item => {\r\n    item['refno_hidden'] = Number(item.refNo.split('-')[1]);\r\n    return item\r\n  }))\r\n  if (checkOtherParams(selected)) {\r\n    get_collateralAlloca().then(all => {\r\n      let RefNo = {};\r\n      let finalData = [];\r\n      if (Array.isArray(all)) {\r\n        RefNo = all.reduce((acc, item) => {\r\n          if (checkCombination(item, selected)) {\r\n            acc[item.refNo] = true;\r\n          }\r\n          return acc;\r\n        }, {});\r\n        finalData = data.filter(item => item.refNo in RefNo);\r\n      }\r\n      res.status(200).json(finalData);\r\n    });\r\n  } else {\r\n    res.status(200).send(data);\r\n  }\r\n});",
  "sys__UUID": "dcfec714-f8a0-4ab1-a009-180ca5c41cfd"
}
