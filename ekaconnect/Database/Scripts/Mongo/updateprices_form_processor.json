{
  "_id": "updateprices_form_processor",
  "name": "updateprices_form_processor",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "const data = req.body;\r\nconst timeRegex = new RegExp('^([0-1]?[0-9]|2[0-3])(:[0-5][0-9]){1,2}$');\r\nconst dataError = (message) => res.status(400).send(message);\r\nlet priceMapper, dateMapper;\r\nif (!data.formcheckbox || data.formcheckbox.length == 0) {\r\n  return dataError('Please select at least one option to update');\r\n}\r\nif (data.formcheckbox.includes('Prices')) {\r\n  if (!data.formradio1 || data.formradio1.length == 0) {\r\n    return dataError('Please select update mode for prices');\r\n  } else if (\r\n    !data.amountchanged &&\r\n    (data.formradio1.toLowerCase() == 'set a single price' ||\r\n      data.formradio1.toLowerCase() == 'increase or decrease by fixed amount')\r\n  ) {\r\n    return dataError('Please enter the amount');\r\n  } else if (\r\n    data.amountchanged &&\r\n    data.formradio1.toLowerCase() == 'set a single price'\r\n  ) {\r\n    if (!isNaN(data.amountchanged)) {\r\n      priceMapper = (obj) => ({ ...obj, prices: +data.amountchanged });\r\n    } else {\r\n      return dataError('Enter valid amount');\r\n    }\r\n  } else if (\r\n    data.amountchanged &&\r\n    data.formradio1.toLowerCase() == 'increase or decrease by fixed amount'\r\n  ) {\r\n    if (!isNaN(data.amountchanged)) {\r\n      const price = data.amountchanged;\r\n      priceMapper = (obj) => ({\r\n        ...obj,\r\n        price: +obj.price + (isNaN(price) ? 0 : +price),\r\n      });\r\n    } else {\r\n      return dataError('Enter valid amount');\r\n    }\r\n  }\r\n}\r\nif (data.formcheckbox.includes('End date/time')) {\r\n  if (!data.formradio2 || data.formradio2.length == 0) {\r\n    return dataError('Please select update mode for end date and time');\r\n  } else if (\r\n    data.formradio2.toLowerCase() == 'set single date and time' &&\r\n    (!data.updateenddate ||\r\n      data.updateenddate.length == 0 ||\r\n      !data.updateendtime ||\r\n      data.updateendtime.length == 0)\r\n  ) {\r\n    return dataError('Please enter the updated end date and time');\r\n  } else if (\r\n    data.formradio2.toLowerCase() == 'set single date and time' &&\r\n    (data.updateendtime && !timeRegex.test(data.updateendtime))\r\n  ) {\r\n    return dataError('Invalid end time format. Format should be HH:mm & should be less than 24:00 & minutes should be less than 60');\r\n  } else if (data.formradio2.toLowerCase() == 'set single date and time') {\r\n    dateMapper = (obj) => ({\r\n      ...obj,\r\n      endDate: data.updateenddate,\r\n      endTime: data.updateendtime,\r\n    });\r\n  }\r\n}\r\nreturn res.status(200).send(\r\n  (data.pricelistingactive || data.pricelistingscheduled).map((i) => {\r\n    let t = i;\r\n    if (priceMapper) {\r\n      t = priceMapper(t);\r\n    }\r\n    if (dateMapper) {\r\n      t = dateMapper(t);\r\n    }\r\n    t.sys__state = {\r\n      price: {\r\n        edit: data.formcheckbox.includes('Prices'),\r\n      },\r\n      endDate: {\r\n        edit: data.formcheckbox.includes('End date/time'),\r\n      },\r\n      endTime: {\r\n        edit: data.formcheckbox.includes('End date/time'),\r\n      },\r\n    };\r\n    return t;\r\n  })\r\n);",
  "sys__UUID": "c7e680fb-1cf5-491d-a283-dca0079242f9"
}
