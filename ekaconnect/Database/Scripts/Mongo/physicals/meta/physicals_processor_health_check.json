{
    "_id" : "physicals_processor_health_check",
    "name" : "physicals_processor_health_check",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "5d907cd2-7785-4d34-bcda-aa84b2158415",
    "snippet" : "eka_connect_host = req.body.propertyList.eka_connect_host;\r\neka_trm_physicals_api_host = req.body.propertyList.eka_trm_physicals_api_host;\r\napi_body = {\r\n    method: 'POST',\r\n    headers: {\r\n        Authorization: req.headers.authorization,\r\n        \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n        \"Content-Type\": \"application\/json\",\r\n        \"ttl\": \"300\"\r\n    },\r\n    json: true\r\n};\r\nvar mdmResponse = {};\r\n\r\nphysicals_meta_api_body = { ...api_body };\r\nphysicals_meta_api_body.url = eka_connect_host + '\/meta\/app\/physicals';\r\ntest_physicals_meta_api = new Promise(function (resolve, reject) {\r\n    request(physicals_meta_api_body, function (err, response, body) {\r\n        if (err || body.error) {\r\n            reject(body);\r\n        } else {\r\n            resolve(body);\r\n        }\r\n    });\r\n});\r\n\r\nphysicals_mdm_api_body = { ...api_body };\r\nphysicals_mdm_api_body.url = eka_connect_host + '\/workflow\/mdm';\r\nphysicals_mdm_api_body.body = { \"workFlowTask\": \"mdm_api\", \"payLoadData\": \"\", \"appId\": \"5d907cd2-7785-4d34-bcda-aa84b2158415\", \"data\": [{ \"serviceKey\": \"carryChargeRateTypeList\" }, { \"serviceKey\": \"cpPersonInCharge\" }, { \"serviceKey\": \"corporateLevelTemplateList\" }, { \"serviceKey\": \"PortOperations\" }, { \"serviceKey\": \"variableInterestCurve\" }, { \"serviceKey\": \"LatePaymentInt\" }, { \"serviceKey\": \"corporateStrategy\" }, { \"serviceKey\": \"physicalproductquantitylist\" }, { \"serviceKey\": \"productCurrencyList\" }, { \"serviceKey\": \"Tolerance\" }, { \"serviceKey\": \"AbsolutePercentage\" }, { \"serviceKey\": \"countriesComboDataFromDB\" }, { \"serviceKey\": \"priceUnitsByCurrency\" }, { \"serviceKey\": \"CostType\" }, { \"serviceKey\": \"costComponent\", \"dependsOn\": [\"SECONDARY_COST\", \"CONTRACT\"] }, { \"serviceKey\": \"corporateStrategy\" }, { \"serviceKey\": \"incoterm\" }, { \"serviceKey\": \"ticketModeOfTransport\" }, { \"serviceKey\": \"CarryChargeFrequencyId\" }, { \"serviceKey\": \"productpricetypelist\" }, { \"serviceKey\": \"userListByRole\" }, { \"serviceKey\": \"qualityComboDropDrown\" }, { \"serviceKey\": \"productComboDropDrown\" }, { \"serviceKey\": \"dealType\", \"dependsOn\": [\"DealType\"] }, { \"serviceKey\": \"paytermlist_phy\" }, { \"serviceKey\": \"applicableLaw\" }, { \"serviceKey\": \"ContractRulesAndArbitrationList\" }, { \"serviceKey\": \"businesspartnercontactperson\", \"dependsOn\": [\"ALL\"] }, { \"serviceKey\": \"allDistinctPriceUnits\" }, { \"serviceKey\": \"PriceFixLatestBy\" }, { \"serviceKey\": \"PriceFixBy\" }, { \"serviceKey\": \"FixationMethod\" }, { \"serviceKey\": \"estimateFor\" }, { \"serviceKey\": \"CostRateType\" }, { \"serviceKey\": \"CostIncExp\" }, { \"serviceKey\": \"taxScheduleCountrystate\" }, { \"serviceKey\": \"pricingStrategy\" }, { \"serviceKey\": \"dailyMonthly\" }, { \"serviceKey\": \"defineActualsEventType\" }, { \"serviceKey\": \"holidayRuleOil\" }] };\r\ntest_physicals_mdm_api = new Promise(function (resolve, reject) {\r\n    request(physicals_mdm_api_body, function (err, response, body) {\r\n        if (err || body.error) {\r\n            reject(body);\r\n        } else {\r\n            resolve(body);\r\n        }\r\n    });\r\n});\r\n\r\nphysicals_approval_api_body = { ...api_body };\r\nphysicals_approval_api_body.url = eka_trm_physicals_api_host + '\/contract\/approval?viewType=New';\r\nphysicals_approval_api_body.method = 'GET';\r\ntest_physicals_approval_api = new Promise(function (resolve, reject) {\r\n    request(physicals_approval_api_body, function (err, response, body) {\r\n        if (err || body.error) {\r\n            reject(body);\r\n        } else {\r\n            resolve(body);\r\n        }\r\n    });\r\n});\r\n\r\nfunction verifyResponse(response) {\r\n    console.log('full response of all 3 apis :')\r\n    console.log(response)\r\n    let finalResponse = [{\r\n        \"targetType\": \"Connect Meta API\",\r\n        \"target\": \"Connect API\"\r\n    },\r\n    {\r\n        \"targetType\": \"MDM Service\",\r\n        \"target\": \"MDM API\"\r\n    },\r\n    {\r\n        \"targetType\": \"Physicals Service\",\r\n        \"target\": \"Approval API\"\r\n    }]\r\n    response.forEach((res, i) => {\r\n        finalResponse[i] = { ...finalResponse[i], res };\r\n        if (finalResponse[i]['target'] == 'MDM API') {\r\n            let mdmVerification = verifyMDMResponse(res[i]);\r\n            finalResponse[i] = { ...finalResponse[i], ...mdmVerification };\r\n        }\r\n    })\r\n    \/\/return finalResponse;\r\n    console.log('MDM response :'+ finalResponse[1]);\r\n    mdmResponse = finalResponse[1];\r\n    finalResponse[3] = verifyDependants(finalResponse[1]);\r\n}\r\n\r\nfunction verifyMDMResponse(mdmResponse) {\r\n    console.log(mdmResponse)\r\n    let mdmVerficationMsg = \"The following keys are not present in MDM response : \";\r\n    let mapping = {\r\n        corporateLevelTemplateList: 'templateId',\r\n        dealType: 'dealType',\r\n        userListByRole: 'traderUserId',\r\n        businessPartnerCombo: 'cpProfileId',\r\n        paytermlist_phy: 'paymentTermId',\r\n        applicableLaw: 'applicableLawId',\r\n        ContractRulesAndArbitrationList: 'arbitrationId',\r\n        incoterm: 'incotermId',\r\n        businesspartnercontactperson: 'agentProfileId',\r\n        brokerPersonInCharge: 'agentPersonInCharge',\r\n        allDistinctPriceUnits: 'agentCommPriceUnitId',\r\n        cpPersonInCharge: 'cpPersonInCharge',\r\n\r\n        productComboDropDrown: 'productId',\r\n        AbsolutePercentage: 'toleranceType',\r\n        Tolerance: 'toleranceLevel',\r\n        productCurrencyList: 'payInCurId',\r\n\r\n        PriceFixLatestBy: 'priceLastFixDayBasedOn',\r\n        PriceFixBy: 'optionsToFix',\r\n        FixationMethod: 'fixationMethod',\r\n        ticketModeOfTransport: 'shipmentMode',\r\n        countriesComboDataFromDB: 'originationCountryId',\r\n        userProfitCenterList: 'profitCenterId',\r\n        corporateStrategy: 'strategyAccId',\r\n        costComponent: 'costComponent',\r\n        CostType: 'costType',\r\n\r\n\r\n        PortOperations: 'qualityFinalizationPoint',\r\n        LatePaymentInt: 'interestRateType',\r\n        variableInterestCurve: 'latePaymentInterestRate',\r\n        CarryChargeFrequencyId: 'frequency',\r\n        estimateFor: 'estimateFor',\r\n        CostRateType: 'rateType',\r\n        CostIncExp: 'incExpense',\r\n\r\n        taxScheduleCountrystate: 'taxScheduleCountryId',\r\n        pricingStrategy: 'pricingStrategy',\r\n\r\n        phyPackingtypesizeByCItemOrProductList: 'packingTypeId',\r\n        dailyMonthly: 'dailyMonthly',\r\n        defineActualsEventType: 'customEvent',\r\n        holidayRuleOil: 'holidayRule',\r\n        physicalproductquantitylist: 'totalQtyUnitId'\r\n    };\r\n    Object.keys(mapping).forEach(serviceKey => {\r\n        if (!mdmResponse.hasOwnProperty(serviceKey)) {\r\n            mdmVerficationMsg = mdmVerficationMsg + ' ' + mapping[serviceKey];\r\n        }\r\n    })\r\n    return mdmVerficationMsg;\r\n}\r\n\r\nfunction verifyDependants(mdmResponse) {\r\n    let productId = mdmResponse['productComboDropDrown'][0].key;\r\n    let payInCurId = mdmResponse['productCurrencyList'][0].key;\r\n    let originationCountryId = mdmResponse['countriesComboDataFromDB'][0].key;\r\n    let incotermId = mdmResponse['incoterm'][0].key;\r\n    let traderUserId = mdmResponse['userListByRole'][0].key;\r\n    let dealType = mdmResponse['dealType'][0].key;\r\n    let taxScheduleCountryId = mdmResponse['taxScheduleCountrystate'][0].key;\r\n    let cpProfileId = mdmResponse['businessPartnerCombo'][0].key;\r\n    let agentProfileId = mdmResponse['businesspartnercontactperson'][0].key;\r\n\r\n    physicals_mdm_api_body.body = {\r\n        \"workFlowTask\": \"mdm_api\", \"payLoadData\": \"\", \"appId\": \"5d907cd2-7785-4d34-bcda-aa84b2158415\",\r\n        \"data\": [\r\n            { \"serviceKey\": \"productPriceUnit\", \"dependsOn\": [productId, payInCurId] },\r\n            { \"serviceKey\": 'productRule', \"dependsOn\": [productId] },\r\n            { \"serviceKey\": 'productpricetypelist', \"dependsOn\": [productId] },\r\n            { \"serviceKey\": 'qualityComboDropDrown', \"dependsOn\": [productId] },\r\n            { \"serviceKey\": 'productDerivativeInstrument', \"dependsOn\": [productId] },\r\n            { \"serviceKey\": 'physicalproductquantitylist', \"dependsOn\": [productId] },\r\n            { \"serviceKey\": 'phyPackingtypesizeByCItemOrProductList', \"dependsOn\": [productId] },\r\n            { \"serviceKey\": 'cityComboDataFromDB', \"dependsOn\": [originationCountryId] },\r\n            { \"serviceKey\": 'incoTermLocationGroupType', \"dependsOn\": [incotermId] },\r\n            { \"serviceKey\": 'userProfitCenterList', \"dependsOn\": [traderUserId] },\r\n            { \"serviceKey\": 'businessPartnerCombo', \"dependsOn\": [dealType] },\r\n            { \"serviceKey\": 'listOfTaxSchedules', \"dependsOn\": [taxScheduleCountryId] },\r\n            { \"serviceKey\": 'cpPersonInCharge', \"dependsOn\": [cpProfileId] },\r\n            { \"serviceKey\": 'brokerPersonInCharge', \"dependsOn\": [agentProfileId] },\r\n        ]\r\n    };\r\n    \r\n    request(physicals_mdm_api_body, function (err, response, body) {\r\n        if (err || body.error) {\r\n            reject(body);\r\n        } else {\r\n            resolve(body);\r\n        }\r\n    });\r\n    \r\n}\r\n\r\nfunction verifyPaymentTermsAPI(){\r\n    physicals_mdm_api_body = { ...api_body };\r\n    physicals_mdm_api_body.url = eka_connect_host + '\/workflow\/mdm';\r\n    physicals_mdm_api_body.body = {\r\n        appId : EnvConfig.vars.app_uuid,\r\n        workflowTaskName: 'paymentTerms',\r\n        task:\"paymentTerms\",\r\n        output: {\r\n        paymentTerms: { \"paymentTermId\": paymentTermId }\r\n        }\r\n    }\r\n    request(physicals_mdm_api_body, function (err, response, body) {\r\n        if (err || body.error) {\r\n            reject(body);\r\n        } else {\r\n            resolve(body);\r\n        }\r\n    });\r\n}\r\n\r\nPromise.all(\r\n    [test_physicals_meta_api, test_physicals_mdm_api, test_physicals_approval_api]\r\n        .map((promise, i) =>\r\n            promise.then(value => ({\r\n                status: \"fulfilled\",\r\n                value,\r\n            })).catch(reason => ({\r\n                status: \"rejected\",\r\n                reason,\r\n            }))\r\n        )\r\n).then(function (response) {\r\n    console.log(response);\r\n    let result = verifyResponse(response);\r\n    console.log('verificaiton response :');\r\n    console.log('the result is : 'result);\r\n    res.status(200).send(result);\r\n}).catch(err => {\r\n    console.log(\"Error Executing Processor -\" + err);\r\n    res.status(500).send(err);\r\n});\r\n",
    "sys__UUID" : "4b2df8fa-90cd-4c0a-8f7e-a0b6287f8820"
}