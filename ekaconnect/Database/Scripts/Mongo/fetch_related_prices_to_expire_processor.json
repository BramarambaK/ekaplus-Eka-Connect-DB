{
  "_id": "fetch_related_prices_to_expire_processor",
  "name": "fetch_related_prices_to_expire_processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "snippet": "var moment = require(\"moment\");\r\nconst appId = \"12325a98-a959-4939-9005-4158d136afcd\";\r\nconst priceObjId = \"ab3fc628-ecbc-43e0-81cb-aa2d5b6e5c40\";\r\nconst volumeLimitObjId = \"c98119db-1f7c-4802-b72a-6678f1ecc0f3\";\r\nvar currentDateTime = moment.utc();\r\n\r\nvar connectUserInfo = {\r\n  method: \"GET\",\r\n  url: req.body.propertyList.eka_connect_host + \"/api/getbpuserinfo\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    requestid: req.headers[\"requestid\"],\r\n  },\r\n  json: true,\r\n};\r\n\r\nvar connectMetaPrice = {\r\n  method: \"GET\",\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    `/meta/app/${appId}/object/${priceObjId}`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    requestid: req.headers[\"requestid\"],\r\n  },\r\n};\r\nvar var_getPriceData = {\r\n  method: \"GET\",\r\n  url: req.body.propertyList.eka_connect_host + `/data/${appId}/${priceObjId}`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    requestid: req.headers[\"requestid\"] + \"-processor\",\r\n  },\r\n  body: {\r\n    includeFields: [],\r\n    excludeFields: [\"_id\"],\r\n    filterData: {\r\n      filter: [],\r\n    },\r\n  },\r\n  json: true,\r\n};\r\nvar var_getPriceDataTemp;\r\nvar var_getPriceDataTempCopy;\r\nvar var_getVolumeLimitData = {\r\n  method: \"GET\",\r\n  url:\r\n    req.body.propertyList.eka_connect_host +\r\n    `/data/${appId}/${volumeLimitObjId}`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    requestid: req.headers[\"requestid\"] + \"-processor\",\r\n  },\r\n  body: {\r\n    filterData: {\r\n      filter: [],\r\n    },\r\n  },\r\n  json: true,\r\n};\r\nfunction addFilterData() {\r\n  var_getPriceData.body[\"filterData\"][\"filter\"] = [\r\n    {\r\n      fieldName: \"bpRefNo\",\r\n      value: \"\",\r\n      operator: \"eq\",\r\n    },\r\n    {\r\n      fieldName: \"bpExternalCode\",\r\n      value: \"\",\r\n      operator: \"eq\",\r\n    },\r\n    {\r\n      fieldName: \"season\",\r\n      value: \"\",\r\n      operator: \"eq\",\r\n    },\r\n    {\r\n      fieldName: \"region\",\r\n      value: \"\",\r\n      operator: \"eq\",\r\n    },\r\n    {\r\n      fieldName: \"product\",\r\n      value: \"\",\r\n      operator: \"eq\",\r\n    },\r\n    {\r\n      fieldName: \"priceId\",\r\n      value: [],\r\n      operator: \"nin\",\r\n    },\r\n    {\r\n      fieldName: \"status\",\r\n      value: \"Expired\",\r\n      operator: \"ne\",\r\n    },\r\n  ];\r\n}\r\n\r\nfunction get_connectMeta(connectData) {\r\n  return new Promise(function (resolve, reject) {\r\n    console.log(\"get_connectData Request-\" + JSON.stringify(connectData));\r\n    request(connectData, function (err, response, body) {\r\n      //   console.log(\"get_connectData Response-\" + JSON.stringify(body));\r\n      if (response.statusCode === 200) resolve(body);\r\n      else {\r\n        reject(err || body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction get_connectData(connectRequest) {\r\n  return new Promise(function (resolve, reject) {\r\n    console.log(\"get_connectData Request-\" + JSON.stringify(connectRequest));\r\n    request(connectRequest, function (err, response, body) {\r\n        console.log('get_connectData Response-' + JSON.stringify(body));\r\n      if (response.statusCode === 200) resolve(body);\r\n      else {\r\n        reject(err || body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nvar connect_update_price_data_internal = {\r\n  method: \"POST\",\r\n  url: req.body.propertyList.eka_connect_host + \"/workflow\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    requestid: req.headers[\"requestid\"] + \"-processor\",\r\n  },\r\n  body: {\r\n    output: {\r\n      elastic_updatePriceData_internal: [],\r\n    },\r\n    task: \"elastic_updatePriceData_internal\",\r\n    appId: \"12325a98-a959-4939-9005-4158d136afcd\",\r\n    workflowTaskName: \"elastic_updatePriceData_internal\",\r\n  },\r\n  json: true,\r\n};\r\nfunction update_price_data_internal() {\r\n  return new Promise(function (resolve, reject) {\r\n    console.log(\r\n      \"update_price_data_internal Request-\" +\r\n        JSON.stringify(connect_update_price_data_internal)\r\n    );\r\n    request(connect_update_price_data_internal, function (err, response, body) {\r\n      // console.log('update_price_data_internal Response-' + JSON.stringify(body));\r\n      if (response.statusCode === 200) resolve(body);\r\n      else {\r\n        reject(err || body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n(async () => {\r\n  var volumeLimitData;\r\n  //Format payload into object array\r\n  if (!Array.isArray(req.body.bulkPayLoadData)) {\r\n    volumeLimitData = [{ ...req.body }];\r\n    delete volumeLimitData[0][\"processorDetails\"];\r\n    delete volumeLimitData[0][\"propertyList\"];\r\n  } else {\r\n    volumeLimitData = req.body.bulkPayLoadData;\r\n  }\r\n  // console.log(\"volumeLimitData:\" + volumeLimitData);\r\n  var startDateTime;\r\n  var priceDataToExpire = [];\r\n  var userDetails = await get_connectMeta(connectUserInfo);\r\n  const userName = userDetails.data.firstName + \" \" + userDetails.data.lastName;\r\n\r\n  var_getPriceData.body.includeFields = JSON.parse(\r\n    await get_connectMeta(connectMetaPrice)\r\n  ).uniqueFields;\r\n  var_getPriceData.body.includeFields.push(\"startDateTime\");\r\n  var offset = 0;\r\n  var currentDateTimeWithTimezone;\r\n  var volumeLimitDataNew;\r\n  for (let i = 0; i < volumeLimitData.length; i++) {\r\n    addFilterData();\r\n    var_getPriceData.body.filterData.filter[0].value =\r\n      volumeLimitData[i].bpRefNo;\r\n    var_getPriceData.body.filterData.filter[1].value =\r\n      volumeLimitData[i].bpExternalCode;\r\n    var_getPriceData.body.filterData.filter[2].value =\r\n      volumeLimitData[i].season;\r\n    var_getPriceData.body.filterData.filter[3].value =\r\n      volumeLimitData[i].region;\r\n    var_getPriceData.body.filterData.filter[4].value =\r\n      volumeLimitData[i].product;\r\n    // var_getPriceData.body.filterData.filter[5].value = volumeLimitData[i].site;\r\n    // var_getPriceData.body.filterData.filter[6].value = volumeLimitData[i].quality;\r\n    var_getPriceDataTempCopy = JSON.parse(JSON.stringify(var_getPriceData));\r\n\r\n\r\n    if (volumeLimitData[i].site != \"All\")\r\n      var_getPriceData.body.filterData.filter.push({\r\n        fieldName: \"site\",\r\n        value: [volumeLimitData[i].site],\r\n        operator: \"in\",\r\n      });\r\n\r\n    if (volumeLimitData[i].quality != \"All\")\r\n      var_getPriceData.body.filterData.filter.push({\r\n        fieldName: \"quality\",\r\n        value: [volumeLimitData[i].quality],\r\n        operator: \"in\",\r\n      });\r\n      \r\n      var_getVolumeLimitData.body.filterData.filter = [\r\n        {\r\n          fieldName: \"bpRefNo\",\r\n          value: volumeLimitData[i].bpRefNo,\r\n          operator: \"eq\",\r\n        },\r\n        {\r\n          fieldName: \"bpExternalCode\",\r\n          value: volumeLimitData[i].bpExternalCode,\r\n          operator: \"eq\",\r\n        },\r\n        {\r\n          fieldName: \"season\",\r\n          value: volumeLimitData[i].season,\r\n          operator: \"eq\",\r\n        },\r\n        {\r\n          fieldName: \"region\",\r\n          value: volumeLimitData[i].region,\r\n          operator: \"eq\",\r\n        },\r\n        {\r\n          fieldName: \"product\",\r\n          value: volumeLimitData[i].product,\r\n          operator: \"eq\",\r\n        },\r\n        // {\r\n        //   fieldName: \"site\",\r\n        //   value: volumeLimitData[i].site,\r\n        //   operator: \"ne\",\r\n        // },\r\n        // {\r\n        //   fieldName: \"quality\",\r\n        //   value: volumeLimitData[i].quality,\r\n        //   operator: \"ne\",\r\n        // },\r\n      ];\r\n\r\n      var skipPriceExpiry = false;\r\n      volumeLimitDataNew = await get_connectData(var_getVolumeLimitData);//.then(\r\n        // (volumeLimitDataNew) => {\r\n          // volumeLimitDataNew = volumeLimitDataNew.filter(o=> o.bpRefNo!=volumeLimitData[i].bpRefNo && o.bpExternalCode!=volumeLimitData[i].bpExternalCode\r\n          //   && o.season!=volumeLimitData[i].season && o.region!=volumeLimitData[i].region\r\n          //   && o.product!=volumeLimitData[i].product && o.site!=volumeLimitData[i].site\r\n          //   && o.quality!=volumeLimitData[i].quality\r\n          //   );\r\n          if (!(volumeLimitData[i].site == \"All\" && volumeLimitData[i].quality == \"All\")){\r\n              if(volumeLimitDataNew.filter(\r\n                (o) => o.site == \"All\" && o.quality == \"All\"\r\n              ).length > 0){\r\n                skipPriceExpiry = true;\r\n                continue;\r\n              }\r\n              if((volumeLimitData[i].site != \"All\" && volumeLimitData[i].quality != \"All\")\r\n              && (volumeLimitDataNew.filter(\r\n                (o) => o.site == \"All\" || o.quality == \"All\"\r\n              ).length > 1)){\r\n                skipPriceExpiry = true;\r\n                continue;\r\n              }\r\n            \r\n          }\r\n\r\n          for (let j = 0; j < volumeLimitDataNew.length; j++) {\r\n            var_getPriceDataTemp = JSON.parse(JSON.stringify(var_getPriceDataTempCopy));\r\n            // var_getPriceDataTemp.body.filterData.filter\r\n            //   .filter((o) => (o.fieldName == \"site\" || o.fieldName == \"quality\") && o.value!='All' )\r\n            //   .forEach((element) => {\r\n            //     element.value = volumeLimitDataNew[j][element.fieldName] == 'All'?[]:[volumeLimitDataNew[j][element.fieldName]];\r\n            //   });\r\n            if (volumeLimitDataNew[j].site != \"All\")\r\n            var_getPriceDataTemp.body.filterData.filter.push({\r\n                fieldName: \"site\",\r\n                value: [volumeLimitDataNew[j].site],\r\n                operator: \"in\",\r\n              });\r\n\r\n            if (volumeLimitDataNew[j].quality != \"All\")\r\n            var_getPriceDataTemp.body.filterData.filter.push({\r\n                fieldName: \"quality\",\r\n                value: [volumeLimitDataNew[j].quality],\r\n                operator: \"in\",\r\n              });\r\n\r\n            await get_connectData(var_getPriceDataTemp).then((priceData) => {\r\n              if (priceData.length > 0)\r\n                var_getPriceData.body.filterData.filter[5].value.push(\r\n                  ...priceData.map((o) => o.priceId)\r\n                );\r\n            });\r\n          }\r\n\r\n      if (skipPriceExpiry) continue;\r\n    offset = volumeLimitData[i].clientTimezoneOffset\r\n      ? volumeLimitData[i].clientTimezoneOffset\r\n      : 0;\r\n    currentDateTimeWithTimezone = currentDateTime\r\n      .clone()\r\n      .subtract(offset, \"minutes\");\r\n    await get_connectData(var_getPriceData).then((priceData) => {\r\n      for (let j = 0; j < priceData.length; j++) {\r\n        priceData[j].status = \"Expired\";\r\n        startDateTime = moment.utc(priceData[j].startDateTime);\r\n        if (startDateTime > currentDateTime) {\r\n          priceData[j].startDateTime = currentDateTime.format(\r\n            \"YYYY-MM-DDTHH:mm:ss[Z]\"\r\n          );\r\n          priceData[j].startDate =\r\n            currentDateTimeWithTimezone.format(\"YYYY-MM-DD\");\r\n          priceData[j].startTime = currentDateTimeWithTimezone.format(\"HH:mm\");\r\n        }\r\n        priceData[j].endDateTime = currentDateTime.format(\r\n          \"YYYY-MM-DDTHH:mm:ss[Z]\"\r\n        );\r\n        priceData[j].endDate = currentDateTimeWithTimezone.format(\"YYYY-MM-DD\");\r\n        priceData[j].endTime = currentDateTimeWithTimezone.format(\"HH:mm\");\r\n        priceData[j].withdrawnBy = userName;\r\n\r\n        connect_update_price_data_internal.body.output.elastic_updatePriceData_internal.push(\r\n          priceData[j]\r\n        );\r\n      }\r\n    })\r\n    .catch(function (err) {\r\n        console.log('Error:',err);\r\n      res.status(500).send(err);\r\n    });\r\n  }\r\n  console.log(\r\n    \"connect_update_price_data_internal:\" +\r\n      JSON.stringify(connect_update_price_data_internal)\r\n  );\r\n\r\n  update_price_data_internal();\r\n  res.status(200).send();\r\n})().catch(function (err) {\r\n    console.log('Error:',err);\r\n  res.status(500).send(err);\r\n});",
  "sys__UUID": "8fb554b7-d8ee-47e8-8d4c-b5e0687f439d",
  "type": "processor"
}
