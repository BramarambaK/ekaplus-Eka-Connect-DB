{
  "_id": "ticketwarehousedoffer_mdm_processor",
  "name": "ticketwarehousedoffer_mdm",
  "type": "processor",
  "refType": "app",
  "refTypeId": "12325a98-a959-4939-9005-4158d136afcd",
  "sys__UUID": "1cd9d9d3-cc4c-4a87-9182-34e79b8a0d5b",
  "snippet": "const serviceKey = JSON.parse(req.body.mdmProcessorServiceKey)[0].serviceKey;\r\n    const dependsOnKey = JSON.parse(req.body.mdmProcessorServiceKey)[0].dependsOn;\r\n    const userInfo = req.body.propertyList.eka_connect_host + '/api/getbpuserinfo';\r\n    const appId = req.body.appId;\r\n    const tenant = req.headers['X-TenantID'];\r\n    const taskId = req.body.taskId;\r\n\r\n    const subGroupMaster = {\r\n      appId: appId,\r\n      objectId: 'd59b8c10-8c94-4b87-a430-f6fd69888a37' /* not at all relevant object id */,\r\n      collectionName: 'BP Sub Group Setup',\r\n      tenant: tenant\r\n    };\r\n\r\n    const objSorter = prop => (obj1, obj2) => {\r\n      if (obj1[prop] < obj2[prop]) {\r\n        return -1;\r\n      }\r\n      if (obj1[prop] > obj2[prop]) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    };\r\n\r\n    const getData = url =>\r\n      new Promise(function(resolve, reject) {\r\n        request(\r\n          {\r\n            method: 'GET',\r\n            url,\r\n            headers: {\r\n              Authorization: req.headers.authorization\r\n            },\r\n            json: true\r\n          },\r\n          function(err, response, body) {\r\n            if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          }\r\n        );\r\n      });\r\n\r\n    const getCollectionMapper = config =>\r\n      new Promise((resolve, reject) => {\r\n        const r = {\r\n          method: 'POST',\r\n          url: `${req.body.propertyList.eka_connect_host}/collectionmapper/${config.appId}/${\r\n            config.objectId\r\n          }/fetchCollectionRecords`,\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            ttl: 600,\r\n            'X-TenantID': config.tenant,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: {\r\n            collectionName: config.collectionName\r\n          },\r\n          json: true\r\n        };\r\n        request(r, (err, response, body) => {\r\n          if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n\r\n    const subGroupCode = userDetails =>\r\n      new Promise((resolve, reject) =>\r\n        getCollectionMapper(subGroupMaster)\r\n          .then(result => {\r\n            if (result && Array.isArray(result)) {\r\n              const config = result.find(\r\n                i =>\r\n                  i.Workflow == taskId &&\r\n                  i.UserType == userDetails.customerType &&\r\n                  i.SubGroupApplicable.toLowerCase() == 'y'\r\n              );\r\n\r\n              if (config) {\r\n                resolve(config.SubGroupCode);\r\n              } else {\r\n                console.log(\r\n                  `Sub group configuration not found for ${taskId} and ${\r\n                    userDetails.customerType\r\n                  }. Defaulting to not applicable.`\r\n                );\r\n                resolve(null);\r\n              }\r\n            } else {\r\n              reject('Sub group configuration is missing');\r\n            }\r\n          })\r\n          .catch(err => {\r\n            reject(err);\r\n          })\r\n      );\r\n\r\n    const bpList = new Promise((resolve, reject) => {\r\n      getData(userInfo)\r\n        .then(t => {\r\n          const userDetails = t.data;\r\n          if (userDetails.BusinessPartyDetails) {\r\n            subGroupCode(userDetails)\r\n              .then(code => {\r\n                let bpResolver;\r\n                if (code) {\r\n                  bpResolver = masterdata =>\r\n                    userDetails.BusinessPartyDetails.filter(bp => masterdata.includes(bp.refNo)).reduce((acc, bp) => {\r\n                      if (bp.subGroup && bp.subGroup.length > 0) {\r\n                        const subGroup = bp.subGroup.find(i => i.code && i.code.toLowerCase() == code.toLowerCase());\r\n                        if (subGroup) {\r\n                          acc.push({\r\n                            key: `${bp.refNo} - ${bp.name} - ${subGroup.name} - ${subGroup.refNo}`,\r\n                            value: `${bp.name} - ${bp.refNo} - ${subGroup.name}`\r\n                          });\r\n                        }\r\n                      }\r\n                      return acc.sort(objSorter('value'));\r\n                    }, []);\r\n                } else {\r\n                  bpResolver = masterdata =>\r\n                    userDetails.BusinessPartyDetails.filter(bp => masterdata.includes(bp.refNo))\r\n                      .map(bp => ({\r\n                        key: `${bp.refNo} - ${bp.name}`,\r\n                        value: `${bp.name} - ${bp.refNo}`\r\n                      }))\r\n                      .sort(objSorter('value'));\r\n                }\r\n                resolve(bpResolver);\r\n              })\r\n              .catch(err => {\r\n                reject(err);\r\n              });\r\n          } else {\r\n            reject('BusinessPartyDetails missing in user details.');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          reject(err);\r\n        });\r\n    });\r\n\r\n    function prepareMdmCollection(platformres) {\r\n      let mdmCollection = {\r\n        offerSiteKey: {},\r\n        offerProductKey: {},\r\n        offerSeasonKey: {},\r\n        offerGradeKey: {}\r\n      };\r\n      function getOption(serviceKey, key, dependent, dependent1 = null) {\r\n        if (!mdmCollection[serviceKey][key]) {\r\n          if (dependent != '') {\r\n            mdmCollection[serviceKey][key] = {\r\n              [dependent]: true\r\n            };\r\n          }\r\n          if (dependent1 != null && dependent1 != '') {\r\n            mdmCollection[serviceKey][key] = {\r\n              ...mdmCollection[serviceKey][key],\r\n              [dependent1]: true\r\n            };\r\n          }\r\n        } else {\r\n          if (!mdmCollection[serviceKey][key][dependent] && dependent != '') {\r\n            mdmCollection[serviceKey][key] = {\r\n              ...mdmCollection[serviceKey][key],\r\n              [dependent]: true\r\n            };\r\n          }\r\n          if (dependent1 != null && dependent1 != '') {\r\n            if (!mdmCollection[serviceKey][key][dependent1]) {\r\n              mdmCollection[serviceKey][key] = {\r\n                ...mdmCollection[serviceKey][key],\r\n                [dependent1]: true\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      platformres.forEach(item => {\r\n        for (let key in item) {\r\n          key === 'bpRefNo' && getOption('offerSiteKey', item[key], item['location']);\r\n          key === 'location' && getOption('offerProductKey', item[key], item['product']);\r\n          key === 'product' && getOption('offerGradeKey', item[key], item['quality']);\r\n          key === 'quality' && getOption('offerSeasonKey', item[key], item['cropYear']);\r\n        }\r\n      });\r\n      return mdmCollection;\r\n    }\r\n\r\n    const getRequestDropdown = body =>\r\n      new Promise(function(resolve, reject) {\r\n        request(\r\n          {\r\n            method: 'GET',\r\n            url:\r\n              req.body.propertyList.eka_connect_host +\r\n              '/data/12325a98-a959-4939-9005-4158d136afcd/a26737b3-a5a9-4fe9-b6f7-29218a3bc45a',\r\n            headers: {\r\n              Authorization: req.headers.authorization,\r\n              'X-TenantID': tenant,\r\n              requestid: req.headers['requestid'] + '-processor'\r\n            },\r\n            body,\r\n            json: true\r\n          },\r\n          function(err, response, body) {\r\n            if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject(body);\r\n            }\r\n          }\r\n        );\r\n      });\r\n\r\n    function compareCropYear(a, b) {\r\n      let c = a.split('/')[0];\r\n      let d = b.split('/')[0];\r\n      if (d - c > 0) {\r\n        return 1;\r\n      } else return -1;\r\n    }\r\n\r\n    if (\r\n      serviceKey == 'offerSiteKey' ||\r\n      serviceKey == 'offerProductKey' ||\r\n      serviceKey == 'offerGradeKey' ||\r\n      serviceKey == 'offerSeasonKey'\r\n    ) {\r\n      if (serviceKey == 'offerSiteKey') {\r\n        let dependsOn = dependsOnKey[0].split('-')[0].trim();\r\n        console.log(dependsOnKey[0].split('-')[0].trim());\r\n        if (dependsOn == '' || dependsOn == null) {\r\n          res.status(200).send({\r\n            offerSiteKey: []\r\n          });\r\n        } else {\r\n          let acc = req.body.selectedData.warehousedticketoffercomposite.searchwarehousedticketoffer.offerBpRefNo\r\n            .split('-')[0]\r\n            .trim();\r\n          let filterBody = {\r\n            filterData: {\r\n              filter: [\r\n                {\r\n                  fieldName: 'bpRefNo',\r\n                  value: acc,\r\n                  operator: 'eq'\r\n                }\r\n              ]\r\n            }\r\n          };\r\n\r\n          getRequestDropdown(filterBody)\r\n            .then(siteData => {\r\n              let mdmCollection = prepareMdmCollection(siteData);\r\n              res.status(200).send({\r\n                offerSiteKey: Object.keys(mdmCollection['offerSiteKey'][dependsOn])\r\n                  .sort()\r\n                  .map(item => ({\r\n                    key: item,\r\n                    value: item\r\n                  }))\r\n              });\r\n            })\r\n            .catch(console.log);\r\n        }\r\n      }\r\n\r\n      if (serviceKey == 'offerProductKey') {\r\n        let dependsOn = dependsOnKey[0];\r\n        if (dependsOn == '' || dependsOn == null) {\r\n          res.status(200).send({\r\n            offerProductKey: []\r\n          });\r\n        } else {\r\n          let acc = req.body.selectedData.warehousedticketoffercomposite.searchwarehousedticketoffer.offerLocation;\r\n          let filterBody = {\r\n            filterData: {\r\n              filter: [\r\n                {\r\n                  fieldName: 'location',\r\n                  value: acc,\r\n                  operator: 'eq'\r\n                }\r\n              ]\r\n            }\r\n          };\r\n\r\n          getRequestDropdown(filterBody)\r\n            .then(siteData => {\r\n              let mdmCollection = prepareMdmCollection(siteData);\r\n              res.status(200).send({\r\n                offerProductKey: Object.keys(mdmCollection['offerProductKey'][dependsOn])\r\n                  .sort()\r\n                  .map(item => ({\r\n                    key: item,\r\n                    value: item\r\n                  }))\r\n              });\r\n            })\r\n            .catch(console.log);\r\n        }\r\n      }\r\n\r\n      if (serviceKey == 'offerGradeKey') {\r\n        let dependsOn = dependsOnKey[0];\r\n        if (dependsOn == '' || dependsOn == null) {\r\n          res.status(200).send({\r\n            offerGradeKey: []\r\n          });\r\n        } else {\r\n          let acc = req.body.selectedData.warehousedticketoffercomposite.searchwarehousedticketoffer.offerProduct;\r\n          let filterBody = {\r\n            filterData: {\r\n              filter: [\r\n                {\r\n                  fieldName: 'product',\r\n                  value: acc,\r\n                  operator: 'eq'\r\n                }\r\n              ]\r\n            }\r\n          };\r\n\r\n          getRequestDropdown(filterBody)\r\n            .then(siteData => {\r\n              let mdmCollection = prepareMdmCollection(siteData);\r\n              res.status(200).send({\r\n                offerGradeKey: Object.keys(mdmCollection['offerGradeKey'][dependsOn])\r\n                  .sort()\r\n                  .map(item => ({\r\n                    key: item,\r\n                    value: item\r\n                  }))\r\n              });\r\n            })\r\n            .catch(console.log);\r\n        }\r\n      }\r\n\r\n      if (serviceKey == 'offerSeasonKey') {\r\n        let dependsOn = dependsOnKey[0];\r\n        if (dependsOn == '' || dependsOn == null) {\r\n          res.status(200).send({\r\n            offerSeasonKey: []\r\n          });\r\n        } else {\r\n          let acc = req.body.selectedData.warehousedticketoffercomposite.searchwarehousedticketoffer.offerQuality;\r\n          let filterBody = {\r\n            filterData: {\r\n              filter: [\r\n                {\r\n                  fieldName: 'quality',\r\n                  value: acc,\r\n                  operator: 'eq'\r\n                }\r\n              ]\r\n            }\r\n          };\r\n\r\n          getRequestDropdown(filterBody)\r\n            .then(siteData => {\r\n              let mdmCollection = prepareMdmCollection(siteData);\r\n              res.status(200).send({\r\n                offerSeasonKey: Object.keys(mdmCollection['offerSeasonKey'][dependsOn])\r\n                  .sort(compareCropYear)\r\n                  .slice(0, 3)\r\n                  .map(item => ({\r\n                    key: item,\r\n                    value: item\r\n                  }))\r\n              });\r\n            })\r\n            .catch(console.log);\r\n        }\r\n      }\r\n    } else {\r\n      bpList\r\n        .then(bpResolver => {\r\n          let filterBody = {\r\n            filterData: {\r\n              filter: [\r\n                {\r\n                  fieldName: 'bpRefNo',\r\n                  value: 'All',\r\n                  operator: 'ne'\r\n                }\r\n              ]\r\n            }\r\n          };\r\n          getRequestDropdown(filterBody)\r\n            .then(siteData => {\r\n              let data = {};\r\n              let mdmLocationCollection = prepareMdmCollection(siteData);\r\n              let bpRefMasterData = Object.keys(mdmLocationCollection['offerSiteKey']);\r\n              let mdmData = bpResolver(bpRefMasterData);\r\n              data[serviceKey] = mdmData;\r\n              data['offerSiteKey'] = Object.keys(mdmLocationCollection['offerSiteKey'])\r\n                .sort()\r\n                .map(item => ({\r\n                  key: item,\r\n                  value: item\r\n                }));\r\n              res.status(200).send(data);\r\n            })\r\n            .catch(console.log);\r\n        })\r\n        .catch(err => {\r\n          console.error('Failed to fetch MDM data', err);\r\n          var data = {};\r\n          data[serviceKey] = [];\r\n          res.status(200).send(data);\r\n        });\r\n    }\r\n  "
}
