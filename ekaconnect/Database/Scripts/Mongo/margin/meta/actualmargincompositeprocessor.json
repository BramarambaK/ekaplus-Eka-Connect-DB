{
  "_id": ObjectId("5d53913d5064b968e29cc0b1"),
  "name": "compositeViewActualMargin",
  "type": "processor",
  "refType": "app",
  "version": "V2",
  "refTypeId": "40a27e7f-3f50-406f-a872-2ee7d9436df9",
  "snippet": "\r\n    var zeroactual = false;\r\n    var allocation_group_header = {\r\n      method: 'POST',\r\n      url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '/collectionmapper/40a27e7f-3f50-406f-a872-2ee7d9436df9/3ef370f9-febe-41a0-8e43-4ef6ce769b3b/fetchMultiCollectionRecords',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        'Content-Type': 'application/json',\r\n        ttl: 300\r\n      },\r\n      body: [\r\n        {\r\n          collectionName: 'AllocationGroupHeader',\r\n          criteria: {\r\n            filter: [\r\n              {\r\n                fieldName: 'INT ALLOC GROUP ID',\r\n                value: req.body.selectedData['INT ALLOC GROUP ID'],\r\n                operator: 'eq'\r\n              },\r\n              {\r\n                fieldName: 'CONTRACT REF NO',\r\n                value: req.body.selectedData['CONTRACT ITEM NO'],\r\n                operator: 'eq'\r\n              },\r\n              {\r\n                fieldName: 'PRODUCT SPECS',\r\n                value: req.body.selectedData['PRODUCT SPECS'],\r\n                operator: 'eq'\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          collectionName: 'AllocationGroupSalesDetails',\r\n          criteria: {\r\n            filter: [\r\n              {\r\n                fieldName: 'INT ALLOC GROUP ID',\r\n                value: req.body.selectedData['INT ALLOC GROUP ID'],\r\n                operator: 'eq'\r\n              },\r\n\r\n              {\r\n                fieldName: 'INTERNAL CONTRACT REF NO',\r\n                value: req.body.selectedData['INTERNAL CONTRACT REF NO'],\r\n                operator: 'eq'\r\n              },\r\n              {\r\n                fieldName: 'PRODUCT SPECS',\r\n                value: req.body.selectedData['PRODUCT SPECS'],\r\n                operator: 'eq'\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      json: true\r\n    };\r\n\r\n    var connectData = {\r\n      method: 'GET',\r\n      url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '/data/40a27e7f-3f50-406f-a872-2ee7d9436df9/3ef370f9-febe-41a0-8e43-4ef6ce769b3b',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        json: true\r\n      }\r\n    };\r\n\r\n    function get_connectData() {\r\n      return new Promise(function(resolve, reject) {\r\n        // console.log('Request - ' + connectData.url);\r\n        //console.log('Payload -' + JSON.stringify(connectData));\r\n        request(connectData, function(err, response, body) {\r\n          //  console.log('Response - ' + body);\r\n          if (err || body.error) reject(body);\r\n          else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function get_header3() {\r\n      return new Promise(function(resolve, reject) {\r\n        // // console.log('Request - ' + allocation_group_header.url);\r\n        request(allocation_group_header, function(err, response, body) {\r\n          // console.log('Response - header');\r\n          var l = Object.keys(body).length;\r\n          if (l !== 2) {\r\n            //error('Unable to get data from payentsplit',500);\r\n            reject(body);\r\n          } else {\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    function verifykeys(collectiondata, keys, collectionname) {\r\n      keys.forEach(element => {\r\n        if (collectiondata.hasOwnProperty(element)) {\r\n        } else {\r\n error('Unable to get data from' + collectionname + 'column:' + element,500);        \r\n        }\r\n      });\r\n    }\r\n    function dynamicSort(property) {\r\n      var sortOrder = 1;\r\n      if (property[0] === '-') {\r\n        sortOrder = -1;\r\n        property = property.substr(1);\r\n      }\r\n      return function(a, b) {\r\n        /* next line works with strings and numbers,\r\n         * and you may want to customize it to your needs\r\n         */\r\n        var result = a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;\r\n        return result * sortOrder;\r\n      };\r\n    }\r\n\r\n    function groupBy(xs, prop) {\r\n      var grouped = {};\r\n      for (var i = 0; i < xs.length; i++) {\r\n        var p = xs[i][prop];\r\n        if (!grouped[p]) {\r\n          grouped[p] = [];\r\n        }\r\n        grouped[p].push(xs[i]);\r\n      }\r\n      return grouped;\r\n    }\r\n    function addDays(myDate, days) {\r\n      // if (myDate.toISOString()) {\r\n      //   myDate = myDate.toISOString().split('T')[0];\r\n      // }\r\n      return new Date(myDate.getTime() + days * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\r\n    }\r\n    function rowspan(past, current) {\r\n      return past == current ? false : true;\r\n    }\r\n    function datediff(date1, date2) {\r\n      date1 = new Date(date1);\r\n      date2 = new Date(date2);\r\n      var diffTime = Math.abs(date2.getTime() - date1.getTime());\r\n      var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n      return diffDays;\r\n    }\r\n\r\n    var header = [];\r\n    var result = [];\r\n\r\n    var actualmargindata = [];\r\n\r\n    var budgetmargin = [];\r\n    get_connectData()\r\n      .then(bud => {\r\n        budgetmargin.push(bud);\r\n        get_header3()\r\n          .then(data => {\r\n            for (var keys in data) {\r\n              if (keys.includes('AllocationGroupHeader')) {\r\n                var head = {\r\n                  data: data[keys]\r\n                };\r\n                header.push(head);\r\n              } else if (keys.includes('AllocationGroupSalesDetails')) {\r\n                var head = {\r\n                  data: data[keys]\r\n                };\r\n                result.push(head);\r\n              }\r\n            }\r\n\r\n            var salesrefno = [];\r\n            var salesrefnostring = '';\r\n            for (let r = 0; r < result[0].data.length; r++) {\r\n              salesrefno.push(result[0].data[r]['CONTRACT ITEM NO']);\r\n            }\r\n\r\n            salesrefno = [...new Set(salesrefno)];\r\n            for (let r = 0; r < salesrefno.length; r++) {\r\n              if (r == salesrefno.length - 1) {\r\n                salesrefnostring = salesrefnostring + salesrefno[r];\r\n              } else {\r\n                salesrefnostring = salesrefnostring + salesrefno[r] + ',';\r\n              }\r\n            }\r\n            var actualmarginreq = {\r\n              method: 'POST',\r\n              url:\r\n                req.body.propertyList.eka_connect_host +\r\n                '/collectionmapper/40a27e7f-3f50-406f-a872-2ee7d9436df9/3ef370f9-febe-41a0-8e43-4ef6ce769b3b/fetchCollectionRecords',\r\n              headers: {\r\n                Authorization: req.headers.authorization,\r\n                'X-TenantID': req.headers['x-tenantid'],\r\n                'Content-Type': 'application/json',\r\n                ttl: 300\r\n              },\r\n              body: {\r\n                collectionName: 'AAPR',\r\n                criteria: {\r\n                  filter: [\r\n                    {\r\n                      fieldName: 'Sales Contract Item Ref No',\r\n                      value: salesrefnostring,\r\n                      operator: 'in'\r\n                    },\r\n                    {\r\n                      fieldName: 'PARENT INT ALLOC GROUP ID',\r\n                      value: req.body.selectedData['INT ALLOC GROUP ID'],\r\n                      operator: 'eq'\r\n                    }\r\n                  ]\r\n                }\r\n              },\r\n              json: true\r\n            };\r\n            function get_actualmargin() {\r\n              return new Promise(function(resolve, reject) {\r\n                // console.log('Request - ' + purchase_details.url);\r\n                request(actualmarginreq, function(err, response, body) {\r\n                  if (body.length == 0) {\r\n                    zeroactual = true;\r\n                  }\r\n                  if (body.length || body.length == 0) {\r\n                    resolve(body);\r\n                  } else {\r\n                    reject(body);\r\n                  }\r\n                });\r\n              });\r\n            }\r\n\r\n            get_actualmargin()\r\n              .then(data1 => {\r\n                var head = {\r\n                  data: data1\r\n                };\r\n                var test = [];\r\n                actualmargindata.push(head);\r\n\r\n                actualmargindata[0].data.forEach(element => {\r\n                  if (\r\n                    element['Cost Class'] == 'Accrual' &&\r\n                    (element['Cost Category'] == 'Purchase Material Cost' ||\r\n                      element['Cost Category'] == 'Sales Material Cost')\r\n                  ) {\r\n                    verifykeys(element, ['Payment Schedule Days'], 'AAPR');\r\n                    verifykeys(element, ['Sales GMR Date'], 'AAPR');\r\n                  }\r\n                  if (element['Cost Class'] == 'Accrual' && element['Cost Category'] == 'Secondary Cost') {\r\n                    verifykeys(element, ['Sales GMR Date'], 'AAPR');\r\n                  }\r\n                  if (\r\n                    element['Cost Class'] == 'Prepayment Invoice' ||\r\n                    element['Cost Class'] == 'Actual' ||\r\n                    element['Cost Class'] == 'Payment' ||\r\n                    element['Cost Class'] == 'Reciept'\r\n                  ) {\r\n                    verifykeys(element, ['Payment Due Payment Date'], 'AAPR');\r\n                    verifykeys(element, ['Sales GMR Date'], 'AAPR');\r\n                  }\r\n                });\r\n\r\n                for (let i = 0; i < actualmargindata[0].data.length; i++) {\r\n                  if (actualmargindata[0].data[i]['Cost Name'] == 'Export custom formalities') {\r\n                    test.push(actualmargindata[0].data[i]);\r\n                  }\r\n                }\r\n                var response = {\r\n                  viewmarginInterestEdit: {},\r\n                  viewmargin: {},\r\n                  listingmargin: [],\r\n                  tradeMargin: {},\r\n                  shares: {},\r\n                  rates: {},\r\n                  remark: {}\r\n                };\r\n                //error handling\r\n                if (budgetmargin[0].message == '400 Bad Request' || budgetmargin[0].message == '404 Not Found') {\r\n           error('Unable to get data from Saved budget margin',500);      \r\n                } else if (header[0].data.length == 0) {\r\n   error('Zero from Allocation Header',500);               \r\n                } else if (actualmargindata[0].data.length == 0) {\r\n  error('Zero data from Actual Collection',500);               \r\n                } else if (actualmargindata[0].data.length == 0) {\r\n              error('No data from Actual Collection',500);   \r\n                } else {\r\n                  var keyVals = req.body.propertyList.margin_collection_object_column_mapping;\r\n                  var collection = JSON.stringify(header);\r\n                  var collection2 = JSON.stringify(actualmargindata);\r\n\r\n                  var connectKeys = Object.keys(keyVals);\r\n\r\n                  for (var i = 0; i < connectKeys.length; i++) {\r\n                    collection = collection.split(keyVals[connectKeys[i]]).join(connectKeys[i]);\r\n                    collection2 = collection2.split(keyVals[connectKeys[i]]).join(connectKeys[i]);\r\n                  }\r\n                  header = JSON.parse(collection);\r\n                  actualmargindata = JSON.parse(collection2);\r\n\r\n                  // let myDate = new Date(header[0].data[0]['LATEST SHIPMENT DATE']);\r\n                  // let date = myDate.toISOString().split('T')[0];\r\n                  // let date12 = date.split('-');\r\n                  //   var interestvalueextracted;\r\n\r\n                  //searching for suitable budget margin\r\n\r\n                  budgetmargin = JSON.parse(budgetmargin[0]);\r\n                  var budgetmarginfiltered = [];\r\n                  for (let p = 0; p < budgetmargin.length; p++) {\r\n                    if (\r\n                      budgetmargin[p]['CONTRACT ITEM NO'] == req.body.selectedData['CONTRACT ITEM NO'] &&\r\n                      budgetmargin[p]['INT ALLOC GROUP ID'] == req.body.selectedData['INT ALLOC GROUP ID'] &&\r\n                      budgetmargin[p]['PRODUCT SPECS'] == req.body.selectedData['PRODUCT SPECS']\r\n                    ) {\r\n                      budgetmarginfiltered.push(budgetmargin[p]);\r\n                      break;\r\n                    }\r\n                  }\r\n                  if (budgetmarginfiltered.length == 0) {\r\n     error('Calculate Budget Margin First',500);               \r\n                  } else if (\r\n                    budgetmarginfiltered[0].status == 'Failed' &&\r\n                    !budgetmarginfiltered[0].hasOwnProperty('margindata')\r\n                  ) {\r\n      error('Calculated BM is failed without calculating',500);              \r\n                  } else {\r\n                    var bmlisitng = budgetmarginfiltered[0].margindata.listingmargin;\r\n                    response.viewmargin = {\r\n                      salesContractItemRefNo: budgetmarginfiltered[0].margindata.viewmargin.salesContractItemRefNo,\r\n                      allocGrpName: budgetmarginfiltered[0].margindata.viewmargin.allocGrpName,\r\n                      quantity: header[0].data[0]['RELEASED QTY'],\r\n                      product: budgetmarginfiltered[0].margindata.viewmargin.product,\r\n                      quantityUnitUOM: header[0].data[0]['RELEASED QTY'],\r\n                      traderName: budgetmarginfiltered[0].margindata.viewmargin.traderName,\r\n                      personIncharge: budgetmarginfiltered[0].margindata.viewmargin.personIncharge,\r\n                      shipmentFromDate: budgetmarginfiltered[0].margindata.viewmargin.shipmentFromDate,\r\n                      contractValueUOM: budgetmarginfiltered[0].margindata.viewmargin.contractValueUOM,\r\n                      finalCustomer: 'N/A',\r\n                      titleTransferDate: 'N/A',\r\n                      interest: budgetmarginfiltered[0].margindata.viewmarginInterestEdit.interest,\r\n\r\n                      status: budgetmarginfiltered[0].margindata.viewmargin.status\r\n                    };\r\n                    var expense = [];\r\n                    var income = [];\r\n                    var countexp = 0;\r\n                    var countinc = 0;\r\n                    var actualfx = [];\r\n                    var fxrate;\r\n                    if (budgetmarginfiltered[0].margindata.ratesvalues) {\r\n                      var budgetfxrates = budgetmarginfiltered[0].margindata.ratesvalues;\r\n                    } else {\r\n                      var budgetfxrates = budgetmarginfiltered[0].margindata.rates;\r\n                    }\r\n                    // var budgetfxrates = budgetmarginfiltered[0].margindata.ratesvalues;\r\n                    var budgetfxratesdisplay = budgetmarginfiltered[0].margindata.rates;\r\n                    for (var i = 0; i < actualmargindata[0].data.length; i++) {\r\n                      var actdata = actualmargindata[0].data[i];\r\n                      if (\r\n                        (actdata['Cost Category'] == 'Purchase Material Cost' ||\r\n                          actdata['Cost Category'] == 'Secondary Cost') &&\r\n                        actdata['Income Expense'] == 'Expense'\r\n                      ) {\r\n                        actdata['REF NO INCOTERM'] = actdata['Ref No IncoTerm'];\r\n                        actdata['totalAmount'] = actdata['Amount'];\r\n                        if (actdata['Cost Category'] == 'Purchase Material Cost') {\r\n                          actdata['totalAmount'] = -1 * actdata['Amount'];\r\n                        }\r\n\r\n                        //fx\r\n                        fxrate = 1;\r\n                        for (var f = 0; f < budgetfxrates.length; f++) {\r\n                          var fxfrom = budgetfxrates[f].fxpair.split('-')[0];\r\n                          var fxto = budgetfxrates[f].fxpair.split('-')[1];\r\n                          if (\r\n                            fxfrom == actdata['costUom'] &&\r\n                            fxto == budgetmarginfiltered[0].margindata.viewmargin.contractValueUOM\r\n                          ) {\r\n                            fxrate = budgetfxrates[f].fxvalue;\r\n                            if (actualfx.length == 0) {\r\n                              actualfx.push(budgetfxratesdisplay[f]);\r\n                            } else {\r\n                              for (let r = 0; r < actualfx.length; r++) {\r\n                                if (actualfx[r].fxpair == budgetfxratesdisplay[f].fxpair) {\r\n                                  break;\r\n                                } else if (r == actualfx.length - 1) {\r\n                                  actualfx.push(budgetfxratesdisplay[f]);\r\n                                }\r\n                              }\r\n                            }\r\n\r\n                            break;\r\n                          } else {\r\n                            fxrate = 1;\r\n                          }\r\n                        }\r\n                        if (budgetfxrates.length == 0) {\r\n                          fxrate = 1;\r\n                        }\r\n                        actdata.totalAmountMarginCurrency = actdata.totalAmount * fxrate;\r\n\r\n                        if (\r\n                          actdata.totalAmountMarginCurrency == -0 ||\r\n                          actdata.totalAmountMarginCurrency == '-0' ||\r\n                          (0 > actdata.totalAmountMarginCurrency && actdata.totalAmountMarginCurrency > -0.0099)\r\n                        ) {\r\n                          actdata.totalAmountMarginCurrency = 0;\r\n                        }\r\n\r\n                        //finaning days\r\n                        var salesdateformatted = actdata['Sales GMR Date'].split('T')[0];\r\n                        var salesdateSplit = salesdateformatted.split('-');\r\n                        var salesdatetitle = salesdateSplit[2] + '-' + salesdateSplit[1] + '-' + salesdateSplit[0];\r\n\r\n                        if (\r\n                          actdata['COST CLASS'] == 'Accrual' &&\r\n                          actdata['Cost Category'] == 'Purchase Material Cost'\r\n                        ) {\r\n                          actdata.financingdays = actdata['Payment Schedule Days'];\r\n\r\n                          var financingDate = addDays(new Date(salesdateformatted), actdata.financingdays);\r\n                          var financingDateSplit = financingDate.split('-');\r\n                          actdata.financingdate =\r\n                            financingDateSplit[2] + '-' + financingDateSplit[1] + '-' + financingDateSplit[0];\r\n                        } else if (actdata['COST CLASS'] == 'Accrual' && actdata['Cost Category'] == 'Secondary Cost') {\r\n                          for (var k = 0; k < bmlisitng.length; k++) {\r\n                            if (\r\n                              bmlisitng[k]['COST GROUP NAME'] == actdata['COST GROUP NAME'] &&\r\n                              bmlisitng[k]['COST COMPONENT NAME'] == actdata['COST COMPONENT NAME'] &&\r\n                              bmlisitng[k]['CP NAME'] == actdata['CP NAME']\r\n                            ) {\r\n                              actdata.financingdays = bmlisitng[k]['financingdays'];\r\n                              break;\r\n                            } else {\r\n                              actdata.financingdays = 35;\r\n                            }\r\n                          }\r\n                          //actdata.financingdays = 40;\r\n\r\n                          var financingDate = addDays(new Date(salesdateformatted), actdata.financingdays);\r\n                          var financingDateSplit = financingDate.split('-');\r\n                          actdata.financingdate =\r\n                            financingDateSplit[2] + '-' + financingDateSplit[1] + '-' + financingDateSplit[0];\r\n                        } else {\r\n                          var paymentdateformatted = actdata['Payment Due Payment Date'].split('T')[0];\r\n                          actdata.financingdays = datediff(paymentdateformatted, salesdateformatted);\r\n\r\n                          var findate = new Date(paymentdateformatted).toISOString().split('T')[0];\r\n                          var financingDateSplit = findate.split('-');\r\n                          actdata.financingdate =\r\n                            financingDateSplit[2] + '-' + financingDateSplit[1] + '-' + financingDateSplit[0];\r\n                        }\r\n                        actdata.interest = response.viewmargin.interest;\r\n                        actdata['TITLE TRANSFER DATE'] = salesdatetitle;\r\n\r\n                        if (actdata['Cost Category'] == 'Purchase Material Cost') {\r\n                          actdata.paymentsplit = actdata['Payment Schedule Percentage'];\r\n                        } else {\r\n                          actdata.paymentsplit = 100;\r\n                        }\r\n                        actdata.unitprice = actdata['Contract Price'];\r\n                        if (actdata['Cost Category'] == 'Secondary Cost') {\r\n                          actdata.unitprice = '';\r\n                        }\r\n                        actdata.financing =\r\n                          (-1 *\r\n                            actdata.totalAmountMarginCurrency *\r\n                            // (actdata.paymentsplit / 100) *\r\n                            actdata.financingdays *\r\n                            (response.viewmargin.interest / 100)) /\r\n                          360;\r\n                        if (actdata.financing == -0) {\r\n                          actdata.financing = 0;\r\n                        }\r\n                        actdata.prodtotalAmtFdays = actdata.totalAmountMarginCurrency * actdata.financingdays;\r\n                        if (expense.length == 0) {\r\n                          expense.push(actdata);\r\n                        } else {\r\n                          for (let p = 0; p < expense.length; p++) {\r\n                            if (\r\n                              actdata['Cost Category'] == 'Purchase Material Cost' &&\r\n                              expense[p]['COST GROUP NAME'] == actdata['COST GROUP NAME'] &&\r\n                              expense[p]['REF NO INCOTERM'] == actdata['REF NO INCOTERM'] &&\r\n                              expense[p]['COST COMPONENT NAME'] == actdata['COST COMPONENT NAME'] &&\r\n                              expense[p]['CP NAME'] == actdata['CP NAME'] &&\r\n                              expense[p]['financingdays'] == actdata['financingdays'] &&\r\n                              expense[p]['financingDate'] == actdata['financingDate'] &&\r\n                              expense[p]['COST CLASS'] == actdata['COST CLASS'] &&\r\n                              expense[p]['paymentsplit'] == actdata['paymentsplit']\r\n                            ) {\r\n                              expense[p]['totalAmountMarginCurrency'] =\r\n                                expense[p]['totalAmountMarginCurrency'] + actdata['totalAmountMarginCurrency'];\r\n                              expense[p]['totalAmount'] = expense[p]['totalAmount'] + actdata['totalAmount'];\r\n                              break;\r\n                            } else if (\r\n                              actdata['Cost Category'] == 'Secondary Cost' &&\r\n                              expense[p]['COST GROUP NAME'] == actdata['COST GROUP NAME'] &&\r\n                              expense[p]['COST COMPONENT NAME'] == actdata['COST COMPONENT NAME'] &&\r\n                              expense[p]['CP NAME'] == actdata['CP NAME'] &&\r\n                              expense[p]['financingdays'] == actdata['financingdays'] &&\r\n                              expense[p]['financingDate'] == actdata['financingDate'] &&\r\n                              expense[p]['COST CLASS'] == actdata['COST CLASS'] &&\r\n                              expense[p]['paymentsplit'] == actdata['paymentsplit']\r\n                            ) {\r\n                              expense[p]['totalAmountMarginCurrency'] =\r\n                                expense[p]['totalAmountMarginCurrency'] + actdata['totalAmountMarginCurrency'];\r\n                              expense[p]['totalAmount'] = expense[p]['totalAmount'] + actdata['totalAmount'];\r\n                              break;\r\n                            } else if (p == expense.length - 1) {\r\n                              expense.push(actdata);\r\n\r\n                              break;\r\n                            }\r\n                          }\r\n                        }\r\n                      } else if (\r\n                        (actdata['Cost Category'] == 'Sales Material Cost' ||\r\n                          actdata['Cost Category'] == 'Secondary Cost') &&\r\n                        actdata['Income Expense'] == 'Income'\r\n                      ) {\r\n                        actdata['REF NO INCOTERM'] = actdata['Ref No IncoTerm'];\r\n                        actdata['totalAmount'] = actdata['Amount'];\r\n\r\n                        //fx\r\n                        fxrate = 1;\r\n                        for (var f = 0; f < budgetfxrates.length; f++) {\r\n                          var fxfrom = budgetfxrates[f].fxpair.split('-')[0];\r\n                          var fxto = budgetfxrates[f].fxpair.split('-')[1];\r\n                          if (\r\n                            fxfrom == actdata['costUom'] &&\r\n                            fxto == budgetmarginfiltered[0].margindata.viewmargin.contractValueUOM\r\n                          ) {\r\n                            fxrate = budgetfxrates[f].fxvalue;\r\n\r\n                            if (actualfx.length == 0) {\r\n                              actualfx.push(budgetfxratesdisplay[f]);\r\n                            } else {\r\n                              for (let r = 0; r < actualfx.length; r++) {\r\n                                if (actualfx[r].fxpair == budgetfxratesdisplay[f].fxpair) {\r\n                                  break;\r\n                                } else if (r == actualfx.length - 1) {\r\n                                  actualfx.push(budgetfxratesdisplay[f]);\r\n                                }\r\n                              }\r\n                            }\r\n\r\n                            break;\r\n                          } else {\r\n                            fxrate = 1;\r\n                          }\r\n                        }\r\n                        if (budgetfxrates.length == 0) {\r\n                          fxrate = 1;\r\n                        }\r\n                        actdata.totalAmountMarginCurrency = actdata.totalAmount * fxrate;\r\n                        if (\r\n                          actdata.totalAmountMarginCurrency == -0 ||\r\n                          actdata.totalAmountMarginCurrency == '-0' ||\r\n                          (0 > actdata.totalAmountMarginCurrency && actdata.totalAmountMarginCurrency > -0.0099)\r\n                        ) {\r\n                          actdata.totalAmountMarginCurrency = 0;\r\n                        }\r\n                        var salesdateformatted = actdata['Sales GMR Date'].split('T')[0];\r\n                        var salesdateSplit = salesdateformatted.split('-');\r\n                        var salesdatetitle = salesdateSplit[2] + '-' + salesdateSplit[1] + '-' + salesdateSplit[0];\r\n\r\n                        //financing\r\n                        if (actdata['COST CLASS'] == 'Accrual' && actdata['Cost Category'] == 'Sales Material Cost') {\r\n                          actdata.financingdays = actdata['Payment Schedule Days'];\r\n                          var financingDate = addDays(\r\n                            new Date(actdata['Sales GMR Date'].split('T')[0]),\r\n                            actdata.financingdays\r\n                          );\r\n                          var financingDateSplit = financingDate.split('-');\r\n                          actdata.financingdate =\r\n                            financingDateSplit[2] + '-' + financingDateSplit[1] + '-' + financingDateSplit[0];\r\n                        } else if (actdata['COST CLASS'] == 'Accrual' && actdata['Cost Category'] == 'Secondary Cost') {\r\n                          for (var k = 0; k < bmlisitng.length; k++) {\r\n                            if (\r\n                              bmlisitng[k]['COST GROUP NAME'] == actdata['COST GROUP NAME'] &&\r\n                              bmlisitng[k]['COST COMPONENT NAME'] == actdata['COST COMPONENT NAME'] &&\r\n                              bmlisitng[k]['CP NAME'] == actdata['CP NAME']\r\n                            ) {\r\n                              actdata.financingdays = bmlisitng[k]['financingdays'];\r\n                              break;\r\n                            } else {\r\n                              actdata.financingdays = 35;\r\n                            }\r\n                          }\r\n                          var financingDate = addDays(\r\n                            new Date(actdata['Sales GMR Date'].split('T')[0]),\r\n                            actdata.financingdays\r\n                          );\r\n                          var financingDateSplit = financingDate.split('-');\r\n                          actdata.financingdate =\r\n                            financingDateSplit[2] + '-' + financingDateSplit[1] + '-' + financingDateSplit[0];\r\n                        } else {\r\n                          actdata.financingdays = datediff(\r\n                            actdata['Payment Due Payment Date'].split('T')[0],\r\n                            actdata['Sales GMR Date'].split('T')[0]\r\n                          );\r\n                          var findate = new Date(actdata['Payment Due Payment Date'].split('T')[0])\r\n                            .toISOString()\r\n                            .split('T')[0];\r\n                          var financingDateSplit = findate.split('-');\r\n                          actdata.financingdate =\r\n                            financingDateSplit[2] + '-' + financingDateSplit[1] + '-' + financingDateSplit[0];\r\n                        }\r\n\r\n                        if (actdata['Cost Category'] == 'Sales Material Cost') {\r\n                          actdata.paymentsplit = actdata['Payment Schedule Percentage'];\r\n                        } else {\r\n                          actdata.paymentsplit = 100;\r\n                        }\r\n                        actdata.unitprice = actdata['Contract Price'];\r\n                        if (actdata['Cost Category'] == 'Secondary Cost') {\r\n                          actdata.unitprice = '';\r\n                        }\r\n                        actdata['TITLE TRANSFER DATE'] = salesdatetitle;\r\n                        actdata.interest = response.viewmargin.interest;\r\n                        actdata.financing =\r\n                          (-1 *\r\n                            actdata.totalAmountMarginCurrency *\r\n                            // (actdata.paymentsplit / 100) *\r\n                            actdata.financingdays *\r\n                            (response.viewmargin.interest / 100)) /\r\n                          360;\r\n                        if (actdata.financing == -0) {\r\n                          actdata.financing = 0;\r\n                        }\r\n                        actdata.prodtotalAmtFdays = actdata.totalAmountMarginCurrency * actdata.financingdays;\r\n\r\n                        if (income.length == 0) {\r\n                          income.push(actdata);\r\n                        } else {\r\n                          for (let p = 0; p < income.length; p++) {\r\n                            if (\r\n                              actdata['Cost Category'] == 'Sales Material Cost' &&\r\n                              income[p]['COST GROUP NAME'] == actdata['COST GROUP NAME'] &&\r\n                              income[p]['REF NO INCOTERM'] == actdata['REF NO INCOTERM'] &&\r\n                              income[p]['COST COMPONENT NAME'] == actdata['COST COMPONENT NAME'] &&\r\n                              income[p]['CP NAME'] == actdata['CP NAME'] &&\r\n                              income[p]['financingdays'] == actdata['financingdays'] &&\r\n                              income[p]['financingDate'] == actdata['financingDate'] &&\r\n                              income[p]['COST CLASS'] == actdata['COST CLASS'] &&\r\n                              income[p]['paymentsplit'] == actdata['paymentsplit']\r\n                            ) {\r\n                              income[p]['totalAmountMarginCurrency'] =\r\n                                income[p]['totalAmountMarginCurrency'] + actdata['totalAmountMarginCurrency'];\r\n                              income[p]['totalAmount'] = income[p]['totalAmount'] + actdata['totalAmount'];\r\n                              break;\r\n                            } else if (\r\n                              actdata['Cost Category'] == 'Secondary Cost' &&\r\n                              income[p]['COST GROUP NAME'] == actdata['COST GROUP NAME'] &&\r\n                              income[p]['COST COMPONENT NAME'] == actdata['COST COMPONENT NAME'] &&\r\n                              income[p]['CP NAME'] == actdata['CP NAME'] &&\r\n                              income[p]['financingdays'] == actdata['financingdays'] &&\r\n                              income[p]['financingDate'] == actdata['financingDate'] &&\r\n                              income[p]['COST CLASS'] == actdata['COST CLASS'] &&\r\n                              income[p]['paymentsplit'] == actdata['paymentsplit']\r\n                            ) {\r\n                              income[p]['totalAmountMarginCurrency'] =\r\n                                income[p]['totalAmountMarginCurrency'] + actdata['totalAmountMarginCurrency'];\r\n                              income[p]['totalAmount'] = income[p]['totalAmount'] + actdata['totalAmount'];\r\n                              break;\r\n                            } else if (p == income.length - 1) {\r\n                              income.push(actdata);\r\n\r\n                              break;\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                    var expensepur = [];\r\n                    var purno = 0;\r\n                    for (let m = 0; m < expense.length; m++) {\r\n                      if (expense[m]['COST COMPONENT NAME'] == 'Purchase Material Cost') {\r\n                        expensepur[purno] = expense[m];\r\n                        purno++;\r\n                        expense.splice(m, 1);\r\n                      }\r\n                    }\r\n\r\n                    expense.sort(dynamicSort('COST GROUP NAME'));\r\n                    var result1costgroup = groupBy(expense, 'COST GROUP NAME');\r\n\r\n                    expense = [];\r\n                    for (var key in result1costgroup) {\r\n                      // o[key].sort(dynamicSort('COST COMPONENT NAME'))\r\n                      result1costgroup[key].sort(dynamicSort('REF NO INCOTERM'));\r\n                      // t[l] = groupBy(o[key], 'COST COMPONENT NAME');\r\n                      // l++;\r\n\r\n                      var result1refinco = groupBy(result1costgroup[key], 'REF NO INCOTERM');\r\n                      //console.log(t);\r\n\r\n                      for (var key2 in result1refinco) {\r\n                        result1refinco[key2].sort(dynamicSort('COST COMPONENT NAME'));\r\n                        var result1costname = groupBy(result1refinco[key2], 'COST COMPONENT NAME');\r\n                        for (var key3 in result1costname) {\r\n                          for (var key4 = 0; key4 < result1costname[key3].length; key4++) {\r\n                            expense.push(result1costname[key3][key4]);\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    //for purchase named expense\r\n                    expensepur.sort(dynamicSort('COST GROUP NAME'));\r\n                    var result1costgroup = groupBy(expensepur, 'COST GROUP NAME');\r\n\r\n                    expensepur = [];\r\n                    for (var key in result1costgroup) {\r\n                      // o[key].sort(dynamicSort('COST COMPONENT NAME'))\r\n                      result1costgroup[key].sort(dynamicSort('REF NO INCOTERM'));\r\n                      // t[l] = groupBy(o[key], 'COST COMPONENT NAME');\r\n                      // l++;\r\n\r\n                      var result1refinco = groupBy(result1costgroup[key], 'REF NO INCOTERM');\r\n                      //console.log(t);\r\n\r\n                      for (var key2 in result1refinco) {\r\n                        result1refinco[key2].sort(dynamicSort('COST COMPONENT NAME'));\r\n                        var result1costname = groupBy(result1refinco[key2], 'COST COMPONENT NAME');\r\n                        for (var key3 in result1costname) {\r\n                          for (var key4 = 0; key4 < result1costname[key3].length; key4++) {\r\n                            expensepur.push(result1costname[key3][key4]);\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    var expense3 = expensepur.concat(expense);\r\n                    expense = expense3;\r\n\r\n                    for (let countinc = 0; countinc < expense.length; countinc++) {\r\n                      if (expense[countinc]['COST GROUP NAME'] && countinc > 0) {\r\n                        if (!rowspan(expense[countinc - 1]['COST GROUP NAME'], expense[countinc]['COST GROUP NAME'])) {\r\n                          var sysstate;\r\n                          for (var x in expense[countinc]) {\r\n                            if (x != 'sys__state') {\r\n                              if (x == 'COST GROUP NAME') {\r\n                                sysstate = {\r\n                                  ...sysstate,\r\n                                  [x]: {\r\n                                    show: false,\r\n                                    disable: false\r\n                                  }\r\n                                };\r\n                              } else {\r\n                                sysstate = {\r\n                                  ...sysstate,\r\n                                  [x]: {\r\n                                    show: true,\r\n                                    disable: false\r\n                                  }\r\n                                };\r\n                              }\r\n                            }\r\n                          }\r\n\r\n                          expense[countinc].sys__state = sysstate;\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    var incomepur = [];\r\n                    var purno = 0;\r\n                    for (let m = 0; m < income.length; m++) {\r\n                      if (income[m]['COST COMPONENT NAME'] == 'Sales Material Cost') {\r\n                        incomepur[purno] = income[m];\r\n                        purno++;\r\n                        income.splice(m, 1);\r\n                      }\r\n                    }\r\n\r\n                    income.sort(dynamicSort('COST GROUP NAME'));\r\n                    var result5costgroup = groupBy(income, 'COST GROUP NAME');\r\n\r\n                    income = [];\r\n                    for (var key in result5costgroup) {\r\n                      // o[key].sort(dynamicSort('COST COMPONENT NAME'))\r\n                      result5costgroup[key].sort(dynamicSort('REF NO INCOTERM'));\r\n                      // t[l] = groupBy(o[key], 'COST COMPONENT NAME');\r\n                      // l++;\r\n\r\n                      var result5refinco = groupBy(result5costgroup[key], 'REF NO INCOTERM');\r\n                      // console.log(t);\r\n\r\n                      for (var key2 in result5refinco) {\r\n                        result5refinco[key2].sort(dynamicSort('COST COMPONENT NAME'));\r\n                        var result5costname = groupBy(result5refinco[key2], 'COST COMPONENT NAME');\r\n                        for (var key3 in result5costname) {\r\n                          for (var key4 = 0; key4 < result5costname[key3].length; key4++) {\r\n                            income.push(result5costname[key3][key4]);\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                    //for sorting income with sales\r\n                    incomepur.sort(dynamicSort('COST GROUP NAME'));\r\n                    var result5costgroup = groupBy(incomepur, 'COST GROUP NAME');\r\n\r\n                    incomepur = [];\r\n                    for (var key in result5costgroup) {\r\n                      // o[key].sort(dynamicSort('COST COMPONENT NAME'))\r\n                      result5costgroup[key].sort(dynamicSort('REF NO INCOTERM'));\r\n                      // t[l] = groupBy(o[key], 'COST COMPONENT NAME');\r\n                      // l++;\r\n\r\n                      var result5refinco = groupBy(result5costgroup[key], 'REF NO INCOTERM');\r\n                      // console.log(t);\r\n\r\n                      for (var key2 in result5refinco) {\r\n                        result5refinco[key2].sort(dynamicSort('COST COMPONENT NAME'));\r\n                        var result5costname = groupBy(result5refinco[key2], 'COST COMPONENT NAME');\r\n                        for (var key3 in result5costname) {\r\n                          for (var key4 = 0; key4 < result5costname[key3].length; key4++) {\r\n                            incomepur.push(result5costname[key3][key4]);\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    var income3 = incomepur.concat(income);\r\n                    income = income3;\r\n\r\n                    for (let countexp = 0; countexp < income.length; countexp++) {\r\n                      if (income[countexp]['COST GROUP NAME'] && countexp > 0) {\r\n                        if (!rowspan(income[countexp - 1]['COST GROUP NAME'], income[countexp]['COST GROUP NAME'])) {\r\n                          var sysstate;\r\n                          for (var x in income[countexp]) {\r\n                            if (x != 'sys__state') {\r\n                              if (x == 'COST GROUP NAME') {\r\n                                sysstate = {\r\n                                  ...sysstate,\r\n                                  [x]: {\r\n                                    show: false,\r\n                                    disable: false\r\n                                  }\r\n                                };\r\n                              } else {\r\n                                sysstate = {\r\n                                  ...sysstate,\r\n                                  [x]: {\r\n                                    show: true,\r\n                                    disable: false\r\n                                  }\r\n                                };\r\n                              }\r\n                            }\r\n                          }\r\n\r\n                          income[countexp].sys__state = sysstate;\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    response.listingactualmargin = [\r\n                      ...expense,\r\n                      {\r\n                        'COST GROUP NAME': 'Expense Total',\r\n                        financingdays: {\r\n                          disableEdit: true,\r\n                          value: 0,\r\n                          class: 'hideField'\r\n                        },\r\n                        prodtotalAmtFdays: {\r\n                          disableEdit: true,\r\n                          value: 0,\r\n                          class: 'hideField'\r\n                        },\r\n                        totalAmount: {\r\n                          disableEdit: true,\r\n                          value: 0,\r\n                          class: 'hideField'\r\n                        },\r\n                        totalAmountMarginCurrency: {\r\n                          value: 0,\r\n                          class: 'sumHighlightClass'\r\n                        },\r\n                        financing: {\r\n                          value: 0,\r\n                          class: 'sumHighlightClass'\r\n                        },\r\n                        __class: 'summary',\r\n                        sys__state: {\r\n                          totalAmount: {\r\n                            show: false,\r\n                            disable: false\r\n                          },\r\n                          'COST GROUP NAME': {\r\n                            show: true,\r\n                            disable: false\r\n                          },\r\n                          totalAmountMarginCurrency: {\r\n                            show: true,\r\n                            disable: false\r\n                          },\r\n                          financing: {\r\n                            show: true,\r\n                            disable: false\r\n                          },\r\n                          financingdays: {\r\n                            show: false,\r\n                            disable: false\r\n                          }\r\n                        }\r\n                      },\r\n                      ...income,\r\n                      {\r\n                        'COST GROUP NAME': 'Income Total',\r\n                        financingdays: {\r\n                          disableEdit: true,\r\n                          value: 0,\r\n                          class: 'hideField'\r\n                        },\r\n                        prodtotalAmtFdays: {\r\n                          disableEdit: true,\r\n                          value: 0,\r\n                          class: 'hideField'\r\n                        },\r\n                        totalAmountMarginCurrency: {\r\n                          value: 0,\r\n                          class: 'sumHighlightClass'\r\n                        },\r\n                        totalAmount: {\r\n                          disableEdit: true,\r\n                          value: 0,\r\n                          class: 'hideField'\r\n                        },\r\n                        financing: {\r\n                          value: 0,\r\n                          class: 'sumHighlightClass'\r\n                        },\r\n                        __class: 'summary',\r\n                        sys__state: {\r\n                          totalAmount: {\r\n                            show: false,\r\n                            disable: false\r\n                          },\r\n                          'COST GROUP NAME': {\r\n                            show: true,\r\n                            disable: false\r\n                          },\r\n                          totalAmountMarginCurrency: {\r\n                            show: true,\r\n                            disable: false\r\n                          },\r\n                          financing: {\r\n                            show: true,\r\n                            disable: false\r\n                          },\r\n                          financingdays: {\r\n                            show: false,\r\n                            disable: false\r\n                          }\r\n                        }\r\n                      }\r\n                    ];\r\n\r\n                    let sumexpenses = 0;\r\n                    let sumfinan = 0;\r\n                    var prodsumtf = 0;\r\n                    for (let i = 0; i < response.listingactualmargin.length; i++) {\r\n                      if (\r\n                        response.listingactualmargin[i]['COST GROUP NAME'] !== 'Expense Total' &&\r\n                        response.listingactualmargin[i]['COST GROUP NAME'] !== 'Income Total'\r\n                      ) {\r\n                        sumexpenses = sumexpenses + response.listingactualmargin[i].totalAmountMarginCurrency;\r\n                        sumfinan = sumfinan + response.listingactualmargin[i].financing;\r\n                      }\r\n                      if (response.listingactualmargin[i]['COST COMPONENT NAME'] == 'Material Cost') {\r\n                        prodsumtf = prodsumtf + response.listingactualmargin[i].prodtotalAmtFdays;\r\n                      }\r\n                      if (response.listingactualmargin[i]['COST GROUP NAME'] === 'Expense Total') {\r\n                        response.listingactualmargin[i].totalAmountMarginCurrency.value = sumexpenses;\r\n                        response.listingactualmargin[i].financing.value = sumfinan;\r\n                        response.listingactualmargin[i].prodtotalAmtFdays.value = prodsumtf;\r\n                        sumexpenses = 0;\r\n                        sumfinan = 0;\r\n                        prodsumtf = 0;\r\n                      }\r\n                      if (response.listingactualmargin[i]['COST GROUP NAME'] === 'Income Total') {\r\n                        response.listingactualmargin[i].totalAmountMarginCurrency.value = sumexpenses;\r\n\r\n                        response.listingactualmargin[i].financing.value = sumfinan;\r\n                        response.listingactualmargin[i].prodtotalAmtFdays.value = prodsumtf;\r\n                        sumexpenses = 0;\r\n                        sumfinan = 0;\r\n                        prodsumtf = 0;\r\n                      }\r\n                    }\r\n\r\n                    response.rates = actualfx;\r\n                    response.ratesinput = {\r\n                      fxrefno: ''\r\n                    };\r\n                    if (budgetmarginfiltered[0].margindata.ratesinput) {\r\n                      response.ratesinput.fxrefno = budgetmarginfiltered[0].margindata.ratesinput.fxrefno;\r\n                    } else {\r\n                      response.ratesinput.fxrefno = '';\r\n                    }\r\n                    response.saveflag = true;\r\n                    response.shares = {\r\n                      sharepercentage: {\r\n                        value: '',\r\n                        disable: true\r\n                      },\r\n                      shares: {\r\n                        value: '',\r\n                        disable: true\r\n                      },\r\n                      sharevalue: {\r\n                        value: '',\r\n                        disable: true\r\n                      }\r\n                    };\r\n         success(response,200);           \r\n                  }\r\n                }\r\n              })\r\n              .catch(err => {\r\n                console.log(err);\r\n                if (zeroactual) {\r\n         error('Zero data from AAPR',500);        \r\n                } else {\r\n            error('Unable to get data from AAPR',500);      \r\n                }\r\n              });\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n       error('Unable to get data from sales details',500);   \r\n          });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n    error('Unable to get data from Connect Data',500);   \r\n      });\r\n  ",
  "sys__UUID": "09a9da7a-dcd4-4360-b4d4-8d9f5d2295f9",
  "sys__createdOn": ISODate("2019-05-20T09:29:21.300Z"),
  "sys__createdBy": "Bravo"
}
