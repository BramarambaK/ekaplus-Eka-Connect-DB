{
    "_id" : ObjectId("5ce2737191dafcf120dcec01"),
    "name" : "compositeView",
    "type" : "processor",
    "refType" : "app",
    "version":"V2",
    "refTypeId" : "40a27e7f-3f50-406f-a872-2ee7d9436df9",
    "snippet" : "\r\n    var allocId;\r\n    var intcontrefnumber;\r\n    var prodspecs;\r\n    var contractitemnumber;\r\n    var margindata;\r\n    var margindataafterversion;\r\n    var flag;\r\n    var netqty;\r\n    var marginfinancingdays;\r\n    var personin;\r\n    var stat;\r\n    var fxr;\r\n    var missing;\r\n    var missing2;\r\n\r\n    if (req.body.selectedData['INT ALLOC GROUP ID']) {\r\n      allocId = req.body.selectedData['INT ALLOC GROUP ID'];\r\n      fxr = req.body.selectedData['fxrefno'];\r\n      intcontrefnumber = req.body.selectedData['INTERNAL CONTRACT REF NO'];\r\n      prodspecs = req.body.selectedData['PRODUCT SPECS'];\r\n      stat = req.body.selectedData['status'];\r\n      contractitemnumber = req.body.selectedData['CONTRACT ITEM NO'];\r\n      margindata = req.body.selectedData.margindata;\r\n      marginfinancingdays = req.body.selectedData.margindata;\r\n      margindataafterversion = req.body.selectedData.margindata;\r\n      netqty = req.body.selectedData['NET QTY'];\r\n      if (req.body.selectedData['PERSON INCHARGE']) {\r\n        personin = req.body.selectedData['PERSON INCHARGE'];\r\n      } else {\r\n        personin = '-';\r\n      }\r\n      if (req.body.selectedData.margindata) {\r\n        flag = false;\r\n      } else {\r\n        flag = true;\r\n      }\r\n    } else {\r\n      allocId = req.body.selectedData.querydata.allocGrpId;\r\n      personin = req.body.selectedData.querydata.personin;\r\n      fxr = req.body.selectedData.querydata.fxr;\r\n      stat = req.body.selectedData.querydata.stat;\r\n      intcontrefnumber = req.body.selectedData.querydata.intContractRefNo;\r\n      prodspecs = req.body.selectedData.querydata.prodspec;\r\n      contractitemnumber = req.body.selectedData.querydata.contractitemno;\r\n      flag = req.body.selectedData.flag;\r\n      margindata = req.body.selectedData;\r\n      marginfinancingdays = req.body.selectedData;\r\n      margindataafterversion = req.body.selectedData;\r\n      netqty = req.body.selectedData.querydata.netqty;\r\n    }\r\n    function dynamicSort(property) {\r\n      var sortOrder = 1;\r\n      if (property[0] === '-') {\r\n        sortOrder = -1;\r\n        property = property.substr(1);\r\n      }\r\n      return function(a, b) {\r\n        /* next line works with strings and numbers,\r\n         * and you may want to customize it to your needs\r\n         */\r\n        var result = a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;\r\n        return result * sortOrder;\r\n      };\r\n    }\r\n    function verifykeys(collectiondata, keys, collectionname) {\r\n      keys.forEach(element => {\r\n        if (collectiondata.hasOwnProperty(element)) {\r\n        } else {\r\n       error('Unable to get data from' + collectionname + 'column:' + element,500);\r\n        }\r\n      });\r\n    }\r\n\r\n    function groupBy(xs, prop) {\r\n      var grouped = {};\r\n      for (var i = 0; i < xs.length; i++) {\r\n        var p = xs[i][prop];\r\n        if (!grouped[p]) {\r\n          grouped[p] = [];\r\n        }\r\n        grouped[p].push(xs[i]);\r\n      }\r\n      return grouped;\r\n    }\r\n    var allocation_group_header = {\r\n      method: 'POST',\r\n      url:\r\n        req.body.propertyList.eka_connect_host +\r\n        '/collectionmapper/40a27e7f-3f50-406f-a872-2ee7d9436df9/3ef370f9-febe-41a0-8e43-4ef6ce769b3b/fetchMultiCollectionRecords',\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': req.headers['x-tenantid'],\r\n        'Content-Type': 'application/json',\r\n        'X-Remote-User': 'ekaApp',\r\n        ttl: 300\r\n      },\r\n      body: [\r\n        {\r\n          collectionName: 'AllocationGroupSalesDetails',\r\n          criteria: {\r\n            filter: [\r\n              {\r\n                fieldName: 'INT ALLOC GROUP ID',\r\n                value: allocId,\r\n                operator: 'eq'\r\n              },\r\n              {\r\n                fieldName: 'INTERNAL CONTRACT REF NO',\r\n                value: intcontrefnumber,\r\n                operator: 'eq'\r\n              },\r\n              {\r\n                fieldName: 'PRODUCT SPECS',\r\n                value: prodspecs,\r\n                operator: 'eq'\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      json: true\r\n    };\r\n\r\n    function get_header3() {\r\n      return new Promise(function(resolve, reject) {\r\n        // console.log('Request - ' + allocation_group_header.url);\r\n        request(allocation_group_header, function(err, response, body) {\r\n          // console.log('Response - header');\r\n          var l = Object.keys(body).length;\r\n\r\n          if (l !== 1) {\r\n            // res.status(500).send('Unable to get data from allocation header');\r\n            console.log('Unable to get data from allocation sales details');\r\n            //error('Unable to get data from allocation header', 500);\r\n            reject(body);\r\n          } else {\r\n            //  console.log('Success header');\r\n            resolve(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    function addDays(myDate, days) {\r\n      // if (myDate.toISOString()) {\r\n      //   myDate = myDate.toISOString().split('T')[0];\r\n      // }\r\n      return new Date(myDate.getTime() + days * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\r\n    }\r\n    function rowspan(past, current) {\r\n      return past == current ? false : true;\r\n    }\r\n\r\n    var result = [];\r\n    var interestall = [];\r\n    var fxratesall = [];\r\n    var defaultMargin = [];\r\n    var financingDaysfromplatform = [];\r\n    var paymentdata = [];\r\n    var salesdetailsdata = [];\r\n    var collectiontime = 0;\r\n    var compositetime = 0;\r\n    function composite() {\r\n      var keys = [\r\n        'LATEST SHIPMENT DATE',\r\n        'ITEM PRICE',\r\n        'CONTRACT ITEM NO',\r\n        'ALLOCATION GROUP NO',\r\n        'PRODUCT SPECS',\r\n        'TRADER NAME',\r\n        'PRODUCT DESC'\r\n      ];\r\n      if (result[0].data.length != 0) {\r\n        verifykeys(result[0].data[0], keys, 'Allocation Header');\r\n      }\r\n      var keys = [\r\n        'Contract Type',\r\n        'Contract Price Unit',\r\n        'Contract Value By Payment Sc',\r\n        'Credit Days',\r\n        'Payment Type'\r\n      ];\r\n      if (paymentdata[0].data.length != 0) {\r\n        paymentdata[0].data.forEach(element => {\r\n          verifykeys(element, keys, 'Payment Split');\r\n        });\r\n      }\r\n\r\n      // timeInMss2 = new Date().getTime();\r\n\r\n      // collectiontime = collectiontime + timeInMss2 - timeInMss1;\r\n      // console.log('Payment split collection ' + (timeInMss2 - timeInMss1) / 1000 + 's');\r\n      // timeInMss1 = new Date().getTime();\r\n\r\n      var keys = ['INCOME EXPENSE', 'UNIT VALUE', 'COST VALUE'];\r\n      if (result[2].data.length != 0) {\r\n        result[2].data.forEach(element => {\r\n          verifykeys(element, keys, 'Purchase Estimates');\r\n        });\r\n      }\r\n      if (result[3].data.length != 0) {\r\n        var keys = ['INCOME EXPENSE', 'UNIT VALUE', 'COST VALUE'];\r\n        result[3].data.forEach(element => {\r\n          verifykeys(element, keys, 'Sales Estimates');\r\n        });\r\n      }\r\n      result[1] = {\r\n        data: []\r\n      };\r\n      salesdetailsdata[0] = {\r\n        data: []\r\n      };\r\n\r\n      //Error handling\r\n      if (result[0].data.length == 0) {\r\n     error('Zero records from Allocation Header',500);   \r\n        console.log(\r\n          'Unable to get data from Allocation Header' +\r\n            'Alloc id ' +\r\n            allocId +\r\n            ' Int contract number ' +\r\n            intcontrefnumber +\r\n            ' Product Spec ' +\r\n            prodspecs\r\n        );\r\n      } else if (paymentdata[0].data.length == 0) {\r\n      error('Zero records from Payment Split',500);  \r\n        console.log(\r\n          'Unable to get data from Payment Split' +\r\n            'Alloc id ' +\r\n            allocId +\r\n            ' Int contract number ' +\r\n            intcontrefnumber +\r\n            ' Product Spec ' +\r\n            prodspecs\r\n        );\r\n      } else if (result[3].data.error) {\r\n      error('Zero records from Sales Estimates',500); \r\n        console.log(\r\n          'Unable to get data from Sales Estimates' +\r\n            'Alloc id ' +\r\n            allocId +\r\n            ' Int contract number ' +\r\n            intcontrefnumber +\r\n            ' Product Spec ' +\r\n            prodspecs\r\n        );\r\n      } else if (result[2].data.error) {\r\n         error('Zero records from Purchase Estimates',500);\r\n        console.log(\r\n          'Unable to get data from Purchase Estimates' +\r\n            'Alloc id ' +\r\n            allocId +\r\n            ' Int contract number ' +\r\n            intcontrefnumber +\r\n            ' Product Spec ' +\r\n            prodspecs\r\n        );\r\n      } else if (defaultMargin[0].data.length == 0) {\r\n error('Zero records from Default Margin',500);       \r\n        console.log(\r\n          'Unable to get data from Default Margin' +\r\n            'Alloc id ' +\r\n            allocId +\r\n            ' Int contract number ' +\r\n            intcontrefnumber +\r\n            ' Product Spec ' +\r\n            prodspecs\r\n        );\r\n      } else if (interestall[0].data.length == 0) {\r\n      error('Zero records from Interest',500);  \r\n        console.log(\r\n          'Unable to get data from Interest' +\r\n            'Alloc id ' +\r\n            allocId +\r\n            ' Int contract number ' +\r\n            intcontrefnumber +\r\n            ' Product Spec ' +\r\n            prodspecs\r\n        );\r\n      } else if (financingDaysfromplatform[0].data.length == 0) {\r\n    error('Zero records from Financing Days',500);    \r\n        console.log(\r\n          'Unable to get data from Financing Days' +\r\n            'Alloc id ' +\r\n            allocId +\r\n            ' Int contract number ' +\r\n            intcontrefnumber +\r\n            ' Product Spec ' +\r\n            prodspecs\r\n        );\r\n      } else if (fxratesall[0].data.length == 0) {\r\n       error('Zero records from Fx rates',500); \r\n        console.log(\r\n          'Unable to get data from Fx rates' +\r\n            'Alloc id ' +\r\n            allocId +\r\n            ' Int contract number ' +\r\n            intcontrefnumber +\r\n            ' Product Spec ' +\r\n            prodspecs\r\n        );\r\n      } else {\r\n        for (let i = 0; i < paymentdata[0].data.length; i++) {\r\n          if (paymentdata[0].data[i]['Contract Type'] == 'P') {\r\n            result[1].data.push(paymentdata[0].data[i]);\r\n          } else if (paymentdata[0].data[i]['Contract Type'] == 'S') {\r\n            salesdetailsdata[0].data.push(paymentdata[0].data[i]);\r\n          }\r\n        }\r\n        // console.log(result);\r\n        //interest rates edit enable or disable call\r\n\r\n        var response = {\r\n          viewmarginInterestEdit: {},\r\n          viewmargin: {},\r\n          listingmargin: [],\r\n          tradeMargin: {},\r\n          shares: {},\r\n          rates: {},\r\n          remark: {}\r\n        };\r\n        //result[0] = JSON.parse(result[0]);\r\n        // result[1] = JSON.parse(result[1]);\r\n\r\n        // result[2] = JSON.parse(result[2]);\r\n        // result[3] = JSON.parse(result[3]);\r\n        var keyVals = req.body.propertyList.margin_collection_object_column_mapping;\r\n        var collection = JSON.stringify(result);\r\n\r\n        var connectKeys = Object.keys(keyVals);\r\n\r\n        for (var i = 0; i < connectKeys.length; i++) {\r\n          collection = collection.split(keyVals[connectKeys[i]]).join(connectKeys[i]);\r\n        }\r\n        result = JSON.parse(collection);\r\n\r\n        result[4] = financingDaysfromplatform[0];\r\n\r\n        var interestratesreq;\r\n        for (var y = 0; y < interestall[0].data.length; y++) {\r\n          var interestratesreq;\r\n          interestratesreq = {\r\n            ...interestratesreq,\r\n            [interestall[0].data[y].Currency]: {\r\n              value: interestall[0].data[y]['Interest Rate'],\r\n              priority: interestall[0].data[y]['Priority']\r\n            }\r\n          };\r\n        }\r\n        console.log('interest rates generated' + interestratesreq);\r\n\r\n        let myDate = new Date(result[0].data[0]['LATEST SHIPMENT DATE']);\r\n        for (var d = 1; d < result[0].data.length; d++) {\r\n          if (myDate > new Date(result[0].data[d]['LATEST SHIPMENT DATE'])) {\r\n            myDate = new Date(result[0].data[d]['LATEST SHIPMENT DATE']);\r\n          }\r\n        }\r\n        // let myDate = new Date(result[1].data[0]['Payment Due Date']);\r\n        let date = myDate.toISOString().split('T')[0];\r\n        let date1 = date.split('-');\r\n        var interestvalueextracted;\r\n        var interest;\r\n        var interestprev;\r\n        var fxrate;\r\n        var fxratedisplay;\r\n        var fxrateprev;\r\n        if (result[2].data.length != 0) {\r\n          for (var i = 0; i < result[2].data.length; i++) {\r\n            if (result[2].data[i]['INCOME EXPENSE'] != 'Expense') {\r\n              result[3].data.push(result[2].data[i]);\r\n              result[2].data.splice(i, 1);\r\n              i = i - 1;\r\n            }\r\n          }\r\n        }\r\n        if (result[3].data.length != 0) {\r\n          for (var i = 0; i < result[3].data.length; i++) {\r\n            if (result[3].data[i]['INCOME EXPENSE'] == 'Expense') {\r\n              result[2].data.push(result[3].data[i]);\r\n              result[3].data.splice(i, 1);\r\n              i = i - 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < result[1].data.length; i++) {\r\n          var units = result[1].data[i]['Contract Price Unit'];\r\n          result[1].data[i].unitprice = result[1].data[i]['Contract Price'];\r\n          result[1].data[i].costUom = units;\r\n          result[1].data[i].totalAmount = -1 * parseFloat(result[1].data[i]['Contract Value By Payment Sc']);\r\n          result[1].data[i].interestvalueextracted = units.split('/')[0];\r\n        }\r\n        if (result[3].data.length != 0) {\r\n          for (let i = 0; i < result[3].data.length; i++) {\r\n            var units = result[3].data[i]['UNIT VALUE'].split(' ')[1];\r\n            result[3].data[i].unitprice = result[3].data[i]['UNIT VALUE'].split(' ')[0];\r\n            result[3].data[i].costUom = units;\r\n            result[3].data[i].totalAmount = parseFloat(result[3].data[i]['COST VALUE'].split(' ')[0]);\r\n            result[3].data[i].interestvalueextracted = units.split('/')[0];\r\n          }\r\n        }\r\n        if (result[2].data.length != 0) {\r\n          for (let i = 0; i < result[2].data.length; i++) {\r\n            var units = result[2].data[i]['UNIT VALUE'].split(' ')[1];\r\n            result[2].data[i].unitprice = result[2].data[i]['UNIT VALUE'].split(' ')[0];\r\n            result[2].data[i].costUom = units;\r\n            result[2].data[i].totalAmount = parseFloat(result[2].data[i]['COST VALUE'].split(' ')[0]);\r\n            result[2].data[i].interestvalueextracted = units.split('/')[0];\r\n          }\r\n        }\r\n        // result[5]={\r\n        //   data:[\r\n        //   interestvalueextracted:result[3].data[0].costUom\r\n        //   ]\r\n        // }\r\n        result[6] = {\r\n          data: []\r\n        };\r\n        result[6].data = [\r\n          {\r\n            interestvalueextracted: salesdetailsdata[0].data[0]['Contract Price Unit'].split('/')[0]\r\n          }\r\n        ];\r\n        console.log(\r\n          'Result[0]-Allocation header;Result[1]-Purchase Contract;Result[2]-purchase estimates;Result[3]-Sales Estimate;Result[4]-Financing days;Result[5]-Sales Contract'\r\n        );\r\n\r\n        //for expense check\r\n\r\n        //For Interest Rate\r\n        //if currency is equal for both purchase and sales\r\n        if (margindata) {\r\n          interest = margindataafterversion.viewmarginInterestEdit.interest;\r\n        } else {\r\n          if (result[1].data.length == 1) {\r\n            //if sales data is not coming\r\n            if (result[6].data.length == 0) {\r\n              if (interestratesreq.hasOwnProperty(result[1].data[0].interestvalueextracted)) {\r\n                interest = interestratesreq[result[1].data[0].interestvalueextracted].value;\r\n              } else {\r\n                //if currency not found in properties\r\n                for (var key in interestratesreq) {\r\n                  if (interestratesreq[key].priority == 1) {\r\n                    interest = interestratesreq[key].value;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n            } else if (result[1].data[0].interestvalueextracted == result[6].data[0].interestvalueextracted) {\r\n              if (interestratesreq.hasOwnProperty(result[1].data[0].interestvalueextracted)) {\r\n                interest = interestratesreq[result[1].data[0].interestvalueextracted].value;\r\n              } else {\r\n                //if currency not found in properties\r\n                for (var key in interestratesreq) {\r\n                  if (interestratesreq[key].priority == 1) {\r\n                    interest = interestratesreq[key].value;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            //if currency is not equal for both purchase and sales\r\n            else if (result[1].data[0].interestvalueextracted != result[6].data[0].interestvalueextracted) {\r\n              //if both currency are different and present in properties\r\n              if (\r\n                interestratesreq.hasOwnProperty(result[1].data[0].interestvalueextracted) &&\r\n                interestratesreq.hasOwnProperty(result[6].data[0].interestvalueextracted)\r\n              ) {\r\n                if (\r\n                  interestratesreq[result[1].data[0].interestvalueextracted].priority <\r\n                  interestratesreq[result[6].data[0].interestvalueextracted].priority\r\n                ) {\r\n                  interest = interestratesreq[result[1].data[0].interestvalueextracted].value;\r\n                } else {\r\n                  interest = interestratesreq[result[6].data[0].interestvalueextracted].value;\r\n                }\r\n              }\r\n              //if either currency is present in properties\r\n              else if (interestratesreq.hasOwnProperty(result[1].data[0].interestvalueextracted)) {\r\n                interest = interestratesreq[result[1].data[0].interestvalueextracted].value;\r\n              } else if (interestratesreq.hasOwnProperty(result[6].data[0].interestvalueextracted)) {\r\n                interest = interestratesreq[result[6].data[0].interestvalueextracted].value;\r\n              } else {\r\n                //if currency not found in properties\r\n                for (var key in interestratesreq) {\r\n                  if (interestratesreq[key].priority == 1) {\r\n                    interest = interestratesreq[key].value;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else if (result[1].data.length != 1) {\r\n            //if currency is not equal for both purchase and sales and more than one in purchase\r\n            var count = 0;\r\n            //for purchase contract\r\n            for (let i = 0; i < result[1].data.length; i++) {\r\n              if (interestratesreq.hasOwnProperty(result[1].data[i].interestvalueextracted) && count == 0) {\r\n                interestprev = interestratesreq[result[1].data[i].interestvalueextracted];\r\n                count = 1;\r\n              }\r\n              if (interestratesreq.hasOwnProperty(result[1].data[i].interestvalueextracted) && count == 1) {\r\n                if (interestratesreq[result[1].data[i].interestvalueextracted].priority < interestprev.priority) {\r\n                  interest = interestratesreq[result[1].data[i].interestvalueextracted].value;\r\n                  interestprev = interestratesreq[result[1].data[i].interestvalueextracted];\r\n                } else {\r\n                  interest = interestprev.value;\r\n                }\r\n              }\r\n            }\r\n            //for sales contract\r\n            if (result[6].data.length != 0) {\r\n              if (interestratesreq.hasOwnProperty(result[6].data[0].interestvalueextracted) && count == 1) {\r\n                if (interestratesreq[result[6].data[0].interestvalueextracted].priority < interestprev.priority) {\r\n                  interest = interestratesreq[result[6].data[0].interestvalueextracted].value;\r\n                  interestprev = interestratesreq[result[6].data[0].interestvalueextracted];\r\n                } else {\r\n                  interest = interestprev.value;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        //forFXRATE\r\n\r\n        for (let i = 0; i < result[1].data.length; i++) {\r\n          var units = result[1].data[i]['Contract Price Unit'];\r\n\r\n          result[1].data[i].fxratevalueextracted = units.split('/')[0];\r\n          //console.log(result[1].data[i].fxratevalueextracted);\r\n        }\r\n\r\n        if (result[3].data.length != 0) {\r\n          for (let i = 0; i < result[3].data.length; i++) {\r\n            var units = result[3].data[i]['UNIT VALUE'].split(' ')[1];\r\n            result[3].data[i].fxratevalueextracted = units.split('/')[0];\r\n            //console.log(result[3].data[i].fxratevalueextracted);\r\n          }\r\n        }\r\n\r\n        var margincurr;\r\n        var unitsviewMargin = result[0].data[0]['ITEM PRICE'].split(' ')[1];\r\n        result[0].data[0].unitprice = result[0].data[0]['ITEM PRICE'].split(' ')[0];\r\n        result[0].data[0].costUom = unitsviewMargin;\r\n        result[0].data[0].margincurr = unitsviewMargin.split('/')[0];\r\n        // FXRATE\r\n        response.viewmargin = {\r\n          salesContractItemRefNo: result[0].data[0]['CONTRACT ITEM NO'],\r\n          allocGrpName: result[0].data[0]['ALLOCATION GROUP NO'],\r\n          quantity: netqty,\r\n          product: result[0].data[0]['PRODUCT SPECS'],\r\n          quantityUnitUOM: result[0].data[0]['quantityUnitUOM'],\r\n          traderName: result[0].data[0]['TRADER NAME'],\r\n          personIncharge: personin,\r\n          shipmentFromDate: date1[2] + '-' + date1[1] + '-' + date1[0],\r\n          contractValueUOM: 'EUR',\r\n          finalCustomer: 'N/A',\r\n          titleTransferDate: 'N/A',\r\n          interest: interest,\r\n          //fxrate: fxrate,\r\n          status: stat\r\n        };\r\n        //   if (!rolesvar) {\r\n        //     response.viewmargin.interest = { value: interest, disable: true };\r\n        //   } else {\r\n        //     response.viewmargin.interest = { value: interest, disable: false };\r\n        //   }\r\n\r\n        var fxratecolumn = [];\r\n        var fxratecolumndisplay = [];\r\n\r\n        var fxratecount = 0;\r\n\r\n        var listingnumber = 0;\r\n\r\n        let financingDays;\r\n        for (let i = 0; i < result[1].data.length; i++) {\r\n          if (result[1].data[i].hasOwnProperty('Adjusted Payment Percentage')) {\r\n            result[1].data[i].paymentsplit = result[1].data[i]['Adjusted Payment Percentage'];\r\n          } else {\r\n            result[1].data[i].paymentsplit = 100;\r\n          }\r\n          var countfxcol = 0;\r\n\r\n          fxrate = '';\r\n          //fxrates\r\n          if (margindataafterversion) {\r\n            for (var k = 0; k < margindataafterversion.rates.length; k++) {\r\n              if (\r\n                margindataafterversion.rates[k].fxpair.split('-')[0] == result[1].data[i].interestvalueextracted &&\r\n                margindataafterversion.rates[k].fxpair.split('-')[1] == response.viewmargin.contractValueUOM\r\n              ) {\r\n                fxrate = margindataafterversion.rates[k].fxvalue;\r\n\r\n                fxratecolumn[fxratecount] =\r\n                  margindataafterversion.rates[k].fxpair.split('-')[0] +\r\n                  '-' +\r\n                  margindataafterversion.rates[k].fxpair.split('-')[1] +\r\n                  ':' +\r\n                  fxrate;\r\n                fxratecount++;\r\n\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          if (fxrate == '') {\r\n            for (var k = 0; k < fxratesall[0].data.length; k++) {\r\n              if (\r\n                fxratesall[0].data[k].From == result[1].data[i].interestvalueextracted &&\r\n                fxratesall[0].data[k].To == response.viewmargin.contractValueUOM\r\n              ) {\r\n                fxrate = fxratesall[0].data[k].Rate;\r\n\r\n                fxratecolumn[fxratecount] = fxratesall[0].data[k].From + '-' + fxratesall[0].data[k].To + ':' + fxrate;\r\n                fxratecount++;\r\n\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          if (fxrate == '') {\r\n            for (var k = 0; k < fxratesall[0].data.length; k++) {\r\n              if (\r\n                fxratesall[0].data[k].From == response.viewmargin.contractValueUOM &&\r\n                fxratesall[0].data[k].To == result[1].data[i].interestvalueextracted\r\n              ) {\r\n                fxrate = 1 / fxratesall[0].data[k].Rate;\r\n                fxrate = fxrate.toFixed(6);\r\n\r\n                fxratecolumn[fxratecount] = fxratesall[0].data[k].To + '-' + fxratesall[0].data[k].From + ':' + fxrate;\r\n                fxratecount++;\r\n\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          if (fxrate == '') {\r\n            fxrate = 1;\r\n          }\r\n\r\n          result[1].data[i]['COST GROUP NAME'] = 'Purchase Contract';\r\n\r\n          result[1].data[i]['COST COMPONENT NAME'] = 'Purchase Material Cost';\r\n          result[1].data[i]['REF NO INCOTERM'] = result[1].data[i]['REF NO INCOTERM'];\r\n\r\n          //result[1].data[i].totalAmount = -result[1].data[i].contractValue;\r\n          result[1].data[i].fxrate = fxrate;\r\n          result[1].data[i].totalAmountMarginCurrency = result[1].data[i].totalAmount * result[1].data[i].fxrate;\r\n          result[1].data[i].shipmentFromDate = myDate;\r\n          result[1].data[i].paymentterm = result[1].data[i]['Payment Term'];\r\n          result[1].data[i].interest = response.viewmargin.interest;\r\n          var financingfromcollection = true;\r\n\r\n          if (margindata) {\r\n            for (var num = 0; num < margindataafterversion.listingmargin.length; num++) {\r\n              if (\r\n                margindataafterversion.listingmargin[num]['COST GROUP NAME'] != 'Expense Total' ||\r\n                margindataafterversion.listingmargin[num]['COST GROUP NAME'] != 'Income Total'\r\n              ) {\r\n                if (\r\n                  margindataafterversion.listingmargin[num]['COST GROUP NAME'] ==\r\n                    result[1].data[i]['COST GROUP NAME'] &&\r\n                  margindataafterversion.listingmargin[num]['COST COMPONENT NAME'] ==\r\n                    result[1].data[i]['COST COMPONENT NAME'] &&\r\n                  margindataafterversion.listingmargin[num]['REF NO INCOTERM'] == result[1].data[i]['REF NO INCOTERM']\r\n                ) {\r\n                  result[1].data[i].financingdays = margindataafterversion.listingmargin[num].financingdays;\r\n                  financingfromcollection = false;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            listingnumber++;\r\n          }\r\n          if (financingfromcollection) {\r\n            if (result[1].data[i]['Payment Type'] == 'Prepayment') {\r\n              result[1].data[i].financingdays = -1 * result[1].data[i]['Credit Days'];\r\n            } else {\r\n              result[1].data[i].financingdays = result[1].data[i]['Credit Days'];\r\n            }\r\n          }\r\n\r\n          var financingDate = addDays(myDate, result[1].data[i].financingdays);\r\n          var financingDateSplit = financingDate.split('-');\r\n          result[1].data[i]['counterPartyName'] = result[1].data[i]['counterpartyName'];\r\n          result[1].data[i]['costComponentName'] = '-';\r\n          result[1].data[i].financing =\r\n            (-1 *\r\n              result[1].data[i].totalAmountMarginCurrency *\r\n              result[1].data[i].financingdays *\r\n              (response.viewmargin.interest / 100)) /\r\n            360;\r\n          if (result[1].data[i].financing == -0) {\r\n            result[1].data[i].financing = 0;\r\n          }\r\n          result[1].data[i].prodtotalAmtFdays =\r\n            result[1].data[i].totalAmountMarginCurrency * result[1].data[i].financingdays;\r\n          result[1].data[i].financingdate =\r\n            financingDateSplit[2] + '-' + financingDateSplit[1] + '-' + financingDateSplit[0];\r\n        }\r\n        result[1].data.sort(dynamicSort('COST GROUP NAME'));\r\n        var result1costgroup = groupBy(result[1].data, 'COST GROUP NAME');\r\n\r\n        result[1].data = [];\r\n        for (var key in result1costgroup) {\r\n          result1costgroup[key].sort(dynamicSort('REF NO INCOTERM'));\r\n          var result1refinco = groupBy(result1costgroup[key], 'REF NO INCOTERM');\r\n          for (var key2 in result1refinco) {\r\n            result1refinco[key2].sort(dynamicSort('COST COMPONENT NAME'));\r\n            var result1costname = groupBy(result1refinco[key2], 'COST COMPONENT NAME');\r\n            for (var key3 in result1costname) {\r\n              for (var key4 = 0; key4 < result1costname[key3].length; key4++) {\r\n                result[1].data.push(result1costname[key3][key4]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < result[1].data.length; i++) {\r\n          if (result[1].data[i]['COST GROUP NAME'] && i > 0) {\r\n            if (!rowspan(result[1].data[i - 1]['COST GROUP NAME'], result[1].data[i]['COST GROUP NAME'])) {\r\n              var sysstate;\r\n              for (var x in result[1].data[i]) {\r\n                if (x != 'sys__state') {\r\n                  if (x == 'COST GROUP NAME') {\r\n                    sysstate = {\r\n                      ...sysstate,\r\n                      [x]: {\r\n                        show: false,\r\n                        disable: false\r\n                      }\r\n                    };\r\n                  } else {\r\n                    sysstate = {\r\n                      ...sysstate,\r\n                      [x]: {\r\n                        show: true,\r\n                        disable: false\r\n                      }\r\n                    };\r\n                  }\r\n                }\r\n              }\r\n\r\n              result[1].data[i].sys__state = sysstate;\r\n            }\r\n          }\r\n        }\r\n        // result[2].data = [];\r\n\r\n        if (result[2].data.length != 0) {\r\n          for (let i = 0; i < result[2].data.length; i++) {\r\n            if (result[2].data[i].paymentsplit) {\r\n              result[2].data[i].paymentsplit = result[2].data[i].paymentsplit;\r\n            } else {\r\n              result[2].data[i].paymentsplit = 100;\r\n            }\r\n            //result[2].data[i].interestvalueextracted = units.split('/')[0];\r\n\r\n            // for (var k = 0; k < fxratesall[0].data.length; k++) {\r\n            //   if (fxratesall[0].data[k].From == result[2].data[i].interestvalueextracted) {\r\n            //     if (fxratesall[0].data[k].To == response.viewmargin.contractValueUOM) {\r\n            //       fxrate = fxratesall[0].data[k].Rate;\r\n            //     }\r\n            //   } else if (k == fxratesall[0].data.length - 1) {\r\n            //     fxrate = 1;\r\n            //   }\r\n            // }\r\n            countfxcol = 0;\r\n            fxrate = '';\r\n            if (margindataafterversion) {\r\n              for (var k = 0; k < margindataafterversion.rates.length; k++) {\r\n                if (\r\n                  margindataafterversion.rates[k].fxpair.split('-')[0] == result[2].data[i].interestvalueextracted &&\r\n                  margindataafterversion.rates[k].fxpair.split('-')[1] == response.viewmargin.contractValueUOM\r\n                ) {\r\n                  fxrate = margindataafterversion.rates[k].fxvalue;\r\n\r\n                  fxratecolumn[fxratecount] =\r\n                    margindataafterversion.rates[k].fxpair.split('-')[0] +\r\n                    '-' +\r\n                    margindataafterversion.rates[k].fxpair.split('-')[1] +\r\n                    ':' +\r\n                    fxrate;\r\n                  fxratecount++;\r\n\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            if (fxrate == '') {\r\n              for (var k = 0; k < fxratesall[0].data.length; k++) {\r\n                if (\r\n                  fxratesall[0].data[k].From == result[2].data[i].interestvalueextracted &&\r\n                  fxratesall[0].data[k].To == response.viewmargin.contractValueUOM\r\n                ) {\r\n                  fxrate = fxratesall[0].data[k].Rate;\r\n\r\n                  fxratecolumn[fxratecount] =\r\n                    fxratesall[0].data[k].From + '-' + fxratesall[0].data[k].To + ':' + fxrate;\r\n                  fxratecount++;\r\n\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            if (fxrate == '') {\r\n              for (var k = 0; k < fxratesall[0].data.length; k++) {\r\n                if (\r\n                  fxratesall[0].data[k].From == response.viewmargin.contractValueUOM &&\r\n                  fxratesall[0].data[k].To == result[2].data[i].interestvalueextracted\r\n                ) {\r\n                  fxrate = 1 / fxratesall[0].data[k].Rate;\r\n                  fxrate = fxrate.toFixed(6);\r\n\r\n                  fxratecolumn[fxratecount] =\r\n                    fxratesall[0].data[k].To + '-' + fxratesall[0].data[k].From + ':' + fxrate;\r\n                  fxratecount++;\r\n\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            if (fxrate == '') {\r\n              fxrate = 1;\r\n            }\r\n\r\n            result[2].data[i].unitprice = result[2].data[i]['UNIT VALUE'].split(' ')[0];\r\n            result[2].data[i].costUom = result[2].data[i]['UNIT VALUE'].split(' ')[1];\r\n            result[2].data[i].totalAmount = -1 * parseFloat(result[2].data[i]['COST VALUE'].split(' ')[0]);\r\n\r\n            result[2].data[i]['REF NO INCOTERM'] = result[2].data[i]['CONTRACT ITEM REF NO'];\r\n            result[2].data[i].paymentterm = result[2].data[i]['Payment Term'];\r\n            result[2].data[i].shipmentFromDate = myDate;\r\n            result[2].data[i].interest = response.viewmargin.interest;\r\n            result[2].data[i].fxrate = fxrate;\r\n            financingfromcollection = true;\r\n            if (marginfinancingdays) {\r\n              for (var num = 0; num < marginfinancingdays.listingmargin.length; num++) {\r\n                if (\r\n                  marginfinancingdays.listingmargin[num]['COST GROUP NAME'] != 'Expense Total' ||\r\n                  marginfinancingdays.listingmargin[num]['COST GROUP NAME'] != 'Income Total'\r\n                ) {\r\n                  if (\r\n                    marginfinancingdays.listingmargin[num]['COST GROUP NAME'] == result[2].data[i]['COST GROUP NAME'] &&\r\n                    marginfinancingdays.listingmargin[num]['COST COMPONENT NAME'] ==\r\n                      result[2].data[i]['COST COMPONENT NAME'] &&\r\n                    marginfinancingdays.listingmargin[num]['REF NO INCOTERM'] == result[2].data[i]['REF NO INCOTERM']\r\n                  ) {\r\n                    financingDays = marginfinancingdays.listingmargin[num].financingdays;\r\n                    financingfromcollection = false;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n              listingnumber++;\r\n            }\r\n            if (financingfromcollection) {\r\n              if (result[2].data[i]['COST GROUP NAME'] == 'Financing Cost') {\r\n                financingDays = 0;\r\n              } else {\r\n                for (let j = 0; j < result[4].data.length; j++) {\r\n                  if (\r\n                    result[4].data[j]['Counterparty'] === result[2].data[i]['CP NAME'] &&\r\n                    result[4].data[j]['Cost Component Name'] != result[2].data[i]['COST COMPONENT NAME'] &&\r\n                    result[4].data[j]['Financing Days'] != undefined\r\n                  ) {\r\n                    financingDays = result[4].data[j]['Financing Days'];\r\n                    break;\r\n                  } else if (\r\n                    result[4].data[j]['Counterparty'] === result[2].data[i]['CP NAME'] &&\r\n                    result[4].data[j]['Cost Component Name'] === result[2].data[i]['COST COMPONENT NAME'] &&\r\n                    result[4].data[j]['Financing Days'] != undefined\r\n                  ) {\r\n                    financingDays = result[4].data[j]['Financing Days'];\r\n                    break;\r\n                  } else if (\r\n                    result[4].data[j]['Cost Component Name'] === result[2].data[i]['COST COMPONENT NAME'] &&\r\n                    result[4].data[j]['Counterparty'] != result[2].data[i]['CP NAME'] &&\r\n                    result[4].data[j]['Financing Days'] != undefined\r\n                  ) {\r\n                    financingDays = result[4].data[j]['Financing Days'];\r\n                    break;\r\n                  } else {\r\n                    financingDays = defaultMargin[0].data[2].Value;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            result[2].data[i].financingdays = parseInt(financingDays);\r\n            var financingDate = addDays(myDate, result[2].data[i].financingdays);\r\n            var financingDateSplit = financingDate.split('-');\r\n            //result[2].data[i].totalAmount = -result[2].data[i].apportionedCostAmount;\r\n            result[2].data[i].totalAmountMarginCurrency = result[2].data[i].totalAmount * result[2].data[i].fxrate;\r\n            result[2].data[i].financing =\r\n              (-1 *\r\n                result[2].data[i].totalAmountMarginCurrency *\r\n                result[2].data[i].financingdays *\r\n                (response.viewmargin.interest / 100)) /\r\n              360;\r\n            if (result[2].data[i].financing == -0) {\r\n              result[2].data[i].financing = 0;\r\n            }\r\n            result[2].data[i].prodtotalAmtFdays =\r\n              result[2].data[i].totalAmountMarginCurrency * result[2].data[i].financingdays;\r\n            result[2].data[i].financingdate =\r\n              financingDateSplit[2] + '-' + financingDateSplit[1] + '-' + financingDateSplit[0];\r\n            //for checking of income or expense\r\n          }\r\n        }\r\n        // if (result[2].data.length == 0) {\r\n        //   listingnumber++;\r\n        // }\r\n\r\n        result[2].data.sort(dynamicSort('COST GROUP NAME'));\r\n        var o = groupBy(result[2].data, 'COST GROUP NAME');\r\n        //console.log(o);\r\n        var t2 = [];\r\n        var l = 0;\r\n        result[2].data = [];\r\n        for (var key in o) {\r\n          o[key].sort(dynamicSort('REF NO INCOTERM'));\r\n          var t = groupBy(o[key], 'REF NO INCOTERM');\r\n          o[key] = [];\r\n          for (var key2 in t) {\r\n            t[key2].sort(dynamicSort('COST COMPONENT NAME'));\r\n            var z = groupBy(t[key2], 'COST COMPONENT NAME');\r\n            for (var key3 in z) {\r\n              for (var key4 = 0; key4 < z[key3].length; key4++) {\r\n                result[2].data.push(z[key3][key4]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        listingnumber++;\r\n        result[5] = {\r\n          data: []\r\n        };\r\n        for (var i = 0; i < salesdetailsdata[0].data.length; i++) {\r\n          var sales_price = salesdetailsdata[0].data[i]['Contract Price'];\r\n          var sales_unit = salesdetailsdata[0].data[i]['Contract Price Unit'];\r\n          var unitsSales = sales_unit.split('/')[0];\r\n          fxrate = '';\r\n          if (margindataafterversion) {\r\n            for (var k = 0; k < margindataafterversion.rates.length; k++) {\r\n              if (\r\n                margindataafterversion.rates[k].fxpair.split('-')[0] == unitsSales &&\r\n                margindataafterversion.rates[k].fxpair.split('-')[1] == response.viewmargin.contractValueUOM\r\n              ) {\r\n                fxrate = margindataafterversion.rates[k].fxvalue;\r\n\r\n                fxratecolumn[fxratecount] =\r\n                  margindataafterversion.rates[k].fxpair.split('-')[0] +\r\n                  '-' +\r\n                  margindataafterversion.rates[k].fxpair.split('-')[1] +\r\n                  ':' +\r\n                  fxrate;\r\n                fxratecount++;\r\n\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          if (fxrate == '') {\r\n            for (var k = 0; k < fxratesall[0].data.length; k++) {\r\n              if (fxratesall[0].data[k].From == unitsSales) {\r\n                if (fxratesall[0].data[k].To == response.viewmargin.contractValueUOM) {\r\n                  fxrate = fxratesall[0].data[k].Rate;\r\n\r\n                  fxratecolumn[fxratecount] =\r\n                    fxratesall[0].data[k].From + '-' + fxratesall[0].data[k].To + ':' + fxrate;\r\n                  fxratecount++;\r\n\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (fxrate == '') {\r\n            for (var k = 0; k < fxratesall[0].data.length; k++) {\r\n              if (\r\n                fxratesall[0].data[k].From == response.viewmargin.contractValueUOM &&\r\n                fxratesall[0].data[k].To == unitsSales\r\n              ) {\r\n                fxrate = 1 / fxratesall[0].data[k].Rate;\r\n                fxrate = fxrate.toFixed(6);\r\n\r\n                fxratecolumn[fxratecount] = fxratesall[0].data[k].To + '-' + fxratesall[0].data[k].From + ':' + fxrate;\r\n                fxratecount++;\r\n\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          if (fxrate == '') {\r\n            fxrate = 1;\r\n          }\r\n\r\n          if (salesdetailsdata[0].data[i].hasOwnProperty('Adjusted Payment Percentage')) {\r\n            salesdetailsdata[0].data[i].paymentsplit = salesdetailsdata[0].data[i]['Adjusted Payment Percentage'];\r\n          } else {\r\n            salesdetailsdata[0].data[i].paymentsplit = 100;\r\n          }\r\n\r\n          result[5].data.push({\r\n            'COST GROUP NAME': 'Sale Contract',\r\n            'INT ENTITY REFNO': salesdetailsdata[0].data[i]['REF NO INCOTERM'],\r\n            'COST COMPONENT NAME': 'Sales Material Cost',\r\n            'CP NAME': salesdetailsdata[0].data[i]['Counterparty'],\r\n            'REF NO INCOTERM': salesdetailsdata[0].data[i]['REF NO INCOTERM'],\r\n            unitprice: sales_price,\r\n            costUom: sales_unit,\r\n            totalAmount: parseFloat(salesdetailsdata[0].data[i]['Contract Value By Payment Sc']),\r\n            totalAmountMarginCurrency: 0,\r\n            financing: 0,\r\n            financingdate: '11-07-2019',\r\n            paymentterm: salesdetailsdata[0].data[i]['Payment Term'],\r\n            financingdays: 0,\r\n            paymentsplit: salesdetailsdata[0].data[i].paymentsplit,\r\n            fxrate: fxrate,\r\n            interest: response.viewmargin.interest\r\n          });\r\n\r\n          //fxrates\r\n          financingfromcollection = true;\r\n          if (marginfinancingdays) {\r\n            for (var num = 0; num < marginfinancingdays.listingmargin.length; num++) {\r\n              if (\r\n                marginfinancingdays.listingmargin[num]['COST GROUP NAME'] != 'Expense Total' ||\r\n                marginfinancingdays.listingmargin[num]['COST GROUP NAME'] != 'Income Total'\r\n              ) {\r\n                if (\r\n                  marginfinancingdays.listingmargin[num]['COST GROUP NAME'] == result[5].data[i]['COST GROUP NAME'] &&\r\n                  marginfinancingdays.listingmargin[num]['COST COMPONENT NAME'] ==\r\n                    result[5].data[i]['COST COMPONENT NAME'] &&\r\n                  marginfinancingdays.listingmargin[num]['REF NO INCOTERM'] == result[5].data[i]['REF NO INCOTERM']\r\n                ) {\r\n                  result[5].data[i].financingdays = marginfinancingdays.listingmargin[num].financingdays;\r\n                  financingfromcollection = false;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            listingnumber++;\r\n          }\r\n          if (financingfromcollection) {\r\n            if (salesdetailsdata[0].data[i]['Payment Type'] == 'Prepayment') {\r\n              result[5].data[i].financingdays = -1 * salesdetailsdata[0].data[i]['Credit Days'];\r\n            } else {\r\n              result[5].data[i].financingdays = salesdetailsdata[0].data[i]['Credit Days'];\r\n            }\r\n          }\r\n\r\n          result[5].data[i].totalAmountMarginCurrency = result[5].data[i].totalAmount * fxrate;\r\n\r\n          result[5].data[i].shipmentFromDate = myDate;\r\n\r\n          var financingDate = addDays(myDate, result[5].data[i].financingdays);\r\n          var financingDateSplit = financingDate.split('-');\r\n\r\n          result[5].data[i].financing =\r\n            (-1 *\r\n              result[5].data[i].totalAmountMarginCurrency *\r\n              result[5].data[i].financingdays *\r\n              (response.viewmargin.interest / 100)) /\r\n            360;\r\n          if (result[5].data[i].financing == -0) {\r\n            result[5].data[i].financing = 0;\r\n          }\r\n          result[5].data[i].prodtotalAmtFdays =\r\n            result[5].data[i].totalAmountMarginCurrency * result[5].data[0].financingdays;\r\n\r\n          result[5].data[i].financingdate =\r\n            financingDateSplit[2] + '-' + financingDateSplit[1] + '-' + financingDateSplit[0];\r\n        }\r\n        result[5].data.sort(dynamicSort('COST GROUP NAME'));\r\n        var result5costgroup = groupBy(result[5].data, 'COST GROUP NAME');\r\n        result[5].data = [];\r\n        for (var key in result5costgroup) {\r\n          result5costgroup[key].sort(dynamicSort('REF NO INCOTERM'));\r\n          var result5refinco = groupBy(result5costgroup[key], 'REF NO INCOTERM');\r\n          for (var key2 in result5refinco) {\r\n            result5refinco[key2].sort(dynamicSort('COST COMPONENT NAME'));\r\n            var result5costname = groupBy(result5refinco[key2], 'COST COMPONENT NAME');\r\n            for (var key3 in result5costname) {\r\n              for (var key4 = 0; key4 < result5costname[key3].length; key4++) {\r\n                result[5].data.push(result5costname[key3][key4]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        for (var i = 0; i < result[5].data.length; i++) {\r\n          if (result[5].data[i]['COST GROUP NAME'] && i > 0) {\r\n            if (!rowspan(result[5].data[i - 1]['COST GROUP NAME'], result[5].data[i]['COST GROUP NAME'])) {\r\n              var sysstate;\r\n              for (var x in result[5].data[i]) {\r\n                if (x != 'sys__state') {\r\n                  if (x == 'COST GROUP NAME') {\r\n                    sysstate = {\r\n                      ...sysstate,\r\n                      [x]: {\r\n                        show: false,\r\n                        disable: false\r\n                      }\r\n                    };\r\n                  } else {\r\n                    sysstate = {\r\n                      ...sysstate,\r\n                      [x]: {\r\n                        show: true,\r\n                        disable: false\r\n                      }\r\n                    };\r\n                  }\r\n                }\r\n              }\r\n\r\n              result[5].data[i].sys__state = sysstate;\r\n            }\r\n          }\r\n        }\r\n        if (result[3].data.length != 0) {\r\n          for (let i = 0; i < result[3].data.length; i++) {\r\n            if (result[3].data[i].paymentsplit) {\r\n              result[3].data[i].paymentsplit = result[3].data[i].paymentsplit;\r\n            } else {\r\n              result[3].data[i].paymentsplit = 100;\r\n            }\r\n\r\n            // for (var k = 0; k < fxratesall[0].data.length; k++) {\r\n            //   if (fxratesall[0].data[k].From == result[3].data[i].interestvalueextracted) {\r\n            //     if (fxratesall[0].data[k].To == response.viewmargin.contractValueUOM) {\r\n            //       fxrate = fxratesall[0].data[k].Rate;\r\n            //     }\r\n            //   } else if (k == fxratesall[0].data.length - 1) {\r\n            //     fxrate = 1;\r\n            //   }\r\n            // }\r\n            //result[3].data[i].interestvalueextracted = 'GBP';\r\n            fxrate = '';\r\n            if (margindataafterversion) {\r\n              for (var k = 0; k < margindataafterversion.rates.length; k++) {\r\n                if (\r\n                  (margindataafterversion.rates[k].fxpair.split('-')[0] == result[3].data[i].interestvalueextracted) &\r\n                  (margindataafterversion.rates[k].fxpair.split('-')[1] == response.viewmargin.contractValueUOM)\r\n                ) {\r\n                  fxrate = margindataafterversion.rates[k].fxvalue;\r\n\r\n                  fxratecolumn[fxratecount] =\r\n                    margindataafterversion.rates[k].fxpair.split('-')[0] +\r\n                    '-' +\r\n                    margindataafterversion.rates[k].fxpair.split('-')[1] +\r\n                    ':' +\r\n                    fxrate;\r\n                  fxratecount++;\r\n\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            if (fxrate == '') {\r\n              for (var k = 0; k < fxratesall[0].data.length; k++) {\r\n                if (\r\n                  fxratesall[0].data[k].From == result[3].data[i].interestvalueextracted &&\r\n                  fxratesall[0].data[k].To == response.viewmargin.contractValueUOM\r\n                ) {\r\n                  fxrate = fxratesall[0].data[k].Rate;\r\n\r\n                  fxratecolumn[fxratecount] =\r\n                    fxratesall[0].data[k].From + '-' + fxratesall[0].data[k].To + ':' + fxrate;\r\n                  fxratecount++;\r\n\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            if (fxrate == '') {\r\n              for (var k = 0; k < fxratesall[0].data.length; k++) {\r\n                if (\r\n                  fxratesall[0].data[k].From == response.viewmargin.contractValueUOM &&\r\n                  fxratesall[0].data[k].To == result[3].data[i].interestvalueextracted\r\n                ) {\r\n                  fxrate = 1 / fxratesall[0].data[k].Rate;\r\n                  fxrate = fxrate.toFixed(6);\r\n\r\n                  fxratecolumn[fxratecount] =\r\n                    fxratesall[0].data[k].To + '-' + fxratesall[0].data[k].From + ':' + fxrate;\r\n                  fxratecount++;\r\n\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            if (fxrate == '') {\r\n              fxrate = 1;\r\n            }\r\n\r\n            result[3].data[i].shipmentFromDate = myDate;\r\n            result[3].data[i].interest = response.viewmargin.interest;\r\n            result[3].data[i].fxrate = fxrate;\r\n            result[3].data[i].paymentterm = result[3].data[i]['Payment Term'];\r\n            result[3].data[i]['REF NO INCOTERM'] = result[3].data[i]['CONTRACT ITEM REF NO'];\r\n            financingfromcollection = true;\r\n            if (marginfinancingdays) {\r\n              for (var num = 0; num < marginfinancingdays.listingmargin.length; num++) {\r\n                if (\r\n                  marginfinancingdays.listingmargin[num]['COST GROUP NAME'] != 'Expense Total' ||\r\n                  marginfinancingdays.listingmargin[num]['COST GROUP NAME'] != 'Income Total'\r\n                ) {\r\n                  if (\r\n                    marginfinancingdays.listingmargin[num]['COST GROUP NAME'] == result[3].data[i]['COST GROUP NAME'] &&\r\n                    marginfinancingdays.listingmargin[num]['COST COMPONENT NAME'] ==\r\n                      result[3].data[i]['COST COMPONENT NAME'] &&\r\n                    marginfinancingdays.listingmargin[num]['REF NO INCOTERM'] == result[3].data[i]['REF NO INCOTERM']\r\n                  ) {\r\n                    financingDays = marginfinancingdays.listingmargin[num].financingdays;\r\n                    financingfromcollection = false;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n              listingnumber++;\r\n            }\r\n            if (financingfromcollection) {\r\n              if (result[3].data[i]['COST GROUP NAME'] == 'Financing Cost') {\r\n                financingDays = 0;\r\n              } else {\r\n                for (let j = 0; j < result[4].data.length; j++) {\r\n                  if (\r\n                    result[4].data[j]['Counterparty'] === result[3].data[i]['CP NAME'] &&\r\n                    result[4].data[j]['Cost Component Name'] != result[3].data[i]['COST COMPONENT NAME'] &&\r\n                    result[4].data[j]['Financing Days'] != undefined\r\n                  ) {\r\n                    financingDays = result[4].data[j]['Financing Days'];\r\n                    break;\r\n                  } else if (\r\n                    result[4].data[j]['Counterparty'] === result[3].data[i]['CP NAME'] &&\r\n                    result[4].data[j]['Cost Component Name'] === result[3].data[i]['COST COMPONENT NAME'] &&\r\n                    result[4].data[j]['Financing Days'] != undefined\r\n                  ) {\r\n                    financingDays = result[4].data[j]['Financing Days'];\r\n                    break;\r\n                  } else if (\r\n                    result[4].data[j]['Cost Component Name'] === result[3].data[i]['COST COMPONENT NAME'] &&\r\n                    result[4].data[j]['Counterparty'] != result[3].data[i]['CP NAME'] &&\r\n                    result[4].data[j]['Financing Days'] != undefined\r\n                  ) {\r\n                    financingDays = result[4].data[j]['Financing Days'];\r\n                    break;\r\n                  } else if (j == result[4].data.length - 1) {\r\n                    financingDays = defaultMargin[0].data[2].Value;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            result[3].data[i].financingdays = parseInt(financingDays);\r\n            var financingDate = addDays(myDate, result[3].data[i].financingdays);\r\n            var financingDateSplit = financingDate.split('-');\r\n            // result[3].data[i].totalAmount = result[3].data[i].apportionedCostAmount;\r\n            result[3].data[i].totalAmountMarginCurrency = result[3].data[i].totalAmount * result[3].data[i].fxrate;\r\n            result[3].data[i].financing =\r\n              (-1 *\r\n                result[3].data[i].totalAmountMarginCurrency *\r\n                result[3].data[i].financingdays *\r\n                (response.viewmargin.interest / 100)) /\r\n              360;\r\n            if (result[3].data[i].financing == -0) {\r\n              result[3].data[i].financing = 0;\r\n            }\r\n            result[3].data[i].prodtotalAmtFdays =\r\n              result[3].data[i].totalAmountMarginCurrency * result[3].data[i].financingdays;\r\n            result[3].data[i].financingdate =\r\n              financingDateSplit[2] + '-' + financingDateSplit[1] + '-' + financingDateSplit[0];\r\n          }\r\n        } else {\r\n          result[3].data = [];\r\n        }\r\n        result[3].data.sort(dynamicSort('COST GROUP NAME'));\r\n\r\n        var result3costgroup = groupBy(result[3].data, 'COST GROUP NAME');\r\n        result[3].data = [];\r\n        for (var key in result3costgroup) {\r\n          result3costgroup[key].sort(dynamicSort('REF NO INCOTERM'));\r\n          var result3refinco = groupBy(result3costgroup[key], 'REF NO INCOTERM');\r\n          for (var key2 in result3refinco) {\r\n            result3refinco[key2].sort(dynamicSort('COST COMPONENT NAME'));\r\n            var result3costname = groupBy(result3refinco[key2], 'COST COMPONENT NAME');\r\n            for (var key3 in result3costname) {\r\n              for (var key4 = 0; key4 < result3costname[key3].length; key4++) {\r\n                result[3].data.push(result3costname[key3][key4]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        //for fx rate column\r\n        // var fxstring = '';\r\n        // for (var t = 0; t < fxratecolumn.length; t++) {\r\n        //   fxstring = fxstring + fxratecolumn[t] + ' ';\r\n        // }\r\n        // response.rates = {\r\n        //   fxvalues: fxstring\r\n        // };\r\n        fxratecolumn = [...new Set(fxratecolumn)];\r\n\r\n        fxratecolumndisplay = [...new Set(fxratecolumndisplay)];\r\n\r\n        var fxstring = [];\r\n        var fxstringdisplay = [];\r\n        var fxpair;\r\n        var fxvalue;\r\n        for (var t = 0; t < fxratecolumn.length; t++) {\r\n          // fxstring = fxstring + fxratecolumn[t] + ' ';\r\n          fxstring = [\r\n            ...fxstring,\r\n            {\r\n              fxpair: fxratecolumn[t].split(':')[0],\r\n              fxvalue: fxratecolumn[t].split(':')[1]\r\n            }\r\n          ];\r\n        }\r\n        fxstring.forEach((data, index) => {\r\n          var flag = true;\r\n          fxratesall[0].data.forEach(data2 => {\r\n            if (data.fxpair.split('-')[0] == data2.From && data.fxpair.split('-')[1] == data2.To) {\r\n              fxstringdisplay.push(data);\r\n              flag = false;\r\n            }\r\n          });\r\n          if (flag) {\r\n            fxratesall[0].data.forEach(data2 => {\r\n              if (data.fxpair.split('-')[0] == data2.To && data.fxpair.split('-')[1] == data2.From) {\r\n                fxstringdisplay.push({ fxpair: data2.From + '-' + data2.To, fxvalue: data2.Rate });\r\n              }\r\n            });\r\n          }\r\n        });\r\n        // for (var t = 0; t < fxratecolumndisplay.length; t++) {\r\n        //   // fxstring = fxstring + fxratecolumn[t] + ' ';\r\n        //   fxstringdisplay = [\r\n        //     ...fxstringdisplay,\r\n        //     {\r\n        //       fxpair: fxratecolumndisplay[t].split(':')[0],\r\n        //       fxvalue: fxratecolumndisplay[t].split(':')[1]\r\n        //     }\r\n        //   ];\r\n        // }\r\n        if (fxstringdisplay.length != 0) {\r\n          response.rates = fxstringdisplay;\r\n        } else {\r\n          response.rates = [];\r\n        }\r\n        if (fxstring.length != 0) {\r\n          response.ratesvalues = fxstring;\r\n        } else {\r\n          response.ratesvalues = [];\r\n        }\r\n        //expense col checked for purchase estimates\r\n        for (var i = 0; i < result[2].data.length; i++) {\r\n          if (result[2].data[i]['COST GROUP NAME'] && i > 0) {\r\n            if (!rowspan(result[2].data[i - 1]['COST GROUP NAME'], result[2].data[i]['COST GROUP NAME'])) {\r\n              var sysstate;\r\n              for (var x in result[2].data[i]) {\r\n                if (x != 'sys__state') {\r\n                  var n;\r\n                  if (x == 'COST GROUP NAME') {\r\n                    sysstate = {\r\n                      ...sysstate,\r\n                      [x]: {\r\n                        show: false,\r\n                        disable: false\r\n                      }\r\n                    };\r\n                  } else {\r\n                    sysstate = {\r\n                      ...sysstate,\r\n                      [x]: {\r\n                        show: true,\r\n                        disable: false\r\n                      }\r\n                    };\r\n                  }\r\n                }\r\n              }\r\n\r\n              result[2].data[i].sys__state = sysstate;\r\n            }\r\n          }\r\n        }\r\n\r\n        //expense col checked for sales estimates\r\n        for (var i = 0; i < result[3].data.length; i++) {\r\n          if (result[3].data[i]['COST GROUP NAME'] && i > 0) {\r\n            if (!rowspan(result[3].data[i - 1]['COST GROUP NAME'], result[3].data[i]['COST GROUP NAME'])) {\r\n              var sysstate;\r\n              for (var x in result[3].data[i]) {\r\n                if (x != 'sys__state') {\r\n                  var n;\r\n                  if (x == 'COST GROUP NAME') {\r\n                    sysstate = {\r\n                      ...sysstate,\r\n                      [x]: {\r\n                        show: false,\r\n                        disable: false\r\n                      }\r\n                    };\r\n                  } else {\r\n                    sysstate = {\r\n                      ...sysstate,\r\n                      [x]: {\r\n                        show: true,\r\n                        disable: false\r\n                      }\r\n                    };\r\n                  }\r\n                }\r\n              }\r\n\r\n              result[3].data[i].sys__state = sysstate;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (result[3].data.length != 0 && result[2].data.length != 0) {\r\n          response.listingmargin = [\r\n            ...result[1].data,\r\n            ...result[2].data,\r\n            {\r\n              'COST GROUP NAME': 'Expense Total',\r\n              financingdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              prodtotalAmtFdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              totalAmount: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              totalAmountMarginCurrency: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              financing: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              __class: 'summary',\r\n              sys__state: {\r\n                totalAmount: {\r\n                  show: false,\r\n                  disable: false\r\n                },\r\n                totalAmountMarginCurrency: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financing: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                'COST GROUP NAME': {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financingdays: {\r\n                  show: false,\r\n                  disable: false\r\n                }\r\n              }\r\n            },\r\n            ...result[5].data,\r\n            ...result[3].data,\r\n            {\r\n              'COST GROUP NAME': 'Income Total',\r\n              financingdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              prodtotalAmtFdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              totalAmountMarginCurrency: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              totalAmount: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              financing: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              __class: 'summary',\r\n              sys__state: {\r\n                totalAmount: {\r\n                  show: false,\r\n                  disable: false\r\n                },\r\n                totalAmountMarginCurrency: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financing: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                'COST GROUP NAME': {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financingdays: {\r\n                  show: false,\r\n                  disable: false\r\n                }\r\n              }\r\n            }\r\n          ];\r\n        } else if (result[2].data.length != 0 && result[3].data.length == 0) {\r\n          response.listingmargin = [\r\n            ...result[1].data,\r\n            ...result[2].data,\r\n            {\r\n              'COST GROUP NAME': 'Expense Total',\r\n              financingdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              prodtotalAmtFdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              totalAmount: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              totalAmountMarginCurrency: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              financing: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              __class: 'summary',\r\n              sys__state: {\r\n                totalAmount: {\r\n                  show: false,\r\n                  disable: false\r\n                },\r\n                totalAmountMarginCurrency: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financing: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                'COST GROUP NAME': {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financingdays: {\r\n                  show: false,\r\n                  disable: false\r\n                }\r\n              }\r\n            },\r\n            ...result[5].data,\r\n            {\r\n              'COST GROUP NAME': 'Income Total',\r\n              financingdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              prodtotalAmtFdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              totalAmountMarginCurrency: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              totalAmount: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              financing: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              __class: 'summary',\r\n              sys__state: {\r\n                totalAmount: {\r\n                  show: false,\r\n                  disable: false\r\n                },\r\n                totalAmountMarginCurrency: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financing: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                'COST GROUP NAME': {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financingdays: {\r\n                  show: false,\r\n                  disable: false\r\n                }\r\n              }\r\n            }\r\n          ];\r\n        } else if (result[3].data.length != 0 && result[2].data.length == 0) {\r\n          response.listingmargin = [\r\n            ...result[1].data,\r\n\r\n            {\r\n              'COST GROUP NAME': 'Expense Total',\r\n              financingdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              prodtotalAmtFdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              totalAmount: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              totalAmountMarginCurrency: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              financing: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              __class: 'summary',\r\n              sys__state: {\r\n                totalAmount: {\r\n                  show: false,\r\n                  disable: false\r\n                },\r\n                totalAmountMarginCurrency: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financing: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                'COST GROUP NAME': {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financingdays: {\r\n                  show: false,\r\n                  disable: false\r\n                }\r\n              }\r\n            },\r\n            ...result[3].data,\r\n            ...result[5].data,\r\n            {\r\n              'COST GROUP NAME': 'Income Total',\r\n              financingdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              prodtotalAmtFdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              totalAmountMarginCurrency: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              totalAmount: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              financing: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              __class: 'summary',\r\n              sys__state: {\r\n                totalAmount: {\r\n                  show: false,\r\n                  disable: false\r\n                },\r\n                totalAmountMarginCurrency: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financing: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                'COST GROUP NAME': {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financingdays: {\r\n                  show: false,\r\n                  disable: false\r\n                }\r\n              }\r\n            }\r\n          ];\r\n        } else if (result[2].data.length == 0 && result[3].data.length == 0) {\r\n          response.listingmargin = [\r\n            ...result[1].data,\r\n\r\n            {\r\n              'COST GROUP NAME': 'Expense Total',\r\n              financingdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              prodtotalAmtFdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              totalAmount: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              totalAmountMarginCurrency: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              financing: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              __class: 'summary',\r\n              sys__state: {\r\n                totalAmount: {\r\n                  show: false,\r\n                  disable: false\r\n                },\r\n                financingdays: {\r\n                  show: false,\r\n                  disable: false\r\n                },\r\n                'COST GROUP NAME': {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                totalAmountMarginCurrency: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financing: {\r\n                  show: true,\r\n                  disable: false\r\n                }\r\n              }\r\n            },\r\n\r\n            ...result[5].data,\r\n            {\r\n              'COST GROUP NAME': 'Income Total',\r\n              financingdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              prodtotalAmtFdays: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              totalAmountMarginCurrency: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              totalAmount: {\r\n                disableEdit: true,\r\n                value: 0,\r\n                class: 'hideField'\r\n              },\r\n              financing: {\r\n                value: 0,\r\n                class: 'sumHighlightClass'\r\n              },\r\n              __class: 'summary',\r\n              sys__state: {\r\n                totalAmount: {\r\n                  show: false,\r\n                  disable: false\r\n                },\r\n                'COST GROUP NAME': {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                totalAmountMarginCurrency: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financing: {\r\n                  show: true,\r\n                  disable: false\r\n                },\r\n                financingdays: {\r\n                  show: false,\r\n                  disable: false\r\n                }\r\n              }\r\n            }\r\n          ];\r\n        }\r\n        let sumexpenses = 0;\r\n        let sumfinan = 0;\r\n        let prodsumtf = 0;\r\n        let totalmar = 0;\r\n        let financedaystotal = 0;\r\n\r\n        for (let i = 0; i < response.listingmargin.length; i++) {\r\n          if (\r\n            response.listingmargin[i]['COST GROUP NAME'] !== 'Expense Total' &&\r\n            response.listingmargin[i]['COST GROUP NAME'] !== 'Income Total'\r\n          ) {\r\n            sumexpenses = sumexpenses + response.listingmargin[i].totalAmountMarginCurrency;\r\n            totalmar = totalmar + response.listingmargin[i].totalAmount;\r\n            sumfinan = sumfinan + response.listingmargin[i].financing;\r\n            financedaystotal = financedaystotal + parseFloat(response.listingmargin[i].financingdays);\r\n          }\r\n          if (response.listingmargin[i]['COST COMPONENT NAME'] == 'Material Cost') {\r\n            prodsumtf = prodsumtf + response.listingmargin[i].prodtotalAmtFdays;\r\n          }\r\n          if (response.listingmargin[i]['COST GROUP NAME'] === 'Expense Total') {\r\n            response.listingmargin[i].totalAmountMarginCurrency.value = sumexpenses;\r\n            response.listingmargin[i].totalAmount.value = totalmar;\r\n            response.listingmargin[i].financing.value = sumfinan;\r\n            response.listingmargin[i].prodtotalAmtFdays.value = prodsumtf;\r\n            response.listingmargin[i].financingdays.value = financedaystotal;\r\n            sumexpenses = 0;\r\n            sumfinan = 0;\r\n            prodsumtf = 0;\r\n            totalmar = 0;\r\n            financedaystotal = 0;\r\n          }\r\n          if (response.listingmargin[i]['COST GROUP NAME'] === 'Income Total') {\r\n            response.listingmargin[i].totalAmountMarginCurrency.value = sumexpenses;\r\n            response.listingmargin[i].totalAmount.value = totalmar;\r\n            response.listingmargin[i].financing.value = sumfinan;\r\n            response.listingmargin[i].prodtotalAmtFdays.value = prodsumtf;\r\n            response.listingmargin[i].financingdays.value = financedaystotal;\r\n            sumexpenses = 0;\r\n            sumfinan = 0;\r\n            prodsumtf = 0;\r\n            totalmar = 0;\r\n            financedaystotal = 0;\r\n          }\r\n        }\r\n        // if (req.body.selectedData.margindata) {\r\n        //   response.tradeMargin = req.body.selectedData.margindata.tradeMargin;\r\n        //   respomse\r\n        // }\r\n        //console.log('Final response' + response.listingmargin);\r\n        response.ratesinput = {\r\n          fxrefno: ''\r\n        };\r\n        if (fxr == '-') {\r\n          fxr = '';\r\n        }\r\n        response.ratesinput.fxrefno = fxr;\r\n        if (margindata) {\r\n          response.remark.remark = margindata.remark.remark ? margindata.remark.remark : '';\r\n        }\r\n        response.viewmarginInterestEdit = response.viewmargin;\r\n        response.shares = {\r\n          sharepercentage: {\r\n            value: '',\r\n            disable: true\r\n          },\r\n          shares: {\r\n            value: '',\r\n            disable: true\r\n          },\r\n          sharevalue: {\r\n            value: '',\r\n            disable: true\r\n          },\r\n          trademarginaftershare: '',\r\n          roceaftershare: ''\r\n        };\r\n\r\n        response.flag = flag;\r\n\r\n        response.querydata = {\r\n          fxr: req.body.selectedData['fxrefno']\r\n            ? req.body.selectedData['fxrefno']\r\n            : req.body.selectedData.querydata.fxr,\r\n          stat: req.body.selectedData['status']\r\n            ? req.body.selectedData['status']\r\n            : req.body.selectedData.querydata.stat,\r\n          personin: personin ? personin : req.body.selectedData.querydata.personin,\r\n          allocGrpId: req.body.selectedData['INT ALLOC GROUP ID']\r\n            ? req.body.selectedData['INT ALLOC GROUP ID']\r\n            : req.body.selectedData.querydata.allocGrpId,\r\n          intContractRefNo: req.body.selectedData['INTERNAL CONTRACT REF NO']\r\n            ? req.body.selectedData['INTERNAL CONTRACT REF NO']\r\n            : req.body.selectedData.querydata.intContractRefNo,\r\n          prodspec: req.body.selectedData['PRODUCT SPECS']\r\n            ? req.body.selectedData['PRODUCT SPECS']\r\n            : req.body.selectedData.querydata.prodspec,\r\n          contractitemno: req.body.selectedData['CONTRACT ITEM NO']\r\n            ? req.body.selectedData['CONTRACT ITEM NO']\r\n            : req.body.selectedData.querydata.contractitemno,\r\n          netqty: req.body.selectedData['NET QTY']\r\n            ? req.body.selectedData['NET QTY']\r\n            : req.body.selectedData.querydata.netqty\r\n        };\r\n      }\r\n      return response;\r\n    }\r\n\r\n    var timeInMss1 = new Date().getTime();\r\n    get_header3()\r\n      .then(data99 => {\r\n        for (var keys in data99) {\r\n          if (keys.includes('AllocationGroupSalesDetails')) {\r\n            var resnew = {\r\n              data: data99[keys]\r\n            };\r\n            result.push(resnew);\r\n          }\r\n        }\r\n\r\n        var timeInMss2 = new Date().getTime();\r\n\r\n        collectiontime = collectiontime + timeInMss2 - timeInMss1;\r\n        console.log('allocation header details collection ' + (timeInMss2 - timeInMss1) / 1000 + 's');\r\n        timeInMss1 = new Date().getTime();\r\n        var salesrefno = [];\r\n        var salesrefnostring = '';\r\n        for (let r = 0; r < result[0].data.length; r++) {\r\n          salesrefno.push(result[0].data[r]['CONTRACT ITEM NO']);\r\n        }\r\n\r\n        salesrefno = [...new Set(salesrefno)];\r\n        for (let r = 0; r < salesrefno.length; r++) {\r\n          if (r == salesrefno.length - 1) {\r\n            salesrefnostring = salesrefnostring + salesrefno[r];\r\n          } else {\r\n            salesrefnostring = salesrefnostring + salesrefno[r] + ',';\r\n          }\r\n        }\r\n        var paymentsplit = {\r\n          method: 'POST',\r\n          url:\r\n            req.body.propertyList.eka_connect_host +\r\n            '/collectionmapper/40a27e7f-3f50-406f-a872-2ee7d9436df9/3ef370f9-febe-41a0-8e43-4ef6ce769b3b/fetchMultiCollectionRecords',\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            'X-TenantID': req.headers['x-tenantid'],\r\n            'Content-Type': 'application/json',\r\n            'X-Remote-User': 'ekaApp',\r\n            ttl: 300\r\n          },\r\n\r\n          body: [\r\n            {\r\n              collectionName: 'TMPaymentSplit',\r\n              criteria: {\r\n                filter: [\r\n                  {\r\n                    fieldName: 'INT ALLOC GROUP ID',\r\n                    value: allocId,\r\n                    operator: 'eq'\r\n                  },\r\n\r\n                  {\r\n                    fieldName: 'Sales Contract Ref No',\r\n                    value: contractitemnumber,\r\n                    operator: 'eq'\r\n                  },\r\n                  {\r\n                    fieldName: 'Sales Ref No',\r\n                    value: salesrefnostring,\r\n                    operator: 'in'\r\n                  }\r\n                ]\r\n              }\r\n            },\r\n            {\r\n              collectionName: 'AllocationGroupPurchaseEstimates',\r\n              criteria: {\r\n                filter: [\r\n                  {\r\n                    fieldName: 'INT ALLOC GROUP ID',\r\n                    value: allocId,\r\n                    operator: 'eq'\r\n                  },\r\n\r\n                  {\r\n                    fieldName: 'SALES REF NO',\r\n                    value: salesrefnostring,\r\n                    operator: 'in'\r\n                  }\r\n                ]\r\n              }\r\n            },\r\n            {\r\n              collectionName: 'AllocationGroupSalesEstimates',\r\n              criteria: {\r\n                filter: [\r\n                  {\r\n                    fieldName: 'INT ALLOC GROUP ID',\r\n                    value: allocId,\r\n                    operator: 'eq'\r\n                  },\r\n\r\n                  {\r\n                    fieldName: 'INTERNAL CONTRACT REF NO',\r\n                    value: intcontrefnumber,\r\n                    operator: 'eq'\r\n                  },\r\n                  {\r\n                    fieldName: 'SALES REF NO',\r\n                    value: salesrefnostring,\r\n                    operator: 'in'\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          ],\r\n          json: true\r\n        };\r\n\r\n        function get_paymentsplit() {\r\n          return new Promise(function(resolve, reject) {\r\n            // console.log('Request - ' + purchase_details.url);\r\n            request(paymentsplit, function(err, response, body) {\r\n              //  console.log('Response payment details -');\r\n              var l = Object.keys(body).length;\r\n              if (l !== 3) {\r\n                // error('Unable to get data from payentsplit', 500);\r\n                var initial = ['AllocationGroupPurchaseEstimates', 'AllocationGroupSalesDetails', 'TMPaymentSplit'];\r\n                var result = [];\r\n                for (var keys in body) {\r\n                  if (keys.includes('AllocationGroupPurchaseEstimates')) {\r\n                    result.push('AllocationGroupPurchaseEstimates');\r\n                  }\r\n                  if (keys.includes('AllocationGroupSalesDetails')) {\r\n                    result.push('AllocationGroupSalesDetails');\r\n                  }\r\n                  if (keys.includes('TMPaymentSplit')) {\r\n                    result.push('TMPaymentSplit');\r\n                  }\r\n                }\r\n                missing = initial.filter(item => result.indexOf(item) < 0);\r\n\r\n                console.log('unable to get data from' + missing);\r\n                // res.status(500).send('Unable to get data from payentsplit');\r\n                reject(body);\r\n              } else {\r\n                //  console.log('Success paymentsplit details');\r\n                resolve(body);\r\n              }\r\n            });\r\n          });\r\n        }\r\n\r\n        get_paymentsplit()\r\n          .then(pay => {\r\n            var timeInMss2 = new Date().getTime();\r\n\r\n            collectiontime = collectiontime + timeInMss2 - timeInMss1;\r\n            console.log('Payment split details collection ' + (timeInMss2 - timeInMss1) / 1000 + 's');\r\n            timeInMss1 = new Date().getTime();\r\n            for (var keys in pay) {\r\n              if (keys.includes('TMPaymentSplit')) {\r\n                var resnew = {\r\n                  data: pay[keys]\r\n                };\r\n                paymentdata.push(resnew);\r\n              } else if (keys.includes('AllocationGroupPurchaseEstimates')) {\r\n                var paynew = {\r\n                  data: pay[keys]\r\n                };\r\n                result[2] = paynew;\r\n              } else if (keys.includes('AllocationGroupSalesEstimates')) {\r\n                var paynew = {\r\n                  data: pay[keys]\r\n                };\r\n                result[3] = paynew;\r\n              }\r\n            }\r\n\r\n            var othercollections = {\r\n              method: 'POST',\r\n              url:\r\n                req.body.propertyList.eka_connect_host +\r\n                '/collectionmapper/40a27e7f-3f50-406f-a872-2ee7d9436df9/3ef370f9-febe-41a0-8e43-4ef6ce769b3b/fetchMultiCollectionRecords',\r\n              headers: {\r\n                Authorization: req.headers.authorization,\r\n                'X-TenantID': req.headers['x-tenantid'],\r\n                'Content-Type': 'application/json',\r\n                'X-Remote-User': 'ekaApp',\r\n                ttl: 300\r\n              },\r\n              body: [\r\n                {\r\n                  collectionName: 'InterestRates'\r\n                },\r\n                {\r\n                  collectionName: 'FxRates'\r\n                },\r\n                {\r\n                  collectionName: 'DefaultTradeMargin'\r\n                },\r\n                {\r\n                  collectionName: 'financingDays'\r\n                }\r\n              ],\r\n              json: true\r\n            };\r\n\r\n            function get_othercollections() {\r\n              return new Promise(function(resolve, reject) {\r\n                // console.log('Request - ' + allocation_group_header.url);\r\n                request(othercollections, function(err, response, body) {\r\n                  // console.log('Response - header');\r\n                  var l = Object.keys(body).length;\r\n                  if (l !== 4) {\r\n                    var initial = ['InterestRates', 'FxRates', 'DefaultTradeMargin'];\r\n                    var result = [];\r\n                    for (var keys in body) {\r\n                      if (keys.includes('InterestRates')) {\r\n                        result.push('InterestRates');\r\n                      }\r\n                      if (keys.includes('FxRates')) {\r\n                        result.push('FxRates');\r\n                      }\r\n                      if (keys.includes('DefaultTradeMargin')) {\r\n                        result.push('DefaultTradeMargin');\r\n                      }\r\n                      if (keys.includes('financingDays')) {\r\n                        result.push('financingDays');\r\n                      }\r\n                    }\r\n                    missing2 = initial.filter(item => result.indexOf(item) < 0);\r\n\r\n                    console.log('error in fetching' + missing2);\r\n                    // res.status(500).send('Unable to get data from Other Collections');\r\n                    // error('Unable to get data from Other Collections', 500);\r\n                    reject(body);\r\n                  } else {\r\n                    //  console.log('Success header');\r\n                    resolve(body);\r\n                  }\r\n                });\r\n              });\r\n            }\r\n            if (req.body.selectedData.autocalculate) {\r\n              defaultMargin = req.body.selectedData.defaultMargin;\r\n              interestall = req.body.selectedData.interestall;\r\n              financingDaysfromplatform = req.body.selectedData.financingDaysfromplatform;\r\n              fxratesall = req.body.selectedData.fxratesall;\r\n              var response = composite();\r\n    success(response,200);         \r\n              // success(response, 200);\r\n            } else {\r\n              get_othercollections()\r\n                .then(dataother => {\r\n                  var timeInMss2 = new Date().getTime();\r\n\r\n                  collectiontime = collectiontime + timeInMss2 - timeInMss1;\r\n                  console.log('other collections details collection ' + (timeInMss2 - timeInMss1) / 1000 + 's');\r\n                  timeInMss1 = new Date().getTime();\r\n                  var paynew = {\r\n                    data: dataother['DefaultTradeMargin-']\r\n                  };\r\n                  defaultMargin.push(paynew);\r\n\r\n                  var paynew = {\r\n                    data: dataother['InterestRates-']\r\n                  };\r\n                  interestall.push(paynew);\r\n\r\n                  var paynew = {\r\n                    data: dataother['financingDays-']\r\n                  };\r\n                  financingDaysfromplatform.push(paynew);\r\n\r\n                  var paynew = {\r\n                    data: dataother['FxRates-']\r\n                  };\r\n                  fxratesall.push(paynew);\r\n\r\n                  var response = composite();\r\n                  // response.saveflag = true;\r\n\r\n          success(response,200);       \r\n                  //success(response, 200);\r\n                  timeInMss2 = new Date().getTime();\r\n                  // console.log(timeInMss2 - timeInMss1);\r\n                  compositetime = compositetime + timeInMss2 - timeInMss1;\r\n                  console.log('Collection fetching time ' + collectiontime / 1000 + 's');\r\n                  console.log('Composite time ' + compositetime / 1000 + 's');\r\n                  //try writting your logic here using result array or using data variable.\r\n                  // I think this will work\r\n                })\r\n                .catch(error => {\r\n                   error('Unable to get data from Collections',500);\r\n                  // error('Unable to get data from Collections', 500);\r\n                  console.log(error);\r\n                });\r\n            }\r\n          })\r\n          .catch(error => {\r\n  error('Unable to get data from' + missing,500);          \r\n            // error('Unable to get data from paymentsplit', 500);\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch(err => {\r\n      error('Unable to get data from' + missing2,500);  \r\n        //error('Unable to get data from allocation header', 500);\r\n        console.log(err);\r\n      });\r\n  ",
    "sys__UUID" : "403b0948-6e4b-44a2-bc8c-223658f3bd6d",
    "sys__createdOn" : ISODate("2019-05-20T09:29:21.300Z"),
    "sys__createdBy" : "Bravo"
}