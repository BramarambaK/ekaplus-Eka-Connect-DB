{
    "_id" : "priceLimits_mdm_processor",
    "name" : "priceLimits_mdm",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "12325a98-a959-4939-9005-4158d136afcd",
    "snippet" : " req.body.mdmProcessorServiceKey = JSON.parse(req.body.mdmProcessorServiceKey);\r\n    const serviceKey = req.body.mdmProcessorServiceKey[0].serviceKey;\r\n    const appId = req.body.appId;\r\n    const tenant = req.headers['X-TenantID'];\r\n    const taskId = req.body.taskId;\r\n\r\n    const getRequestBody = url => ({\r\n      method: 'GET',\r\n      url,\r\n      headers: {\r\n        Authorization: req.headers.authorization,\r\n        'X-TenantID': tenant\r\n      },\r\n      json: true\r\n    });\r\n    const getPricingOptions = body => ({\r\n      ...getRequestBody(\r\n        req.body.propertyList.eka_connect_host +\r\n          '/data/12325a98-a959-4939-9005-4158d136afcd/6d10c2dd-c5c5-451e-88f5-3de80e151bc3'\r\n      ),\r\n      body\r\n    });\r\n    const userInfo = getRequestBody(req.body.propertyList.eka_connect_host + '/api/getbpuserinfo');\r\n    const subGroupMaster = {\r\n      appId: appId,\r\n      objectId: 'd59b8c10-8c94-4b87-a430-f6fd69888a37' /* not at all relevant object id */,\r\n      collectionName: 'BP Sub Group Setup',\r\n      tenant: tenant\r\n    };\r\n\r\n    const connectSeasonMasterData = getRequestBody(\r\n      req.body.propertyList.eka_connect_host +\r\n        '/data/12325a98-a959-4939-9005-4158d136afcd/1f3e680b-f3dd-418a-8fd4-888e38714cc3'\r\n    );\r\n    const connectProductQualityMasterData = getRequestBody(\r\n      req.body.propertyList.eka_connect_host +\r\n        '/data/12325a98-a959-4939-9005-4158d136afcd/ae5f314e-c377-419e-9dfa-1f296f6fccfa'\r\n    );\r\n    const connectRegionSiteMasterData = getRequestBody(\r\n      req.body.propertyList.eka_connect_host +\r\n        '/data/12325a98-a959-4939-9005-4158d136afcd/ac4bf583-a9a4-446d-b6f9-3c083c3e1030'\r\n    );\r\n    const connectVolumeLimitsData = (bpRefNo, season, bpExternalCode) => ({\r\n      ...getRequestBody(\r\n        req.body.propertyList.eka_connect_host +\r\n          '/data/12325a98-a959-4939-9005-4158d136afcd/c98119db-1f7c-4802-b72a-6678f1ecc0f3?bpRefNo=' +\r\n          bpRefNo +\r\n          '&season=' +\r\n          season +\r\n          (bpExternalCode ? `&bpExternalCode=${bpExternalCode}` : '')\r\n      ),\r\n      body: {\r\n        filterData: {\r\n          filter: []\r\n        }\r\n      }\r\n    });\r\n\r\n    function getData(requestBody) {\r\n      return new Promise(function(resolve, reject) {\r\n        request(requestBody, function(err, response, body) {\r\n          if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    const getCollectionMapper = config =>\r\n      new Promise((resolve, reject) => {\r\n        const r = {\r\n          method: 'POST',\r\n          url: `${req.body.propertyList.eka_connect_host}/collectionmapper/${config.appId}/${\r\n            config.objectId\r\n          }/fetchCollectionRecords`,\r\n          headers: {\r\n            Authorization: req.headers.authorization,\r\n            ttl: 600,\r\n            'X-TenantID': config.tenant,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: {\r\n            collectionName: config.collectionName\r\n          },\r\n          json: true\r\n        };\r\n        request(r, (err, response, body) => {\r\n          if (response && response.statusCode >= 200 && response.statusCode <= 299) {\r\n            resolve(body);\r\n          } else {\r\n            reject(body);\r\n          }\r\n        });\r\n      });\r\n\r\n    function prepareMdmCollection(platformres, productMasterData = [], regionMasterData = []) {\r\n      let mdmCollection = {\r\n        harvestSeasonKey: {},\r\n        gradeKey: {}\r\n      };\r\n\r\n      function getOption(serviceKey, key, dependent, dependent1 = null, filterObj = null) {\r\n        if (key == 'All' && dependent == 'All' && productMasterData.length && regionMasterData.length) {\r\n          let _productKeys = productMasterData\r\n            .filter(item => item['product'] == filterObj['product'])\r\n            .map(i => i['quality']);\r\n          let _regionKeys = regionMasterData.filter(item => item['region'] == filterObj['region']).map(i => i['site']);\r\n          for (let _pK in _productKeys) {\r\n            for (let _rK in _regionKeys) {\r\n              getOption(serviceKey, _productKeys[_pK], _regionKeys[_rK]);\r\n            }\r\n          }\r\n        } else if (key == 'All' && dependent != 'All' && productMasterData.length) {\r\n          let _productKeys = productMasterData\r\n            .filter(item => item['product'] == filterObj['product'])\r\n            .map(i => i['quality']);\r\n          for (let _pK in _productKeys) {\r\n            getOption(serviceKey, _productKeys[_pK], dependent);\r\n          }\r\n        } else if (key != 'All' && dependent == 'All' && regionMasterData.length) {\r\n          let _regionKeys = regionMasterData.filter(item => item['region'] == filterObj['region']).map(i => i['site']);\r\n          for (let _rK in _regionKeys) {\r\n            getOption(serviceKey, key, _regionKeys[_rK]);\r\n          }\r\n        } else if (!mdmCollection[serviceKey][key]) {\r\n          if (dependent != '') {\r\n            mdmCollection[serviceKey][key] = {\r\n              [dependent]: true\r\n            };\r\n          }\r\n          if (dependent1 != null && dependent1 != '') {\r\n            mdmCollection[serviceKey][key] = {\r\n              ...mdmCollection[serviceKey][key],\r\n              [dependent1]: true\r\n            };\r\n          }\r\n        } else {\r\n          if (!mdmCollection[serviceKey][key][dependent] && dependent != '') {\r\n            mdmCollection[serviceKey][key] = {\r\n              ...mdmCollection[serviceKey][key],\r\n              [dependent]: true\r\n            };\r\n          }\r\n          if (dependent1 != null && dependent1 != '') {\r\n            if (!mdmCollection[serviceKey][key][dependent1]) {\r\n              mdmCollection[serviceKey][key] = {\r\n                ...mdmCollection[serviceKey][key],\r\n                [dependent1]: true\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      platformres.forEach(item => {\r\n        for (let key in item) {\r\n          key === 'bpRefNo' && getOption('harvestSeasonKey', item[key], item['currentSeason'], item['previousSeason']);\r\n          key === 'quality' &&\r\n            getOption('gradeKey', item[key], item['site'], null, {\r\n              key: key,\r\n              product: item['product'],\r\n              region: item['region']\r\n            });\r\n        }\r\n      });\r\n\r\n      return mdmCollection;\r\n    }\r\n\r\n    const subGroupCode = userDetails =>\r\n      new Promise((resolve, reject) =>\r\n        getCollectionMapper(subGroupMaster)\r\n          .then(result => {\r\n            if (result && Array.isArray(result)) {\r\n              const config = result.find(i => i.Workflow == taskId && i.UserType == userDetails.customerType);\r\n\r\n              if (config) {\r\n                resolve(config.SubGroupCode);\r\n              } else {\r\n                console.log(\r\n                  `Sub group configuration not found for ${taskId} and ${\r\n                    userDetails.customerType\r\n                  }. Defaulting to not applicable.`\r\n                );\r\n                resolve(null);\r\n              }\r\n            } else {\r\n              reject('Sub group configuration is missing');\r\n            }\r\n          })\r\n          .catch(err => {\r\n            reject(err);\r\n          })\r\n      );\r\n\r\n    const bpList = new Promise((resolve, reject) => {\r\n      getData(userInfo)\r\n        .then(t => {\r\n          const userDetails = t.data;\r\n          if (userDetails.BusinessPartyDetails) {\r\n            subGroupCode(userDetails)\r\n              .then(code => {\r\n                let bpResolver;\r\n                if (code) {\r\n                  bpResolver = masterdata =>\r\n                    userDetails.BusinessPartyDetails.filter(bp =>\r\n                      masterdata.map(i => i.bpRefNo).includes(bp.refNo)\r\n                    ).reduce((acc, bp) => {\r\n                      if (bp.subGroup && bp.subGroup.length > 0) {\r\n                        const subGroup = bp.subGroup.filter(\r\n                          i =>\r\n                            i.code &&\r\n                            i.code.toLowerCase() == code.toLowerCase() &&\r\n                            masterdata.map(j => j.bpExternalCode).includes(i.refNo)\r\n                        );\r\n                        if (subGroup && subGroup.length > 0) {\r\n                          for (let n in subGroup) {\r\n                            acc.push({\r\n                              key: `${bp.refNo} @#@ ${bp.name} @#@ ${subGroup[n].name} @#@ ${subGroup[n].refNo}`,\r\n                              value: `${bp.name} - ${bp.refNo} - ${subGroup[n].name}`\r\n                            });\r\n                          }\r\n                        }\r\n                      }\r\n                      return acc;\r\n                    }, []);\r\n                } else {\r\n                  bpResolver = masterdata =>\r\n                    userDetails.BusinessPartyDetails.filter(bp =>\r\n                      masterdata.map(i => i.bpRefNo).includes(bp.refNo)\r\n                    ).map(bp => ({\r\n                      key: `${bp.refNo} @#@ ${bp.name}`,\r\n                      value: `${bp.name} - ${bp.refNo}`\r\n                    }));\r\n                }\r\n                resolve(bpResolver);\r\n              })\r\n              .catch(err => {\r\n                reject(err);\r\n              });\r\n          } else {\r\n            reject('BusinessPartyDetails missing in user details.');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          reject(err);\r\n        });\r\n    });\r\n\r\n    const uniqByList = (data, key) => [...new Map(data.map(x => [key(x), x])).values()];\r\n\r\n    const addQualityCollections = (mdmCollection, volData) => {\r\n      for (let i in mdmCollection) {\r\n        let sites = volData.map(i => i.site);\r\n        sites.forEach(j => {\r\n          mdmCollection[i][j] = true;\r\n        });\r\n      }\r\n      return mdmCollection;\r\n    };\r\n\r\n    const idExistsInArray = (array, id) => {\r\n      var regex = new RegExp('\"value\":\"' + id + '\"');\r\n      return regex.test(JSON.stringify(array));\r\n    };\r\n\r\n    if (\r\n      serviceKey == 'gradeKey' ||\r\n      serviceKey == 'siteKey' ||\r\n      serviceKey == 'harvestSeasonKey' ||\r\n      serviceKey == 'pricingOptionKey'\r\n    ) {\r\n      if (serviceKey == 'gradeKey' || serviceKey == 'pricingOptionKey') {\r\n        let dependsOn = req.body.mdmProcessorServiceKey[0].dependsOn[0];\r\n        if (dependsOn == '') {\r\n          res.status(200).send({\r\n            gradeKey: [],\r\n            pricingOptionKey: []\r\n          });\r\n        } else {\r\n          let acc = req.body.selectedData.pricelimitscomposite.enterpricelimits.bpRefNo.split(' @#@ ')[0];\r\n          let hseas = req.body.selectedData.pricelimitscomposite.enterpricelimits.season;\r\n          let bpExternalCode = req.body.selectedData.pricelimitscomposite.enterpricelimits.bpRefNo.split(' @#@ ')[3];\r\n          let filterBody = {\r\n            includeFields: ['pricingOption', 'marketType', 'paymentTerm'],\r\n            excludeFields: ['_id'],\r\n            filterData: {\r\n              filter: [\r\n                {\r\n                  fieldName: 'bpRefNo',\r\n                  value: acc,\r\n                  operator: 'eq'\r\n                },\r\n                {\r\n                  fieldName: 'bpExternalCode',\r\n                  value: bpExternalCode,\r\n                  operator: 'eq'\r\n                },\r\n                {\r\n                  fieldName: 'season',\r\n                  value: hseas,\r\n                  operator: 'eq'\r\n                },\r\n                {\r\n                  fieldName: 'signed',\r\n                  value: 'Y',\r\n                  operator: 'eq'\r\n                },\r\n                {\r\n                  fieldName: 'isActive',\r\n                  value: 'Y',\r\n                  operator: 'eq'\r\n                },\r\n                {\r\n                  fieldName: 'marketType',\r\n                  value: 'Contract',\r\n                  operator: 'ne'\r\n                }\r\n              ]\r\n            }\r\n          };\r\n\r\n          getData(connectVolumeLimitsData(acc, hseas, bpExternalCode))\r\n            .then(vlmData => {\r\n              getData(connectProductQualityMasterData)\r\n                .then(productQualityMasterData => {\r\n                  getData(connectRegionSiteMasterData)\r\n                    .then(regionSiteMasterData => {\r\n                      getData(getPricingOptions(filterBody))\r\n                        .then(pricingOptions => {\r\n                          let mdmCollection = prepareMdmCollection(\r\n                            vlmData.filter(i => i.limitBreachStatus != 'Y'),\r\n                            productQualityMasterData,\r\n                            regionSiteMasterData\r\n                          );\r\n                          let productList = productQualityMasterData\r\n                            .filter(i => Object.keys(mdmCollection['gradeKey']).includes(i.quality))\r\n                            .map(i => ({\r\n                              product: i.product,\r\n                              quality: i.quality\r\n                            }));\r\n                          vlmData\r\n                            .filter(i => i.limitBreachStatus == 'Y')\r\n                            .map(i => {\r\n                              return i;\r\n                            })\r\n                            .forEach(item => {\r\n                              if (mdmCollection['gradeKey'].hasOwnProperty(item.quality) && item.site == 'All') {\r\n                                delete mdmCollection['gradeKey'][item.quality];\r\n                              } else if (item.quality == 'All' && item.site == 'All') {\r\n                                mdmCollection['gradeKey'] = {};\r\n                              }\r\n                            });\r\n                          res.status(200).send({\r\n                            gradeKey: Object.keys(mdmCollection['gradeKey']).map((item, index) => ({\r\n                              key: item + `_${productList.find(i => i.quality === item)['product']}`,\r\n                              value: item\r\n                            })),\r\n                            pricingOptionKey: pricingOptions.map(item => ({\r\n                              key: item.pricingOption + '_' + item.marketType + '_' + item.paymentTerm,\r\n                              value: item.pricingOption\r\n                            }))\r\n                          });\r\n                        })\r\n                        .catch(console.log);\r\n                    })\r\n                    .catch(console.log);\r\n                })\r\n                .catch(console.log);\r\n            })\r\n            .catch(console.log);\r\n        }\r\n      }\r\n\r\n      if (serviceKey == 'harvestSeasonKey') {\r\n        let dependsOn = req.body.mdmProcessorServiceKey[0].dependsOn[0];\r\n        if (dependsOn == '') {\r\n          res.status(200).send({\r\n            harvestSeasonKey: []\r\n          });\r\n        } else {\r\n          getData(connectSeasonMasterData)\r\n            .then(seasonMasterData => {\r\n              let subGroup = seasonMasterData;\r\n              let bpRefNo = dependsOn.split(' @#@ ')[0];\r\n              let dependsOnExternalCode = dependsOn.split(' @#@ ')[3];\r\n              if (dependsOnExternalCode) {\r\n                subGroup = seasonMasterData.filter(\r\n                  i => i.bpRefNo == bpRefNo && i.bpExternalCode == dependsOnExternalCode\r\n                );\r\n              }\r\n              let mdmCollection = prepareMdmCollection(subGroup);\r\n              res.status(200).send({\r\n                harvestSeasonKey: Object.keys(mdmCollection['harvestSeasonKey'][bpRefNo]).map(item => ({\r\n                  key: item,\r\n                  value: item\r\n                }))\r\n              });\r\n            })\r\n            .catch(console.log);\r\n        }\r\n      }\r\n      if (serviceKey == 'siteKey') {\r\n        let dependsOn = req.body.mdmProcessorServiceKey[0].dependsOn[0];\r\n\t\t//dependsOn is null\r\n        if (dependsOn == '') {\r\n          res.status(200).send({\r\n            siteKey: []\r\n          });\r\n        } else {\r\n\t\t  \r\n          let acc = req.body.selectedData.pricelimitscomposite.enterpricelimits.bpRefNo.split(' @#@ ')[0];\r\n          let bpExternalCode = req.body.selectedData.pricelimitscomposite.enterpricelimits.bpRefNo.split(' @#@ ')[3];\r\n          let hseas = req.body.selectedData.pricelimitscomposite.enterpricelimits.season;\r\n          getData(connectVolumeLimitsData(acc, hseas, bpExternalCode))\r\n\t\t  //empty records as season was blank\r\n            .then(vlmData => {\r\n              getData(connectProductQualityMasterData)\r\n                .then(productQualityMasterData => {\r\n                  getData(connectRegionSiteMasterData)\r\n                    .then(regionSiteMasterData => {\r\n                      let dependsOn = req.body.mdmProcessorServiceKey[0].dependsOn[0].split('_')[0];\r\n                      let dependProduct = req.body.mdmProcessorServiceKey[0].dependsOn[0].split('_')[1];\r\n                      let mdmCollection = prepareMdmCollection(\r\n                        vlmData.filter(i => i.product == dependProduct && i.limitBreachStatus != 'Y'),\r\n                        productQualityMasterData,\r\n                        regionSiteMasterData\r\n                      );\r\n                      vlmData\r\n                        .filter(i => i.limitBreachStatus == 'Y')\r\n                        .map(i => {\r\n                          return i;\r\n                        })\r\n                        .forEach(item => {\r\n                          if (dependsOn == item.quality && item.site == 'All') {\r\n                            mdmCollection['gradeKey'][dependsOn] = {};\r\n                          } else if (\r\n                            mdmCollection['gradeKey'].hasOwnProperty(dependsOn) &&\r\n                            (dependsOn == item.quality || item.quality == 'All')\r\n                          ) {\r\n                            delete mdmCollection['gradeKey'][dependsOn][item.site];\r\n                          }\r\n                        });\r\n                      let sites = [];\r\n                      if (\r\n                        Object.keys(mdmCollection['gradeKey'][dependsOn]) != undefined ||\r\n                        Object.keys(mdmCollection['gradeKey'][dependsOn]) != null\r\n                      ) {\r\n                        sites = Object.keys(mdmCollection['gradeKey'][dependsOn]);\r\n                      }\r\n                      let regionList = regionSiteMasterData\r\n                        .filter(i => sites.includes(i.site))\r\n                        .map(i => ({\r\n                          region: i.region,\r\n                          site: i.site\r\n                        }));\r\n                      res.status(200).send({\r\n                        siteKey: sites.map(item => ({\r\n                          key: item + '_' + regionList.filter(i => i.site === item)[0]['region'],\r\n                          value: item\r\n                        }))\r\n                      });\r\n                    })\r\n                    .catch(err => {\r\n\t\t\t\t\t\tconsole.log(\"error in getting connectRegionSiteMasterData \"+err);\r\n\t\t\t\t\t  var data = {};\r\n\t\t\t\t\t   data[serviceKey] = [];\r\n\t\t\t\t\t   res.status(200).send(data);\r\n\t\t\t\t\t});\r\n                })\r\n                .catch(err => {\r\n\t\t\t\t\t\tconsole.log(\"error in getting connectProductQualityMasterData \"+err);\r\n\t\t\t\t\t   var data = {};\r\n\t\t\t\t\t   data[serviceKey] = [];\r\n\t\t\t\t\t   res.status(200).send(data);\r\n\t\t\t\t\t});\r\n            })\r\n            .catch(err => {\r\n\t\t\t\t\t\tconsole.log(\"error in getting connectVolumeLimitsData \"+err);\r\n\t\t\t\t\t  var data = {};\r\n\t\t\t\t\t  data[serviceKey] = [];\r\n\t\t\t\t\t  res.status(200).send(data);\r\n\t\t\t\t\t});\r\n        }\r\n      }\r\n    } else {\r\n      bpList\r\n        .then(bpResolver => {\r\n          getData(connectSeasonMasterData)\r\n            .then(seasonsres => {\r\n              let data = {};\r\n              let mdmSeasonMasterCollection = prepareMdmCollection(seasonsres);\r\n              let bpRefMasterData = Object.keys(mdmSeasonMasterCollection['harvestSeasonKey']);\r\n              let mdmData = bpResolver(\r\n                seasonsres.filter(\r\n                  i =>\r\n                    (i.currentSeason != undefined && i.currentSeason != null && i.currentSeason != '') ||\r\n                    (i.previousSeason != undefined && i.previousSeason != null && i.previousSeason != '')\r\n                )\r\n              );\r\n              data[serviceKey] = mdmData;\r\n              data['harvestSeasonKey'] = Object.keys(mdmSeasonMasterCollection['harvestSeasonKey']).map(item => ({\r\n                key: item,\r\n                value: item\r\n              }));\r\n              res.status(200).send(data);\r\n            })\r\n            .catch(console.log);\r\n        })\r\n        .catch(err => {\r\n          var data = {};\r\n          data[serviceKey] = [];\r\n          res.status(200).send(data);\r\n        });\r\n    }",
    "sys__UUID" : "377c26a9-0691-4d5f-a8c3-7b325edf30d9"
}
