{
    "_id" : "MDM_generaldetails",
    "name" : "MDM_generaldetails",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "e5b9fc05-22a9-4755-9cbc-c8598ab61ec2",
    "snippet" : "var moment = require(\"moment\");\r\nlet mdmbody = JSON.parse(req.body.mdmProcessorServiceKey);\r\nreq.body.mdmProcessorServiceKey = JSON.parse(req.body.mdmProcessorServiceKey);\r\n\r\nfunction findindex(serviceKey) {\r\n  return req.body.mdmProcessorServiceKey.findIndex(\r\n    (x) => x.serviceKey == serviceKey\r\n  );\r\n}\r\nvar ekaEntity =\r\n  req.body.propertyList.platform_url + \"\/spring\/cashManagement\/entity\";\r\n\r\nvar platformEntity = {\r\n  method: \"GET\",\r\n  url: ekaEntity,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application\/json\",\r\n    ttl: 300,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    \"X-Remote-User\": \"ekaApp\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformEntity = function get_platformEntity() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(platformEntity, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n};\r\nvar TemplateUrl =\r\n  req.body.propertyList.platform_url + \"\/collection\/v1\/internal\/template\/\";\r\n\r\nvar templateBody = {\r\n  method: \"GET\",\r\n  url: TemplateUrl,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application\/json\",\r\n    ttl: 300,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    \"X-Remote-User\": \"ekaApp\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_template = function get_template(name) {\r\n  templateBody.url =\r\n    req.body.propertyList.platform_url +\r\n    \"\/collection\/v1\/internal\/template\/\" +\r\n    name + '?start=0&limit=10000';\r\n  return new Promise(function (resolve, reject) {\r\n    request(templateBody, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nvar ekaLiquidityProfitCenter =\r\nreq.body.propertyList.platform_url + \"\/collection\/v1\/internal\/template\/ProfitCenter\";\t\r\n\r\nvar platformProfitCenter = {\r\n  method: \"GET\",\r\n  url: ekaLiquidityProfitCenter,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"Content-Type\": \"application\/json\",\r\n    ttl: 300,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n    \"X-Remote-User\": \"ekaApp\",\r\n  },\r\n  json: true,\r\n};\r\nvar get_platformProfitCenter = function get_platformProfitCenter() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(platformProfitCenter, function (err, response, body) {\r\n      if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n        resolve(body);\r\n      } else {\r\n        reject(body);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nasync function main() {\r\n  let mdmdata = {};\r\n  let datemapforstartend = {};\r\n  let { datefilters } = req.body.selectedData;\r\n  if (findindex(\"ngrFilterKey\") != -1) {\r\n    try {\r\n      let start = new Date();\r\n      if (datefilters && datefilters.hasOwnProperty(\"formcheckbox\")) {\r\n        let Entity = datefilters[\"formcheckbox\"];\r\n        mdmdata[\"ngrFilterKey\"] = Entity.map((res) => {\r\n          return { key: res, value: res };\r\n        });\r\n      } else {\r\n        let Entity = await get_platformEntity();\r\n        console.log(\"Entity\", new Date() - start);\r\n        mdmdata[\"ngrFilterKey\"] = Entity.map((res) => {\t\r\n          return { key: res[\"c1\"], value: res[\"c1\"] };\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  if (findindex(\"classification\") != -1) {\r\n    try {\r\n      let start = new Date();\r\n      let classification = await get_template(\"TransactionTypes\");\r\n      console.log(\"template\", new Date() - start);\r\n      mdmdata[\"classification\"] = [\r\n        ...new Set(classification.data.map((obj) => obj[\"Transaction Type\"])),\r\n      ].map((item) => {\r\n        return { key: item, value: item };\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  if (findindex(\"bankAccount\") != -1) {\r\n    try {\r\n      let start = new Date();\r\n      let bankAccount = await get_template(\"TreasuryBankAccount\");\r\n      let ent = mdmbody[findindex(\"bankAccount\")].dependsOn[0];\r\n      console.log(\"bankAccont\", new Date() - start);\r\n      mdmdata[\"bankAccount\"] = bankAccount.data\r\n        .filter((res) => res.Entity == ent)\r\n        .map((item) => {\r\n          return { key: item[\"Account Number\"], value: item[\"Account Number\"] };\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  if (findindex(\"currency\") != -1) {\r\n    try {\r\n      let start = new Date();\r\n      let BankDetails = await get_template(\"TreasuryBankAccount\");\r\n      let ent = mdmbody[findindex(\"currency\")].dependsOn[0];\r\n      console.log(\"Currency Unit\", new Date() - start);\r\n      let filtered = BankDetails.data.filter((res) => res.Entity == ent);\r\n      mdmdata[\"currency\"] = [\r\n        ...new Set(filtered.map((obj) => obj[\"Currency\"])),\r\n      ].map((item) => {\r\n        return { key: item, value: item };\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  if (\r\n    findindex(\"bankName\") != -1 &&\r\n    findindex(\"bankId\") != -1 &&\r\n    findindex(\"currencyhidden\") != -1\r\n  ) {\r\n    try {\r\n      let start = new Date();\r\n      let BankDetails = await get_template(\"TreasuryBankAccount\");\r\n      let ent = mdmbody[findindex(\"bankName\")].dependsOn[0];\r\n      let ActNo = mdmbody[findindex(\"bankName\")].dependsOn[1];\r\n      console.log(\"bank name\", new Date() - start);\r\n      let c = BankDetails.data.filter(\r\n        (res) => res.Entity == ent && res[\"Account Number\"] == ActNo\r\n      )[0][\"Currency\"];\r\n      mdmdata[\"currency\"] = [{ key: c, value: c }];\r\n      mdmdata[\"bankName\"] = BankDetails.data.filter(\r\n        (res) => res.Entity == ent && res[\"Account Number\"] == ActNo\r\n      )[0][\"Bank Name\"];\r\n      mdmdata[\"bankId\"] = BankDetails.data.filter(\r\n        (res) => res.Entity == ent && res[\"Account Number\"] == ActNo\r\n      )[0][\"Bank ID\"];\r\n      mdmdata[\"currencyhidden\"] = BankDetails.data.filter(\r\n        (res) => res.Entity == ent && res[\"Account Number\"] == ActNo\r\n      )[0][\"Currency\"];\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  } \r\n  \r\n  if (findindex(\"profitCenter\") != -1) {\r\n    try {\r\n      let start = new Date();\r\n      let profitCenter = await get_platformProfitCenter();\r\n\t  mdmdata[\"profitCenter\"] = [\r\n        ...new Set(profitCenter.data.map((obj) => obj[\"Profit Center\"])),\r\n      ].map((item) => {\r\n        return { key: item, value: item };\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  \r\n  return mdmdata;\r\n}\r\nmain().then((mdmdata) => {\r\n  res.status(200).send(mdmdata);\r\n});\r\n",
    "sys__UUID" : "f7d5ebac-3cc6-4e47-88db-2151693c203e",
    "sys__createdBy" : "avinash"
}