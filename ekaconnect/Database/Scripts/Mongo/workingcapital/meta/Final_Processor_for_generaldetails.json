{
  "_id" : "Final_Processor_for_generaldetails",
  "name" : "Final_Processor_for_generaldetails",
  "type" : "processor",
  "refType" : "app",
  "refTypeId" : "e5b9fc05-22a9-4755-9cbc-c8598ab61ec2",
  "snippet" : "var moment = require('moment');\r\n    function findbody(data) {\r\n     return [\r\n     {\r\n       approvalDate: moment(data.approvalDate).format('YYYY-MM-DD'),\r\n       legalEntity: data.hasOwnProperty('legalEntity')?data.legalEntity:null,\r\n       profitCenter: data.hasOwnProperty('profitCenter')?data.profitCenter:null,\r\n       effectiveDate: moment(data.effectiveDate).format('YYYY-MM-DD'),\r\n       maturityDate: moment(data.maturityDate).format('YYYY-MM-DD'),\r\n       limitAmount: data.hasOwnProperty('limitAmount')?data.limitAmount:null,\r\n       limitCurrency: data.hasOwnProperty('limitCurrency')?data.limitCurrency:null,\r\n       bankId: data.hasOwnProperty('bankId')?data.bankId:null,\r\n       bankAccount: data.hasOwnProperty('bankAccount')?data.bankAccount:null,\r\n       bankName: data.hasOwnProperty('bankName')?data.bankName:null,\r\n       syndicated: data.hasOwnProperty('syndicated')?data.syndicated:null,\r\n       revolving: data.hasOwnProperty('revolving')?data.revolving:null,\r\n       remarks: data.hasOwnProperty('remarks')?data.remarks:null,\r\n       }\r\n     ];\r\n   };\r\n    function findputBody(data) {\r\n    return {\r\n      approvalDate: moment(data.approvalDate).format('YYYY-MM-DD'),\r\n      legalEntity: data.hasOwnProperty('legalEntity') ? data.legalEntity : null,\r\n      profitCenter: data.hasOwnProperty('profitCenter') ? data.profitCenter : null,\r\n      effectiveDate: moment(data.effectiveDate).format('YYYY-MM-DD'),\r\n      maturityDate: moment(data.maturityDate).format('YYYY-MM-DD'),\r\n      limitAmount: data.hasOwnProperty('limitAmount') ? data.limitAmount : null,\r\n      limitCurrency: data.hasOwnProperty('limitCurrency') ? data.limitCurrency : null,\r\n      bankId: data.hasOwnProperty('bankId') ? data.bankId : null,\r\n      bankAccount: data.hasOwnProperty('bankAccount') ? data.bankAccount : null,\r\n      bankName: data.hasOwnProperty('bankName') ? data.bankName : null,\r\n      syndicated: data.hasOwnProperty('syndicated') ? data.syndicated : null,\r\n      revolving: data.hasOwnProperty('revolving') ? data.revolving : null,\r\n      remarks: data.hasOwnProperty('remarks') ? data.remarks : null\r\n    };\r\n  };\r\n  function getSyndicates (data) {\r\n    let syndicates = [];\r\n     if(data.tranches && data.tranches.length > 0) {\r\n         for(let i = 0; i < data.tranches.length; i++){\r\n             delete data.tranches[i].addSyndicate;\r\n            if(data.tranches[i].syndicate) {\r\n              syndicates[i] = {...data.tranches[i].syndicate};\r\n            }\r\n         }\r\n     }\r\n\r\n    return syndicates;\r\n};\r\nfunction formatFeesData(additionalDetails) {\r\n    for(let i =0; i < additionalDetails.fees.length; i++ ){\r\n      if(additionalDetails.fees[i].frequency == 'One time') {\r\n        additionalDetails.fees[i].paymentStartDate = additionalDetails.fees[i].paymentStartDate ? moment(additionalDetails.fees[i].paymentStartDate ).format('DD-MMM-YYYY'): null;\r\n        additionalDetails.fees[i].paymentEndDate1 = '';\r\n        additionalDetails.fees[i].paymentEndDate = null;\r\n      }else {\r\n        additionalDetails.fees[i].paymentStartDate = additionalDetails.fees[i].paymentStartDate ? moment(additionalDetails.fees[i].paymentStartDate ).format('DD-MMM-YYYY'): null;\r\n        additionalDetails.fees[i].paymentEndDate = '';\r\n        additionalDetails.fees[i].paymentEndDate = additionalDetails.fees[i].paymentEndDate ? moment(additionalDetails.fees[i].paymentEndDate ).format('DD-MMM-YYYY'): null;;\r\n      }\r\n      if(additionalDetails.fees[i].basis == 'Amount'){\r\n        additionalDetails.fees[i].currencyAmount = additionalDetails.fees[i].currency;\r\n        additionalDetails.fees[i].currencyNotion = null;\r\n        delete additionalDetails.fees[i].currency;\r\n        additionalDetails.fees[i].amount = additionalDetails.fees[i].amount ? additionalDetails.fees[i].amount: '';\r\n      }else {\r\n        additionalDetails.fees[i].currencyNotion = additionalDetails.fees[i].currency;\r\n        additionalDetails.fees[i].currencyAmount = null;\r\n        additionalDetails.fees[i].amount =  additionalDetails.fees[i].amount ? additionalDetails.fees[i].amount: '';\r\n        delete additionalDetails.fees[i].currency;\r\n        \r\n      }\r\n    }\r\n    for(let j=0; j< additionalDetails.tranches.length; j++){\r\n      additionalDetails.tranches[j].trancheAmount = additionalDetails.tranches[j].trancheAmount ? additionalDetails.tranches[j].trancheAmount : '';\r\n    }\r\n    return additionalDetails;\r\n  }\r\n   var ekageneraldetailsurl;\r\n   var additionaldetails = req.body.additionaldetails;\r\n   if(req.body.creditFacilityId) {\r\n       ekageneraldetailsurl = {\r\n           method: 'PUT',\r\n           url: req.body.propertyList.platform_url + '/spring/workingCapitalManagement/creditFacility/' + req.body.creditFacilityId,\r\n           body: findputBody(req.body),\r\n           headers: {\r\n             Authorization: req.headers.authorization,\r\n             'Content-Type': 'application/json'\r\n           },\r\n           json: true\r\n         };\r\n   \r\n   } else {\r\n        ekageneraldetailsurl = {\r\n           method: 'POST',\r\n           url: req.body.propertyList.platform_url + '/spring/workingCapitalManagement/creditFacility',\r\n           body: findbody(req.body),\r\n           headers: {\r\n             Authorization: req.headers.authorization,\r\n             'Content-Type': 'application/json'\r\n           },\r\n           json: true\r\n         };\r\n   }\r\n   var get_platformEkaGeneralDetails = function get_platformEkaGeneralDetails() {\r\n     return new Promise(function(resolve, reject) {\r\n     request(ekageneraldetailsurl, function(err, response, body) {\r\n       if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n       resolve(body);\r\n       } else {\r\n         reject({...body,'statusCode': response.statusCode });\r\n       }\r\n     });\r\n     });\r\n   };\r\n   get_platformEkaGeneralDetails()\r\n     .then(function(response) {\r\n     if(response && Array.isArray(response)) {\r\n         let responseData = response[0];\r\n        responseData.effectiveDate =  moment(responseData.effectiveDate).format('DD-MMM-YYYY');\r\n        responseData.approvalDate =  moment(responseData.approvalDate).format('DD-MMM-YYYY');\r\n        responseData.maturityDate =  moment(responseData.maturityDate).format('DD-MMM-YYYY');\r\n        if(responseData.additionalDetails) {\r\n            responseData.additionaldetails = {...responseData.additionalDetails,'creditFacilityId': responseData.creditFacilityId};\r\n            delete responseData.additionalDetails;\r\n            responseData.syndicate = getSyndicates(responseData.additionaldetails);\r\n            responseData.effectiveDate = moment(responseData.effectiveDate).format('DD-MMM-YYYY');\r\n            responseData.maturityDate = moment(responseData.maturityDate).format('DD-MMM-YYYY');\r\n            responseData.approvalDate = moment(responseData.approvalDate).format('DD-MMM-YYYY');\r\n            responseData.additionaldetails = formatFeesData(responseData.additionaldetails);\r\n        }else {\r\n            responseData.additionaldetails = {};\r\n            responseData.additionaldetails.creditFacilityId = responseData.creditFacilityId;\r\n        }\r\n        res.status(200).send(responseData);\r\n       }else {\r\n        let responseData = response;\r\n        responseData.effectiveDate =  moment(responseData.effectiveDate).format('DD-MMM-YYYY');\r\n        responseData.approvalDate =  moment(responseData.approvalDate).format('DD-MMM-YYYY');\r\n        responseData.maturityDate =  moment(responseData.maturityDate).format('DD-MMM-YYYY');\r\n        if(responseData.additionalDetails) {\r\n            responseData.additionaldetails = {...responseData.additionalDetails,'creditFacilityId': responseData.creditFacilityId};\r\n            delete responseData.additionalDetails;\r\n            responseData.syndicate = getSyndicates(responseData.additionaldetails);\r\n            responseData.effectiveDate = moment(responseData.effectiveDate).format('DD-MMM-YYYY');\r\n            responseData.maturityDate = moment(responseData.maturityDate).format('DD-MMM-YYYY');\r\n            responseData.approvalDate = moment(responseData.approvalDate).format('DD-MMM-YYYY');\r\n            responseData.additionaldetails = formatFeesData(responseData.additionaldetails);\r\n        }else {\r\n            responseData.additionaldetails = {};\r\n            responseData.additionaldetails.creditFacilityId = responseData.creditFacilityId;\r\n        }\r\n        res.status(200).send(responseData);\r\n       }\r\n     })\r\n     .catch((err,statusCode) => {\r\n     console.error(err);\r\n     let message = \"Failed to Create\";\r\n      if(err.statusCode >= 400 && err.statusCode <=499 && err.message){\r\n       let errMessages = err.message && err.message.substring(err.message.indexOf(':') +1, err.message.length).trim();\r\n       errMessages  = errMessages.split('\\n').filter(Boolean);\r\n       message      = errMessages[0];\r\n      }\r\n      res.status(err.statusCode).send(message);\r\n     });",
  "sys__UUID" : "c111589f-1ecb-40bd-9882-f35d59a22311",
  "sys__createdBy" : "jay"
}