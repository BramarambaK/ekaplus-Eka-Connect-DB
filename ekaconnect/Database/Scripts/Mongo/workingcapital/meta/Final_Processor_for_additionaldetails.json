{
    "_id" : "Final_Processor_for_additionaldetails",
    "name" : "Final_Processor_for_additionaldetails",
    "type" : "processor",
    "refType" : "app",
    "refTypeId" : "e5b9fc05-22a9-4755-9cbc-c8598ab61ec2",
    "snippet" : "let feevalidationMsg = '';\r\nlet trancheValidationMsg = '';\r\nfunction isIsoDate(str) {\r\n  if (!/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/.test(str)) return false;\r\n  var d = new Date(str); \r\n  return d.toISOString()===str;\r\n}\r\nfunction findputBody(data) {\r\n    return {\r\n      approvalDate: moment(data.approvalDate).format('YYYY-MM-DD'),\r\n      legalEntity: data.hasOwnProperty('legalEntity') ? data.legalEntity : null,\r\n      profitCenter: data.hasOwnProperty('profitCenter') ? data.profitCenter : null,\r\n      effectiveDate: moment(data.effectiveDate).format('YYYY-MM-DD'),\r\n      maturityDate: moment(data.maturityDate).format('YYYY-MM-DD'),\r\n      limitAmount: data.hasOwnProperty('limitAmount') ? data.limitAmount : null,\r\n      limitCurrency: data.hasOwnProperty('limitCurrency') ? data.limitCurrency : null,\r\n      bankId: data.hasOwnProperty('bankId') ? data.bankId : null,\r\n      bankAccount: data.hasOwnProperty('bankAccount') ? data.bankAccount : null,\r\n      bankName: data.hasOwnProperty('bankName') ? data.bankName : null,\r\n      syndicated: (data.hasOwnProperty('syndicated') && data.syndicated) ? true : null,\r\n      revolving: data.hasOwnProperty('revolving') ? data.revolving : null,\r\n      remarks: data.hasOwnProperty('remarks') ? data.remarks : null\r\n    };\r\n  };\r\nfunction formatDate(dateStr){\r\n    if(isIsoDate(dateStr)){\r\n       let date = new Date(dateStr);\r\n        date.setUTCDate(date.getUTCDate() + 1);\r\n        year = date.getFullYear();\r\n        month = date.getMonth()+1;\r\n        dt = date.getDate();\r\n        \r\n        if (dt < 10) {\r\n          dt = '0' + dt;\r\n        }\r\n        if (month < 10) {\r\n          month = '0' + month;\r\n        }\r\n        \r\n        return year+'-' + month + '-'+dt;\r\n    \r\n   }else{\r\n    return moment(dateStr).format('YYYY-MM-DD');\r\n   }\r\n  }\r\nfunction formatDate1(date){\r\n  if(isIsoDate(date)){\r\n   var date1 = new Date(date);\r\n   var timezoneOffset = -1 * date1.getTimezoneOffset();\r\n   console.log(timezoneOffset)\r\n   var offsetTime = new Date(date1.getTime() + timezoneOffset * 60 * 1000);\r\n   month = '' + (offsetTime.getMonth() + 1),\r\n   day = '' + offsetTime.getDate(),\r\n   year = offsetTime.getFullYear();\r\n\r\nif (month.length < 2) month = '0' + month;\r\nif (day.length < 2) day = '0' + day;\r\n\r\nreturn [year, month, day].join('-');\r\n   \r\n  }else{\r\n      return moment(date).format('YYYY-MM-DD');\r\n  }\r\n}\r\nfunction formatDate2(date) {\r\n    var d = new Date(date),\r\n        month = '' + (d.getMonth() + 1),\r\n        day = '' + d.getDate(),\r\n        year = d.getFullYear();\r\n\r\n    if (month.length < 2) month = '0' + month;\r\n    if (day.length < 2) day = '0' + day;\r\n\r\n    return [year, month, day].join('-');\r\n}\r\n\r\nfunction validatedTranche(tranche){\r\n    if(!tranche.trancheAmount){\r\n        trancheValidationMsg = 'Tranche Amount is required';\r\n        return false;\r\n     }\r\n     if(tranche.trancheAmount){\r\n      if(tranche.trancheAmount == 0){\r\n        trancheValidationMsg = 'Tranche Amount should be greater than 0';\r\n        return false;\r\n       }\r\n       if(generaldetails.limitAmount){\r\n             if(tranche.trancheAmount > generaldetails.limitAmount){\r\n                trancheValidationMsg = 'Tranche Amount should not be greater than limit amount';\r\n                return false;\r\n             }\r\n         }\r\n     }\r\n     if(!tranche.trancheCurrency){\r\n        trancheValidationMsg = 'Tranche Currency is required';\r\n        return false;\r\n     }\r\n\r\n     return true;\r\n}\r\n\r\nfunction validTranches(){\r\n let trancheData = req.body.additionaldetailsComposite.additionaldetails.tranches;\r\n for(let i =0; i < trancheData.length; i++){\r\n       if(trancheData[i].trancheName){\r\n           if(!validatedTranche(trancheData[i])){\r\n              return false;\r\n           }\r\n       }\r\n }\r\n return true;\r\n}\r\n\r\nfunction validateFee(fee){ \r\n    if(!fee.feeType){\r\n        feevalidationMsg = 'Type is required';\r\n        return false;\r\n    } if(!fee.frequency){\r\n        feevalidationMsg = 'Frequency is required';\r\n        return false;\r\n    } if(fee.frequency && fee.frequency =='One time'){\r\n        if(!fee.startDate) {\r\n            feevalidationMsg = 'Start Date is required';\r\n            return false;\r\n        }else {\r\n            if(generaldetails.approvalDate) {\r\n                let approvalDate = moment(generaldetails.approvalDate).format('YYYY-MM-DD');\r\n                let startDate = moment(new Date(fee.startDate).toISOString()).format('YYYY-MM-DD');\r\n                if(moment(approvalDate).isAfter(startDate)){\r\n                  feevalidationMsg = 'Start Date cannot be less than Approval Date';\r\n                    return false;\r\n                }\r\n\r\n            }\r\n        }\r\n    } if(fee.frequency && fee.frequency !='One time'){\r\n        if(!fee.paymentStartDate) {\r\n            feevalidationMsg = 'Payment Date is required';\r\n            return false;\r\n        }else {\r\n            if(generaldetails.approvalDate) {\r\n                let approvalDate = moment(generaldetails.approvalDate).format('YYYY-MM-DD');\r\n                let startDate = moment(new Date(fee.paymentStartDate).toISOString()).format('YYYY-MM-DD');\r\n                if(moment(approvalDate).isAfter(startDate)){\r\n                  feevalidationMsg = 'Payment Date cannot be less than Approval Date';\r\n                    return false;\r\n                }\r\n\r\n            }\r\n        }\r\n        if(!fee.paymentEndDate){\r\n            feevalidationMsg = 'Payment End Date is required';\r\n            return false;\r\n        }else {\r\n            if(fee.paymentStartDate){\r\n                let endDate = moment(new Date(fee.paymentEndDate).toISOString()).format('YYYY-MM-DD');\r\n                let startDate = moment(new Date(fee.paymentStartDate).toISOString()).format('YYYY-MM-DD');\r\n                if(moment(startDate).isAfter(endDate)){\r\n                  feevalidationMsg = 'Payment End Date cannot be less than Payment Date';\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    } if(!fee.basis){\r\n        feevalidationMsg = 'Basis is required';\r\n            return false;\r\n    } if(fee.basis && fee.basis == 'Amount'){\r\n         if(!fee.amount){\r\n            feevalidationMsg = 'Amount is required';\r\n            return false;\r\n         }\r\n         if(fee.amount){\r\n          if(fee.amount == 0) {\r\n            feevalidationMsg = 'Amount should be greater than 0';\r\n            return false;\r\n          }\r\n        }\r\n         if(!fee.currencyAmount){\r\n            feevalidationMsg = 'Amount Currency is required';\r\n            return false;\r\n         }\r\n    }if(fee.basis && fee.basis != 'Amount'){\r\n            if(!fee.rate){\r\n                feevalidationMsg = 'Rate is required';\r\n                return false;\r\n             }\r\n             if(fee.rate){\r\n              if(fee.rate == 0) {\r\n                feevalidationMsg = 'Rate should be greater than 0';\r\n                return false;\r\n              }\r\n            }\r\n             if(!fee.currencyAmount){\r\n                feevalidationMsg = 'Rate Currency is required';\r\n                return false;\r\n             }\r\n        }\r\n    \r\n   return true;\r\n}\r\n\r\nfunction validFees(){\r\n   let feesData = req.body.additionaldetailsComposite.additionaldetails.fees;\r\n   for(let i= 0; i < feesData.length; i++) {\r\n       if(feesData[i].name){\r\n         if(!validateFee(feesData[i])){\r\n             return false;\r\n         }\r\n       }\r\n   }\r\n  return true;\r\n}\r\nfunction checkTrancheName(reqArray){\r\n    var checkedReqArry = [];\r\n    if(reqArray && reqArray.length > 0) {\r\n       for(var i = 0; i < reqArray.length; i++  ) {\r\n         if(reqArray[i].name) {\r\n          checkedReqArry.push(reqArray[i]);\r\n         }\r\n       }\r\n    }\r\n   return checkedReqArry;\r\n  }\r\n  function setSyndicateData(tranches){\r\n  let tranchesData =[];\r\n  let syndicates = req.body.syndicate && req.body.syndicate.syndicate;\r\n  if(!generaldetails.syndicated){\r\n    syndicates = [];\r\n  }\r\n   if(tranches && tranches.length > 0) {\r\n    for(let i =0; i < tranches.length; i++) {\r\n        if(tranches[i].trancheName){\r\n            if(syndicates && syndicates.length > 0 && syndicates[i]){\r\n                tranches[i].syndicate = {...syndicates[i]};\r\n            }\r\n            tranches[i].trancheAmount = tranches[i].trancheAmount == '' ? null : Number(tranches[i].trancheAmount);\r\n            tranchesData.push(tranches[i]);\r\n        }\r\n       \r\n    }\r\n   } \r\n   return tranchesData;\r\n  }\r\n  function getSyndicates (data) {\r\n      let syndicates = [];\r\n       if(data.tranches && data.tranches.length > 0) {\r\n           for(let i = 0; i < data.tranches.length; i++){\r\n               delete data.tranches[i].addSyndicate;\r\n              if(data.tranches[i].syndicate) {\r\n                syndicates[i] = {...data.tranches[i].syndicate};\r\n              }\r\n           }\r\n       }\r\n\r\n      return syndicates;\r\n  }\r\n  function setFeesData(fees) {\r\n     for(let i=0; i < fees.length; i++) {\r\n          if(fees[i].frequency == 'One time') {\r\n            fees[i].paymentStartDate = formatDate(fees[i].paymentStartDate);\r\n            fees[i].paymentEndDate = null;\r\n            delete fees[i].paymentEndDate1;\r\n          } else{\r\n            fees[i].paymentStartDate = formatDate(fees[i].paymentStartDate);\r\n            fees[i].paymentEndDate = formatDate(fees[i].paymentEndDate);  \r\n           delete fees[i].paymentEndDate1;\r\n          }\r\n          if(fees[i].basis == 'Amount') {\r\n              fees[i].currency = fees[i].currencyAmount;\r\n              fees[i].amount = fees[i].amount == '' ? null: Number(fees[i].amount);\r\n              delete fees[i].currencyNotion;\r\n              delete fees[i].currencyAmount;\r\n          }else{\r\n            fees[i].currency = fees[i].currencyNotion;\r\n            fees[i].amount = fees[i].amount == '' ? null :Number(fees[i].amount);\r\n            delete fees[i].currencyNotion;\r\n            delete fees[i].currencyAmount;\r\n          }\r\n     }\r\n     return fees;\r\n  }\r\nfunction validateGeneralDetails(generaldetails){\r\n     let mandatoryFields = ['approvalDate', 'legalEntity', 'profitCenter', 'effectiveDate', 'maturityDate','limitCurrency','limitAmount' ];\r\n     for(let i=0; i< mandatoryFields.length; i++){\r\n          if(!generaldetails[mandatoryFields[i]]){\r\n              return false;\r\n          }\r\n     }\r\n\r\n     return true\r\n}\r\n\r\nfunction formatFeesData(additionalDetails) {\r\n  for(let i =0; i < additionalDetails.fees.length; i++ ){\r\n    if(additionalDetails.fees[i].frequency == 'One time') {\r\n      additionalDetails.fees[i].paymentStartDate = additionalDetails.fees[i].paymentStartDate ? moment(additionalDetails.fees[i].paymentStartDate ).format('DD-MMM-YYYY'): null;\r\n      additionalDetails.fees[i].paymentEndDate = null;\r\n      additionalDetails.fees[i].paymentEndDate1 = '';\r\n    }else {\r\n      additionalDetails.fees[i].paymentStartDate = additionalDetails.fees[i].paymentStartDate ? moment(additionalDetails.fees[i].paymentStartDate ).format('DD-MMM-YYYY'): null;\r\n      additionalDetails.fees[i].paymentEndDate = additionalDetails.fees[i].paymentEndDate ? moment(additionalDetails.fees[i].paymentEndDate ).format('DD-MMM-YYYY'): null;\r\n      additionalDetails.fees[i].paymentEndDate1 = '';\r\n    }\r\n    if(additionalDetails.fees[i].basis == 'Amount'){\r\n      additionalDetails.fees[i].currencyAmount = additionalDetails.fees[i].currency;\r\n      additionalDetails.fees[i].currencyNotion = null;\r\n      delete additionalDetails.fees[i].currency;\r\n      additionalDetails.fees[i].amount = additionalDetails.fees[i].amount ? additionalDetails.fees[i].amount: '';\r\n    }else {\r\n      additionalDetails.fees[i].currencyNotion = additionalDetails.fees[i].currency;\r\n      additionalDetails.fees[i].currencyAmount = null;\r\n      additionalDetails.fees[i].amount =  additionalDetails.fees[i].amount ? additionalDetails.fees[i].amount: '';\r\n      delete additionalDetails.fees[i].currency;\r\n      \r\n    }\r\n  }\r\n  for(let j=0; j< additionalDetails.tranches.length; j++){\r\n    additionalDetails.tranches[j].trancheAmount = additionalDetails.tranches[j].trancheAmount ? additionalDetails.tranches[j].trancheAmount : '';\r\n  }\r\n  return additionalDetails;\r\n}\r\n  const send = (status, message) => res.status(status).send(message);\r\n  var moment = require('moment');\r\n  var generaldetails = req.body.generaldetails;\r\n   if(validateGeneralDetails(generaldetails)) {\r\n   if (generaldetails.creditFacilityId) {\r\n    var ekageneraldetailsurl = {\r\n        method: 'PUT',\r\n        url: req.body.propertyList.platform_url + '/spring/workingCapitalManagement/creditFacility/' + generaldetails.creditFacilityId,\r\n        body: findputBody(generaldetails),\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        json: true\r\n      };\r\n      var get_platformEkaGeneralDetails = function get_platformEkaGeneralDetails() {\r\n        return new Promise(function (resolve, reject) {\r\n          request(ekageneraldetailsurl, function (err, response, body) {\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject({ ...body, 'statusCode': response.statusCode });\r\n            }\r\n          });\r\n        });\r\n      };\r\n       var wcmUpdate =\r\n        req.body.propertyList.platform_url +\r\n        '/spring/workingCapitalManagement/creditFacility/' +\r\n        generaldetails.creditFacilityId +\r\n        '/additionalDetails';\r\n      var wcmUpdateUrl = {\r\n        method: 'PUT',\r\n        url: wcmUpdate,\r\n        body: {\r\n          'fees': setFeesData(checkTrancheName(req.body.additionaldetailsComposite.additionaldetails.fees)),\r\n          'tranches': setSyndicateData(req.body.additionaldetailsComposite.additionaldetails.tranches)\r\n        },\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        json: true\r\n      };\r\n      var get_platformWCMUpdate = function get_platformWCMUpdate() {\r\n        return new Promise(function(resolve, reject) {\r\n          request(wcmUpdateUrl, function(err, response, body) {\r\n            console.log('bodyyyyyyy'+body);\r\n            console.log('updatedataaaaaaaaa'+JSON.stringify(wcmUpdateUrl));\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject({...body,'statusCode': response.statusCode });\r\n            }\r\n          });\r\n        });\r\n      };\r\n      get_platformEkaGeneralDetails()\r\n      .then(function (response) {\r\n        let responseData = response;\r\n        responseData.effectiveDate =  moment(responseData.effectiveDate).format('DD-MMM-YYYY');\r\n        responseData.approvalDate =  moment(responseData.approvalDate).format('DD-MMM-YYYY');\r\n        responseData.maturityDate =  moment(responseData.maturityDate).format('DD-MMM-YYYY');\r\n        get_platformWCMUpdate()\r\n        .then(function(ent) {\r\n          console.log(ent);\r\n          if(ent && ent.additionalDetails) {\r\n              ent.additionaldetails = {...ent.additionalDetails,'creditFacilityId': ent.creditFacilityId};\r\n              delete ent.additionalDetails;\r\n              ent.syndicate = getSyndicates(ent.additionaldetails);\r\n              ent.effectiveDate = moment(ent.effectiveDate).format('DD-MMM-YYYY');\r\n              ent.maturityDate = moment(ent.maturityDate).format('DD-MMM-YYYY');\r\n              ent.approvalDate = moment(ent.approvalDate).format('DD-MMM-YYYY');\r\n              ent.additionaldetails = formatFeesData(ent.additionaldetails);\r\n          }\r\n          res.status(200).send(ent);\r\n        })\r\n        .catch(function(err) {\r\n          console.error(err);\r\n          var message = 'Failed to Update';\r\n          if(err.statusCode >= 400 && err.statusCode <=499 && err.message){\r\n            let errMessages = err.message && err.message.substring(err.message.indexOf(':') +1, err.message.length).trim();\r\n            errMessages  = errMessages.split('\\n').filter(Boolean);\r\n            message = errMessages[0];\r\n            res.status(err.statusCode).send(message);\r\n           }\r\n           res.status(500).send(message);\r\n        });\r\n      })\r\n      .catch((err, statusCode) => {\r\n        console.error(err);\r\n        let message = \"Failed to Update\";\r\n        if (err.statusCode >= 400 && err.statusCode <= 499 && err.message) {\r\n          let errMessages = err.message && err.message.substring(err.message.indexOf(':') + 1, err.message.length).trim();\r\n          errMessages = errMessages.split('\\n').filter(Boolean);\r\n          message = errMessages[0];\r\n        }\r\n        res.status(err.statusCode).send(message);\r\n      });\r\n      \r\n    } else {\r\n      function findbody(data) {\r\n        return [\r\n          {\r\n            additionalDetails: {\r\n              'fees': setFeesData(checkTrancheName(req.body.additionaldetailsComposite.additionaldetails.fees)),\r\n              'tranches': setSyndicateData(req.body.additionaldetailsComposite.additionaldetails.tranches)\r\n            },\r\n            externalRefNo: generaldetails.externalRefNo ? generaldetails.externalRefNo : null,\r\n            approvalDate: generaldetails.approvalDate ? moment(generaldetails.approvalDate).format('YYYY-MM-DD') : null,\r\n            legalEntity: generaldetails.legalEntity,\r\n            profitCenter: generaldetails.profitCenter,\r\n            effectiveDate: generaldetails.effectiveDate ? moment(generaldetails.effectiveDate).format('YYYY-MM-DD') : null,\r\n            maturityDate: generaldetails.maturityDate ? moment(generaldetails.maturityDate).format('YYYY-MM-DD') : null,\r\n            limitCurrency: generaldetails.limitCurrency,\r\n            limitAmount: generaldetails.limitAmount ? generaldetails.limitAmount : null,\r\n            bankName: generaldetails.bankName,\r\n            bankId: generaldetails.bankId,\r\n            bankAccount: generaldetails.bankAccount,\r\n            revolving: generaldetails.revolving === '' || generaldetails.revolving === false ? '' : generaldetails.revolving,\r\n            syndicated: generaldetails.syndicated === '' || generaldetails.syndicated === false ? '' : generaldetails.syndicated,\r\n            remarks: generaldetails.remarks\r\n          }\r\n        ];\r\n      }\r\n\r\n      var wcmCreate = req.body.propertyList.platform_url + '/spring/workingCapitalManagement/creditFacility';\r\n      var wcmCreateUrl = {\r\n        method: 'POST',\r\n        url: wcmCreate,\r\n        body: findbody(req.body),\r\n        headers: {\r\n          Authorization: req.headers.authorization,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        json: true\r\n      };\r\n      console.log(JSON.stringify(wcmCreateUrl));\r\n      var get_platformWCM = function get_platformWCM() {\r\n        return new Promise(function(resolve, reject) {\r\n          request(wcmCreateUrl, function(err, response, body) {\r\n            console.log('updatedataaaaaaaaa'+wcmCreateUrl);\r\n            if (response.statusCode >= 200 && response.statusCode <= 299) {\r\n              resolve(body);\r\n            } else {\r\n              reject({...body,'statusCode': response.statusCode });\r\n            }\r\n          });\r\n        });\r\n      };\r\n      get_platformWCM()\r\n        .then(function(ent) {\r\n            if(ent[0] && ent[0].additionalDetails) {\r\n                ent[0].additionaldetails = {...ent[0].additionalDetails, 'creditFacilityId': ent.creditFacilityId};\r\n                delete ent[0].additionalDetails;\r\n                ent[0].syndicate = getSyndicates(ent[0].additionaldetails);\r\n                ent[0].effectiveDate = moment(ent[0].effectiveDate).format('DD-MMM-YYYY');\r\n                ent[0].maturityDate = moment(ent[0].maturityDate).format('DD-MMM-YYYY');\r\n                ent[0].approvalDate = moment(ent[0].approvalDate).format('DD-MMM-YYYY');\r\n                ent[0].additionaldetails = formatFeesData(ent[0].additionaldetails);\r\n            }\r\n            res.status(200).send(ent[0]);\r\n            \r\n        })\r\n        .catch(function(err) {\r\n          console.error(err);\r\n          var message = 'Failed to Create';\r\n          if(err.statusCode >= 400 && err.statusCode <=499 && err.message){\r\n            let errMessages = err.message && err.message.substring(err.message.indexOf(':') +1, err.message.length).trim();\r\n            errMessages  = errMessages.split('\\n').filter(Boolean);\r\n            message = errMessages[0];\r\n            res.status(err.statusCode).send(message);\r\n           }\r\n           res.status(500).send(message);\r\n        });\r\n    }\r\n\r\n\r\n} else{\r\n    res.status(400).send('Please enter values for all the mandatory fields on General Details tab');\r\n}",
    "sys__UUID" : "8bffae0a-c015-4b5b-980b-8d4d4548b83b"
}