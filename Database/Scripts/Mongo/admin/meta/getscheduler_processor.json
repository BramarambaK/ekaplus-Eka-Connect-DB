{
  "_id": "getscheduler_processor",
  "name": "getscheduler",
  "type": "processor",
  "refType": "app",
  "refTypeId": "admin",
  "snippet": "var moment = require(\"moment\");\r\nlet appId = req.body.selectedData.appId;\r\nvar connect = {\r\n  method: \"GET\",\r\n  url: req.body.propertyList.eka_connect_host + \"/meta/workflow/\" + appId,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n  },\r\n  json: true,\r\n};\r\nfunction get_connect() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(connect, function (err, response, body) {\r\n      if (err || body.error) reject(body);\r\n      else resolve(body);\r\n    });\r\n  });\r\n}\r\nvar scheduler = {\r\n  method: \"GET\",\r\n  url: req.body.propertyList.eka_connect_host + `/data/${appId}/`,\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n  },\r\n  json: true,\r\n  body: {\r\n    filterData: {\r\n      filter: [\r\n        {\r\n          fieldName: \"type\",\r\n          value: \"schedulerStatus\",\r\n          operator: \"eq\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n};\r\nfunction get_scheduler() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(scheduler, function (err, response, body) {\r\n      if (err || body.error) reject(body);\r\n      else resolve(body);\r\n    });\r\n  });\r\n}\r\nvar runScheduler = {\r\n  method: \"POST\",\r\n  url: req.body.propertyList.eka_connect_host + \"/scheduler/execute\",\r\n  headers: {\r\n    Authorization: req.headers.authorization,\r\n    \"X-TenantID\": req.headers[\"x-tenantid\"],\r\n  },\r\n  json: true,\r\n  body: {\r\n    appId: appId,\r\n  },\r\n};\r\nfunction run_Scheduler() {\r\n  return new Promise(function (resolve, reject) {\r\n    request(runScheduler, function (err, response, body) {\r\n      if (err || body.error) reject(body);\r\n      else resolve(body);\r\n    });\r\n  });\r\n}\r\nfunction prepareData(data) {\r\n  return new Promise(async (resolve, reject) => {\r\n    for (let i = 0; i < data.length; i++) {\r\n      scheduler.url =\r\n        req.body.propertyList.eka_connect_host +\r\n        `/data/${appId}/${data[i].object}`;\r\n      await get_scheduler().then((schedulerData) => {\r\n        data[i].status = schedulerData[0].status;\r\n        data[i].statusMessage = schedulerData[0].statusMessage;\r\n        data[i].statusDate = moment\r\n          .utc(schedulerData[0].statusDate)\r\n          .utcOffset(\"+0530\")\r\n          .format(\"DD-MMM-YYYY HH:mm:ss\");\r\n      });\r\n    }\r\n    resolve(data);\r\n  });\r\n}\r\nif (req.body.selectedData.operation == \"loadData\") {\r\n  get_connect()\r\n    .then(async (result) => {\r\n      let data = result.filter((el) => el.isScheduled === true);\r\n      await prepareData(data).then((finalData) => {\r\n        data = finalData;\r\n        res.status(200).send(finalData);\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      res.status(500).send(err);\r\n    });\r\n} else if (req.body.selectedData.operation == \"runScheduler\") {\r\n  run_Scheduler()\r\n    .then((data) => {\r\n      if (data.data[0].status == \"success\") {\r\n        get_connect()\r\n          .then(async (result) => {\r\n            let data = result.filter((el) => el.isScheduled === true);\r\n            await prepareData(data).then((finalData) => {\r\n              data = finalData;\r\n              res.status(200).send(finalData);\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            res.status(500).send(err);\r\n          });\r\n      }\r\n    })\r\n    .catch(function (err) {\r\n      res.status(500).send(err);\r\n    });\r\n}\r\n",
  "sys__UUID": "d340433b-c888-4810-83dd-e1bc732cca0e"
}
