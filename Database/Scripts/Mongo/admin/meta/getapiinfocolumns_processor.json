{
  "_id": "getapiinfocolumns_processor",
  "name": "getapiinfocolumns",
  "type": "processor",
  "refType": "app",
  "refTypeId": "admin",
  "snippet": "var headerKeys = [];\r\nif (req.body.selectedData.apiInfo.headers)\r\n  headerKeys = Object.keys(req.body.selectedData.apiInfo.headers);\r\nvar queryKeys = [];\r\nif (req.body.selectedData.apiInfo.queryParams)\r\n  queryKeys = Object.keys(req.body.selectedData.apiInfo.queryParams);\r\nvar hostPrefix = \"${properties.\";\r\nvar host = req.body.selectedData.apiInfo.host;\r\nvar hostUrl;\r\nvar url;\r\nvar headers = {};\r\nvar method = req.body.selectedData.apiInfo.method;\r\nvar body = req.body.selectedData.apiInfo.body;\r\n\r\nfor (var i = 0; i < headerKeys.length; i++) {\r\n  headers[headerKeys[i]] = req.body.selectedData.apiInfo.headers[headerKeys[i]];\r\n}\r\nheaders.Authorization = req.headers.authorization;\r\nheaders[\"X-TenantID\"] = req.headers[\"x-tenantid\"];\r\n\r\nhostUrl = host.slice(\r\n  host.indexOf(hostPrefix) + hostPrefix.length,\r\n  host.length - 1\r\n);\r\nhostUrl = req.body.propertyList[hostUrl];\r\nurl = hostUrl + req.body.selectedData.apiInfo.path;\r\n\r\nvar call = {\r\n  method: method,\r\n  url: url,\r\n  headers: headers,\r\n};\r\n\r\nif (method != \"GET\") {\r\n  call.body = body;\r\n  call.json = true;\r\n}\r\n\r\nfunction get_call() {\r\n  return new Promise(function (resolve, reject) {\r\n    console.log(\"Request - \" + call.url);\r\n    request(call, function (err, response, body) {\r\n      console.log(\"Response - \" + body);\r\n      if (err || body.error) reject(body);\r\n      else {\r\n        console.log(\"Success\");\r\n        resolve(body);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nget_call()\r\n  .then((result) => {\r\n    var data;\r\n    if (result) {\r\n      if (typeof result == \"string\") data = JSON.parse(result);\r\n      else data = result;\r\n      if (data.data && data.data[0]) {\r\n        var columns = Object.keys(data.data[0]);\r\n        console.log(columns);\r\n        res.status(200).send(columns);\r\n      } else {\r\n        res.status(500).send(result);\r\n      }\r\n    } else {\r\n      res.status(500).send(\"API not configured properly\");\r\n    }\r\n  })\r\n  .catch((err) => {\r\n    res.status(500).send(\"API not configured properly\");\r\n  });\r\n",
  "sys__UUID": "e2d85161-afba-4f17-a7fd-d93ef5945861",
  "sys__createdOn": ISODate("2019-06-26T08:50:01.556Z"),
  "sys__createdBy": "Bravo"
}
